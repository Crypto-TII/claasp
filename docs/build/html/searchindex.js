Search.setIndex({"docnames": ["cipher", "cipher_modules/algebraic_tests", "cipher_modules/avalanche_tests", "cipher_modules/code_generator", "cipher_modules/component_analysis_tests", "cipher_modules/continuous_diffusion_analysis", "cipher_modules/evaluator", "cipher_modules/generic_bit_based_c_functions", "cipher_modules/generic_functions", "cipher_modules/generic_functions_continuous_diffusion_analysis", "cipher_modules/generic_functions_vectorized_bit", "cipher_modules/generic_functions_vectorized_byte", "cipher_modules/generic_word_based_c_functions", "cipher_modules/graph_generator", "cipher_modules/inverse_cipher", "cipher_modules/models/algebraic/algebraic_model", "cipher_modules/models/algebraic/boolean_polynomial_ring", "cipher_modules/models/algebraic/constraints", "cipher_modules/models/cp/cp_model", "cipher_modules/models/cp/cp_models/cp_cipher_model", "cipher_modules/models/cp/cp_models/cp_deterministic_truncated_xor_differential_model", "cipher_modules/models/cp/cp_models/cp_impossible_xor_differential_model", "cipher_modules/models/cp/cp_models/cp_xor_differential_model", "cipher_modules/models/cp/cp_models/cp_xor_differential_number_of_active_sboxes_model", "cipher_modules/models/cp/cp_models/cp_xor_differential_trail_search_fixing_number_of_active_sboxes_model", "cipher_modules/models/cp/cp_models/cp_xor_linear_model", "cipher_modules/models/cp/minizinc_utils/usefulfunctions", "cipher_modules/models/cp/solvers", "cipher_modules/models/milp/milp_model", "cipher_modules/models/milp/milp_models/milp_bitwise_deterministic_truncated_xor_differential_model", "cipher_modules/models/milp/milp_models/milp_bitwise_impossible_xor_differential_model", "cipher_modules/models/milp/milp_models/milp_cipher_model", "cipher_modules/models/milp/milp_models/milp_wordwise_deterministic_truncated_xor_differential_model", "cipher_modules/models/milp/milp_models/milp_wordwise_impossible_xor_differential_model", "cipher_modules/models/milp/milp_models/milp_xor_differential_model", "cipher_modules/models/milp/milp_models/milp_xor_linear_model", "cipher_modules/models/milp/solvers", "cipher_modules/models/milp/tmp/tea_cipher_xordiff_model", "cipher_modules/models/milp/utils/dictionary_containing_truncated_input_pattern_inequalities", "cipher_modules/models/milp/utils/dictionary_containing_truncated_mds_inequalities", "cipher_modules/models/milp/utils/dictionary_containing_truncated_xor_inequalities_between_n_input_bits", "cipher_modules/models/milp/utils/dictionary_containing_xor_inequalities_between_n_input_bits", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_large_sboxes", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_large_sboxes_xor_linear", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bits", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_small_sboxes", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_small_sboxes_xor_linear", "cipher_modules/models/milp/utils/generate_inequalities_for_and_operation_2_input_bits", "cipher_modules/models/milp/utils/generate_inequalities_for_large_sboxes", "cipher_modules/models/milp/utils/generate_inequalities_for_wordwise_truncated_mds_matrices", "cipher_modules/models/milp/utils/generate_inequalities_for_wordwise_truncated_xor_with_n_input_bits", "cipher_modules/models/milp/utils/generate_inequalities_for_xor_with_n_input_bits", "cipher_modules/models/milp/utils/generate_sbox_inequalities_for_trail_search", "cipher_modules/models/milp/utils/generate_undisturbed_bits_inequalities_for_sboxes", "cipher_modules/models/milp/utils/milp_name_mappings", "cipher_modules/models/milp/utils/milp_truncated_utils", "cipher_modules/models/milp/utils/mzn_predicates", "cipher_modules/models/milp/utils/utils", "cipher_modules/models/minizinc/minizinc_model", "cipher_modules/models/minizinc/minizinc_models/minizinc_boomerang_model", "cipher_modules/models/minizinc/minizinc_models/minizinc_cipher_model", "cipher_modules/models/minizinc/minizinc_models/minizinc_deterministic_truncated_xor_differential_model", "cipher_modules/models/minizinc/minizinc_models/minizinc_xor_differential_model", "cipher_modules/models/minizinc/utils/mzn_bct_predicates", "cipher_modules/models/minizinc/utils/utils", "cipher_modules/models/sat/cms_models/cms_bitwise_deterministic_truncated_xor_differential_model", "cipher_modules/models/sat/cms_models/cms_cipher_model", "cipher_modules/models/sat/cms_models/cms_xor_differential_model", "cipher_modules/models/sat/cms_models/cms_xor_linear_model", "cipher_modules/models/sat/sat_model", "cipher_modules/models/sat/sat_models/sat_bitwise_deterministic_truncated_xor_differential_model", "cipher_modules/models/sat/sat_models/sat_cipher_model", "cipher_modules/models/sat/sat_models/sat_xor_differential_model", "cipher_modules/models/sat/sat_models/sat_xor_linear_model", "cipher_modules/models/sat/solvers", "cipher_modules/models/sat/utils/mzn_predicates", "cipher_modules/models/sat/utils/n_window_heuristic_helper", "cipher_modules/models/sat/utils/utils", "cipher_modules/models/smt/smt_model", "cipher_modules/models/smt/smt_models/smt_cipher_model", "cipher_modules/models/smt/smt_models/smt_deterministic_truncated_xor_differential_model", "cipher_modules/models/smt/smt_models/smt_xor_differential_model", "cipher_modules/models/smt/smt_models/smt_xor_linear_model", "cipher_modules/models/smt/solvers", "cipher_modules/models/smt/utils/utils", "cipher_modules/models/utils", "cipher_modules/neural_network_tests", "cipher_modules/report", "cipher_modules/statistical_tests/dataset_generator", "cipher_modules/statistical_tests/dieharder_statistical_tests", "cipher_modules/statistical_tests/input_data_example", "cipher_modules/statistical_tests/nist_statistical_tests", "cipher_modules/tester", "ciphers/block_ciphers/aes_block_cipher", "ciphers/block_ciphers/bea1_block_cipher", "ciphers/block_ciphers/constant_block_cipher", "ciphers/block_ciphers/des_block_cipher", "ciphers/block_ciphers/des_exact_key_length_block_cipher", "ciphers/block_ciphers/fancy_block_cipher", "ciphers/block_ciphers/hight_block_cipher", "ciphers/block_ciphers/identity_block_cipher", "ciphers/block_ciphers/kasumi_block_cipher", "ciphers/block_ciphers/lblock_block_cipher", "ciphers/block_ciphers/lea_block_cipher", "ciphers/block_ciphers/lowmc_block_cipher", "ciphers/block_ciphers/lowmc_generate_matrices", "ciphers/block_ciphers/midori_block_cipher", "ciphers/block_ciphers/present_block_cipher", "ciphers/block_ciphers/qarmav2_block_cipher", "ciphers/block_ciphers/qarmav2_with_mixcolumn_block_cipher", "ciphers/block_ciphers/raiden_block_cipher", "ciphers/block_ciphers/rc5_block_cipher", "ciphers/block_ciphers/scarf_block_cipher", "ciphers/block_ciphers/simon_block_cipher", "ciphers/block_ciphers/skinny_block_cipher", "ciphers/block_ciphers/sparx_block_cipher", "ciphers/block_ciphers/speck_block_cipher", "ciphers/block_ciphers/speedy_block_cipher", "ciphers/block_ciphers/tea_block_cipher", "ciphers/block_ciphers/threefish_block_cipher", "ciphers/block_ciphers/twofish_block_cipher", "ciphers/block_ciphers/xtea_block_cipher", "ciphers/hash_functions/blake2_hash_function", "ciphers/hash_functions/blake_hash_function", "ciphers/hash_functions/md5_hash_function", "ciphers/hash_functions/sha1_hash_function", "ciphers/hash_functions/sha2_hash_function", "ciphers/hash_functions/whirlpool_hash_function", "ciphers/permutations/ascon_permutation", "ciphers/permutations/ascon_sbox_sigma_no_matrix_permutation", "ciphers/permutations/ascon_sbox_sigma_permutation", "ciphers/permutations/chacha_permutation", "ciphers/permutations/gaston_permutation", "ciphers/permutations/gaston_sbox_permutation", "ciphers/permutations/gift_permutation", "ciphers/permutations/gift_sbox_permutation", "ciphers/permutations/gimli_permutation", "ciphers/permutations/gimli_sbox_permutation", "ciphers/permutations/grain_core_permutation", "ciphers/permutations/keccak_invertible_permutation", "ciphers/permutations/keccak_permutation", "ciphers/permutations/keccak_sbox_permutation", "ciphers/permutations/photon_permutation", "ciphers/permutations/salsa_permutation", "ciphers/permutations/sparkle_permutation", "ciphers/permutations/spongent_pi_fsr_permutation", "ciphers/permutations/spongent_pi_permutation", "ciphers/permutations/spongent_pi_precomputation_permutation", "ciphers/permutations/tinyjambu_32bits_word_permutation", "ciphers/permutations/tinyjambu_fsr_32bits_word_permutation", "ciphers/permutations/tinyjambu_permutation", "ciphers/permutations/util", "ciphers/permutations/xoodoo_invertible_permutation", "ciphers/permutations/xoodoo_permutation", "ciphers/permutations/xoodoo_sbox_permutation", "ciphers/stream_ciphers/a5_1_stream_cipher", "ciphers/stream_ciphers/a5_2_stream_cipher", "ciphers/stream_ciphers/bivium_stream_cipher", "ciphers/stream_ciphers/bluetooth_stream_cipher_e0", "ciphers/stream_ciphers/chacha_stream_cipher", "ciphers/stream_ciphers/snow3g_stream_cipher", "ciphers/stream_ciphers/trivium_stream_cipher", "ciphers/stream_ciphers/zuc_stream_cipher", "ciphers/toys/toyspn1", "ciphers/toys/toyspn2", "component", "components/and_component", "components/cipher_output_component", "components/concatenate_component", "components/constant_component", "components/fsr_component", "components/intermediate_output_component", "components/linear_layer_component", "components/mix_column_component", "components/modadd_component", "components/modsub_component", "components/modular_component", "components/multi_input_non_linear_logical_operator_component", "components/not_component", "components/or_component", "components/permutation_component", "components/reverse_component", "components/rotate_component", "components/sbox_component", "components/shift_component", "components/shift_rows_component", "components/sigma_component", "components/theta_keccak_component", "components/theta_xoodoo_component", "components/variable_rotate_component", "components/variable_shift_component", "components/word_permutation_component", "components/xor_component", "compound_xor_differential_cipher", "editor", "index", "input", "references", "round", "rounds", "utils/integer", "utils/integer_functions", "utils/sage_scripts", "utils/sequence_operations", "utils/templates", "utils/utils"], "filenames": ["cipher.rst", "cipher_modules/algebraic_tests.rst", "cipher_modules/avalanche_tests.rst", "cipher_modules/code_generator.rst", "cipher_modules/component_analysis_tests.rst", "cipher_modules/continuous_diffusion_analysis.rst", "cipher_modules/evaluator.rst", "cipher_modules/generic_bit_based_c_functions.rst", "cipher_modules/generic_functions.rst", "cipher_modules/generic_functions_continuous_diffusion_analysis.rst", "cipher_modules/generic_functions_vectorized_bit.rst", "cipher_modules/generic_functions_vectorized_byte.rst", "cipher_modules/generic_word_based_c_functions.rst", "cipher_modules/graph_generator.rst", "cipher_modules/inverse_cipher.rst", "cipher_modules/models/algebraic/algebraic_model.rst", "cipher_modules/models/algebraic/boolean_polynomial_ring.rst", "cipher_modules/models/algebraic/constraints.rst", "cipher_modules/models/cp/cp_model.rst", "cipher_modules/models/cp/cp_models/cp_cipher_model.rst", "cipher_modules/models/cp/cp_models/cp_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/cp/cp_models/cp_impossible_xor_differential_model.rst", "cipher_modules/models/cp/cp_models/cp_xor_differential_model.rst", "cipher_modules/models/cp/cp_models/cp_xor_differential_number_of_active_sboxes_model.rst", "cipher_modules/models/cp/cp_models/cp_xor_differential_trail_search_fixing_number_of_active_sboxes_model.rst", "cipher_modules/models/cp/cp_models/cp_xor_linear_model.rst", "cipher_modules/models/cp/minizinc_utils/usefulfunctions.rst", "cipher_modules/models/cp/solvers.rst", "cipher_modules/models/milp/milp_model.rst", "cipher_modules/models/milp/milp_models/milp_bitwise_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/milp/milp_models/milp_bitwise_impossible_xor_differential_model.rst", "cipher_modules/models/milp/milp_models/milp_cipher_model.rst", "cipher_modules/models/milp/milp_models/milp_wordwise_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/milp/milp_models/milp_wordwise_impossible_xor_differential_model.rst", "cipher_modules/models/milp/milp_models/milp_xor_differential_model.rst", "cipher_modules/models/milp/milp_models/milp_xor_linear_model.rst", "cipher_modules/models/milp/solvers.rst", "cipher_modules/models/milp/tmp/tea_cipher_xordiff_model.rst", "cipher_modules/models/milp/utils/dictionary_containing_truncated_input_pattern_inequalities.rst", "cipher_modules/models/milp/utils/dictionary_containing_truncated_mds_inequalities.rst", "cipher_modules/models/milp/utils/dictionary_containing_truncated_xor_inequalities_between_n_input_bits.rst", "cipher_modules/models/milp/utils/dictionary_containing_xor_inequalities_between_n_input_bits.rst", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_large_sboxes.rst", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_large_sboxes_xor_linear.rst", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bits.rst", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_small_sboxes.rst", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_small_sboxes_xor_linear.rst", "cipher_modules/models/milp/utils/generate_inequalities_for_and_operation_2_input_bits.rst", "cipher_modules/models/milp/utils/generate_inequalities_for_large_sboxes.rst", "cipher_modules/models/milp/utils/generate_inequalities_for_wordwise_truncated_mds_matrices.rst", "cipher_modules/models/milp/utils/generate_inequalities_for_wordwise_truncated_xor_with_n_input_bits.rst", "cipher_modules/models/milp/utils/generate_inequalities_for_xor_with_n_input_bits.rst", "cipher_modules/models/milp/utils/generate_sbox_inequalities_for_trail_search.rst", "cipher_modules/models/milp/utils/generate_undisturbed_bits_inequalities_for_sboxes.rst", "cipher_modules/models/milp/utils/milp_name_mappings.rst", "cipher_modules/models/milp/utils/milp_truncated_utils.rst", "cipher_modules/models/milp/utils/mzn_predicates.rst", "cipher_modules/models/milp/utils/utils.rst", "cipher_modules/models/minizinc/minizinc_model.rst", "cipher_modules/models/minizinc/minizinc_models/minizinc_boomerang_model.rst", "cipher_modules/models/minizinc/minizinc_models/minizinc_cipher_model.rst", "cipher_modules/models/minizinc/minizinc_models/minizinc_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/minizinc/minizinc_models/minizinc_xor_differential_model.rst", "cipher_modules/models/minizinc/utils/mzn_bct_predicates.rst", "cipher_modules/models/minizinc/utils/utils.rst", "cipher_modules/models/sat/cms_models/cms_bitwise_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/sat/cms_models/cms_cipher_model.rst", "cipher_modules/models/sat/cms_models/cms_xor_differential_model.rst", "cipher_modules/models/sat/cms_models/cms_xor_linear_model.rst", "cipher_modules/models/sat/sat_model.rst", "cipher_modules/models/sat/sat_models/sat_bitwise_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/sat/sat_models/sat_cipher_model.rst", "cipher_modules/models/sat/sat_models/sat_xor_differential_model.rst", "cipher_modules/models/sat/sat_models/sat_xor_linear_model.rst", "cipher_modules/models/sat/solvers.rst", "cipher_modules/models/sat/utils/mzn_predicates.rst", "cipher_modules/models/sat/utils/n_window_heuristic_helper.rst", "cipher_modules/models/sat/utils/utils.rst", "cipher_modules/models/smt/smt_model.rst", "cipher_modules/models/smt/smt_models/smt_cipher_model.rst", "cipher_modules/models/smt/smt_models/smt_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/smt/smt_models/smt_xor_differential_model.rst", "cipher_modules/models/smt/smt_models/smt_xor_linear_model.rst", "cipher_modules/models/smt/solvers.rst", "cipher_modules/models/smt/utils/utils.rst", "cipher_modules/models/utils.rst", "cipher_modules/neural_network_tests.rst", "cipher_modules/report.rst", "cipher_modules/statistical_tests/dataset_generator.rst", "cipher_modules/statistical_tests/dieharder_statistical_tests.rst", "cipher_modules/statistical_tests/input_data_example.rst", "cipher_modules/statistical_tests/nist_statistical_tests.rst", "cipher_modules/tester.rst", "ciphers/block_ciphers/aes_block_cipher.rst", "ciphers/block_ciphers/bea1_block_cipher.rst", "ciphers/block_ciphers/constant_block_cipher.rst", "ciphers/block_ciphers/des_block_cipher.rst", "ciphers/block_ciphers/des_exact_key_length_block_cipher.rst", "ciphers/block_ciphers/fancy_block_cipher.rst", "ciphers/block_ciphers/hight_block_cipher.rst", "ciphers/block_ciphers/identity_block_cipher.rst", "ciphers/block_ciphers/kasumi_block_cipher.rst", "ciphers/block_ciphers/lblock_block_cipher.rst", "ciphers/block_ciphers/lea_block_cipher.rst", "ciphers/block_ciphers/lowmc_block_cipher.rst", "ciphers/block_ciphers/lowmc_generate_matrices.rst", "ciphers/block_ciphers/midori_block_cipher.rst", "ciphers/block_ciphers/present_block_cipher.rst", "ciphers/block_ciphers/qarmav2_block_cipher.rst", "ciphers/block_ciphers/qarmav2_with_mixcolumn_block_cipher.rst", "ciphers/block_ciphers/raiden_block_cipher.rst", "ciphers/block_ciphers/rc5_block_cipher.rst", "ciphers/block_ciphers/scarf_block_cipher.rst", "ciphers/block_ciphers/simon_block_cipher.rst", "ciphers/block_ciphers/skinny_block_cipher.rst", "ciphers/block_ciphers/sparx_block_cipher.rst", "ciphers/block_ciphers/speck_block_cipher.rst", "ciphers/block_ciphers/speedy_block_cipher.rst", "ciphers/block_ciphers/tea_block_cipher.rst", "ciphers/block_ciphers/threefish_block_cipher.rst", "ciphers/block_ciphers/twofish_block_cipher.rst", "ciphers/block_ciphers/xtea_block_cipher.rst", "ciphers/hash_functions/blake2_hash_function.rst", "ciphers/hash_functions/blake_hash_function.rst", "ciphers/hash_functions/md5_hash_function.rst", "ciphers/hash_functions/sha1_hash_function.rst", "ciphers/hash_functions/sha2_hash_function.rst", "ciphers/hash_functions/whirlpool_hash_function.rst", "ciphers/permutations/ascon_permutation.rst", "ciphers/permutations/ascon_sbox_sigma_no_matrix_permutation.rst", "ciphers/permutations/ascon_sbox_sigma_permutation.rst", "ciphers/permutations/chacha_permutation.rst", "ciphers/permutations/gaston_permutation.rst", "ciphers/permutations/gaston_sbox_permutation.rst", "ciphers/permutations/gift_permutation.rst", "ciphers/permutations/gift_sbox_permutation.rst", "ciphers/permutations/gimli_permutation.rst", "ciphers/permutations/gimli_sbox_permutation.rst", "ciphers/permutations/grain_core_permutation.rst", "ciphers/permutations/keccak_invertible_permutation.rst", "ciphers/permutations/keccak_permutation.rst", "ciphers/permutations/keccak_sbox_permutation.rst", "ciphers/permutations/photon_permutation.rst", "ciphers/permutations/salsa_permutation.rst", "ciphers/permutations/sparkle_permutation.rst", "ciphers/permutations/spongent_pi_fsr_permutation.rst", "ciphers/permutations/spongent_pi_permutation.rst", "ciphers/permutations/spongent_pi_precomputation_permutation.rst", "ciphers/permutations/tinyjambu_32bits_word_permutation.rst", "ciphers/permutations/tinyjambu_fsr_32bits_word_permutation.rst", "ciphers/permutations/tinyjambu_permutation.rst", "ciphers/permutations/util.rst", "ciphers/permutations/xoodoo_invertible_permutation.rst", "ciphers/permutations/xoodoo_permutation.rst", "ciphers/permutations/xoodoo_sbox_permutation.rst", "ciphers/stream_ciphers/a5_1_stream_cipher.rst", "ciphers/stream_ciphers/a5_2_stream_cipher.rst", "ciphers/stream_ciphers/bivium_stream_cipher.rst", "ciphers/stream_ciphers/bluetooth_stream_cipher_e0.rst", "ciphers/stream_ciphers/chacha_stream_cipher.rst", "ciphers/stream_ciphers/snow3g_stream_cipher.rst", "ciphers/stream_ciphers/trivium_stream_cipher.rst", "ciphers/stream_ciphers/zuc_stream_cipher.rst", "ciphers/toys/toyspn1.rst", "ciphers/toys/toyspn2.rst", "component.rst", "components/and_component.rst", "components/cipher_output_component.rst", "components/concatenate_component.rst", "components/constant_component.rst", "components/fsr_component.rst", "components/intermediate_output_component.rst", "components/linear_layer_component.rst", "components/mix_column_component.rst", "components/modadd_component.rst", "components/modsub_component.rst", "components/modular_component.rst", "components/multi_input_non_linear_logical_operator_component.rst", "components/not_component.rst", "components/or_component.rst", "components/permutation_component.rst", "components/reverse_component.rst", "components/rotate_component.rst", "components/sbox_component.rst", "components/shift_component.rst", "components/shift_rows_component.rst", "components/sigma_component.rst", "components/theta_keccak_component.rst", "components/theta_xoodoo_component.rst", "components/variable_rotate_component.rst", "components/variable_shift_component.rst", "components/word_permutation_component.rst", "components/xor_component.rst", "compound_xor_differential_cipher.rst", "editor.rst", "index.rst", "input.rst", "references.rst", "round.rst", "rounds.rst", "utils/integer.rst", "utils/integer_functions.rst", "utils/sage_scripts.rst", "utils/sequence_operations.rst", "utils/templates.rst", "utils/utils.rst"], "titles": ["Cipher", "Algebraic tests", "Avalanche tests", "Code generator", "Component analysis tests", "Continuous diffusion analysis", "Evaluator", "Generic bit based c functions", "Generic functions", "Generic functions continuous diffusion analysis", "Generic functions vectorized bit", "Generic functions vectorized byte", "Generic word based c functions", "Graph generator", "Inverse cipher", "Algebraic model", "Boolean polynomial ring", "Constraints", "Cp model", "Cp cipher model", "Cp deterministic truncated xor differential model", "Cp impossible xor differential model", "Cp xor differential model", "Cp xor differential number of active sboxes model", "Cp xor differential trail search fixing number of active sboxes model", "Cp xor linear model", "Usefulfunctions", "Solvers", "Milp model", "Milp bitwise deterministic truncated xor differential model", "Milp bitwise impossible xor differential model", "Milp cipher model", "Milp wordwise deterministic truncated xor differential model", "Milp wordwise impossible xor differential model", "Milp xor differential model", "Milp xor linear model", "Solvers", "Tea cipher xordiff model", "Dictionary containing truncated input pattern inequalities", "Dictionary containing truncated mds inequalities", "Dictionary containing truncated xor inequalities between n input bits", "Dictionary containing xor inequalities between n input bits", "Dictionary that contains inequalities for large sboxes", "Dictionary that contains inequalities for large sboxes xor linear", "Dictionary that contains inequalities for sboxes with undisturbed bits", "Dictionary that contains inequalities for small sboxes", "Dictionary that contains inequalities for small sboxes xor linear", "Generate inequalities for and operation 2 input bits", "Generate inequalities for large sboxes", "Generate inequalities for wordwise truncated mds matrices", "Generate inequalities for wordwise truncated xor with n input bits", "Generate inequalities for xor with n input bits", "Generate sbox inequalities for trail search", "Generate undisturbed bits inequalities for sboxes", "Milp name mappings", "Milp truncated utils", "Mzn predicates", "Utils", "Minizinc model", "Minizinc boomerang model", "Minizinc cipher model", "Minizinc deterministic truncated xor differential model", "Minizinc xor differential model", "Mzn bct predicates", "Utils", "Cms bitwise deterministic truncated xor differential model", "Cms cipher model", "Cms xor differential model", "Cms xor linear model", "Sat model", "Sat bitwise deterministic truncated xor differential model", "Sat cipher model", "Sat xor differential model", "Sat xor linear model", "Solvers", "Mzn predicates", "N window heuristic helper", "Utils", "Smt model", "Smt cipher model", "Smt deterministic truncated xor differential model", "Smt xor differential model", "Smt xor linear model", "Solvers", "Utils", "Utils", "Neural network tests", "Report", "Dataset generator", "Dieharder statistical tests", "Input data example", "Nist statistical tests", "Tester", "Aes block cipher", "Bea1 block cipher", "Constant block cipher", "Des block cipher", "Des exact key length block cipher", "Fancy block cipher", "Hight block cipher", "Identity block cipher", "Kasumi block cipher", "Lblock block cipher", "Lea block cipher", "Lowmc block cipher", "Lowmc generate matrices", "Midori block cipher", "Present block cipher", "Qarmav2 block cipher", "Qarmav2 with mixcolumn block cipher", "Raiden block cipher", "Rc5 block cipher", "Scarf block cipher", "Simon block cipher", "Skinny block cipher", "Sparx block cipher", "Speck block cipher", "Speedy block cipher", "Tea block cipher", "Threefish block cipher", "Twofish block cipher", "Xtea block cipher", "Blake2 hash function", "Blake hash function", "Md5 hash function", "Sha1 hash function", "Sha2 hash function", "Whirlpool hash function", "Ascon permutation", "Ascon sbox sigma no matrix permutation", "Ascon sbox sigma permutation", "Chacha permutation", "Gaston permutation", "Gaston sbox permutation", "Gift permutation", "Gift sbox permutation", "Gimli permutation", "Gimli sbox permutation", "Grain core permutation", "Keccak invertible permutation", "Keccak permutation", "Keccak sbox permutation", "Photon permutation", "Salsa permutation", "Sparkle permutation", "Spongent pi fsr permutation", "Spongent pi permutation", "Spongent pi precomputation permutation", "Tinyjambu 32bits word permutation", "Tinyjambu fsr 32bits word permutation", "Tinyjambu permutation", "Util", "Xoodoo invertible permutation", "Xoodoo permutation", "Xoodoo sbox permutation", "A5 1 stream cipher", "A5 2 stream cipher", "Bivium stream cipher", "Bluetooth stream cipher e0", "Chacha stream cipher", "Snow3g stream cipher", "Trivium stream cipher", "Zuc stream cipher", "Toyspn1", "Toyspn2", "Component", "And component", "Cipher output component", "Concatenate component", "Constant component", "Fsr component", "Intermediate output component", "Linear layer component", "Mix column component", "Modadd component", "Modsub component", "Modular component", "Multi input non linear logical operator component", "Not component", "Or component", "Permutation component", "Reverse component", "Rotate component", "Sbox component", "Shift component", "Shift rows component", "Sigma component", "Theta keccak component", "Theta xoodoo component", "Variable rotate component", "Variable shift component", "Word permutation component", "Xor component", "Compound xor differential cipher", "Editor", "CLAASP: Cryptographic Library for Automated Analysis of Symmetric Primitives", "Input", "References", "Round", "Rounds", "Integer", "Integer functions", "Sage scripts", "Sequence operations", "Templates", "Utils"], "terms": {"class": [0, 1, 2, 4, 5, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 199, 204, 205], "family_nam": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "cipher_typ": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "cipher_input": [0, 6, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "cipher_inputs_bit_s": [0, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "cipher_output_bit_s": [0, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "cipher_reference_cod": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "none": [0, 4, 5, 10, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 47, 52, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 85, 87, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 201, 204, 205], "base": [0, 1, 2, 3, 4, 5, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 204], "object": [0, 1, 2, 3, 4, 5, 8, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 52, 58, 62, 69, 78, 87, 88, 89, 91, 93, 94, 96, 97, 98, 100, 101, 108, 109, 111, 124, 125, 126, 127, 157, 158, 160, 161, 162, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 196, 198, 199, 204, 205], "add_and_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "input_id_link": [0, 14, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 199], "input_bit_posit": [0, 14, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 199], "output_bit_s": [0, 3, 4, 10, 58, 60, 61, 62, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 199, 202], "add_fsr_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "descript": [0, 4, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 199], "add_modadd_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "modulu": [0, 8, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 174, 175, 176, 194], "add_modsub_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 175, 194], "add_not_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_or_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_sbox_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_shift_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "paramet": [0, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 182, 184, 185, 189, 190, 194, 197], "add_xor_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 194], "add_cipher_output_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_concatenate_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_constant_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "valu": [0, 5, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 48, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169, 192, 194, 201, 205], "add_intermediate_output_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "output_tag": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 171, 194], "add_linear_layer_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_mix_column_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "mix_column_descript": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_permutation_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "permutation_descript": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 180, 191, 194], "add_reverse_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_rotate_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_round": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 175, 194, 199], "add_round_key_output_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_round_output_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_shift_rows_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_sigma_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "rotation_amounts_paramet": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 186, 194], "add_suffix_to_compon": [0, 30, 33, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "suffix": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "component_id_list": [0, 30, 33, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "add_theta_keccak_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_theta_xoodoo_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_variable_rotate_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_variable_shift_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "add_word_permutation_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "word_siz": [0, 3, 4, 8, 9, 11, 15, 32, 33, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 201, 205], "as_python_dictionari": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "cipher_invers": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "return": [0, 2, 3, 4, 5, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 48, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 200, 203, 205], "graph": [0, 2, 4, 14, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 174, 175, 176, 178, 182, 183, 185, 195, 197], "represent": [0, 4, 9, 11, 14, 47, 48, 52, 85, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 174, 175, 176, 178, 182, 183, 185], "invers": [0, 4, 20, 21, 69, 78, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 195], "under": [0, 2, 4, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "analysi": [0, 2, 48, 52, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 197, 205], "exampl": [0, 1, 2, 3, 4, 5, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 199, 200, 203, 205], "sage": [0, 1, 2, 3, 4, 5, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 199, 200, 203, 205], "from": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 47, 49, 50, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 197, 199, 200, 203, 205], "claasp": [0, 1, 2, 3, 4, 5, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 199, 200, 203, 205], "block_ciph": [0, 1, 2, 3, 4, 5, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 205], "speck_block_ciph": [0, 1, 2, 3, 4, 5, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 171, 174, 175, 176, 182, 185, 192, 194, 205], "import": [0, 1, 2, 3, 4, 5, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 199, 200, 203, 205], "speckblockciph": [0, 1, 2, 3, 4, 5, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 171, 174, 175, 176, 182, 185, 192, 194, 205], "kei": [0, 2, 4, 11, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 88, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 177, 179, 190, 192, 194, 195, 197, 205], "0xabcdef01abcdef01": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "plaintext": [0, 2, 5, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 174, 175, 176, 182, 184, 185, 194, 205], "0x01234567": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "number_of_round": [0, 1, 2, 3, 4, 5, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 199, 205], "2": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 50, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 79, 81, 82, 85, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 197, 199, 203, 205], "ciphertext": [0, 30, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "evalu": [0, 3, 9, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "cipher_inv": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "true": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 15, 16, 17, 30, 33, 34, 62, 67, 68, 72, 73, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 205], "cipher_partial_invers": [0, 30, 33, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "start_round": [0, 14, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "end_round": [0, 14, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "keep_key_schedul": [0, 14, 30, 33, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "fals": [0, 1, 3, 4, 6, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 52, 53, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 191, 192], "invert": [0, 14, 20, 21, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "portion": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "input": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 202, 203, 205], "integ": [0, 2, 4, 5, 8, 9, 10, 11, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 47, 52, 57, 58, 60, 61, 62, 66, 67, 68, 69, 71, 72, 73, 78, 79, 80, 81, 82, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 174, 175, 176, 177, 179, 183, 192, 194, 195, 199, 203, 205], "initi": [0, 28, 29, 30, 31, 32, 33, 34, 35, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "round": [0, 2, 3, 14, 15, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 194, 195, 197], "number": [0, 2, 4, 5, 9, 10, 11, 15, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 33, 34, 35, 47, 52, 57, 58, 60, 61, 62, 65, 70, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 174, 175, 176, 183, 192, 194, 195, 197, 199, 205], "partial": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "final": [0, 77, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "speck": [0, 1, 2, 3, 4, 5, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 85, 87, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 171, 174, 175, 176, 182, 185, 192, 194, 195, 197, 205], "3": [0, 2, 3, 4, 8, 9, 11, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 49, 50, 52, 53, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 85, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 197, 199, 203, 205], "result": [0, 2, 4, 5, 11, 18, 19, 20, 21, 22, 23, 24, 25, 50, 57, 58, 60, 61, 62, 67, 72, 77, 84, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 176, 177, 179, 192], "intermediate_output": [0, 3, 6, 14, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 171, 194], "partial_speck": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "1": [0, 1, 2, 3, 4, 5, 8, 9, 11, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 50, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 79, 81, 82, 85, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 197, 199, 200, 203, 205], "0": [0, 2, 3, 4, 5, 8, 9, 10, 11, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 50, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 85, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 197, 199, 200, 203, 205], "intermediate_output_0_6": [0, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 171], "component_from": [0, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 198, 199], "round_numb": [0, 3, 14, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 193, 199], "index": [0, 3, 10, 11, 14, 15, 32, 33, 48, 49, 50, 69, 85, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 183, 191, 194, 195, 198, 205], "convert_to_compound_xor_ciph": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 193], "create_networx_graph_from_input_id": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "create_top_and_bottom_subgraphs_from_components_graph": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "e0_bottom_id": [0, 13, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "e1_top_id": [0, 13, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "properti": [0, 2, 4, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199], "current_round": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 199], "current_round_numb": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199], "current_round_number_of_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199], "delete_generated_evaluate_c_shared_librari": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "delet": [0, 14, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "file": [0, 24, 28, 29, 30, 31, 32, 33, 34, 35, 50, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 83, 85, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "name": [0, 10, 11, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "id_ciph": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "_evalu": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "c": [0, 16, 17, 57, 76, 77, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 174, 175, 176, 192, 195, 197], "correspond": [0, 2, 4, 5, 11, 28, 32, 33, 35, 68, 69, 73, 78, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "execut": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "fancy_block_ciph": [0, 3, 4, 15, 29, 30, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "fancyblockciph": [0, 3, 4, 15, 29, 30, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "fanci": [0, 3, 4, 15, 29, 30, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 195], "doctest": [0, 3, 29, 30, 32, 33, 35, 65, 70, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "skip": [0, 3, 17, 29, 30, 32, 33, 35, 65, 70, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192], "verbos": [0, 3, 6, 8, 10, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 53, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "output": [0, 2, 3, 5, 8, 9, 10, 11, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 34, 35, 50, 57, 58, 60, 61, 62, 65, 67, 70, 72, 77, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 176, 177, 179, 183, 192, 194, 195], "list": [0, 3, 4, 5, 8, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 197, 203, 205], "block": [0, 88, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "boolean": [0, 2, 3, 5, 8, 9, 10, 17, 20, 21, 30, 33, 48, 52, 58, 60, 61, 62, 84, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 191, 192, 195, 197], "default": [0, 2, 3, 5, 8, 10, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 47, 52, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 85, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 194, 205], "set": [0, 3, 8, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 32, 33, 34, 47, 48, 52, 57, 58, 60, 61, 62, 67, 72, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 192, 197, 200], "thi": [0, 2, 3, 5, 8, 9, 10, 11, 14, 28, 34, 35, 47, 48, 52, 53, 57, 58, 65, 66, 67, 68, 69, 74, 77, 78, 83, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 171, 173, 174, 175, 176, 177, 179, 183, 184, 191, 192, 194, 195, 199, 204], "flag": [0, 3, 5, 8, 10, 58, 60, 61, 62, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "dictionari": [0, 2, 4, 5, 9, 10, 11, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 48, 52, 62, 79, 81, 82, 85, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 195, 205], "each": [0, 2, 3, 5, 8, 10, 11, 14, 15, 17, 28, 34, 35, 48, 57, 62, 85, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192, 194], "intermedi": [0, 3, 20, 21, 58, 60, 61, 62, 67, 72, 77, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 192, 194, 195], "print": [0, 3, 8, 10, 11, 62, 85, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 199, 205], "compon": [0, 2, 3, 8, 9, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 33, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 84, 85, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 198, 199], "identity_block_ciph": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 205], "identityblockciph": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 205], "ident": [0, 3, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "0x89abcdef": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "19088743": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "evaluate_using_c": [0, 6, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "order": [0, 3, 11, 22, 24, 25, 67, 68, 69, 72, 73, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 200, 205], "0x012345": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0x89abcd": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "random": [0, 2, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197, 205], "round_key_output": [0, 3, 5, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 205], "3502917": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "73728": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "round_output": [0, 2, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 205], "9834215": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "cipher_output": [0, 3, 5, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 171, 194, 205], "7457252": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "evaluate_vector": [0, 6, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "evaluate_api": [0, 6, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "bit_bas": [0, 6, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "multipl": [0, 8, 10, 11, 14, 48, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192, 197], "The": [0, 2, 4, 8, 10, 11, 13, 22, 24, 28, 34, 35, 47, 48, 52, 53, 57, 62, 65, 66, 67, 68, 69, 72, 73, 78, 81, 82, 84, 85, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 174, 175, 176, 177, 179, 183, 194, 197, 205], "ar": [0, 2, 4, 8, 11, 13, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 50, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 174, 175, 176, 177, 179, 192, 194, 205], "given": [0, 2, 4, 13, 18, 19, 20, 21, 22, 23, 24, 25, 47, 52, 65, 66, 67, 68, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192], "contain": [0, 2, 3, 4, 5, 9, 11, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 48, 58, 60, 61, 62, 67, 68, 72, 73, 74, 79, 81, 82, 83, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 195], "first": [0, 11, 20, 21, 22, 23, 24, 25, 48, 77, 84, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 171, 173, 178, 182, 183, 184, 185, 191, 192, 194], "second": [0, 15, 19, 20, 21, 22, 23, 24, 25, 47, 52, 58, 60, 61, 62, 77, 84, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 194], "numpi": [0, 10, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "ndarrai": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "np": [0, 10, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "uint8": [0, 10, 11, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "shape": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "n": [0, 3, 8, 10, 17, 23, 24, 52, 57, 58, 60, 61, 62, 77, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 174, 175, 176, 182, 184, 185, 190, 192, 195, 197, 200, 203, 205], "m": [0, 4, 10, 29, 30, 32, 33, 57, 65, 70, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 194, 197], "where": [0, 2, 8, 10, 11, 17, 30, 33, 57, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192, 194, 200, 205], "size": [0, 2, 8, 9, 10, 11, 14, 34, 35, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 183, 194, 201], "byte": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192, 195, 205], "sampl": [0, 5, 10, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "format": [0, 3, 4, 11, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "transpos": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "compar": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "otherwis": [0, 8, 30, 33, 34, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "function": [0, 14, 17, 48, 77, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 197, 199, 205], "determin": [0, 57, 77, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "automat": [0, 77, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "bit": [0, 2, 3, 4, 5, 8, 11, 14, 28, 29, 30, 32, 33, 34, 35, 52, 57, 62, 69, 77, 84, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 192, 194, 195, 200, 205], "requir": [0, 30, 48, 53, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "doe": [0, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192], "transform": [0, 8, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192], "transpar": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "similar": [0, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "evaluate_vectorized_byt": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "repres": [0, 8, 9, 10, 11, 17, 20, 21, 22, 24, 25, 29, 30, 32, 33, 47, 48, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 84, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 175, 176, 179, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192, 194, 195, 205], "one": [0, 10, 11, 22, 24, 25, 28, 29, 30, 32, 33, 34, 35, 52, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192, 194, 205], "row": [0, 10, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "column": [0, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 191, 194, 195], "take": [0, 11, 13, 29, 30, 32, 33, 34, 35, 52, 65, 66, 67, 68, 77, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 205], "expect": [0, 2, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "x": [0, 10, 11, 16, 17, 32, 33, 35, 52, 55, 57, 65, 66, 67, 68, 76, 77, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 197, 200, 203, 205], "block_bit_s": [0, 2, 4, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 60, 61, 62, 65, 68, 70, 73, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 173, 174, 175, 176, 177, 179, 182, 184, 185, 191, 192, 205], "32": [0, 2, 3, 4, 9, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 174, 175, 176, 177, 178, 179, 182, 184, 185, 190, 192, 194, 200, 205], "key_bit_s": [0, 2, 4, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 60, 61, 62, 65, 68, 70, 73, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 174, 175, 176, 177, 179, 182, 183, 184, 185, 192, 205], "64": [0, 1, 10, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 60, 61, 62, 65, 67, 68, 70, 72, 73, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 174, 175, 176, 177, 179, 182, 185, 190, 192, 194, 197], "22": [0, 3, 29, 30, 31, 34, 35, 60, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 79, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 172, 174, 175, 176, 179, 180, 181, 186, 187, 188, 192, 194, 205], "k": [0, 9, 35, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 177, 179, 192, 197, 205], "randint": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "256": [0, 15, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 190], "8": [0, 3, 9, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 34, 35, 49, 52, 68, 73, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 197, 205], "dtype": [0, 10, 11, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "4": [0, 3, 9, 11, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 49, 50, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 197, 199, 200, 203, 205], "k0lib": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "int": [0, 4, 18, 19, 20, 21, 22, 23, 24, 25, 65, 70, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 179, 183, 190, 191, 192, 197], "from_byt": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "tobyt": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "byteord": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "big": [0, 18, 19, 20, 21, 22, 23, 24, 25, 35, 66, 71, 78, 79, 80, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 201], "k1lib": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "x0lib": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "x1lib": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "c0lib": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "c1lib": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "evaluate_with_intermediate_outputs_continuous_diffusion_analysi": [0, 6, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "sbox_precomput": [0, 6, 9, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "sbox_precomputations_mix_column": [0, 6, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "continu": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195, 197], "gener": [0, 5, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 192, 197], "decim": [0, 9, 28, 29, 30, 31, 32, 33, 34, 35, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183], "messag": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "plaintext_input": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "i": [0, 2, 3, 9, 11, 17, 29, 30, 34, 35, 50, 57, 58, 60, 61, 62, 77, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 190, 192, 194, 197, 205], "rang": [0, 2, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 57, 58, 60, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 203, 205], "10": [0, 1, 3, 5, 8, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 52, 53, 57, 67, 72, 81, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 179, 183, 191, 192, 194, 197, 205], "802999073954890452142763024312444031238555908203125": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "key_input": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "000000000": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "file_nam": [0, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "find_impossible_properti": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "type": [0, 2, 4, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 199, 203], "techniqu": [0, 28, 32, 33, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "sat": [0, 29, 30, 58, 60, 61, 62, 65, 66, 67, 68, 78, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "solver": [0, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 47, 52, 58, 60, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 195], "kissat": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "scenario": [0, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "singl": [0, 11, 19, 20, 21, 22, 24, 25, 34, 58, 60, 61, 62, 67, 72, 81, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "sglytqh2017": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "find": [0, 22, 24, 25, 28, 58, 60, 61, 62, 67, 68, 72, 73, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 176, 178, 179, 192, 197], "imposs": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "differenti": [0, 4, 28, 47, 48, 52, 53, 57, 69, 77, 78, 79, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 195, 197], "zero": [0, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "correl": [0, 22, 24, 25, 35, 68, 73, 82, 85, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "linear": [0, 4, 9, 10, 11, 31, 47, 52, 57, 77, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 194, 195, 197], "approxim": [0, 5, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "fix": [0, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195], "iter": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "all": [0, 2, 4, 9, 11, 22, 24, 25, 34, 35, 57, 58, 60, 61, 62, 67, 68, 72, 73, 74, 81, 82, 83, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 192, 204, 205], "possibl": [0, 9, 18, 19, 20, 21, 22, 23, 24, 25, 68, 73, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192], "ham": [0, 2, 77, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "weight": [0, 2, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 197], "ask": [0, 28, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "solut": [0, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 174, 175, 176, 177, 178, 179, 182, 184, 185, 189, 190, 192, 197], "found": [0, 18, 19, 20, 21, 22, 23, 24, 25, 34, 35, 58, 60, 61, 62, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 203], "propag": [0, 58, 60, 61, 62, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "zero_correl": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "ani": [0, 20, 21, 22, 24, 25, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 73, 74, 78, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 174, 175, 176], "an": [0, 1, 2, 8, 9, 10, 11, 16, 23, 24, 52, 57, 77, 78, 85, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 178, 179, 183, 192, 194, 197, 200, 203], "empti": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "string": [0, 3, 4, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 52, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169, 183, 194, 205], "search": [0, 20, 21, 22, 23, 25, 28, 29, 30, 32, 33, 34, 35, 58, 60, 61, 62, 65, 67, 68, 69, 70, 72, 73, 77, 78, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 184, 195, 197], "smt": [0, 69, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "milp": [0, 47, 52, 57, 62, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 197], "cp": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "us": [0, 2, 3, 4, 5, 9, 10, 11, 13, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 47, 48, 49, 52, 53, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 87, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 171, 174, 175, 176, 177, 179, 183, 192, 194, 195, 197, 199, 205], "generate_bit_based_c_cod": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "code": [0, 52, 69, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197], "defin": [0, 2, 3, 8, 13, 14, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "self": [0, 3, 14, 29, 30, 32, 33, 34, 35, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "method": [0, 3, 5, 9, 20, 21, 22, 24, 25, 34, 35, 48, 57, 58, 65, 66, 67, 68, 69, 71, 72, 73, 77, 79, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 171, 173, 174, 175, 176, 177, 179, 191, 192, 197], "make": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "s": [0, 9, 18, 19, 20, 21, 22, 23, 24, 25, 47, 52, 57, 65, 70, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 177, 179, 183, 197], "includ": [0, 13, 25, 29, 30, 32, 33, 35, 68, 73, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "generate_evaluate_c_code_shared_librari": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "store": [0, 87, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192], "build": [0, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195, 204], "generate_word_based_c_cod": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "optim": [0, 47, 52, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "word": [0, 4, 8, 9, 10, 11, 32, 33, 57, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 195], "word_based_c_cod": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "20": [0, 3, 5, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 172, 179, 180, 181, 183, 186, 187, 188, 194, 197, 205], "get_all_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 199], "get_all_components_id": [0, 30, 33, 66, 71, 79, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 199], "get_all_inputs_bit_posit": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "get_component_from_id": [0, 4, 14, 28, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192, 198, 199], "component_id": [0, 3, 14, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 198, 199], "accord": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183], "id": [0, 4, 13, 29, 30, 33, 58, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 198, 199, 205], "id_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "sbox_0_0": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 180, 181, 186, 187, 188, 194], "6": [0, 3, 9, 22, 24, 25, 29, 30, 35, 50, 52, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 194, 197, 205], "12": [0, 3, 25, 30, 32, 33, 35, 52, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 171, 172, 177, 179, 180, 181, 186, 187, 188, 194, 205], "14": [0, 3, 4, 5, 25, 29, 30, 35, 52, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 171, 172, 174, 179, 180, 181, 186, 187, 188, 194, 205], "5": [0, 2, 3, 4, 5, 9, 11, 18, 19, 20, 21, 22, 23, 24, 25, 30, 34, 49, 52, 58, 60, 61, 62, 67, 72, 78, 79, 80, 81, 82, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 173, 175, 178, 179, 183, 184, 191, 192, 194, 197, 203, 205], "7": [0, 3, 9, 11, 18, 19, 20, 21, 22, 23, 24, 25, 30, 52, 62, 66, 67, 68, 69, 71, 72, 73, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 172, 173, 175, 178, 179, 180, 181, 183, 184, 186, 187, 188, 191, 192, 194, 205], "9": [0, 3, 4, 18, 19, 20, 21, 22, 23, 24, 25, 30, 34, 35, 52, 62, 67, 72, 81, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 174, 175, 176, 179, 180, 181, 182, 185, 186, 187, 188, 191, 194, 197, 205], "11": [0, 3, 4, 30, 52, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 172, 173, 177, 179, 180, 181, 186, 187, 188, 191, 194, 205], "13": [0, 3, 4, 25, 35, 52, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 171, 172, 179, 180, 181, 186, 187, 188, 194, 197, 205], "15": [0, 3, 5, 20, 21, 23, 24, 25, 52, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 185, 186, 187, 188, 191, 192, 194, 205], "get_components_in_round": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "get_current_component_id": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "get": [0, 28, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 199], "current": [0, 14, 77, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "cipher_nam": [0, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 175, 194], "permut": [0, 2, 15, 30, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 175, 178, 179, 181, 183, 186, 187, 188, 194], "constant_0_0": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "0xf": [0, 8, 9, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "constant_0_1": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "constant_1_0": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169], "get_model": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "problem": [0, 58, 60, 61, 62, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "model": [0, 13, 16, 17, 49, 50, 52, 53, 55, 57, 77, 84, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "xor_differenti": [0, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "xor_linear": [0, 18, 19, 20, 21, 22, 23, 24, 25, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "cipher_model": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "more": [0, 9, 22, 24, 25, 35, 67, 68, 72, 73, 77, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 171, 177, 179, 192, 194, 203], "ad": [0, 10, 11, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183], "librari": [0, 28, 29, 30, 31, 32, 33, 34, 35, 69, 74, 83, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 203], "get_number_of_components_in_round": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "get_partial_ciph": [0, 30, 33, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "get_round_from_component_id": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 198, 199], "xor_1_14": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "get_sizes_of_components_by_typ": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "impossible_differential_search": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "relat": [0, 22, 24, 34, 67, 72, 77, 81, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "inputs_bit_s": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 202], "inputs_size_to_dict": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "is_algebraically_secur": [0, 15, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "timeout": [0, 15, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "resist": [0, 15, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "against": [0, 15, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "algebra": [0, 16, 17, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 197], "attack": [0, 15, 69, 78, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "grobner": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "basi": [0, 13, 15, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "comput": [0, 2, 4, 5, 9, 10, 11, 15, 47, 48, 52, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 177, 179, 183, 197], "is_andrx": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "andrx": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "midori_block_ciph": [0, 4, 18, 19, 20, 21, 22, 23, 24, 25, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 180, 181, 183, 186, 187, 188, 191], "midoriblockciph": [0, 4, 18, 19, 20, 21, 22, 23, 24, 25, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 180, 181, 183, 186, 187, 188, 191], "midori": [0, 4, 18, 19, 20, 21, 22, 23, 24, 25, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 183, 191, 195], "is_arx": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "arx": [0, 77, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "is_power_of_2_word_bas": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199], "16": [0, 2, 3, 4, 5, 25, 30, 32, 33, 34, 35, 68, 73, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 186, 187, 188, 190, 191, 192, 194, 205], "xtea_block_ciph": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "xteablockciph": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "is_shift_arx": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "shift": [0, 4, 8, 9, 10, 11, 77, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 195, 203], "xtea": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "is_spn": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "spn": [0, 23, 24, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183], "aes_block_ciph": [0, 4, 15, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 173, 178, 182, 183, 184, 185, 191, 192], "aesblockciph": [0, 4, 15, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 173, 178, 182, 183, 184, 185, 191, 192], "ae": [0, 4, 15, 18, 19, 20, 21, 22, 23, 24, 25, 32, 33, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 173, 178, 182, 183, 184, 185, 191, 192, 195, 197], "make_cipher_id": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 202], "make_file_nam": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "polynomial_system": [0, 15, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "polynomi": [0, 8, 10, 15, 17, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 194, 195, 197], "system": [0, 15, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 83, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "sequenc": [0, 15, 17, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195, 197], "128": [0, 4, 20, 21, 23, 24, 32, 33, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 190, 191], "variabl": [0, 4, 10, 11, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 50, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 194, 195, 197, 205], "polynomial_system_at_round": [0, 15, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "r": [0, 15, 16, 17, 58, 60, 61, 62, 77, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "252": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "288": [0, 15, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 197], "structur": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "termin": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0xab01": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169, 194], "cipher_id": [0, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "cipher_name_i32_o32_r1": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "cipher_number_of_round": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "constant": [0, 9, 57, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 192, 194, 195], "input_bit_s": [0, 4, 11, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199], "print_as_python_dictionari": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194], "python": [0, 2, 3, 5, 14, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 203], "cipher_name_k32_p32_o32_r1": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "cipher_round": [0, 14, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "print_as_python_dictionary_to_fil": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "valid": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 192], "dictionary_exampl": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "py": [0, 52, 69, 78, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 174, 175, 176], "os": [0, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 205], "remov": [0, 25, 35, 52, 68, 73, 82, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 205], "print_evaluation_python_cod": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "implement": [0, 3, 5, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 191, 192, 204, 205], "copi": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "bitstr": [0, 3, 8, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "bitarrai": [0, 3, 8, 9, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "cipher_modul": [0, 1, 2, 3, 4, 5, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 202, 205], "generic_funct": [0, 3, 8, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "def": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "plaintext_output": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "uint": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "length": [0, 3, 8, 85, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 195, 205], "key_output": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "components_io": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "component_input": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 199], "concatenate_0_0": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "select_bit": [0, 3, 8, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "17": [0, 3, 35, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 174, 175, 176, 179, 180, 181, 186, 187, 188, 191, 194, 197, 205], "18": [0, 3, 22, 35, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 191, 194, 205], "19": [0, 3, 24, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 172, 173, 174, 175, 176, 179, 180, 181, 186, 187, 188, 191, 194, 205], "21": [0, 3, 18, 19, 20, 21, 22, 23, 24, 25, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 172, 173, 179, 180, 181, 186, 187, 188, 191, 194, 197, 205], "23": [0, 3, 30, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 172, 173, 177, 179, 180, 181, 186, 187, 188, 191, 194, 205], "24": [0, 1, 3, 15, 30, 62, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 191, 194, 205], "25": [0, 3, 23, 24, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 191, 194, 197, 205], "26": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 191, 194, 197, 205], "27": [0, 3, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 173, 184, 191, 194, 205], "28": [0, 3, 22, 24, 34, 67, 72, 81, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 184, 194, 205], "29": [0, 3, 25, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 171, 184, 194, 205], "30": [0, 1, 3, 15, 24, 25, 58, 60, 61, 62, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 171, 183, 184, 194, 205], "31": [0, 3, 19, 22, 23, 24, 25, 30, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 171, 173, 174, 175, 176, 178, 179, 184, 190, 191, 192, 194, 197, 205], "concatenate_0_0_output": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "intermediate_output_0_1": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "intermediate_output_0_1_output": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "append": [0, 3, 19, 20, 21, 24, 58, 60, 61, 62, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "concatenate_0_2": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "concatenate_0_2_output": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "cipher_output_0_3": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "cipher_output_0_3_output": [0, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "print_evaluation_python_code_to_fil": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "identity_block_cipher_p32_k32_o32_r1": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "print_input_inform": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "tweak": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "vector": [0, 2, 3, 5, 52, 77, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "nonc": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "etc": [0, 2, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "reference_cod": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "remove_key_schedul": [0, 25, 35, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 171, 194], "remove_round_compon": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 199], "round_id": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 198], "remove_round_component_from_id": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 199], "rounds_as_list": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "set_file_nam": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "set_id": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "set_input": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "inputs_ids_list": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "inputs_bit_size_list": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "sort_ciph": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194], "test_against_reference_cod": [0, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "number_of_test": [0, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "test": [0, 3, 5, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 205], "its": [0, 4, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 194, 197], "refer": [0, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "avail": [0, 18, 19, 20, 21, 22, 23, 24, 25, 28, 52, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 195], "test_vector_check": [0, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "list_of_test_vectors_input": [0, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "list_of_test_vectors_output": [0, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "That": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "test_result": [0, 1, 2, 5, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 205], "everi": [0, 30, 33, 65, 66, 67, 68, 69, 77, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 200], "key1": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0x1918111009080100": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "plaintext1": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0x6574694c": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "ciphertext1": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0xa86842f2": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "key2": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "plaintext2": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0x6574694d": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "ciphertext2": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0x2b5f25d6": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "input_list": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "output_list": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0x11111111": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0x1111111111111111": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "0xffffffff": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 200], "fail": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "286331153": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "1229782938247303441": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "4294967295": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "update_input_id_links_from_component_id": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 198], "new_input_id_link": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 198], "zero_correlation_linear_search": [0, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "algebraictest": 1, "cipher": [1, 2, 3, 4, 5, 6, 8, 11, 13, 15, 18, 20, 21, 22, 23, 24, 25, 28, 29, 30, 32, 33, 34, 35, 57, 58, 61, 62, 70, 72, 73, 80, 81, 82, 85, 87, 88, 89, 91, 92, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 163, 164, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 197, 205], "construct": [1, 99, 102, 103, 104, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 163, 164, 197, 204], "instanc": [1, 3, 4, 16, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 95, 99, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 197], "algebraic_test": 1, "toi": [1, 15, 131, 163, 164], "toyspn1": [1, 15, 195], "toyspn": [1, 15], "alg_test": 1, "timeout_in_second": 1, "input_paramet": [1, 205], "toyspn1_p6_k6_o6_r2": 1, "test_nam": [1, 87], "number_of_vari": [1, 34, 35, 77], "42": [1, 15, 194], "number_of_equ": 1, "34": [1, 194], "74": [1, 15, 194], "number_of_monomi": 1, "54": [1, 194], "102": 1, "max_degree_of_equ": 1, "test_pass": 1, "speck_p32_k64_o32_r1": [1, 20, 21], "112": 1, "157": 1, "60": [1, 194], "avalanchetest": [2, 205], "avalanche_probability_vector": 2, "nb_sampl": 2, "probabl": [2, 22, 28, 29, 30, 31, 32, 33, 34, 35, 48, 62, 67, 68, 72, 73, 77, 81, 82, 85, 166, 174, 175, 176, 177, 179, 183], "differ": [2, 5, 28, 69, 77, 78, 85, 197], "consid": [2, 23, 24, 30, 33, 89, 91, 96, 97, 123, 137], "th": [2, 205], "flip": 2, "due": [2, 3], "apv": 2, "j": [2, 18, 19, 20, 21, 22, 23, 24, 25, 174, 175, 176, 192, 197], "after": [2, 34, 35], "when": [2, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 60, 61, 62, 77, 84, 87, 99, 102, 103, 104, 106, 107, 110, 113, 115, 116, 118, 119, 121, 123, 131, 143, 183], "inject": 2, "posit": [2, 5, 8, 9, 10, 11, 28, 85, 101, 192, 194, 199, 200, 205], "estim": 2, "avalanche_test": [2, 205], "100": [2, 5, 22, 25, 28, 29, 30, 31, 32, 33, 34, 35, 62, 155, 156, 166, 174, 175, 176, 177, 179, 183, 197, 205], "number_of_sampl": [2, 5, 88, 205], "avalanche_dependence_uniform_bia": [2, 205], "05": [2, 9, 81], "avalanche_dependence_criterion_threshold": [2, 205], "avalanche_dependence_uniform_criterion_threshold": [2, 205], "avalanche_weight_criterion_threshold": [2, 205], "01": [2, 9, 20, 21, 68, 73], "avalanche_entropy_criterion_threshold": [2, 205], "run_avalanche_depend": [2, 205], "run_avalanche_dependence_uniform": [2, 205], "run_avalanche_weight": [2, 205], "run_avalanche_entropi": [2, 205], "criterion": 2, "float": [2, 5, 9, 85, 205], "should": [2, 8, 10, 34, 35, 47, 52, 74, 85, 88, 192], "It": [2, 35, 48, 53, 77, 84, 192], "bia": [2, 85], "satisfi": [2, 19, 20, 21, 32, 33, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77], "depend": [2, 17], "d": [2, 17, 57, 84, 119, 124, 125, 126, 131, 143, 159, 192, 197, 205], "uniform": 2, "entropi": 2, "add": [2, 23, 24, 29, 30, 32, 33, 34, 35, 77, 194], "avalanche_entropi": 2, "command": [2, 58], "ha": [2, 52, 58, 60, 61, 62, 85, 124, 125, 126, 163, 164, 194, 204], "been": [2, 52, 58, 60, 61, 62, 85, 124, 125, 126], "avalanche_dependence_vector": [2, 205], "compute_criterion_from_avalanche_probability_vector": 2, "all_avalanche_probability_vector": 2, "algorithm": [2, 52, 77, 84, 158, 166, 174, 175, 176, 177, 179, 197], "respect": 2, "If": [2, 8, 11, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 85, 88, 108, 109, 123, 194], "worst": 2, "certain": [2, 18, 19, 20, 21, 22, 23, 24, 25, 62, 79, 81, 82, 199], "close": 2, "threshold": [2, 5], "we": [2, 4, 5, 30, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 123, 192, 205], "sai": 2, "left": [2, 8, 9, 10, 11, 77, 110, 118, 121, 194, 203], "frac": 2, "text": 2, "right": [2, 8, 9, 10, 11, 77, 110, 118, 121, 194, 203], "half": [2, 30, 88], "uncertainti": 2, "about": 2, "whether": [2, 16, 17, 57], "strict": 2, "index_occurr": 2, "avalanche_depend": 2, "diff": 2, "all_apv": 2, "generate_3d_plot": 2, "avalanche_weight_vector": 2, "can": [2, 4, 11, 20, 21, 22, 24, 25, 30, 33, 47, 52, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 79, 81, 82, 85, 111, 124, 125, 126, 131, 158, 183, 203], "plot": [2, 4], "visual": [2, 4, 87], "3d": 2, "modul": [2, 28, 48, 52, 53, 69, 77, 78, 124, 125, 126, 197], "chacha_permut": [2, 131], "chachapermut": [2, 131, 159], "build_code_for_compon": 3, "cipher_code_str": 3, "build_code_for_continuous_diffusion_analysis_compon": 3, "add_verbos": 3, "build_continuous_diffusion_analysis_function_cal": 3, "build_function_cal": 3, "constant_to_bitstr": 3, "val": [3, 11, 57, 169], "output_s": [3, 48, 169, 173], "generate_bit_based_vectorized_python_code_str": 3, "store_intermediate_output": 3, "convert_output_to_byt": [3, 166, 167, 168, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "need": [3, 11, 18, 19, 20, 21, 22, 23, 24, 25, 28, 34, 35, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 79, 81, 82, 83, 85, 123, 183, 195, 205], "orient": 3, "code_gener": 3, "string_python_cod": 3, "split": [3, 8, 9, 122, 123, 192], "generic_functions_vectorized_bit": 3, "generate_byte_based_vectorized_python_code_str": 3, "integers_inputs_and_output": 3, "generic_functions_vectorized_byt": [3, 11], "generate_python_code_str": 3, "chang": 3, "sometim": 3, "nround_0": 3, "concatenate_0_0_input": 3, "cipher_output_0_3_input": 3, "generate_python_code_string_for_continuous_diffusion_analysi": 3, "evaluate_continuous_diffusion_analysi": 3, "get_cipher_output_component_bit_based_c_cod": 3, "list_siz": 3, "string_dictionari": 3, "c_variabl": 3, "get_cipher_output_word_based_c_cod": 3, "intermediate_output_cod": 3, "wordstring_vari": [3, 168, 169, 182, 183, 184, 185, 189, 190], "get_intermediate_output_component_bit_based_c_cod": 3, "get_intermediate_output_word_based_c_cod": 3, "get_number_of_input": 3, "get_padding_component_bit_based_c_cod": 3, "get_rounds_bit_based_c_cod": 3, "get_rounds_word_based_c_cod": 3, "get_word_operation_component_bit_based_c_cod": 3, "get_word_operation_word_based_c_cod": 3, "prepare_input_bit_based_vectorized_python_code_str": 3, "prepare_input_byte_based_vectorized_python_code_str": 3, "bit_siz": [3, 11, 18, 19, 20, 21, 22, 23, 24, 25, 62, 79, 81, 82, 196], "update_intermediate_structur": 3, "ciphercomponentsanalysi": 4, "component_analysis_test": [4, 205], "oper": [4, 8, 9, 10, 11, 22, 25, 58, 60, 61, 62, 65, 66, 67, 68, 85, 122, 123, 166, 167, 171, 173, 175, 176, 178, 179, 182, 185, 191, 192, 195], "components_analysi": 4, "len": [4, 8, 9, 10, 17, 22, 23, 24, 25, 34, 35, 67, 68, 72, 73, 81, 82, 85, 174, 175, 176, 183, 203], "get_all_oper": 4, "which": [4, 8, 13, 22, 23, 24, 25, 30, 33, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 91, 95, 158, 163, 164, 194], "attribut": 4, "studi": 4, "occurr": 4, "same": [4, 48, 117, 163], "underli": 4, "cipher_oper": 4, "sbox": [4, 8, 9, 10, 11, 96, 97, 104, 108, 163, 164, 194, 195], "linear_lay": [4, 8, 9, 104, 144, 194], "xor": [4, 8, 9, 10, 11, 18, 19, 28, 53, 57, 58, 60, 66, 69, 77, 78, 79, 84, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 194, 195, 199], "AND": [4, 8, 10, 11, 84, 166, 177, 179, 194], "modadd": [4, 8, 11, 175, 176, 194, 195], "rotat": [4, 8, 9, 10, 11, 113, 122, 123, 131, 143, 151, 164, 185, 194, 195, 201, 203], "print_component_analysis_as_radar_chart": 4, "spider": 4, "binary_matrix_of_linear_compon": 4, "binari": [4, 8, 9, 10, 29, 30, 57, 85, 105, 192, 194, 197, 200], "matrix": [4, 8, 9, 10, 11, 47, 93, 105, 127, 194, 195], "rot_compon": [4, 112], "rot_1_11": [4, 182, 185], "branch_numb": 4, "branch": [4, 25, 35, 68, 73, 77, 82], "look": [4, 197], "specifi": [4, 8, 9, 13, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 85, 194], "mix_column_compon": [4, 9, 93, 173, 191], "mix_column_1_20": 4, "calculate_weights_for_linear_lay": 4, "calculate_weights_for_mix_column": 4, "field_element_matrix_to_integer_matrix": 4, "convert": [4, 10, 11, 85], "field": [4, 9, 194, 197], "element": [4, 8, 9, 11, 14, 205], "whose": [4, 18, 19, 20, 21, 22, 23, 24, 25, 34, 35, 62, 67, 68, 72, 73, 77, 81, 82, 85, 124, 125, 126], "entri": [4, 48, 194], "instantiate_matrix_over_correct_field": 4, "mc_matrix": 4, "_": [4, 28, 29, 30, 57, 85, 169, 174, 175, 176, 182, 184, 185, 190, 192], "get_inverse_matrix_in_integer_represent": 4, "mix_column_0_20": [4, 173, 191], "dimens": [4, 49], "has_maximal_branch_numb": 4, "twofish_block_ciph": [4, 120], "twofishblockciph": [4, 120], "twofish": [4, 195], "mix_column_0_1": 4, "mix_column_0_19": 4, "skinny_block_ciph": [4, 114, 173, 191], "skinnyblockciph": [4, 114, 173, 191], "skinni": [4, 173, 191, 195, 197], "384": [4, 15, 114, 126, 194], "40": [4, 24, 114, 134, 135, 194], "mix_column_0_31": 4, "polynomial_as_int": 4, "mix_column_0_21": [4, 33, 173, 191], "int_to_poli": [4, 205], "integer_valu": [4, 8, 205], "continuousdiffusionanalysi": 5, "continuous_avalanche_factor": 5, "lambda_valu": 5, "metric": 5, "avalanch": [5, 88, 89, 91, 195], "factor": 5, "definit": [5, 58, 60, 61, 62, 98, 205], "mur2020": [5, 9, 197, 205], "express": 5, "continuous_diffusion_analysi": 5, "speck_ciph": 5, "cda": 5, "001": [5, 205], "continuous_diffusion_factor": 5, "beta_number_of_sampl": 5, "gf_number_sampl": 5, "measur": [5, 85], "gf_2": 5, "long": [5, 22, 24, 25, 34, 35, 52, 68, 73, 74, 82, 83, 85, 104, 172, 180, 181, 183, 186, 187, 188], "time": [5, 18, 19, 20, 21, 22, 23, 24, 25, 58, 60, 61, 62, 77, 85, 104, 194], "diffusion_factor": 5, "continuous_diffusion_test": 5, "continuous_avalanche_factor_number_of_sampl": 5, "threshold_for_avalanche_factor": 5, "continuous_neutral_measure_beta_number_of_sampl": 5, "continuous_neutral_measure_gf_number_sampl": 5, "continuous_diffusion_factor_beta_number_of_sampl": 5, "continuous_diffusion_factor_gf_number_sampl": 5, "is_continuous_avalanche_factor": 5, "is_continuous_neutrality_measur": 5, "is_diffusion_factor": 5, "obtain": [5, 18, 19, 20, 21, 22, 23, 24, 25, 57, 85, 192], "indic": [5, 8, 9, 19, 20, 21, 22, 23, 24, 25], "want": [5, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83], "continuous_neutrality_measur": 5, "A": [5, 10, 11, 85, 111, 124, 125, 183, 192, 194, 197], "e": [5, 28, 29, 30, 34, 35, 50, 69, 77, 78, 84, 85, 100, 104, 125, 126, 163, 192, 194, 197], "g": [5, 28, 69, 78, 85, 104, 124, 126, 192, 197], "continuous_neutrality_measure_for_bit_j": 5, "input_bit": [5, 9, 194], "output_bit": [5, 57], "neutral": 5, "analyz": 5, "50": [5, 194, 197], "200": [5, 22, 23, 24, 25, 183], "number_of_input": [8, 9, 10, 11, 35, 50], "how": [8, 9, 88, 194, 197], "mani": [8, 9, 69, 77, 78, 88, 194], "part": [8, 9, 22, 24, 25, 52, 158, 204], "must": [8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 77, 84, 93, 96, 97, 101, 108, 109, 120, 126], "w": [8, 125, 126, 162, 197], "floor": [8, 192], "input_length": [8, 18, 19, 20, 21, 22, 23, 24, 25, 174, 175, 176], "modsub": [8, 11, 174, 176, 194, 195], "NOT": [8, 10, 11, 23, 24, 178, 194], "OR": [8, 10, 11, 84, 166, 177, 179, 194], "rotation_amount": [8, 9, 10, 11, 113], "neg": [8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 62, 67, 68, 72, 73, 81, 82, 194, 203], "happen": 8, "amount": [8, 9, 10, 11, 77, 99, 102, 103, 104, 106, 107, 110, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 131, 138, 143, 190], "b": [8, 9, 16, 57, 76, 77, 84, 111, 124, 125, 126, 131, 139, 140, 141, 143, 159, 192, 197], "0x8": [8, 9], "bin": [8, 200], "1000": [8, 18, 19, 20, 21, 22, 23, 24, 25], "0100": 8, "0010": [8, 194], "rotate_by_variable_amount": [8, 194], "input_s": [8, 9, 10, 11, 48], "rotation_direct": [8, 9], "direct": [8, 9, 13, 194, 195], "rotate_boolean_funct": 8, "boolpolyr": 8, "ring": [8, 15, 195, 197], "shift_amount": [8, 9, 10, 11], "1111": [8, 194], "0111": 8, "1100": [8, 22, 25], "shift_by_variable_amount": [8, 194], "shift_direct": [8, 9, 10, 11], "sigma": [8, 194, 195], "1101": 8, "theta_keccak": 8, "perform": [8, 14, 28, 58, 60, 61, 62, 69, 77, 84, 164, 166, 174, 175, 176, 177, 179, 192, 194, 197, 203], "mix": [8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 119, 191, 194, 195], "layer": [8, 10, 11, 104, 108, 109, 173, 180, 181, 186, 187, 188, 191, 194, 195], "keccak": [8, 194, 195], "0xf1258f7940e1dde784d5ccf933c0478ad598261ea65aa9eebd1547306f80494d8b284e056253d057ff97a42d7f8e6fd490fee5a0a44647c48c5bda0cd6192e76ad30a6f71b19059c30935ab7d08ffc64eb5aa93f2317d635a9a6e6260d71210381a57c16dbcf555f43b831cd0347c82601f22f1a11a5569f05e5635a21d9ae6164befef28cc970f2613670957bc46611b87c5a554fd00ecb8c3ee88a1ccf32c8940c7922ae3a26141841f924a2c509e416f53526e70465c275f644e97f30a13beaf1ff7b5ceca249": 8, "hex": [8, 10, 11, 158, 163, 164, 200], "09b84e4804496b9b7c480dc87768f1f62d05e72fe2f21f92458886012b28ff3173b58f3426fb662b6be4933769b0bcec048dd2bab27894fc1828ed16c027fd4e394391ed0d27d6a4a4e06dadc6b12f5cfd95713beec720a9bf693e22c0a1d79f976aa412161fa3c35577e9c9ce973eba173df71edc75a0038f8853e756dc0031eed3ce4ffbccdea2eb5b40280cc1c84132116ae838d5a09b0653d8376bca9c988c89ff979aa0f7a600c47f91965fd8560e70b393d39eb4706d73c25c4baa7089f27479ce687673fb": 8, "theta_xoodoo": 8, "xoodoo": [8, 163, 164, 194, 195], "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef": 8, "0101100100": 8, "xor_boolean_funct": 8, "add_pad": 8, "number_of_row": 8, "res_vector": 8, "concatenate_bool_func": 8, "constant_bool_func": 8, "convert_polynomial_to_binary_matrix_given_polynomial_modulu": 8, "calcul": [8, 183], "quotientr": 8, "irreduc": 8, "input_matrix": 8, "input_vector": 8, "quotient": 8, "convert_x_to_binary_matrix_given_polynomial_modulu": 8, "fsr_binari": 8, "registers_info": [8, 194], "number_of_clock": 8, "register_bit_length": 8, "register_polynomi": [8, 194], "clock_polynomi": [8, 194], "option": [8, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77], "regist": [8, 194], "monomi": [8, 194], "present": [8, 29, 30, 35, 65, 70, 172, 173, 180, 181, 183, 186, 187, 188, 191, 194, 195, 197], "For": [8, 50, 65, 66, 67, 68, 69, 74, 78, 88, 158, 173, 191, 192, 194], "x0": [8, 17, 194], "x1": [8, 17, 192, 194], "x2": [8, 17, 194], "x3": [8, 17, 192, 194], "loop": [8, 24], "fsr": [8, 194, 195], "would": [8, 192, 194], "fsr_word": 8, "bits_inside_word": 8, "By": [8, 22, 24, 25, 34, 35, 67, 68, 72, 73, 81, 82, 138, 194], "int_to_byte_arrai": 8, "bit_length": [8, 88], "0s": [8, 10, 11], "1s": [8, 10, 11], "equal": [8, 10, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 84, 85, 93, 96, 97, 101, 108, 109, 120, 123, 126, 183, 195, 205], "merge_bit": 8, "mix_column_gener": 8, "dimension": 8, "mix_column_generalized_bool_func": 8, "pad": [8, 11, 85], "lookup_t": [8, 9], "output_len": 8, "sbox_bool_func": 8, "bit_posit": [8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 108, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196], "set_from_hex_str": 8, "hex_str": 8, "transform_gf2nmatrix_to_binmatrix": 8, "gf2nmatrix": 8, "equival": [8, 47, 52, 77, 84], "and_continuous_diffusion_analysi": 9, "input_lst": 9, "real": [9, 205], "constant_continuous_diffusion_analysi": 9, "number_of_output": 9, "linear_layer_continuous_diffusion_analysi": 9, "linear_matrix": 9, "mix_column_generalized_continuous_diffusion_analysi": 9, "mix_column_matrix": 9, "sbox_dictionari": 9, "mix_column": [9, 11, 18, 19, 20, 21, 22, 23, 24, 25, 106, 173, 191, 194], "precomput": [9, 104, 195], "generic_functions_continuous_diffusion_analysi": 9, "lookup_table_2": 9, "0x00": 9, "0x02": 9, "0x04": 9, "0x06": 9, "0x08": 9, "0x0a": 9, "0x0c": 9, "0x0e": 9, "0x10": 9, "0x12": 9, "0x14": 9, "0x16": 9, "0x18": 9, "0x1a": 9, "0x1c": 9, "0x1e": 9, "0x20": 9, "0x22": 9, "0x24": 9, "0x26": 9, "0x28": 9, "0x2a": 9, "0x2c": 9, "0x2e": 9, "0x30": 9, "0x32": 9, "0x34": 9, "0x36": 9, "0x38": 9, "0x3a": 9, "0x3c": 9, "0x3e": [9, 163], "0x40": 9, "0x42": 9, "0x44": 9, "0x46": 9, "0x48": 9, "0x4a": 9, "0x4c": 9, "0x4e": 9, "0x50": 9, "0x52": 9, "0x54": 9, "0x56": 9, "0x58": 9, "0x5a": 9, "0x5c": 9, "0x5e": 9, "0x60": 9, "0x62": 9, "0x64": 9, "0x66": 9, "0x68": 9, "0x6a": 9, "0x6c": [9, 163], "0x6e": 9, "0x70": 9, "0x72": 9, "0x74": 9, "0x76": 9, "0x78": 9, "0x7a": 9, "0x7c": 9, "0x7e": 9, "0x80": 9, "0x82": 9, "0x84": 9, "0x86": 9, "0x88": 9, "0x8a": 9, "0x8c": 9, "0x8e": 9, "0x90": 9, "0x92": 9, "0x94": 9, "0x96": 9, "0x98": 9, "0x9a": 9, "0x9c": 9, "0x9e": 9, "0xa0": 9, "0xa2": 9, "0xa4": 9, "0xa6": 9, "0xa8": 9, "0xaa": 9, "0xac": 9, "0xae": 9, "0xb0": 9, "0xb2": 9, "0xb4": 9, "0xb6": 9, "0xb8": 9, "0xba": 9, "0xbc": 9, "0xbe": 9, "0xc0": 9, "0xc2": 9, "0xc4": 9, "0xc6": 9, "0xc8": 9, "0xca": 9, "0xcc": 9, "0xce": 9, "0xd0": 9, "0xd2": 9, "0xd4": 9, "0xd6": 9, "0xd8": 9, "0xda": 9, "0xdc": 9, "0xde": 9, "0xe0": 9, "0xe2": 9, "0xe4": 9, "0xe6": 9, "0xe8": 9, "0xea": 9, "0xec": 9, "0xee": 9, "0xf0": 9, "0xf2": 9, "0xf4": 9, "0xf6": 9, "0xf8": 9, "0xfa": 9, "0xfc": 9, "0xfe": [9, 163], "0x1b": 9, "0x19": 9, "0x1f": 9, "0x1d": [9, 164], "0x13": 9, "0x11": 9, "0x17": 9, "0x15": 9, "0x0b": 9, "0x09": 9, "0x0f": 9, "0x0d": 9, "0x03": 9, "0x01": [9, 164], "0x07": 9, "0x05": 9, "0x3b": 9, "0x39": 9, "0x3f": [9, 163, 164], "0x3d": 9, "0x33": 9, "0x31": 9, "0x37": 9, "0x35": 9, "0x2b": 9, "0x29": 9, "0x2f": 9, "0x2d": 9, "0x23": 9, "0x21": 9, "0x27": 9, "0x25": 9, "0x5b": 9, "0x59": 9, "0x5f": 9, "0x5d": 9, "0x53": 9, "0x51": 9, "0x57": 9, "0x55": 9, "0x4b": 9, "0x49": 9, "0x4f": 9, "0x4d": 9, "0x43": 9, "0x41": 9, "0x47": 9, "0x45": 9, "0x7b": 9, "0x79": 9, "0x7f": 9, "0x7d": 9, "0x73": 9, "0x71": 9, "0x77": 9, "0x75": 9, "0x6b": 9, "0x69": 9, "0x6f": 9, "0x6d": 9, "0x63": 9, "0x61": 9, "0x67": 9, "0x65": 9, "0x9b": 9, "0x99": 9, "0x9f": 9, "0x9d": 9, "0x93": 9, "0x91": 9, "0x97": 9, "0x95": 9, "0x8b": 9, "0x89": 9, "0x8f": 9, "0x8d": 9, "0x83": 9, "0x81": 9, "0x87": 9, "0x85": 9, "0xbb": 9, "0xb9": 9, "0xbf": 9, "0xbd": 9, "0xb3": 9, "0xb1": 9, "0xb7": 9, "0xb5": 9, "0xab": 9, "0xa9": 9, "0xaf": 9, "0xad": 9, "0xa3": 9, "0xa1": 9, "0xa7": 9, "0xa5": 9, "0xdb": 9, "0xd9": 9, "0xdf": 9, "0xdd": 9, "0xd3": 9, "0xd1": 9, "0xd7": 9, "0xd5": 9, "0xcb": 9, "0xc9": 9, "0xcf": 9, "0xcd": 9, "0xc3": 9, "0xc1": 9, "0xc7": 9, "0xc5": 9, "0xfb": 9, "0xf9": 9, "0xff": [9, 163], "0xfd": 9, "0xf3": 9, "0xf1": 9, "0xf7": 9, "0xf5": 9, "0xeb": 9, "0xe9": 9, "0xef": 9, "0xed": 9, "0xe3": 9, "0xe1": 9, "0xe7": 9, "0xe5": 9, "lookup_table_3": 9, "0x0": [9, 85, 132, 133], "0x3": 9, "0x6": 9, "0x5": 9, "0xc": 9, "0xa": 9, "0x9": 9, "0xb": [9, 158, 163], "0xd": [9, 158], "0xe": 9, "0x7": 9, "0x4": 9, "0x1": 9, "0x2": 9, "evaluated_y_list_2": 9, "minus1_power_x_s_2": 9, "compute_sbox_precomput": 9, "evaluated_y_list_3": 9, "minus1_power_x_s_3": 9, "evaluated_boolean_funct": 9, "minus1_power_x_t": 9, "2256000000000004e": 9, "modadd_continuous_diffusion_analysi": 9, "modular": [9, 10, 77, 84, 174, 175, 195], "addit": [9, 10, 17, 23, 24, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 84, 169, 174, 175, 176, 197], "modadd_continuous_diffusion_analysis_two_word": 9, "modsub_continuous_diffusion_analysi": 9, "substract": [9, 174, 175, 176], "not_continuous_diffusion_analysi": 9, "or_continuous_diffusion_analysi": 9, "rotate_by_variable_amount_continuous_diffusion_analysi": 9, "rotate_continuous_diffusion_analysi": 9, "sbox_continuous_diffusion_analysi": 9, "evaluated_y_list": 9, "minus1_power_x_": 9, "output_lst": [9, 205], "0100000000000000011102230245": 9, "3949999999999999938937733645": 9, "595000000000000004996003611": 9, "shift_by_variable_amount_continuous_diffusion_analysi": 9, "_input": 9, "02": [9, 20, 21], "004": 9, "44658816949": 9, "shift_continuous_diffusion_analysi": 9, "shit": 9, "sigma_continuous_diffusion_analysi": 9, "xor_continuous_diffusion_analysi": 9, "xor_continuous_diffusion_analysis_two_word": 9, "sbox_lookup_t": 9, "extend": [9, 197], "y": [9, 16, 17, 35, 77, 84, 124, 126, 183, 192, 197, 205], "f": [9, 17, 58, 60, 61, 62, 84, 113, 124, 126, 160, 183, 197, 205], "theorem": 9, "also": [9, 28, 29, 30, 31, 32, 33, 34, 35, 77, 104, 166, 177, 179, 205], "y_i": 9, "create_lookup_table_by_matrix": 9, "irreducible_polynomial_int_repr": 9, "degre": 9, "create_lookup_table_for_finite_field_el": 9, "creat": [9, 13, 20, 21, 22, 23, 24, 25, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 81, 82, 85, 95, 98, 105, 194, 204], "lookup": [9, 163, 164], "tabl": [9, 10, 11, 23, 24, 30, 35, 48, 50, 57, 77, 163, 164, 166, 173, 177, 179, 183, 191, 192, 197], "finit": [9, 197], "extended_and_bit": 9, "extended_left_rotation_by_variable_amount": 9, "rotation_amount_lst": 9, "extended_left_shift_by_variable_amount": 9, "shift_amount_lst": 9, "extended_not_bit": 9, "extended_one_left_rotation_iter": 9, "rotation_stag": 9, "extended_one_left_shift_iter": 9, "shift_stag": 9, "extended_one_right_rotation_iter": 9, "extended_one_right_shift_iter": 9, "extended_right_rotation_by_variable_amount": 9, "extended_right_shift_by_variable_amount": 9, "extended_two_bit_multiplex": 9, "get_mix_column_precomput": 9, "get_sbox_precomput": 9, "sbox_compon": [9, 183], "select_bits_continuous_diffusion_analysi": 9, "bit_vector_and": 10, "matric": [10, 11, 104, 108, 109, 173, 191, 195], "ANDed": [10, 11], "per": [10, 11, 104], "xore": [10, 11], "togeth": [10, 58, 60, 61, 62, 85, 204], "bit_vector_concat": 10, "concaten": [10, 194, 195], "bit_vector_modadd": 10, "bit_vector_modsub": 10, "subtract": [10, 11, 17, 175], "bit_vector_not": 10, "arrai": [10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 88, 166, 167, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "bit_vector_or": 10, "ORed": [10, 11], "bit_vector_rot": 10, "bit_vector_sbox": 10, "bit_vector_shift": 10, "bit_vector_shift_by_variable_amount": 10, "bit_vector_xor": 10, "bit_vector_linear_lay": 10, "bit_vector_mix_column": 10, "mul_tabl": [10, 11], "mixcolumn": [10, 173, 191, 195], "give": [10, 11], "bit_vector_mix_column_poly0": 10, "special": [10, 11], "case": [10, 11, 52, 192], "bit_vector_print_as_hex_valu": 10, "debug": [10, 11], "displai": [10, 11, 87], "purpos": [10, 11, 52, 98], "bit_vector_select_word": 10, "extract": [10, 52, 166, 174, 175, 176, 177, 179, 183], "bit_vector_to_integ": 10, "arr": 10, "unsign": [10, 11], "print_component_info": 10, "component_typ": [10, 165], "byte_vector_and": 11, "byte_vector_modadd": 11, "byte_vector_modsub": 11, "byte_vector_not": 11, "negat": [11, 65, 66, 67, 68, 69, 84], "byte_vector_or": 11, "byte_vector_rot": 11, "bitwis": [11, 32, 33, 166, 167, 171, 178, 182, 184, 185, 195, 200], "byte_vector_sbox": 11, "byte_vector_shift": 11, "shift_smount": 11, "byte_vector_shift_by_variable_amount": 11, "byte_vector_xor": 11, "byte_vector_is_consecut": 11, "l": [11, 28, 84, 117, 120, 172, 180, 181, 186, 187, 188, 197, 203], "consecut": 11, "revers": [11, 104, 194, 195], "byte_vector_linear_lay": 11, "byte_vector_mix_column": 11, "byte_vector_mix_column_poly0": 11, "poli": [11, 183, 194], "byte_vector_print_as_hex_valu": 11, "byte_vector_select_all_word": 11, "unformated_input": 11, "real_bit": 11, "real_input": 11, "words_per_input": 11, "actual_inputs_bit": 11, "pars": 11, "unformatted_input": 11, "involv": [11, 192], "map": [11, 104, 195], "reserv": 11, "cipher_inputs_to_evaluate_vectorized_input": 11, "api": 11, "produc": [11, 158], "evaluate_vectorized_outputs_to_integ": 11, "evaluate_vectorized_output": 11, "generate_formatted_input": 11, "po": 11, "get_number_of_bytes_needed_for_bit_s": 11, "get_number_of_consecutive_bit": 11, "start": [11, 22, 24, 25, 34, 35, 67, 68, 72, 73, 81, 82], "decreas": 11, "integer_array_to_evaluate_vectorized_input": 11, "accept": 11, "call": [11, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83], "onc": [11, 85], "create_networkx_graph_from_input_id": 13, "deriv": 13, "split_cipher_graph_into_top_bottom": 13, "two": [13, 23, 24, 50, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 84, 85, 88, 123, 158, 166, 167, 171, 174, 175, 176, 177, 179, 192, 194, 197], "sub": [13, 17], "These": 13, "term": 13, "top": [13, 131, 143], "bottom": 13, "form": [13, 17, 77, 84, 200], "predecessor": 13, "convers": 13, "descend": 13, "subgraph": 13, "add_bit_to_bit_list": 14, "bit_list": 14, "add_new_component_to_list": 14, "component_list": [14, 29, 30, 32, 33], "all_input_bits_avail": 14, "available_bit": 14, "all_output_bits_avail": 14, "all_output_updated_bits_avail": 14, "are_equal_compon": 14, "component1": [14, 23, 24], "component2": [14, 23, 24], "are_there_enough_available_inputs_to_evaluate_compon": 14, "all_equivalent_bit": 14, "key_schedule_compon": 14, "are_there_enough_available_inputs_to_perform_invers": 14, "note": [14, 34, 35, 65, 66, 67, 68, 77, 117, 197], "assum": 14, "are_these_bits_avail": 14, "bits_list": 14, "cipher_find_compon": 14, "component_input_bit": 14, "component_invers": 14, "actual": 14, "component_output_bit": 14, "compute_input_id_links_and_input_bit_positions_for_inverse_component_from_available_output_compon": 14, "available_output_compon": 14, "compute_input_id_links_and_input_bit_positions_for_inverse_component_from_input_compon": 14, "delete_orphan_link": 14, "orphan": 14, "equivalent_bits_in_common": 14, "bits_of_an_output_compon": 14, "component_bit": 14, "evaluated_compon": 14, "key_schedule_component_id": 14, "find_correct_ord": 14, "id1": 14, "list1": 14, "id2": 14, "list2": 14, "find_correct_order_for_invers": 14, "find_input_id_link_bits_equival": 14, "inverse_compon": 14, "get_all_bit_nam": 14, "get_all_components_with_the_same_input_id_link_and_input_bit_posit": 14, "get_all_equivalent_bit": 14, "get_available_output_compon": 14, "return_index": 14, "get_cipher_compon": 14, "get_equivalent_input_bit_from_output_bit": 14, "potential_unwanted_compon": 14, "base_compon": 14, "get_key_schedule_component_id": 14, "get_most_recent_intermediate_output": 14, "target_link": 14, "get_output_compon": 14, "get_relative_posit": 14, "target_bit_posit": 14, "is_bit_adjacent_to_list_of_bit": 14, "bit_nam": 14, "list_of_bit_nam": 14, "is_bit_contained_in": 14, "is_intersection_of_input_id_links_nul": 14, "is_output_bits_updated_equivalent_to_input_bit": 14, "output_bits_updated_list": 14, "input_bits_list": 14, "is_possibly_invertible_compon": 14, "order_input_id_links_for_modadd": 14, "remove_components_from_round": 14, "sort_cipher_graph": 14, "sort": [14, 194], "wai": [14, 35, 192, 194], "befor": [14, 104, 194], "tii": 14, "graph_represent": [14, 115, 120, 126, 138], "creator": 14, "graphrepresentationcr": 14, "gr": 14, "cipher_python_dictionari": 14, "identity_block_cipher_cr": 14, "sorted_ciph": 14, "sort_input_id_links_and_input_bit_posit": 14, "topological_sort": 14, "round_list": 14, "topolog": 14, "update_available_bits_with_component_input_bit": 14, "update_available_bits_with_component_output_bit": 14, "update_input_links_from_round": 14, "removed_compon": 14, "update_output_bit": 14, "algebraicmodel": [15, 166, 169, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "connection_polynomi": 15, "connect": [15, 197], "equat": [15, 197], "algebraic_model": [15, 166, 169, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "plaintext_y0": [15, 58, 60, 61, 62], "sbox_0_0_x0": [15, 183], "plaintext_y1": [15, 58, 60, 61, 62], "sbox_0_0_x1": [15, 183], "plaintext_y2": [15, 58, 60, 61, 62], "sbox_0_0_x2": [15, 183], "plaintext_y21": 15, "sbox_0_5_x1": 15, "plaintext_y22": 15, "sbox_0_5_x2": 15, "plaintext_y23": 15, "sbox_0_5_x3": 15, "connection_polynomials_at_round": 15, "groebner": 15, "nvar": 15, "96": 15, "228": [15, 155, 156, 197], "144": 15, "192": [15, 30, 103, 108, 109, 117], "state_s": [15, 87, 93, 127], "174": 15, "104": 15, "tea_block_ciph": [15, 65, 66, 67, 68, 69, 70, 71, 72, 73, 118, 169, 174, 175, 176, 184], "teablockciph": [15, 65, 66, 67, 68, 69, 70, 71, 72, 73, 118, 169, 174, 175, 176, 184], "tea": [15, 65, 66, 67, 68, 69, 70, 71, 72, 73, 169, 174, 175, 176, 184, 195], "gift_permut": [15, 134, 178, 179], "giftpermut": [15, 134, 178, 179], "gift": [15, 178, 179, 195], "448": 15, "640": [15, 148, 149, 150, 155, 156], "method_call_flag": 15, "boolean_polynomial_r": [15, 16], "is_boolean_polynomial_r": [15, 16], "ngen": 15, "432": 15, "var_nam": 15, "booleanpolynomialr": [16, 17], "z": [16, 17, 35, 50, 77, 124, 126, 197], "polynomialr": 16, "gf": [16, 17, 197], "equality_polynomi": 17, "y0": 17, "y1": 17, "y2": 17, "mod_addition_polynomi": 17, "mod": [17, 172, 173, 174, 175, 176, 178, 180, 181, 186, 187, 188, 191, 192], "carri": [17, 77, 84], "provid": 17, "normal": 17, "coordin": 17, "tupl": [17, 29, 30, 57, 77, 131, 143, 183, 192, 203], "lx": 17, "ly": [17, 22, 24, 25, 67, 68, 72, 73, 81, 82], "lz": 17, "lc": 17, "v": [17, 57, 77, 160, 192, 197], "f0": 17, "c0": [17, 77], "z0": 17, "c1": [17, 77], "z1": 17, "c2": 17, "z2": 17, "c3": 17, "y3": 17, "z3": [17, 79, 85], "c4": 17, "x4": [17, 194], "y4": 17, "z4": 17, "c5": 17, "x5": [17, 194], "y5": 17, "z5": 17, "c6": 17, "x6": [17, 194], "y6": 17, "z6": 17, "c7": 17, "x7": [17, 194], "y7": 17, "z7": 17, "f1": 17, "vectorspac": 17, "vx": 17, "random_el": 17, "vy": 17, "sub_var": 17, "updat": [17, 104], "f0s_elim": 17, "eliminate_linear_vari": 17, "lambda": [17, 85], "lm": 17, "tail": 17, "str": [17, 29, 30, 32, 33, 57, 58, 60, 61, 62, 65, 70, 84], "nx": 17, "ny": 17, "zz": [17, 57], "nz": 17, "bz": 17, "digit": [17, 57, 197], "padto": [17, 57], "constant_coeffici": 17, "mod_binary_operation_polynomi": 17, "is_addit": 17, "either": [17, 47, 52, 85, 108, 109, 183], "argument": 17, "mod_subtraction_polynomi": 17, "cpmodel": [18, 19, 20, 21, 22, 23, 24, 25, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 191, 192], "add_solution_to_components_valu": [18, 19, 20, 21, 22, 23, 24, 25], "component_solut": [18, 19, 20, 21, 22, 23, 24, 25], "components_valu": [18, 19, 20, 21, 22, 23, 24, 25, 78, 79, 80, 81, 82, 85], "output_to_pars": [18, 19, 20, 21, 22, 23, 24, 25, 78], "solution_numb": [18, 19, 20, 21, 22, 23, 24, 25], "add_solutions_from_components_valu": [18, 19, 20, 21, 22, 23, 24, 25], "memori": [18, 19, 20, 21, 22, 23, 24, 25, 85], "model_typ": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 55, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85], "solve_tim": [18, 19, 20, 21, 22, 23, 24, 25, 85], "solver_nam": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85], "solver_output": [18, 19, 20, 21, 22, 23, 24, 25], "total_weight": [18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85], "build_mix_column_truncated_t": [18, 19, 20, 21, 22, 23, 24, 25], "coupl": [18, 19, 20, 21, 22, 23, 24, 25, 192], "cp_model": [18, 19, 20, 21, 22, 23, 24, 25, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 191, 192], "93": [18, 19, 20, 21, 22, 23, 24, 25, 81, 173, 191], "mix_column_truncated_table_mix_column_0_21": [18, 19, 20, 21, 22, 23, 24, 25, 173, 191], "array2d": [18, 19, 20, 21, 22, 23, 24, 25, 173, 183, 191, 192], "calculate_bit_posit": [18, 19, 20, 21, 22, 23, 24, 25], "calculate_bit_valu": [18, 19, 20, 21, 22, 23, 24, 25], "bit_valu": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85], "calculate_input_bit_posit": [18, 19, 20, 21, 22, 23, 24, 25, 173], "word_index": [18, 19, 20, 21, 22, 23, 24, 25, 122, 123, 173], "input_name_1": [18, 19, 20, 21, 22, 23, 24, 25, 173], "input_name_2": [18, 19, 20, 21, 22, 23, 24, 25, 173], "new_input_bit_positions_1": [18, 19, 20, 21, 22, 23, 24, 25, 173], "new_input_bit_positions_2": [18, 19, 20, 21, 22, 23, 24, 25, 173], "find_possible_number_of_active_sbox": [18, 19, 20, 21, 22, 23, 24, 25], "activ": [18, 19, 20, 21, 22, 25, 195], "box": [18, 19, 20, 21, 22, 23, 24, 25, 47, 52, 137, 163, 164, 166, 177, 179, 183, 197], "abl": [18, 19, 20, 21, 22, 23, 24, 25, 69, 78], "fix_variables_value_constraint": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "fixed_vari": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 55, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85], "step": [18, 19, 20, 21, 22, 23, 24, 25, 115, 123, 124, 167, 169, 171, 173, 178, 182, 183, 184, 185, 191, 192, 203], "full_model": [18, 19, 20, 21, 22, 23, 24, 25], "constraint": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 85, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 195, 197], "specif": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 81, 82, 85, 87, 117, 123], "constraint_typ": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 81, 82, 85], "not_equ": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85], "753": [18, 19, 20, 21, 22, 23, 24, 25], "util": [18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 52, 65, 66, 67, 68, 70, 71, 72, 73, 78, 79, 80, 81, 82, 158, 183, 200, 203], "set_fixed_vari": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85], "integer_to_bit_list": [18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 35, 65, 66, 70, 71, 78, 79, 80, 81, 82, 85], "float_and_lat_valu": [18, 19, 20, 21, 22, 23, 24, 25], "format_component_valu": [18, 19, 20, 21, 22, 23, 24, 25], "get_command_for_solver_process": [18, 19, 20, 21, 22, 23, 24, 25], "input_file_path": [18, 19, 20, 21, 22, 23, 24, 25], "num_of_processor": [18, 19, 20, 21, 22, 23, 24, 25], "timelimit": [18, 19, 20, 21, 22, 23, 24, 25], "get_mix_column_all_input": [18, 19, 20, 21, 22, 23, 24, 25], "input_bit_positions_1": [18, 19, 20, 21, 22, 23, 24, 25], "input_id_link_1": [18, 19, 20, 21, 22, 23, 24, 25], "numb_of_inp_1": [18, 19, 20, 21, 22, 23, 24, 25], "get_total_weight": [18, 19, 20, 21, 22, 23, 24, 25], "string_total_weight": [18, 19, 20, 21, 22, 23, 24, 25], "initialise_model": [18, 19, 20, 21, 22, 23, 24, 25], "model_constraint": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "retriev": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "traceback": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "most": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "recent": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "last": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 89, 91, 95, 194], "valueerror": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "No": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "parse_solver_inform": [18, 19, 20, 21, 22, 23, 24, 25], "truncat": [18, 19, 21, 22, 23, 24, 25, 30, 33, 53, 57, 77, 85, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 195], "set_component_solution_valu": [18, 19, 20, 21, 22, 23, 24, 25], "solv": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 47, 52, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 85, 197], "chuf": [18, 19, 20, 21, 22, 23, 24, 25], "xor_differential_one_solut": [18, 19, 20, 21, 22, 23, 24, 25], "xor_linear_one_solut": [18, 19, 20, 21, 22, 23, 24, 25], "deterministic_truncated_xor_differenti": [18, 19, 20, 21, 22, 23, 24, 25], "deterministic_truncated_xor_differential_one_solut": [18, 19, 20, 21, 22, 23, 24, 25], "impossible_xor_differenti": [18, 19, 20, 21, 22, 23, 24, 25], "gecod": [18, 19, 20, 21, 22, 23, 24, 25], "coin": [18, 19, 20, 21, 22, 23, 24, 25], "bc": [18, 19, 20, 21, 22, 23, 24, 25], "processor": [18, 19, 20, 21, 22, 23, 24, 25, 197], "limit": [18, 19, 20, 21, 22, 23, 24, 25, 62, 197], "cp_xor_differential_trail_search_model": [18, 19, 20, 21, 22, 23, 24, 25], "cpxordifferentialtrailsearchmodel": [18, 19, 20, 21, 22, 23, 24, 25], "littl": [18, 19, 20, 21, 22, 23, 24, 25, 85, 200, 205], "build_xor_differential_trail_model": [18, 19, 20, 21, 22, 23, 24, 25, 34, 58, 60, 61, 62, 66, 67, 68, 69, 71, 72, 73, 81], "speck_p32_k64_o32_r4": [18, 19, 20, 21, 22, 23, 24, 25, 68, 73, 78, 79, 80, 81, 82, 85], "weight_constraint": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "total": [18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 62, 66, 67, 68, 69, 71, 72, 73, 78, 79, 80, 81, 82, 85], "non": [18, 19, 20, 21, 22, 23, 24, 25, 31, 34, 62, 67, 72, 81, 82, 85, 195, 203, 205], "trail": [18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 85, 87, 166, 183, 184, 195, 197], "cpciphermodel": 19, "build_cipher_model": [19, 31, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79], "binary_valu": [19, 62, 79, 81, 82], "cp_cipher_model": 19, "evaluate_model": 19, "fixed_valu": [19, 20, 21, 22, 24, 25, 29, 30, 34, 35, 62, 65, 66, 67, 68, 70, 71, 72, 73, 79, 81, 82, 85], "final_constraint": 19, "input_constraint": 19, "var": [19, 20, 21, 22, 23, 24, 25, 166, 167, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "cipher_output_3_12": [19, 22], "cpdeterministictruncatedxordifferentialmodel": [20, 21], "build_deterministic_truncated_xor_differential_trail_model": [20, 21, 61], "standard": [20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 79, 80, 81, 82, 84, 85, 122, 123, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 195], "cp_deterministic_truncated_xor_differential_model": [20, 21], "build_inverse_deterministic_truncated_xor_differential_trail_model": [20, 21], "final_deterministic_truncated_xor_differential_constraint": [20, 21], "final_impossible_constraint": [20, 21], "find_all_deterministic_truncated_xor_differential_trail": [20, 21], "speck_p32_k64_o32_r3": [20, 21], "cipher_output_2_12": [20, 21, 29, 30, 34, 35, 65, 70, 167, 171], "22222222222222202222222222222222": [20, 21], "memory_megabyt": [20, 21, 68, 73, 78, 79, 80, 81, 82, 85], "solving_time_second": [20, 21, 68, 73, 78, 79, 80, 81, 82, 85], "002": [20, 21, 205], "find_one_deterministic_truncated_xor_differential_trail": [20, 21], "cipher_output_0_6": [20, 21], "22222222222222212222222222222220": [20, 21], "intermediate_output_0_5": [20, 21], "0000000000000000": [20, 21], "0000000000000000000000000000000000000000000000000000000000000000": [20, 21], "modadd_0_1": [20, 21, 174, 175, 176, 192, 194], "2222222222222221": [20, 21], "11111111011111111111111111111111": [20, 21], "rot_0_0": [20, 21, 28, 116, 132, 136, 137, 174, 175, 176, 182, 185, 194], "1111111111111110": [20, 21], "rot_0_3": [20, 21], "1111111111111111": [20, 21], "xor_0_2": [20, 21, 192, 194], "xor_0_4": [20, 21, 194], "2222222222222220": [20, 21], "input_deterministic_truncated_xor_differential_constraint": [20, 21], "127": [20, 21, 24, 30], "count": [20, 21, 197], "input_wordwise_deterministic_truncated_xor_differential_constraint": [20, 21, 32, 33], "key_act": [20, 21, 192], "255": [20, 21, 111], "key_valu": [20, 21, 192], "cipher_output_1_32_valu": [20, 21], "elseif": [20, 21, 57], "els": [20, 21, 57, 84, 166, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 186, 187, 188, 191, 192], "endif": [20, 21, 166, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 186, 187, 188, 191, 192], "cipher_output_1_32_act": [20, 21], "output_constraint": [20, 21], "declar": [20, 21, 22, 23, 24, 25, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "both": [20, 21, 24, 52, 117, 167, 171, 197], "output_compon": [20, 21, 167, 171], "48": [20, 21, 29, 30, 65, 70, 112, 158, 192, 194], "63": [20, 21, 22, 25, 30, 178, 179, 184, 192, 194], "output_inverse_constraint": [20, 21], "intermediate_output_0_5_invers": [20, 21], "cpimpossiblexordifferentialmodel": 21, "determinist": [21, 30, 33, 57, 77, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 195], "build_impossible_xor_differential_trail_model": 21, "middle_round": [21, 30, 33], "extract_incompatibilities_from_output": 21, "extract_key_schedul": 21, "find_all_impossible_xor_differential_trail": 21, "find_one_impossible_xor_differential_trail": 21, "input_impossible_xor_differential_constraint": 21, "cpxordifferentialmodel": [22, 24], "cp_xor_differential_model": [22, 24], "build_xor_differential_trail_model_templ": [22, 24], "final_xor_differential_constraint": [22, 24], "int_search": [22, 24, 25], "p": [22, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 160, 162, 166, 174, 175, 176, 177, 179, 183, 197], "smallest": [22, 24, 25, 163, 164], "indomain_min": [22, 24, 25], "complet": [22, 24, 25, 65, 66, 67, 68, 69, 70, 71, 72, 73], "minim": [22, 23, 24, 25, 47, 48, 52, 53, 195], "find_all_xor_differential_trails_with_fixed_weight": [22, 24, 34, 62, 67, 72, 81], "fixed_weight": [22, 24, 25, 34, 35, 62, 67, 68, 72, 73, 81, 82], "have": [22, 24, 25, 34, 35, 65, 67, 68, 70, 72, 73, 77, 81, 82, 183], "find_all_xor_differential_trails_with_weight_at_most": [22, 24, 34, 62, 67, 72, 81], "min_weight": [22, 24, 25, 34, 35, 62, 67, 68, 72, 73, 81, 82], "max_weight": [22, 24, 25, 34, 35, 62, 67, 68, 72, 73, 81, 82], "interv": [22, 24, 25, 67, 68, 72, 73, 81, 82], "stop": [22, 24, 25, 67, 68, 72, 73, 81, 82], "find_differential_weight": [22, 24], "find_lowest_weight_xor_differential_trail": [22, 24, 34, 62, 67, 69, 72, 81], "lowest": [22, 24, 25, 29, 30, 32, 33, 34, 35, 62, 65, 67, 68, 70, 72, 73, 81, 82], "There": [22, 24, 25, 67, 68, 72, 73, 81, 82], "could": [22, 24, 25, 67, 68, 72, 73, 81, 82], "than": [22, 24, 25, 34, 35, 62, 67, 68, 72, 73, 77, 81, 82, 96, 97, 108, 109, 120, 166, 167, 171, 177, 179, 192, 194, 205], "In": [22, 24, 25, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 81, 82, 83, 104, 123, 124, 158, 194, 197], "run": [22, 24, 25, 34, 35, 67, 68, 72, 73, 74, 81, 82, 83, 89, 91, 123, 195], "building_tim": [22, 24], "007165431976318359": 22, "cipher_output_4_12": 22, "850a9520": 22, "find_one_xor_differential_trail": [22, 24, 34, 67, 72, 81], "speck_p32_k64_o32_r2": 22, "cipher_output_1_12": [22, 167], "ffff0000": 22, "find_one_xor_differential_trail_with_fixed_weight": [22, 24, 34, 67, 72, 81], "get_word_operation_xor_differential_constraint": [22, 24], "new_constraint": [22, 24, 25], "input_xor_differential_constraint": [22, 24], "900": [22, 25], "400": [22, 25, 183], "1300": [22, 25], "600": [22, 25, 183], "1500": [22, 25], "800": [22, 25], "300": [22, 25, 183], "1200": [22, 25], "500": [22, 25, 183], "1400": [22, 25], "700": [22, 25], "sum": [22, 23, 24, 25, 30, 48, 58, 60, 61, 62, 174, 175, 176, 179, 192], "update_sbox_ddt_valid_prob": [22, 24], "valid_prob": [22, 24, 25, 183], "and_xor_differential_probability_ddt": 22, "numadd": [22, 23, 25, 166, 192], "ddt": [22, 48, 166], "addenda": [22, 23, 25, 166, 174, 175, 176, 192], "simon_block_ciph": [22, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 113, 166, 167, 171, 177, 179, 192], "simonblockciph": [22, 25, 28, 29, 30, 31, 32, 33, 34, 35, 57, 113, 166, 167, 171, 177, 179, 192], "simon": [22, 25, 28, 29, 30, 31, 32, 33, 34, 35, 166, 167, 171, 177, 179, 192, 195, 197], "update_and_or_ddt_valid_prob": 22, "and_already_ad": [22, 25], "cp_declar": [22, 25, 174, 175, 176, 183], "cpxordifferentialnumberofactivesboxesmodel": [23, 24], "add_additional_xor_constraint": [23, 24], "nmax": [23, 24], "repetit": [23, 24], "reduc": [23, 24, 57, 192, 197], "inconsist": [23, 24], "minimum": [23, 24, 48, 197], "addend": [23, 24], "new": [23, 24, 65, 66, 67, 68, 77, 194, 197, 203], "procedur": [23, 24], "repeat": [23, 24, 57], "cp_xor_differential_number_of_active_sboxes_model": [23, 24], "build_xor_differential_trail_first_step_model": [23, 24], "list_of_xor_compon": [23, 24, 173], "188": [23, 24], "possible_sbox": [23, 24], "create_xor_compon": [23, 24, 93, 193], "old_xor_compon": [23, 24], "deepcopi": [23, 24], "xor_component1": [23, 24], "xor_component2": [23, 24], "final_xor_differential_first_step_constraint": [23, 24], "number_of_active_sbox": [23, 24], "table_of_solutions_length": [23, 24], "show": [23, 24, 28, 85, 87, 195], "table_of_solution_length": [23, 24], "get_new_xor_input_links_and_posit": [23, 24], "all_input": [23, 24, 192], "new_numb_of_inp": [23, 24], "get_xor_all_input": [23, 24], "input_xor_differential_first_step_constraint": [23, 24], "xor_xor_differential_first_step_constraint": [23, 24], "xor_compon": [23, 24, 192], "xor_truncated_table_2": [23, 24, 192], "xor_0_31": [23, 24, 167, 171, 192], "build_xor_truncated_t": 23, "xor_truncated_table_3": [23, 192], "cpxordifferentialfixingnumberofactivesboxesmodel": 24, "build_xor_differential_trail_second_step_model": 24, "cp_xor_differential_trail_search_fixing_number_of_active_sboxes_model": 24, "cpxordifferentialtrailsearchfixingnumberofactivesboxesmodel": 24, "first_step_solver_nam": 24, "second_step_solver_nam": 24, "choco": 24, "224": [24, 126], "aes_block_cipher_k128_p128_o128_r2": 24, "cipher_output_1_32": 24, "ffffffffffffffffffffffffffffffff": 24, "building_time_second": [24, 66, 68, 71, 73, 81, 82, 85], "993147134780884": 24, "generate_table_of_solut": 24, "minizinc": [24, 167, 169, 171, 174, 175, 176, 182, 184, 185, 190, 192], "first_step_solut": 24, "solve_model": 24, "xor_differential_first_step": 24, "get_solutions_dictionaries_with_build_tim": 24, "build_tim": 24, "word_sbox_0_1": 24, "word_sbox_0_2": 24, "word_sbox_0_3": 24, "word_sbox_0_4": 24, "word_sbox_0_5": 24, "word_sbox_0_6": 24, "word_sbox_0_7": 24, "word_sbox_0_8": 24, "word_sbox_0_9": 24, "word_sbox_0_10": 24, "word_sbox_0_11": 24, "word_sbox_0_12": 24, "word_sbox_0_13": 24, "word_sbox_0_14": 24, "word_sbox_0_15": 24, "word_sbox_0_16": 24, "word_sbox_0_26": 24, "word_sbox_0_27": 24, "word_sbox_0_28": 24, "word_sbox_0_29": 24, "word_sbox_1_0": 24, "word_sbox_1_1": 24, "word_sbox_1_2": 24, "word_sbox_1_3": 24, "word_sbox_1_4": 24, "word_sbox_1_5": 24, "word_sbox_1_6": 24, "word_sbox_1_7": 24, "word_sbox_1_8": 24, "word_sbox_1_9": 24, "word_sbox_1_10": 24, "word_sbox_1_11": 24, "word_sbox_1_12": 24, "word_sbox_1_13": 24, "word_sbox_1_14": 24, "word_sbox_1_15": 24, "word_sbox_1_21": 24, "word_sbox_1_22": 24, "word_sbox_1_23": 24, "word_sbox_1_24": 24, "aes_block_cipher_k128_p128_o128_r2_table_of_solut": 24, "solve_full_two_steps_xor_differential_model": 24, "7489726543426514": 24, "xor_differential_first_step_find_all_solut": 24, "xor_0_0": [24, 106, 107, 115, 138, 140, 141, 153, 154, 183, 194, 199], "19837307929992676": 24, "transform_first_step_model": 24, "attempt": 24, "active_sbox": 24, "ordin": 24, "while": 24, "cpxorlinearmodel": [25, 171], "and_xor_linear_probability_lat": 25, "lat": [25, 166], "cp_xor_linear_model": [25, 171], "branch_xor_linear_constraint": [25, 35, 68, 73, 82], "plaintext_o": 25, "rot_0_0_i": [25, 182, 185], "xor_3_10_o": 25, "cipher_output_3_12_i": 25, "build_xor_linear_trail_model": [25, 35, 68, 73, 82], "final_xor_linear_constraint": 25, "find_all_xor_linear_trails_with_fixed_weight": [25, 35, 68, 73, 82, 85], "schedul": [25, 35, 68, 73, 82, 104, 125, 126, 163, 164], "find_all_xor_linear_trails_with_weight_at_most": [25, 35, 68, 73, 82], "73": [25, 35, 68, 73, 82, 194, 197], "find_lowest_weight_xor_linear_trail": [25, 35, 68, 73, 82, 85], "thei": [25, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 81, 82, 83, 183], "find_one_xor_linear_trail": [25, 35, 68, 73, 82], "find_one_xor_linear_trail_with_fixed_weight": [25, 35, 68, 73, 82], "fix_variables_value_xor_linear_constraint": [25, 35, 68, 73, 82], "get_lat_valu": 25, "lat_tabl": 25, "get_word_operation_final_xor_linear_constraint": 25, "input_xor_linear_constraint": 25, "key_o": 25, "1600": [25, 174, 175, 176, 194], "update_and_or_lat_valid_prob": 25, "update_sbox_lat_valid_prob": 25, "weight_xor_linear_constraint": [25, 35, 68, 73, 82], "target": [28, 65, 66, 67, 68, 69, 78], "kind": 28, "associ": [28, 29, 30, 204], "cryptanalysi": [28, 52, 197], "user": 28, "follow": [28, 50, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 117, 124, 125, 126, 158, 192, 195, 203], "some": [28, 32, 33, 47, 52, 69, 77, 78, 85, 192], "instal": [28, 48, 53, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 83], "integr": 28, "beforehand": 28, "through": 28, "glpk": [28, 29, 30, 31, 32, 33, 34, 35], "poor": 28, "gurobi": 28, "better": 28, "you": [28, 34, 35, 58, 74, 83, 123, 195], "licens": 28, "cbc": [28, 88], "cvxopt": 28, "cplex": 28, "ppl": 28, "choic": 28, "milpmodel": [28, 29, 30, 31, 32, 33, 34, 35, 57, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "n_window_heurist": [28, 29, 30, 31, 32, 33, 34, 35], "binary_vari": [28, 29, 30, 31, 32, 33, 34, 35, 166, 174, 175, 176, 177, 179, 183], "milp_model": [28, 29, 30, 31, 32, 33, 34, 35, 55, 57, 85, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "init_model_in_sage_milp_class": [28, 29, 30, 31, 32, 33, 34, 35, 57, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "cipher_output_1_8": [28, 29, 30, 31, 32, 33, 34, 35, 167, 171], "x_0": [28, 29, 30, 31, 32, 33, 34, 35, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "x_1": [28, 29, 30, 31, 32, 33, 34, 35, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "x_2": [28, 29, 30, 31, 32, 33, 34, 35, 77, 167, 169, 171, 173, 174, 175, 176, 182, 183, 184, 185, 191, 192], "x_3": [28, 29, 30, 31, 32, 33, 34, 35, 77, 84, 169, 173, 174, 175, 176, 183, 184, 191, 192], "x_4": [28, 29, 30, 31, 32, 33, 34, 35, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "x_5": [28, 29, 30, 31, 32, 33, 34, 35, 173, 182, 183, 184, 185, 191, 192], "x_6": [28, 29, 30, 31, 32, 33, 34, 35, 172, 173, 180, 181, 183, 184, 186, 187, 188, 191, 192], "x_7": [28, 29, 30, 31, 32, 33, 34, 35, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "x_8": [28, 29, 30, 31, 32, 33, 34, 35, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "x_9": [28, 29, 30, 31, 32, 33, 34, 35, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "x_10": [28, 29, 30, 31, 32, 33, 34, 35, 172, 180, 181, 182, 183, 184, 185, 186, 187, 188], "x_11": [28, 29, 30, 31, 32, 33, 34, 35, 172, 173, 180, 181, 183, 184, 186, 187, 188, 191], "_model": [28, 29, 30, 31, 32, 33, 34, 35, 57], "program": [28, 29, 30, 31, 32, 33, 34, 35, 57, 197], "integer_vari": [28, 29, 30, 31, 32, 33, 34, 35, 166, 174, 175, 176, 177, 179, 183], "intermediate_output_nam": [28, 29, 30, 31, 32, 33, 34, 35], "non_linear_component_id": [28, 29, 30, 31, 32, 33, 34, 35, 183], "external_solver_nam": [28, 29, 30, 31, 32, 33, 34, 35], "intern": [28, 29, 30, 31, 32, 33, 34, 35, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 127, 197], "sagemath": [28, 29, 30, 31, 32, 33, 34, 35, 195], "extern": [28, 29, 30, 31, 32, 33, 34, 35, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 83], "write": [28, 29, 30, 31, 32, 33, 34, 35, 58, 60, 61, 62, 85], "lp": [28, 29, 30, 31, 32, 33, 34, 35], "outsid": [28, 29, 30, 31, 32, 33, 34, 35], "milp_xor_differential_model": [28, 29, 30, 31, 32, 33, 34, 35], "milpxordifferentialmodel": [28, 29, 30, 31, 32, 33, 34, 35], "add_constraints_to_build_in_sage_milp_class": [28, 29, 30, 31, 32, 33, 34, 35], "weight_precis": [28, 29, 30, 31, 32, 33, 34, 35, 183], "get_independent_input_output_vari": 28, "those": [28, 65, 66, 67, 68, 69, 70, 71, 72, 73, 105], "msb": [28, 57, 69, 85, 192], "xor_1_10": 28, "xor_1_10_0_i": 28, "xor_1_10_1_i": 28, "xor_1_10_30_i": 28, "xor_1_10_31_i": 28, "xor_1_10_0_o": 28, "xor_1_10_1_o": 28, "xor_1_10_14_o": 28, "xor_1_10_15_o": 28, "get_input_output_vari": 28, "plaintext_0": [28, 66, 67, 68, 69, 71, 72, 73, 78, 79, 80, 81, 82], "plaintext_1": [28, 66, 67, 68, 69, 71, 72, 73, 78, 79, 80, 81, 82], "plaintext_2": [28, 66, 67, 68, 69, 71, 72, 73, 78, 79, 80, 81, 82], "plaintext_13": 28, "plaintext_14": 28, "plaintext_15": 28, "rot_0_0_0": [28, 174, 175, 176, 182, 185], "rot_0_0_1": [28, 174, 175, 176, 182, 185], "rot_0_0_2": 28, "rot_0_0_13": [28, 174], "rot_0_0_14": [28, 174, 182, 185], "rot_0_0_15": [28, 174, 175, 176, 182, 185], "milpbitwisedeterministictruncatedxordifferentialmodel": [29, 30, 166, 167, 169, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "_model_constraint": [29, 30, 32, 33, 34, 35], "them": [29, 30, 32, 33, 34, 35, 58, 77, 204, 205], "milp_bitwise_deterministic_truncated_xor_differential_model": [29, 30, 166, 167, 169, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "build_bitwise_deterministic_truncated_xor_differential_trail_model": [29, 30, 65, 70], "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail": [29, 30, 65, 70], "unknown": [29, 30, 32, 33, 65, 70], "dict": [29, 30, 32, 33, 34, 65, 70, 85, 166, 174, 175, 176, 178, 182, 183, 185], "see": [29, 30, 32, 33, 35, 65, 69, 70, 77, 78, 166, 177, 179, 183, 194], "get_single_key_scenario_format_for_fixed_valu": [29, 30, 32, 33, 65, 70, 85], "find_one_bitwise_deterministic_truncated_xor_differential_trail": [29, 30, 65, 70], "out": [29, 30, 65, 70, 77, 87, 166, 174, 175, 176, 192], "present_block_ciph": [29, 30, 65, 70, 107, 172, 173, 180, 181, 183, 186, 187, 188, 191, 194], "presentblockciph": [29, 30, 65, 70, 107, 172, 173, 180, 181, 183, 186, 187, 188, 191, 194], "80": [29, 30, 65, 70, 88, 107, 125, 145, 146, 147, 157, 161, 183, 194, 197], "fix_variables_value_bitwise_deterministic_truncated_xor_differential_constraint": [29, 30], "model_vari": [29, 30, 32, 33, 55], "mipvari": [29, 30, 32, 33, 166, 174, 175, 176, 177, 179, 183], "x_13": [29, 30, 34, 35, 172, 173, 180, 181, 183, 184, 186, 187, 188, 191], "x_14": [29, 30, 34, 35, 169, 173, 182, 183, 184, 185, 191], "x_15": [29, 30, 34, 35, 166, 169, 173, 174, 175, 176, 177, 179, 182, 183, 184, 185, 191], "link_binary_tuples_to_integer_vari": [29, 30], "id_tupl": [29, 30], "link": [29, 30, 53, 62, 183, 194, 197, 203], "pattern": [29, 30, 192, 195], "mean": [29, 30, 88], "input_id": [29, 30, 108, 194], "output_id": [29, 30, 174], "_get_input_output_vari": [29, 30], "input_id_tupl": [29, 30], "output_id_tupl": [29, 30], "_get_input_output_variables_tupl": [29, 30], "x_96": [29, 30, 174, 175, 176], "x_97": [29, 30, 174, 175, 176], "x_142": [29, 30], "x_92": [29, 30], "x_93": [29, 30], "x_143": [29, 30], "x_94": [29, 30, 174, 175, 176, 192], "x_95": [29, 30, 174, 175, 176, 192], "trunc_binvar": [29, 30], "milpbitwiseimpossiblexordifferentialmodel": 30, "add_constraints_to_build_fully_automatic_model_in_sage_milp_class": [30, 33], "include_all_compon": [30, 33, 55], "sourc": [30, 33, 52], "incompat": [30, 33], "onli": [30, 31, 33, 48, 50, 58, 60, 61, 62, 65, 66, 67, 68, 69, 83, 158, 192], "milp_bitwise_impossible_xor_differential_model": 30, "occur": [30, 33], "add_constraints_to_build_in_sage_milp_class_with_chosen_incompatible_compon": [30, 33], "rot_1_6": [30, 194], "build_bitwise_impossible_xor_differential_trail_model": 30, "_forward_ciph": [30, 33], "backward_ciph": [30, 33], "_cipher": [30, 33, 85], "_backward_ciph": [30, 33], "_backward": [30, 33], "find_one_bitwise_impossible_xor_differential_trail": 30, "http": [30, 32, 33, 35, 48, 49, 50, 52, 53, 57, 104, 105, 139, 158, 166, 173, 174, 175, 176, 177, 179, 183, 191, 197, 203], "eprint": [30, 35, 158, 166, 174, 175, 176, 177, 179, 183, 197], "iacr": [30, 32, 33, 35, 48, 49, 50, 158, 166, 173, 174, 175, 176, 177, 179, 183, 191, 197], "org": [30, 32, 33, 35, 48, 49, 50, 158, 166, 173, 174, 175, 176, 177, 179, 183, 191, 197, 203], "2014": [30, 35, 166, 177, 179, 183, 197], "761": 30, "pdf": [30, 32, 33, 35, 139, 158, 166, 174, 175, 176, 177, 179, 183, 197], "cipher_output_10_13": 30, "72": [30, 88, 119, 194], "47": [30, 88, 194], "cipher_output_11_12": 30, "2016": [30, 35, 174, 175, 176, 197], "490": 30, "comment": [30, 58, 60, 61, 62], "inconsistent_var": 30, "full": 30, "ascon_sbox_sigma_permut": [30, 130, 172, 173, 180, 181, 186, 187, 188, 191], "asconsboxsigmapermut": [30, 130, 172, 173, 180, 181, 186, 187, 188, 191], "ascon": [30, 172, 173, 178, 180, 181, 183, 186, 187, 188, 191, 194, 195], "320": 30, "191": 30, "p1": [30, 116], "intermediate_output_0_71": 30, "p2": [30, 116], "intermediate_output_1_71": 30, "p3": 30, "intermediate_output_2_71": 30, "p5": 30, "cipher_output_4_71": 30, "find_one_bitwise_impossible_xor_differential_trail_with_chosen_incompatible_compon": 30, "intermediate_output_5_12": 30, "sbox_3_56": 30, "find_one_bitwise_impossible_xor_differential_trail_with_fully_automatic_model": 30, "key_backward": 30, "ciphertext_backward": 30, "cipher_output_10_13_backward": 30, "milpciphermodel": 31, "cannot": 31, "done": 31, "inequ": [31, 57, 77, 84, 174, 175, 176, 183, 192, 195], "milp_cipher_model": 31, "milpwordwisedeterministictruncatedxordifferentialmodel": [32, 33, 167, 169, 171, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "fixed_bit": [32, 33], "fixed_word": [32, 33], "milp_wordwise_deterministic_truncated_xor_differential_model": [32, 33, 167, 169, 171, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "build_wordwise_deterministic_truncated_xor_differential_trail_model": [32, 33], "cipher_list": [32, 33, 194], "find_lowest_varied_patterns_wordwise_deterministic_truncated_xor_differential_trail": [32, 33], "find_one_wordwise_deterministic_truncated_xor_differential_trail": [32, 33], "statu": [32, 33, 65, 66, 67, 68, 69, 70, 71, 72, 73], "fix_variables_value_wordwise_deterministic_truncated_xor_differential_constraint": [32, 33], "exist": [32, 33], "intermediate_output_0_35": [32, 33, 167, 171], "tosc": [32, 33, 48, 49, 50, 173, 183, 191], "php": [32, 33, 48, 49, 50, 173, 183, 191], "articl": [32, 33, 48, 49, 50, 173, 183, 191], "view": [32, 33, 48, 49, 50, 173, 183, 191], "8702": [32, 33, 49, 50, 173, 183, 191], "8294": [32, 33, 49, 50, 173, 183, 191], "github": [32, 33, 52, 104, 105, 174, 175, 176], "com": [32, 33, 52, 53, 57, 104, 105, 174, 175, 176, 183, 197], "td": [32, 33], "mdla": [32, 33], "auxiliary_materi": [32, 33], "blob": [32, 33, 104, 105, 174, 175, 176], "master": [32, 33, 104, 105, 120, 158, 174, 175, 176], "supplementari": [32, 33], "materi": [32, 33], "xor_0_36_11": [32, 33], "x_1571": [32, 33], "xor_0_36_12": [32, 33], "x_1572": [32, 33], "cipher_output_1_32_126": [32, 33, 167, 171], "x_3078": [32, 33], "cipher_output_1_32_127": [32, 33, 167, 171], "x_3079": [32, 33], "x_2918": [32, 33], "x_3060": [32, 33], "x_3061": [32, 33], "x_2919": [32, 33], "x_3070": [32, 33], "x_3071": [32, 33], "trunc_wordvar": [32, 33], "milpwordwiseimpossiblexordifferentialmodel": 33, "milp_wordwise_impossible_xor_differential_model": 33, "add_constraints_to_build_in_sage_milp_class_with_fixed_compon": 33, "intermediate_output_0_37": 33, "build_wordwise_impossible_xor_differential_trail_model": 33, "find_one_wordwise_impossible_xor_differential_trail": 33, "find_one_wordwise_impossible_xor_differential_trail_with_chosen_compon": 33, "find_one_wordwise_impossible_xor_differential_trail_with_fully_automatic_model": 33, "mip": [34, 35, 57, 176], "468": 34, "exclude_variables_value_constraint": 34, "ensur": [34, 35], "least": [34, 35, 67, 72, 77, 85], "x_12": [34, 35, 166, 172, 180, 181, 183, 184, 186, 187, 188], "convert_solver_solution_to_dictionari": [34, 35, 85], "greater": [34, 35, 62, 108, 109], "lower": [34, 35, 62, 67, 68, 72, 73, 81, 82], "end": [34, 35, 50, 65, 66, 67, 68, 69, 70, 71, 72, 73, 85, 194], "reach": [34, 35], "maximum": [34, 35], "conveni": [34, 35], "upper": [34, 35, 62], "bound": [34, 35, 58, 60, 61, 62, 205], "necessarili": [34, 35], "is_single_kei": 34, "milpxorlinearmodel": [35, 85, 171], "logarithm": [35, 68, 73, 82], "milp_xor_linear_model": [35, 85, 171], "1018": 35, "dummi": [35, 57, 77], "x_316": 35, "x_317": 35, "x_318": 35, "x_319": 35, "exclude_variables_value_xor_linear_constraint": 35, "verifi": 35, "2019": [35, 197], "019": 35, "407": [35, 174, 175, 176, 197], "747": [35, 183], "page": [35, 195, 197], "973": [35, 166, 177, 179], "To": [35, 195], "reproduc": 35, "0x03805224": 35, "0x00200000": 35, "update_xor_linear_constraints_for_more_than_two_bit": 35, "input_var": [35, 166, 172, 174, 175, 176, 177, 179, 183, 192], "output_var": [35, 166, 172, 174, 175, 176, 177, 179, 183, 192], "and_lat": 47, "and_inequ": 47, "convex_hul": [47, 52], "valid_point": [47, 53, 57, 183], "convex": [47, 52], "hull": [47, 52], "behaviour": [47, 52], "polyhedron": [47, 52, 183], "cutting_off_greedi": [47, 52], "cut": [47, 52], "off": [47, 52], "h": [47, 52, 124, 126, 197], "cutting_off_milp": [47, 52], "number_of_ineq": [47, 52], "necessari": [47, 52], "variant": [47, 52], "might": [47, 52], "faster": [47, 52, 192], "becaus": [47, 52, 77, 124, 125, 126], "later": [47, 52], "do": [47, 52, 65, 66, 67, 68, 77], "itself": [47, 52, 100], "logic": [48, 53, 195], "espresso": [48, 53, 57, 183, 192], "alreadi": [48, 53, 183], "docker": [48, 53, 74, 83], "delete_dictionary_that_contains_inequalities_for_large_sbox": [48, 183], "generate_espresso_input": [48, 57], "valid_transformations_matrix": 48, "generate_product_of_sum_from_espresso": [48, 57], "get_dictionary_that_contains_inequalities_for_large_sbox": 48, "describ": [48, 89, 91, 131, 166, 174, 175, 176, 177, 179], "805": [48, 183], "759": [48, 183], "separ": [48, 65, 66, 67, 68, 69], "so": [48, 123, 183], "pb": 48, "product": [48, 57], "seen": [48, 57, 124, 125, 126, 166, 177, 179, 192], "update_dictionary_that_contains_inequalities_for_large_sbox": 48, "delete_dictionary_that_contains_wordwise_truncated_mds_inequ": 49, "generate_valid_points_for_truncated_mds_matrix": 49, "max_pattern_valu": [49, 50], "output_dictionary_that_contains_wordwise_truncated_mds_inequ": 49, "update_dictionary_that_contains_wordwise_truncated_mds_inequ": 49, "wordsiz": [49, 50], "delete_dictionary_that_contains_wordwise_truncated_input_inequ": 50, "delete_dictionary_that_contains_wordwise_truncated_xor_inequ": 50, "generate_valid_points_for_xor_between_n_input_word": 50, "number_of_word": [50, 99, 103], "between": [50, 52, 57, 77, 84, 120, 192, 195, 197, 205], "o": [50, 197], "truth": 50, "000000": 50, "000101": 50, "001010": 50, "001111": 50, "010001": 50, "010100": 50, "010101": 50, "011011": 50, "011111": 50, "100010": 50, "100111": 50, "101011": 50, "101111": 50, "110011": 50, "110111": 50, "111011": 50, "111111": 50, "pla": 50, "data": [50, 88, 106, 107, 112, 113, 115, 119, 195, 201, 204], "generate_valid_points_input_word": 50, "u": [50, 77, 197, 205], "get_valid_points_for_wordwise_xor": 50, "delta_in_1": 50, "zeta_in_1": 50, "delta_in_2": 50, "zeta_in_2": 50, "output_dictionary_that_contains_wordwise_truncated_input_inequ": 50, "output_dictionary_that_contains_wordwise_truncated_xor_inequ": 50, "update_dictionary_that_contains_wordwise_truncated_input_inequ": 50, "update_dictionary_that_contains_wordwise_truncated_xor_inequalities_between_n_input": 50, "update_dictionary_that_contains_xor_inequalities_for_specific_wordwise_matrix": 50, "mat": [50, 51, 105], "delete_dictionary_that_contains_xor_inequ": 51, "generate_all_possible_points_with_n_bit": 51, "number_of_bit": 51, "generate_impossible_points_for_xor_between_n_input_bit": 51, "output_dictionary_that_contains_xor_inequ": 51, "update_dictionary_that_contains_xor_inequalities_between_n_input_bit": 51, "number_of_input_bit": [51, 192], "update_dictionary_that_contains_xor_inequalities_for_specific_matrix": 51, "gist": 52, "pfasant": 52, "3a2f087e74cd0f2a10853c8a5d036d85": 52, "infeas": 52, "generate_inequalities_for_large_sbox": [52, 183], "care": [52, 69], "small": [52, 163, 164, 183, 195, 197], "larg": [52, 183, 195], "henc": 52, "decid": [52, 77], "keep": [52, 194], "comparison": [52, 197], "big_endian": 52, "choos": 52, "transit": [52, 57, 183], "dict_polyhedron": 52, "delete_dictionary_that_contains_inequalities_for_small_sbox": 52, "get_dictionary_that_contains_inequalities_for_small_sbox": 52, "sbox_inequ": 52, "greedi": 52, "crypto": [52, 183, 197], "sbox_pres": 52, "generate_sbox_inequalities_for_trail_search": 52, "sbox_ineq": 52, "to_bit": 52, "update_dictionary_that_contains_inequalities_for_small_sbox": 52, "notion": 53, "discuss": 53, "springer": [53, 183, 197], "chapter": [53, 183, 197], "1007": [53, 183, 197], "978": [53, 183, 197], "031": [53, 183], "26553": [53, 183], "2_3": [53, 183], "delete_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bit": 53, "generate_dict_product_of_sum_from_espresso": 53, "get_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bit": 53, "get_transitions_for_single_output_bit": 53, "update_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bit": 53, "fix_variables_value_deterministic_truncated_xor_differential_constraint": 55, "generate_all_incompatibility_constraints_for_fully_automatic_model": 55, "x_class": [55, 166, 167, 169, 171, 172, 173, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "generate_incompatiblity_constraints_for_compon": 55, "backward_compon": 55, "get_word_oper": [56, 75], "delete_espresso_dictionari": 57, "file_path": [57, 58, 60, 61, 62, 85, 202], "espresso_pos_to_constraint": 57, "espresso_inequ": 57, "milp_and": 57, "a_and_b": 57, "iff": 57, "milp_els": 57, "var_if": 57, "else_constraint": 57, "big_m": 57, "statement": 57, "milp_eq": 57, "a_eq_b": 57, "_integer_vari": 57, "_binary_vari": 57, "add_constraint": 57, "milp_generalized_and": 57, "var_list": 57, "a_0": 57, "a_1": 57, "a_n": 57, "a_i": 57, "generalized_and": 57, "general_and": 57, "milp_generalized_xor": 57, "input_var_list": 57, "a_": 57, "milp_geq": 57, "a_geq_b": 57, "milp_great": 57, "a_greater_b": 57, "milp_if_elif_els": 57, "var_if_list": 57, "then_constraints_list": 57, "elif": [57, 192], "then_constraint": 57, "appli": [57, 104, 192, 197], "stackoverflow": 57, "question": 57, "41009196": 57, "milp_if_then": 57, "milp_if_then_els": 57, "milp_leq": 57, "a_leq_b": 57, "milp_less": 57, "a_less_b": 57, "set_max": 57, "set_min": 57, "milp_neq": 57, "a_neq_b": 57, "milp_or": 57, "a_or_b": 57, "milp_xor": 57, "milp_xor_trunc": 57, "input_1": [57, 174, 175, 176], "input_2": [57, 174, 175, 176], "encod": [57, 192], "v0": [57, 192], "v1": [57, 192], "line": [57, 58], "itertool": 57, "i1": [57, 77], "i2": 57, "wa": [57, 98, 192], "bit_transit": 57, "join": [57, 85], "milp_xor_truncated_wordwis": 57, "91": [57, 190], "output_espresso_dictionari": 57, "minizincmodel": [58, 60, 61, 62, 182, 184, 185, 190, 192], "window_size_list": [58, 60, 61, 62], "probability_weight_per_round": [58, 60, 61, 62], "sat_or_milp": [58, 60, 61, 62, 174, 175, 176], "With": 58, "build_": 58, "And": [58, 77, 84, 195, 205], "add_com": [58, 60, 61, 62], "begin": [58, 60, 61, 62], "add_constraint_from_str": [58, 60, 61, 62], "str_constraint": [58, 60, 61, 62], "add_output_com": [58, 60, 61, 62], "minizinc_model": [58, 60, 61, 62, 169, 174, 175, 176, 182, 184, 185, 190, 192], "minizinc_xor_differential_model": [58, 60, 61, 62, 169, 174, 175, 176], "minizincxordifferentialmodel": [58, 60, 61, 62, 169, 174, 175, 176], "raiden_block_ciph": [58, 60, 61, 62, 110, 175, 190], "raidenblockciph": [58, 60, 61, 62, 110, 175, 190], "raiden": [58, 60, 61, 62, 175, 190, 195], "key_y0": [58, 60, 61, 62], "plaintext_y3": [58, 60, 61, 62], "rais": [58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "keyerror": [58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "except": [58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 205], "output_probability_per_round": [58, 60, 61, 62], "timeout_in_seconds_": [58, 60, 61, 62], "processes_": [58, 60, 61, 62], "nr_solutions_": [58, 60, 61, 62], "random_seed_": [58, 60, 61, 62], "all_solutions_": [58, 60, 61, 62], "intermediate_solutions_": [58, 60, 61, 62], "free_search_": [58, 60, 61, 62], "optimisation_level_": [58, 60, 61, 62], "pass": [58, 60, 61, 62], "str_model_path": [58, 60, 61, 62], "str_solver": [58, 60, 61, 62], "interrupt": [58, 60, 61, 62], "process": [58, 60, 61, 62, 204], "support": [58, 60, 61, 62, 166, 167, 171, 177, 179], "request": [58, 60, 61, 62], "satisfact": [58, 60, 61, 62], "seed": [58, 60, 61, 62], "dure": [58, 60, 61, 62], "optimis": [58, 60, 61, 62], "free_search": [58, 60, 61, 62], "allow": [58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77], "ignor": [58, 60, 61, 62], "within": [58, 60, 61, 62, 194], "compil": [58, 60, 61, 62], "level": [58, 60, 61, 62, 67, 72, 197], "disabl": [58, 60, 61, 62], "flatten": [58, 60, 61, 62], "twice": [58, 60, 61, 62], "improv": [58, 60, 61, 62, 197], "decis": [58, 60, 61, 62], "root": [58, 60, 61, 62], "node": [58, 60, 61, 62], "probe": [58, 60, 61, 62], "bit_positions_kei": [58, 60, 61, 62], "statist": [58, 60, 61, 62], "nsolut": [58, 60, 61, 62], "write_minizinc_model_to_fil": [58, 60, 61, 62], "prefix": [58, 60, 61, 62, 89, 91], "insid": [58, 60, 61, 62, 85, 124, 194], "path": [58, 60, 61, 62, 85, 205], "minizincciphermodel": 60, "minizinc_cipher_model": 60, "minizincdeterministictruncatedxordifferentialmodel": 61, "minizinc_deterministic_truncated_xor_differential_model": 61, "include_word_operations_mzn_fil": 62, "build_all_xor_differential_trails_with_fixed_weight": 62, "entir": [62, 85], "build_lowest_weight_xor_differential_trail_model": 62, "build_lowest_xor_differential_trails_with_at_most_weight": 62, "fot": 62, "he": 62, "connect_round": 62, "rot_0_0_x0": 62, "constraint_permutation_and_key_schedule_separately_by_input_s": 62, "extend_model_constraint": 62, "extend_vari": 62, "dictioanri": 62, "disctionari": 62, "find_min_of_max_xor_differential_between_permutation_and_key_schedul": 62, "get_model_constraint": 62, "get_probability_vars_from_key_schedul": 62, "get_probability_vars_from_permut": 62, "get_vari": 62, "init_constraint": 62, "objective_gener": 62, "strategi": 62, "min_all_prob": 62, "static": [62, 101], "parse_probability_var": 62, "probability_var": 62, "satisfy_gener": 62, "set_max_number_of_carries_on_arx_ciph": 62, "max_number_of_carri": 62, "set_max_number_of_nonlinear_carri": 62, "max_number_of_nonlinear_carri": 62, "p_modadd_0_1_0": 62, "p_modadd_1_2_0": 62, "p_modadd_1_7_0": 62, "p_modadd_2_2_0": 62, "p_modadd_2_7_0": 62, "get_bct_oper": 63, "filter_out_strings_containing_substr": 64, "strings_list": 64, "substr": 64, "group_strings_by_pattern": 64, "list_of_data": 64, "overrid": [65, 66, 67, 68, 177], "superclass": [65, 66, 67, 68], "advantag": [65, 66, 67, 68], "handl": [65, 66, 67, 68, 69, 77, 124, 125, 126, 127, 158], "claus": [65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "cryptominisat": [65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 82], "therefor": [65, 66, 67, 68], "cnf": [65, 66, 67, 68, 69, 78, 195], "rule": [65, 66, 67, 68, 69], "space": [65, 66, 67, 68, 69], "nor": [65, 66, 67, 68, 69, 70, 71, 72, 73], "dash": [65, 66, 67, 68, 69], "liter": [65, 66, 67, 68, 69], "prepend": [65, 66, 67, 68, 69], "introduc": [65, 66, 67, 68], "were": [65, 66, 67, 68], "overridden": [65, 66, 67, 68], "further": [65, 66, 67, 68, 69, 74, 78, 83], "inform": [65, 66, 67, 68, 69, 74, 78, 85, 183, 194, 197], "visit": [65, 66, 67, 68, 74], "cmssatdeterministictruncatedxordifferentialmodel": 65, "window_size_weight_pr_var": [65, 66, 67, 68, 69, 70, 71, 72, 73], "counter": [65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 158, 205], "sequenti": [65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 192], "compact": [65, 66, 67, 68, 69, 70, 71, 72, 73, 95, 99, 102, 103, 104, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159], "satbitwisedeterministictruncatedxordifferentialmodel": [65, 70], "number_of_unknown_vari": [65, 70], "sat_model": [65, 66, 67, 68, 69, 70, 71, 72, 73, 171, 174, 175, 176, 183], "sat_bitwise_deterministic_truncated_xor_differential_model": [65, 70], "calculate_component_weight": [65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "out_suffix": [65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 84], "output_values_dict": [65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "cryptominisat_ext": [65, 66, 67, 68, 69, 70, 71, 72, 73], "plaintext_0_0": [65, 70], "plaintext_0_1": [65, 70], "plaintext_1_0": [65, 70], "plaintext_1_1": [65, 70], "plaintext_2_0": [65, 70], "plaintext_2_1": [65, 70], "plaintext_3_0": [65, 70], "plaintext_3_1": [65, 70], "ciphertext_0_0": [65, 70], "ciphertext_1_0": [65, 70], "ciphertext_1_1": [65, 70], "ciphertext_2_0": [65, 70], "ciphertext_2_1": [65, 70], "ciphertext_3_0": [65, 70], "ciphertext_3_1": [65, 70], "satmodel": [65, 66, 67, 68, 69, 70, 71, 72, 73, 174, 175, 176, 183], "sboxes_ddt_templ": [65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "sboxes_lat_templ": [65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82], "chosen": [65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 122, 123, 124, 125, 126, 205], "_sage": [65, 66, 67, 68, 69, 70, 71, 72, 73], "subprocess": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 83], "work": [65, 66, 67, 68, 69, 70, 71, 72, 73], "embed": [65, 66, 67, 68, 69, 70, 71, 72, 73, 197], "remain": [65, 66, 67, 68, 69, 70, 71, 72, 73], "sat_cipher_model": [65, 66, 67, 68, 69, 70, 71, 72, 73], "satciphermodel": [65, 66, 67, 68, 69, 70, 71, 72, 73], "tea_p64_k128_o64_r32": [65, 66, 67, 68, 69, 70, 71, 72, 73], "intermediate_output_31_15": [65, 66, 67, 68, 69, 70, 71, 72, 73], "8ca8d5de0906f08": [65, 66, 67, 68, 69, 70, 71, 72, 73], "sign": [65, 66, 67, 68, 69, 70, 71, 72, 73, 85, 166, 174, 175, 176, 177, 178, 179, 182, 184, 185, 189, 190, 192, 205], "cipher_output_31_16": [65, 66, 67, 68, 69, 70, 71, 72, 73], "dummy_hw_0_0_0": [65, 66, 67, 68, 69, 70, 71, 72, 73], "dummy_hw_0_0_1": [65, 66, 67, 68, 69, 70, 71, 72, 73], "dummy_hw_0_0_2": [65, 66, 67, 68, 69, 70, 71, 72, 73], "dummy_hw_0_61_3": [65, 70], "dummy_hw_0_62_3": [65, 70], "cipher_output_2_12_30_0": [65, 70], "cipher_output_2_12_31_0": [65, 70], "cmssatciphermodel": 66, "cms_model": [66, 67, 68], "cms_cipher_model": 66, "find_missing_bit": [66, 71, 79], "flow": [66, 71, 79], "endian": [66, 71, 79, 85, 200, 205], "list_length": [66, 71, 79, 85], "int_valu": [66, 71, 79, 85], "0xaffec7": [66, 71, 79], "speck_p32_k64_o32_r22": [66, 71], "intermediate_output_21_11": [66, 71, 79], "1411": [66, 71], "cipher_output_21_12": [66, 71, 79], "affec7": [66, 71, 79], "019376516342163086": [66, 71], "plaintext_3": [66, 67, 68, 69, 71, 72, 73, 78, 79, 80, 81, 82], "ciphertext_0": [66, 67, 68, 69, 71, 72, 73], "ciphertext_1": [66, 67, 68, 69, 71, 72, 73], "ciphertext_2": [66, 67, 68, 69, 71, 72, 73], "ciphertext_3": [66, 67, 68, 69, 71, 72, 73], "sat_xor_differential_model": [66, 67, 68, 69, 71, 72, 73], "satxordifferentialmodel": [66, 67, 68, 69, 71, 72, 73], "dummy_hw_0_77_6": [66, 67, 68, 69, 71, 72, 73], "dummy_hw_0_78_6": [66, 67, 68, 69, 71, 72, 73], "hw_modadd_2_7_14": [66, 67, 68, 69, 71, 72, 73], "hw_modadd_2_7_15": [66, 67, 68, 69, 71, 72, 73], "cmssatxordifferentialmodel": 67, "build_xor_differential_trail_and_checker_model_at_intermediate_output_level": [67, 72], "check": [67, 72, 166, 177, 179], "pair": [67, 72, 183, 205], "cms_xor_differential_model": 67, "almost": [67, 68, 72, 73, 81, 82], "alwai": [67, 68, 72, 73, 81, 82, 95, 166, 174, 175, 176, 177, 179, 194], "guess": [67, 68, 72, 73, 81, 82], "longest": [67, 68, 72, 73, 81, 82], "set_window_size_heuristic_by_round": [67, 72], "set_window_size_heuristic_by_component_id": [67, 72], "window_size_by_component_id_valu": [67, 72], "number_of_full_window": [67, 72], "full_window_oper": [67, 72], "at_least": [67, 72], "window_size_by_round_valu": [67, 72], "window_size_number_of_full_window": [67, 72], "cmssatxorlinearmodel": 68, "satxorlinearmodel": [68, 73, 171], "cms_xor_linear_model": 68, "plaintext_0_o": [68, 73, 82], "rot_0_0_0_i": [68, 73, 82, 182, 185], "plaintext_1_o": [68, 73, 82], "rot_0_0_1_i": [68, 73, 82, 182, 185], "plaintext_2_o": [68, 73, 82], "rot_0_0_2_i": 68, "xor_2_10_13_o": 68, "cipher_output_2_12_29_i": 68, "xor_2_10_14_o": [68, 73, 82], "cipher_output_2_12_30_i": [68, 73, 82, 167], "xor_2_10_15_o": [68, 73, 82], "cipher_output_2_12_31_i": [68, 73, 82, 167], "sat_xor_linear_model": [68, 73, 171], "187": [68, 73, 82], "010079622268676758": [68, 73], "plaintext_3_o": [68, 73, 82], "ciphertext_0_o": [68, 73], "ciphertext_1_o": [68, 73], "ciphertext_2_o": [68, 73], "ciphertext_3_o": [68, 73], "translat": 69, "dimac": 69, "whenev": 69, "section": [69, 77, 78], "remark": [69, 85], "compliant": 69, "signific": 69, "Be": 69, "inspect": [69, 205], "well": 69, "divid": 74, "categori": 74, "action": [74, 83], "other": [74, 77, 99, 102, 103, 104, 106, 107, 110, 113, 115, 116, 118, 119, 121, 122, 123, 131, 138, 143, 192, 197], "abstract": 74, "bare": [74, 83], "metal": [74, 83], "sinc": [74, 83, 192], "imag": [74, 83], "window_size_0_cnf": 76, "window_size_1_cnf": 76, "window_size_2_cnf": 76, "window_size_3_cnf": 76, "window_size_4_cnf": 76, "window_size_5_cnf": 76, "window_size_with_full_1_window_cnf": 76, "aux": 76, "window_size_with_full_2_window_cnf": 76, "window_size_with_full_3_window_cnf": 76, "window_size_with_full_4_window_cnf": 76, "consum": [77, 85], "offer": 77, "directli": 77, "basic": 77, "lipmaa": [77, 84, 197], "moriai": [77, 84, 197], "cornerston": 77, "like": [77, 85, 124, 125, 126], "glucos": 77, "minisat": 77, "unfortun": 77, "stdin": 77, "suppli": 77, "best": 77, "cms_add_clauses_to_solv": 77, "numerical_cnf": 77, "overwritten": 77, "cnf_and": 77, "variable_0": [77, 84], "variable_1": [77, 84], "variable_": 77, "operand": [77, 84, 166, 167, 171, 175, 177, 179], "cnf_and_differenti": 77, "diff_in_0": 77, "diff_in_1": 77, "diff_out": 77, "hw": [77, 84], "and_0": 77, "and_1": 77, "and_out": 77, "cnf_and_linear": 77, "mask_in_0": 77, "mask_in_1": 77, "mask_out": 77, "in_0": 77, "in_1": 77, "being": 77, "mask": [77, 84, 192], "cnf_and_seq": 77, "out_id": [77, 173, 191], "in_id": 77, "cnf_carri": 77, "previous_carri": [77, 84], "Or": [77, 84, 195], "bitvector": [77, 84], "comut": 77, "addendum": [77, 84], "previou": [77, 84], "c_3": 77, "y_3": [77, 84], "c_2": [77, 84], "cnf_carry_comp2": 77, "Not": [77, 195], "notwis": 77, "cnf_equival": 77, "variable_2": 77, "cnf_hw_lipmaa": 77, "alpha": [77, 84, 117], "beta": [77, 84, 117], "gamma": [77, 84, 117], "hw_i": 77, "alpha_": 77, "beta_": 77, "gamma_": 77, "hw_6": 77, "alpha_7": 77, "beta_7": 77, "gamma_7": 77, "cnf_inequ": 77, "left_var": 77, "right_var": 77, "side": 77, "cnf_lipmaa": 77, "beta_1": [77, 84], "dummy_i": 77, "alpha_i": 77, "beta_i": 77, "gamma_i": 77, "three": 77, "next": [77, 84], "hw_10": 77, "dummy_10": 77, "beta_11": 77, "alpha_10": 77, "beta_10": 77, "gamma_10": 77, "cnf_modadd_inequ": 77, "formula": [77, 84], "applic": [77, 137, 166, 177, 179, 197], "chaskei": [77, 197], "cnf_n_window_heuristic_on_w_var": 77, "hw_bit_id": 77, "cnf_or": 77, "cnf_or_seq": 77, "cnf_result_comp2": 77, "r_3": 77, "cnf_vshift_fals": 77, "shift_id": 77, "state": [77, 93, 104, 108, 109, 111, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 157, 158, 159, 161, 194], "assign": 77, "s_1": 77, "i_1": 77, "k_7": 77, "cnf_vshift_id": 77, "in_shift": 77, "s_3": 77, "i_3": 77, "i_4": 77, "cnf_xor": 77, "cnf_xor_seq": 77, "variables_n": 77, "identifi": 77, "whole": 77, "i_0": 77, "r_7": 77, "a_7": 77, "b_7": 77, "c_7": 77, "d_7": 77, "cnf_xor_trunc": 77, "behav": 77, "r0": 77, "r1": 77, "a0": 77, "a1": 77, "b0": 77, "b1": 77, "cnf_xor_truncated_seq": 77, "i0": 77, "create_numerical_cnf": 77, "modadd_trunc": 77, "next_carri": 77, "modadd_truncated_lsb": 77, "modadd_truncated_msb": 77, "numerical_cnf_to_dimac": 77, "run_minisat": 77, "solver_spec": 77, "dimacs_input": 77, "input_file_nam": 77, "output_file_nam": 77, "run_parkissat": 77, "parkissat": 77, "run_sat_solv": 77, "host": 77, "env_vars_str": 77, "pipe": 77, "run_yic": 77, "yice": 77, "lib": [78, 79, 80, 81, 82, 84, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "smtmodel": [78, 79, 80, 81, 82, 183], "cipher_input_vari": [78, 79, 80, 81, 82], "smt_model": [78, 79, 80, 81, 82, 171, 183], "key_62": [78, 79, 80, 81, 82, 192], "key_63": [78, 79, 80, 81, 82, 192], "assert": [78, 79, 80, 81, 82, 84, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "get_xor_probability_constraint": [78, 79, 80, 81, 82], "bit_id": [78, 79, 80, 81, 82, 183], "templat": [78, 79, 80, 81, 82, 183, 195], "z3_ext": [78, 79, 80, 81, 82], "09": [78, 79, 80, 81, 82], "update_constraints_for_equal_typ": [78, 79, 80, 81, 82], "update_constraints_for_not_equal_typ": [78, 79, 80, 81, 82], "mathsat_pars": 78, "yices_pars": 78, "z3_parser": 78, "smtciphermodel": 79, "smt_cipher_model": 79, "speck_k64_p32_o32_r22": 79, "90fe": 79, "smtdeterministictruncatedxordifferentialmodel": 80, "smtxordifferentialmodel": 81, "smt_xor_differential_model": 81, "speck_p32_k64_o32_r5": 81, "002946615219116211": 81, "cryptominismt": 81, "get_operand": 81, "smtxorlinearmodel": [82, 171], "smt_xor_linear_model": [82, 171], "cipher_input_xor_linear_vari": 82, "key_62_o": 82, "key_63_o": 82, "06": 82, "65": [82, 194], "67": [82, 194], "003168344497680664": 82, "get_component_hex_valu": 84, "variable2valu": 84, "smt_and": 84, "smt_assert": 84, "smt_carri": 84, "smt_distinct": 84, "q": [84, 197], "distinct": [84, 158, 178], "smt_equival": 84, "smt_impli": 84, "anteced": 84, "consequ": 84, "implic": 84, "smt_ite": 84, "condit": 84, "altern": 84, "t": [84, 124, 125, 126, 142, 197, 203, 205], "ite": [84, 190], "smt_lipmaa": 84, "smt_not": 84, "smt_or": 84, "smt_xor": 84, "add_arc": 85, "arc": [85, 194], "curr_input_bit_id": 85, "intermediate_output_arc": 85, "previous_output_bit_id": 85, "mb": 85, "set_component_value_weight_sign": 85, "239": 85, "175": 85, "500000000000": 85, "239000000000000": 85, "create_directori": 85, "library_path": 85, "find_sign_for_one_xor_linear_trail": 85, "trail_with_sign": 85, "ab": [85, 197], "final_sign": 85, "find_sign_for_xor_linear_trail": 85, "trails_with_sign": 85, "get_bit_bind": 85, "format_func": 85, "point": [85, 194], "rel": [85, 194], "speck_without_key_schedul": [85, 171], "key_0_2_0_o": 85, "xor_0_2_16_i": [85, 192], "key_0_2_10_o": 85, "xor_0_2_26_i": 85, "key_0_2_11_o": 85, "xor_0_2_27_i": 85, "xor_1_8_7_o": 85, "xor_1_10_7_i": 85, "cipher_output_1_12_7_i": 85, "xor_1_8_8_o": 85, "xor_1_10_8_i": 85, "cipher_output_1_12_8_i": 85, "xor_1_8_9_o": 85, "xor_1_10_9_i": 85, "cipher_output_1_12_9_i": 85, "intermediate_output_0_6_0_i": [85, 171], "xor_0_2_0_o": [85, 192], "xor_0_4_0_i": 85, "intermediate_output_0_6_10_i": 85, "xor_0_2_10_o": 85, "xor_0_4_10_i": 85, "intermediate_output_0_6_11_i": 85, "xor_0_2_11_o": 85, "xor_0_4_11_i": 85, "intermediate_output_0_6_7_i": 85, "xor_0_2_7_o": 85, "xor_0_4_7_i": 85, "intermediate_output_0_6_8_i": 85, "xor_0_2_8_o": 85, "xor_0_4_8_i": 85, "intermediate_output_0_6_9_i": 85, "xor_0_2_9_o": 85, "xor_0_4_9_i": 85, "get_library_path": 85, "get_previous_output_bit_id": 85, "get_related_key_scenario_format_for_fixed_valu": 85, "desir": 85, "endia": [85, 201], "lsb": 85, "print_components_valu": 85, "0x1234": 85, "0xabcd": 85, "set_component_solut": 85, "hexadecim": 85, "abcd1234": 85, "0x0000": 85, "avoid": 85, "match": 85, "to_bias_for_correlation_measur": 85, "to_bias_for_probability_measur": 85, "to_bias_for_xor_linear_trail": 85, "06306815147399902": 85, "to_correlation_for_bias_measur": 85, "to_correlation_for_probability_measur": 85, "to_correlation_for_xor_linear_trail": 85, "10187196731567383": 85, "to_probability_for_bias_measur": 85, "to_probability_for_correlation_measur": 85, "to_probability_for_xor_linear_trail": 85, "13295412063598633": 85, "83": 85, "write_model_to_fil": 85, "model_to_writ": 85, "directori": [85, 87], "finish": 85, "suggest": 85, "graph_representation_of_the_ciph": 85, "solver_typ": 85, "txt": [85, 204], "speck32_64_r22_sat": 85, "anyth": 85, "model_fil": 85, "write_solution_into_a_fil": 85, "solution_to_writ": 85, "write_solution_to_fil": 85, "compos": 85, "previous_result": 85, "cipher_id_solver_nam": 85, "speck32_64_r22_cryptominisat": 85, "test_report": 87, "clean_report": 87, "output_dir": 87, "home": 87, "runner": 87, "_work": 87, "doc": [87, 203], "save_as_datafram": 87, "fixed_input": 87, "fixed_output": 87, "fixed_test": 87, "save_as_imag": 87, "show_as_hex": 87, "fixed_input_differ": 87, "key_state_s": 87, "output_directori": 87, "show_word_permut": 87, "show_var_shift": 87, "show_var_rot": 87, "show_theta_xoodoo": 87, "show_theta_keccak": 87, "show_shift_row": 87, "show_sigma": 87, "show_revers": 87, "show_permu": 87, "show_multi_input_non_linear_logical_oper": 87, "show_modular": 87, "show_modsub": 87, "show_const": 87, "show_rot": 87, "show_sbox": 87, "show_mix_column": 87, "show_shift": 87, "show_linear_lay": 87, "show_xor": 87, "show_modadd": 87, "show_and": 87, "show_or": 87, "show_not": 87, "show_plaintext": 87, "show_kei": 87, "show_intermediate_output": 87, "show_cipher_output": 87, "show_input": 87, "show_output": 87, "graphic": 87, "bool": 87, "wether": 87, "show_": 87, "avalanche_test_result": 87, "diffusion_test": [87, 205], "save_as_json": 87, "save_as_latex_t": 87, "averag": 87, "datasetgener": 88, "generate_avalanche_dataset": 88, "input_index": [88, 89, 91], "save_fil": 88, "filenam": 88, "plaintest": 88, "save": [88, 89, 91, 105], "bit_stream": 88, "statistical_test": [88, 89, 91], "dataset_gener": 88, "237": 88, "generate_cbc_dataset": 88, "number_of_blocks_in_one_sampl": 88, "163": 88, "156": 88, "33": [88, 194], "37": [88, 194], "90": [88, 197, 205], "178": 88, "59": [88, 194], "124": [88, 197], "118": 88, "221": 88, "generate_correlation_dataset": 88, "generate_high_density_dataset": 88, "ratio": 88, "high": [88, 197, 205], "densiti": 88, "exmapl": 88, "taken": [88, 192], "generate_low_density_dataset": 88, "low": [88, 197, 205], "generate_random_dataset": 88, "get_cipher_outputs_for_cbc_dataset": 88, "get_cipher_outputs_for_correlation_dataset": 88, "inputs_fix": 88, "get_cipher_outputs_for_density_dataset": 88, "inputs_dens": 88, "datasettyp": 88, "enum": 88, "enumer": [88, 197], "cipher_block_chaining_mod": 88, "high_dens": 88, "low_dens": 88, "get_low_density_sequ": 88, "set_testing_data_amount": 88, "diehardertest": 89, "dieharder_statistical_test": 89, "test_typ": [89, 91], "bits_in_one_sequence_diehard": 89, "number_of_sequences_diehard": 89, "round_start": [89, 91], "round_end": [89, 91], "dieharder_report_folder_prefix": 89, "dieharder_statistics_report": 89, "dieharder_test_opt": 89, "unpars": [89, 91], "folder": [89, 91], "go": [89, 91], "compat": [89, 91], "report": [89, 91, 195, 197, 204], "dieharder_test": 89, "dieharder_avalanche_test_result": 89, "niststatisticaltest": 91, "nist_statistical_test": 91, "bits_in_one_sequ": 91, "number_of_sequ": 91, "nist_report_folder_prefix": 91, "nist_statistics_report": 91, "statistical_test_option_list": 91, "100000000000000": 91, "statisticaltest": 91, "nist_test": 91, "nist_avalanche_test_result": 91, "0x2b7e151628aed2a6abf7158809cf4f3c": 93, "0x6bc1bee22e409f96e93d7e117393172a": 93, "0x3ad77bb40d7a3660a89ecaf32466ef97": 93, "create_constant_compon": 93, "create_key_sbox_compon": 93, "key_rot": 93, "create_mix_column_compon": 93, "shift_row_compon": 93, "create_rotate_compon": 93, "remaining_xor": 93, "create_round_kei": 93, "create_round_output_compon": 93, "add_round_kei": [93, 104, 107, 127], "create_sbox_compon": [93, 112, 127], "first_add_round_kei": 93, "create_shift_row_compon": 93, "sboxes_compon": [93, 112, 127], "key_sboxes_compon": 93, "xor1": 93, "bea1blockciph": 94, "bea": 94, "bea1_block_ciph": 94, "0x8cdd0f3459fb721e798655298d5c1": 94, "0x47a57eff5d6475a68916": 94, "0x439d5298656eccc67de": 94, "xor_round_kei": 94, "key_stat": [94, 108, 109], "cipher_st": 94, "constantblockciph": 95, "constant_block_ciph": 95, "constant_o3_r3": 95, "0b000": [95, 163], "0b001": [95, 163], "intermediate_output_1_1": 95, "constant_2_0": [95, 169], "0b010": [95, 163, 164], "cipher_output_2_1": 95, "create_round": 95, "desblockciph": 96, "number_of_sbox": [96, 97, 104], "less": [96, 97, 101, 109, 120, 183, 205], "des_block_ciph": 96, "0x133457799bbcdff1": 96, "0x0123456789abcdef": [96, 97], "0x85e813540f0ab405": [96, 97], "desexactkeylengthblockciph": 97, "des_exact_key_length_block_ciph": 97, "des_ciph": 97, "0x12695bc9b7b7f8": 97, "meant": 98, "secur": [98, 197], "sever": 98, "weak": 98, "add_and_component_to_even_round": 98, "type1_key_schedule_xor": 98, "type2_key_schedule_and": 98, "add_sbox_components_layer_in_even_round": 98, "type1_sbox": 98, "type2_modadd1": 98, "type2_modadd2": 98, "type2_xor1": 98, "type2_xor2": 98, "add_xor_component_to_even_round": 98, "type2_key_schedule_xor": 98, "collect_input_id_link": 98, "hightblockciph": 99, "sub_keys_zero": [99, 102], "transformations_flag": [99, 102], "hight_block_ciph": 99, "modadd_0_0": [99, 110, 122, 194], "round_kei": [99, 101, 103, 104, 106, 113], "internal_st": [99, 103], "round_i": [99, 103, 151], "create_sub_kei": 99, "sub_key_temp_list": 99, "final_transform": 99, "plaintext_list": 99, "whitening_key_list": 99, "get_numbers_of_round": [99, 103], "initial_transform": 99, "round_funct": [99, 102, 103, 111, 114, 116, 126, 128, 129, 130, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155], "init_input": [99, 103], "temp_subkey_gener": 99, "master_kei": 99, "whitening_key_gener": 99, "encrypt": [100, 158, 197], "identityblockcipherencrypt": 100, "mainli": 100, "kasumiblockciph": 101, "kasumi_block_ciph": 101, "0x9900aabbccddeeff1122334455667788": 101, "0xfedcba0987654321": 101, "0x514896226caa4f20": 101, "derived_kei": 101, "fi_function1": 101, "ki_id": 101, "ki_posit": 101, "fl_function": 101, "sub_kei": 101, "fo_funct": 101, "init_halv": 101, "key_der": 101, "lblockblockciph": 102, "lblock_block_ciph": 102, "641582411206367315": 102, "update_kei": 102, "leablockciph": 103, "reorder_input_and_output": 103, "lea_block_ciph": 103, "get_ith_key128": 103, "number_of_oper": 103, "delta_const": 103, "left_rotations_list": 103, "get_ith_key192": 103, "get_ith_key256": 103, "format_output": 103, "input_bit_positions_lst": 103, "lowmcblockciph": 104, "lowmc_block_ciph": 104, "linear_layer_0_0": [104, 194], "add_output_compon": [104, 114, 116, 139, 140, 141, 152, 153, 154], "plaintext_id": 104, "add_round_const": 104, "rk_id": 104, "define_number_of_round": [104, 122, 123], "define_number_of_sbox": 104, "n_sbox": 104, "load_const": 104, "adapt": [104, 105], "thorkn": 104, "load": 104, "dat": [104, 105], "lowmc_generate_matric": 104, "sbox_lay": [104, 107], "sbox_layer_picn": 104, "picnic": 104, "ref": 104, "chunk": 104, "back": 104, "110": 104, "becom": 104, "011": 104, "via": 104, "update_key_regist": [104, 107], "key_id": [104, 106], "generate_matric": 105, "repo": 105, "grain_ssg": 105, "grain": [105, 195], "lsfr": 105, "shrink": 105, "instantiate_matrix": 105, "gen": 105, "instanti": 105, "maxim": 105, "rank": [105, 197], "generat": 105, "main": 105, "arg": 105, "global": 105, "blocksiz": 105, "keysiz": 105, "lowmc_constants_p": 105, "_k": 105, "_r": 105, "xor_matrix_valu": 105, "columns_m": 105, "rows_n": 105, "key_add": 106, "round_key_id": 106, "shuffle_cel": 106, "sub_cel": 106, "permutation_lay": 107, "qarmav2blockciph": [108, 109], "number_of_lay": [108, 109], "tweak_bit_s": [108, 109, 112, 119], "qarma": [108, 109], "v2": [108, 109], "qarmav2_block_ciph": 108, "0x0123456789abcdeffedcba9876543210": [108, 109], "0x7e5c3a18f6d4b2901eb852fc9630da74": [108, 109], "0x0000000000000000": [108, 109], "0x2cc660354929f2ca": [108, 109], "m_function": 108, "input_po": 108, "constants_initi": [108, 109], "constants_upd": [108, 109], "direct_round": [108, 109], "tweak_stat": [108, 109], "tweak_permut": [108, 109], "constants_st": 108, "first_round_start": [108, 109], "inverse_round": [108, 109], "key_initi": [108, 109, 114, 116], "key_upd": [108, 109], "last_round_end": [108, 109], "majority_funct": [108, 109], "o_funct": [108, 109], "reflector": [108, 109], "state_mask": 108, "id_link": [108, 196], "state_rot": 108, "state_sbox": 108, "tweak_initi": [108, 109], "tweak_upd": 108, "tweak_shuffl": 108, "update_single_const": [108, 109], "qarmav2mixcolumnblockciph": 109, "version": [109, 137, 183], "diffus": [109, 195, 197], "howev": [109, 192], "mai": [109, 197], "effici": [109, 197], "qarmav2_with_mixcolumn_block_ciph": 109, "round_const": [109, 136, 137], "round_key_shuffl": 109, "right_shift_amount": [110, 118, 121], "left_shift_amount": [110, 118, 121], "rc5blockciph": 111, "key_siz": 111, "2040": 111, "rc5_block_ciph": 111, "0x0x0001020304050607": 111, "0x00010203": 111, "0x23a8d72": 111, "compute_magic_const": 111, "first_round": [111, 129, 130], "key_expans": 111, "scarfblockciph": 112, "240": 112, "scarf_block_ciph": 112, "f_function": 112, "ti": 112, "add_subkei": [112, 119], "create_and_compon": 112, "and_compon": [112, 166, 177, 179], "create_rot_compon": 112, "create_sigma_compon": 112, "tweakey_schedul": 112, "intermediate_output_0_0": [113, 194], "feistel_funct": 113, "generate_round_kei": 113, "add_add_round_tweakei": 114, "add_mix_column_seri": 114, "const_0": [114, 145, 146, 160], "initial_round_elements_definit": 114, "key_schedul": [114, 134, 135], "rc_2": 114, "state_initi": [114, 139, 140, 141, 162], "sparxblockciph": 115, "sparx_block_ciph": 115, "print_cipher_structure_as_python_dictionary_to_fil": [115, 120, 126, 138], "k_4_128": 115, "k_4_64": 115, "k_8_256": 115, "arx_box": 115, "assign_functions_based_on": 115, "lambda_2": 115, "lambda_4": 115, "get_number_of_steps_from": 115, "rotation_alpha": 116, "rotation_beta": 116, "round_initi": 116, "speedyblockciph": 117, "lmm": [117, 197], "2021": [117, 166, 177, 179, 197], "pleas": 117, "speedy_block_ciph": 117, "0xa13a632451070e4382a27f26a40682f3fe9ff68028d24fdb": 117, "0x764c4f6254e1bff208e95862428faed01584f4207a7e8477": 117, "0x01da25a93d1cfc5e4c0b74f677eb746c281a260193b7755a": 117, "shift_0_0": [118, 121, 184, 194], "threefishblockciph": 119, "threefish_block_ciph": 119, "subkei": 119, "subkey_schedul": 119, "word_permut": 119, "key_length": 120, "twofish_key256_r16": 120, "0xd43bb7556ea32e46f2a282b7d45b4e0d57ff739d4dc92c1bd7fc01700cc8216f": 120, "0x90afe91bb288544f2c32dc239b2635e6": 120, "0x6cb4561c40bf0a9705931cb6d408e7fa": 120, "h_function": 120, "l_bit": 120, "blake2hashfunct": 122, "1024": [122, 190], "state_bit_s": [122, 123, 145, 146, 147, 157, 161], "rot_amount": [122, 123, 151], "accordingli": [122, 123], "configur": [122, 123], "hash_funct": [122, 123, 124, 125, 126, 127], "blake2_hash_funct": 122, "column_step": [122, 123], "data_word_id": [122, 123], "data_word_rang": [122, 123], "state_word_id": [122, 123], "state_word_rang": [122, 123], "define_permut": [122, 123], "define_rotation_amount": [122, 123], "diagonal_step": [122, 123], "state_transform": [122, 123], "m0": [122, 123], "m1": [122, 123], "blakehashfunct": 123, "512": [123, 126, 159, 161, 190], "diagon": [123, 151], "blake_hash_funct": 123, "define_const": 123, "origin": [124, 125, 126], "rfc": [124, 125, 126], "1321": 124, "strictli": [124, 125, 126], "adher": [124, 125, 126], "symmetr": [124, 125, 126, 197], "md5hashfunct": 124, "just": [124, 125, 126, 127], "md5_hash_funct": 124, "0x5175656c2066657a20736768656d626f20636f70726520646176616e74692e8000000000000000000000000000000000000000000000000000000000000000f8": 124, "0x3956fba8c05053e5a27040b8ab9a7545": 124, "add_and_component_in_md5": 124, "component_0": [124, 125, 126], "component_1": [124, 125, 126], "add_modadd_component_in_md5": 124, "add_modadd_component_in_md5_for_x": 124, "add_not_component_in_md5": 124, "add_or_component_in_md5": 124, "add_rotate_component_in_md5": 124, "add_round_output_component_in_md5": 124, "add_xor_component_in_md5": 124, "md5_step": 124, "3174": 125, "sha": [125, 126], "sha1hashfunct": 125, "sha1_hash_funct": 125, "0x43686961726180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030": [125, 126], "0x04f0c8e0efe316e609390a3d98e97f5acc53c199": 125, "add_and_component_in_sha1": 125, "add_modadd_component_in_sha1": 125, "add_rotate_component_in_sha1": 125, "add_round_output_component_in_sha1": 125, "compute_temp_and_s_30_b": 125, "ft_b_c_d": 125, "rounds_0_19": 125, "rounds_20_39": 125, "rounds_40_59": 125, "6234": 126, "famili": [126, 163, 164, 197], "sha2hashfunct": 126, "sha2_hash_funct": 126, "sha256": 126, "0x0d8d2647a12b0d544989a6b03603b8b3c27e2c4e0be08671745366d1a8bc4d95": 126, "add_and_component_sha2": 126, "add_modadd_component_sha2": 126, "add_rotate_component_sha2": 126, "add_round_output_component_sha2": 126, "add_xor_component_sha2": 126, "compute_bsig0_bsig1": 126, "compute_ch": 126, "compute_maj": 126, "compute_ssig0_ssig1": 126, "kt": 126, "whirlpoolhashfunct": 127, "whirlpool_hash_funct": 127, "0x61626380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018": 127, "0x4e2448a4c6f486bb16b6562c73b4020bf3043e3a731bce721ae1b303d97e6d4c7181eebdb6c57e277d0e34957114cbd6c797fc9d95d8b582d225292076d4eef5": 127, "create_mix_row_compon": 127, "shift_column_compon": 127, "create_round_constant_compon": 127, "create_shift_column_compon": 127, "asconpermut": [128, 178], "ascon_permut": [128, 178], "ci": [128, 129, 130, 134, 135, 139, 140, 141, 144, 152, 153, 154], "asconsboxsigmanomatrixpermut": [129, 183], "ascon_sbox_sigma_no_matrix_permut": [129, 183], "state_of_compon": [131, 143, 151], "cipher_famili": [131, 143, 151], "odd": [131, 143], "addition": 131, "dey2023": 131, "bottom_half_quarter_round": [131, 143, 159], "top_half_quarter_round": [131, 143, 159], "gastonpermut": 132, "gaston_permut": 132, "0x88b326096bebc6356ca8fb64bc5ce6caf1ce3840d819071354d70067438689b5f17fe863f958f32b": [132, 133], "0x1f4ad9906da6a2544b84d7f83f2bddfa468a0853578a00e36c05a0506df7f66e4efb22112453c964": [132, 133], "0x1ba89b5b5c4583b622135709ae53417d9847b975e9ec9f3dce042df2a402591d563ec68fc30307ea": [132, 133], "0xffffffffffffffff0123456789abcdeffedcba9876543210aaaaaaaaaaaaaaaa0101010101010101": [132, 133], "0x3117d51b14937067338f17f773c13f79dfb86e0868d252ab0d461d35eb863de708bce3e354c7231a": [132, 133], "gaston_chi": 132, "gaston_iota": [132, 133], "rc": [132, 133, 136, 137], "gaston_rho_east": [132, 133], "gaston_rho_west": [132, 133], "gaston_round_funct": [132, 133], "gaston_theta": [132, 133], "gastonsboxpermut": 133, "gaston_sbox_permut": 133, "0x00000000000000010000000000000001000000000000000100000000000000010000000000000001": 133, "0x202d7fa691663e77043cb03594656fcdf6747f2da9cd9200ec3380fde8ec84d565247e6763406084": 133, "gaston_chi_sbox": 133, "and_0_0": [134, 148, 150, 194], "round_key_u": [134, 135], "round_key_v": [134, 135], "giftsboxpermut": 135, "gift_sbox_permut": 135, "gimlipermut": [136, 137], "gimli_permut": 136, "sp_box": [136, 137], "big_swap": [136, 137], "small_swap": [136, 137], "gimlisboxpermut": 137, "parallel": [137, 166, 177, 179], "gimli_sbox_permut": 137, "graincorepermut": 138, "grain_core_permut": 138, "grain_cor": 138, "160": [138, 145, 146, 147], "gc": 138, "keccakinvertiblepermut": 139, "nvlpub": 139, "nist": [139, 195], "gov": 139, "nistpub": 139, "fip": 139, "202": 139, "keccak_invertible_permut": 139, "theta_keccak_0_0": [139, 194], "chi_definit": [139, 140, 141, 152, 153, 154], "get_ci": [139, 140, 141, 205], "iota_definit": [139, 140, 141, 152, 153, 154], "rho_and_pi_definit": [139, 140, 141], "theta_definit": [139, 140, 141, 152, 153, 154], "keccakpermut": 140, "keccak_permut": 140, "add_round_output_linear": [140, 153], "add_round_output_nonlinear": [140, 153], "keccaksboxpermut": 141, "keccak_sbox_permut": 141, "photonpermut": 142, "photon_permut": 142, "component_rc": 142, "components_": 142, "salsapermut": 143, "salsa_permut": 143, "sparklepermut": 144, "number_of_block": [144, 205], "number_of_step": 144, "sparkle_permut": 144, "alzett": 144, "state_x": 144, "state_i": 144, "alzette_round": 144, "rotate_x": 144, "rotate_i": 144, "ell_funct": 144, "constant_ci": 144, "constant_r": 144, "spongentpifsrpermut": 145, "spongent_pi_fsr_permut": 145, "spongentpi": [145, 146, 147], "icounter_upd": [145, 146], "icount": [145, 146], "spongentpipermut": 146, "spongent_pi_permut": 146, "spongentpiprecomputationpermut": 147, "spongent_pi_precomputation_permut": 147, "tinyjambuwordbasedpermut": 148, "tinyjambu_32bits_word_permut": 148, "tinyjambufsrwordbasedpermut": 149, "tinyjambu_fsr_32bits_word_permut": 149, "not_const": 149, "tinyjambupermut": 150, "tinyjambu_permut": 150, "add_intermediate_output_component_latin_dances_permut": 151, "get_input_bit_positions_latin_d": 151, "half_like_round_function_latin_d": 151, "init_latin_dances_ciph": 151, "super_class": 151, "input_plaintext": 151, "quarter_round_index": 151, "init_state_latin_d": 151, "print_state_id": 151, "sub_quarter_round_latin_d": 151, "p1_index": 151, "p2_index": 151, "p3_index": 151, "xoodooinvertiblepermut": 152, "xoodoo_invertible_permut": 152, "theta_xoodoo_0_0": [152, 194], "plane": [152, 153, 154, 205], "apply_sbox_to_each_3bit_column": [152, 154], "planes_new": [152, 154], "rhoeast_definit": [152, 153, 154], "rhowest_definit": [152, 153, 154], "rotate_x_z": [152, 153, 154], "rotx": [152, 153, 154], "rotz": [152, 153, 154], "xoodoopermut": 153, "xoodoo_permut": 153, "xoodoosboxpermut": 154, "xoodoo_sbox_permut": 154, "xoodoo_permutation_sbox": 154, "a51streamciph": 155, "frame_bit_s": [155, 156], "number_of_normal_clocks_at_initi": [155, 156], "stream_ciph": [155, 156, 157, 158, 159, 160, 161, 162], "a5_1_stream_ciph": 155, "a51": 155, "229": [155, 156], "fsr_1_0": [155, 156], "0x48c4a2e691d5b3f7": 155, "frame": [155, 156], "0b0010110010000000000000": 155, "keystream": [155, 156, 158, 160, 161], "0x534eaa582fe8151ab6e1855a728c093f4d68d757ed949b4cbe41b7c6b": 155, "regs_initi": 155, "regs_siz": 155, "reg": 155, "fsr_descript": 155, "a52streamciph": 156, "a5_2_stream_ciph": 156, "a52": 156, "0x003fffffffffffff": 156, "0b1000010000000000000000": 156, "0xf4512cac13593764460b722dadd51200350ca385a853735ee5c889944": 156, "biviumstreamciph": 157, "iv_bit_s": [157, 160, 161, 162], "177": [157, 197], "number_of_initialization_clock": [157, 160, 161, 162], "708": 157, "keystream_bit_len": [157, 158, 161], "clock": [157, 161, 194], "bivium_stream_ciph": 157, "biv": 157, "0xffffffffffffffffffff": 157, "iv": [157, 160, 161, 162], "ks": [157, 158, 161, 162], "0x30d0e5ede563dee67884718977510a4c22661cf128d8f75af4a2708276014d83": 157, "0xffffffffff0000000000": 157, "0xffffffffff": 157, "0xdebe55784f853606399af3f6f4b8d0a706963a91f2ba4c687baea16da074f3c3": 157, "bivium_key_stream": 157, "clock_numb": [157, 158, 160, 161, 162], "bivium_state_initi": 157, "bluetoothstreamciphere0": 158, "lfsr_state_bit_s": 158, "fsm_bit_siz": 158, "125": 158, "decrypt": 158, "detail": [158, 203], "2022": 158, "016": 158, "compris": 158, "stage": 158, "132": [158, 197], "four": 158, "address": 158, "dedic": 158, "lfsr_state_s": 158, "finite_state_machine_bit_s": 158, "lfsr_input_st": 158, "fsm_input_st": 158, "bluetooth_stream_cipher_e0": 158, "fsm": 158, "0x25ac1ea08e1ec131e0a1780f7a2a42bb": 158, "0x8cd29cc32668b90ee2312924376f1b4": 158, "0xe22f92fff8c245c49d10359a02f1e555": 158, "0x1198636720bac54986d1ab5a494866c9": 158, "e0_keystream": 158, "lfsr_state": 158, "fsm_id": 158, "fsm_po": 158, "e0_nonlinear_funct": 158, "chachastreamciph": 159, "block_count": 159, "chacha_const": 159, "129519094746312487908866675886161683828": 159, "0x617078653320646e79622d326b206574": 159, "chacha_stream_ciph": 159, "sp": 159, "init_state_plaintext": 159, "input_state_of_compon": 159, "snow3gstreamciph": 160, "keystream_word_s": 160, "snow3g_stream_ciph": 160, "snow": 160, "0xea024714ad5c4d84df1f9b251c0bf45f": 160, "0x2bd6459f82c5b300952c49104881ff48": 160, "ks_32": 160, "0xabee97047ac31373": 160, "ks2": 160, "10407660024169345926": 160, "divalpha": 160, "s11": 160, "mulalpha": 160, "s0": 160, "mulx": 160, "mulxpow": 160, "s1": 160, "w_id": 160, "w_po": 160, "s2": 160, "clock_fsm": 160, "clock_lfsr": 160, "clock_lfsr_initialization_mod": 160, "create_alpha_st": 160, "initial_filling_lfsr_fsm": 160, "snow3g_key_stream": 160, "snow3g_state_initi": 160, "triviumstreamciph": 161, "1152": 161, "initialization_vector_bit_s": 161, "trivium_stream_ciph": 161, "triv": 161, "0x00000000000000000000": 161, "0xdf07fd641a9aa0d88a5e7472c4f993fe6a4cc06898e0f3b4e7159ef0854d97b3": 161, "get_keystream_bit_len": 161, "trivium_key_stream": 161, "key_stream": [161, 162], "trivium_state_initi": 161, "zucstreamciph": 162, "len_keystream_word": 162, "zuc_stream_ciph": 162, "0xffffffffffffffffffffffffffffffff": 162, "0x657cfa07096398b": 162, "clocking_lfsr": 162, "key_loading_to_lfsr": 162, "key_st": 162, "lfsr_s_high_16bit": 162, "lfsr_s_low_16bit": 162, "lfsr_with_initialization_mod": 162, "linear_layer_rot": 162, "w1": 162, "w2": 162, "rot": 162, "linear_transform_l1": 162, "linear_transform_l2": 162, "s_box_lay": 162, "lo": 162, "zuc_nonlinear_f": 162, "rotation_lay": [163, 164], "round_0": [163, 164], "intermediate_output_0_0_input": 163, "0b111110": 163, "intermediate_output_0_0_output": 163, "xor_0_1_input": 163, "0xffe": 163, "xor_0_1_output": 163, "0b000001": [163, 164], "sbox_0_2_input": 163, "sbox_0_2_output": 163, "sbox_0_3_input": [163, 164], "sbox_0_3_output": [163, 164], "0b101": 163, "rot_0_4_input": 163, "0b000101": 163, "rot_0_4_output": 163, "0b100010": 163, "intermediate_output_0_5_input": 163, "intermediate_output_0_5_output": 163, "round_1": [163, 164], "intermediate_output_1_0_input": 163, "intermediate_output_1_0_output": 163, "xor_1_1_input": 163, "0x8be": 163, "xor_1_1_output": 163, "0b011100": 163, "sbox_1_2_input": 163, "0b011": [163, 164], "sbox_1_2_output": 163, "sbox_1_3_input": [163, 164], "0b100": 163, "sbox_1_3_output": [163, 164], "0b110": 163, "rot_1_4_input": 163, "0b010110": 163, "rot_1_4_output": 163, "0b001011": 163, "intermediate_output_1_5_input": 163, "intermediate_output_1_5_output": 163, "cipher_output_1_6_input": 163, "cipher_output_1_6_output": 163, "0x1ff": 163, "0x1fe": 163, "0x173": 163, "round_key_rot": 164, "rot_0_0_input": 164, "rot_0_0_output": 164, "0b100000": 164, "intermediate_output_0_1_input": 164, "xor_0_2_input": 164, "0xfe0": 164, "xor_0_2_output": 164, "0b011111": 164, "sbox_0_4_input": 164, "0b111": 164, "sbox_0_4_output": 164, "rot_0_5_input": 164, "0b010111": 164, "rot_0_5_output": 164, "0b101011": 164, "intermediate_output_0_6_input": 164, "intermediate_output_0_6_output": 164, "rot_1_0_input": 164, "rot_1_0_output": 164, "0b010000": 164, "intermediate_output_1_1_input": 164, "intermediate_output_1_1_output": 164, "xor_1_2_input": 164, "0xad0": 164, "xor_1_2_output": 164, "0b111011": 164, "sbox_1_4_input": 164, "sbox_1_4_output": 164, "rot_1_5_input": 164, "0b111010": 164, "rot_1_5_output": 164, "0b011101": 164, "intermediate_output_1_6_input": 164, "intermediate_output_1_6_output": 164, "cipher_output_1_7_input": 164, "cipher_output_1_7_output": 164, "check_output_s": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "available_word_s": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "get_graph_represent": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "is_forbidden": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "forbidden_typ": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199], "forbidden_descript": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199], "is_id_equal_to": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "dto": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198], "output_size_for_concaten": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "print_valu": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "print_word_valu": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "select_word": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "set_descript": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "id_str": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 205], "set_input_bit_posit": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196], "set_input_id_link": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196], "check_siz": 165, "position_list": 165, "free_input": 165, "linear_layer_to_binary_matrix": 165, "linear_layer_funct": 165, "list_specific_input": 165, "multiinputnonlinearlogicaloper": [166, 177, 179], "algebraic_polynomi": [166, 169, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "and_0_8": [166, 177, 179], "and_0_8_x0": 166, "and_0_8_x12": 166, "and_0_8_y0": 166, "and_0_8_x1": 166, "and_0_8_x13": 166, "and_0_8_y1": 166, "and_0_8_x2": 166, "and_0_8_x14": 166, "and_0_8_y2": 166, "and_0_8_x3": 166, "and_0_8_x15": 166, "and_0_8_y3": 166, "and_0_8_x4": 166, "and_0_8_x16": 166, "and_0_8_y4": 166, "and_0_8_x5": 166, "and_0_8_x17": 166, "and_0_8_y5": 166, "and_0_8_x6": 166, "and_0_8_x18": 166, "and_0_8_y6": 166, "and_0_8_x7": 166, "and_0_8_x19": 166, "and_0_8_y7": 166, "and_0_8_x8": 166, "and_0_8_x20": 166, "and_0_8_y8": 166, "and_0_8_x9": 166, "and_0_8_x21": 166, "and_0_8_y9": 166, "and_0_8_x10": 166, "and_0_8_x22": 166, "and_0_8_y10": 166, "and_0_8_x11": 166, "and_0_8_x23": 166, "and_0_8_y11": 166, "cms_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "cm": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "and_0_8_0": [166, 177, 179], "and_0_8_1": [166, 177, 179], "and_0_8_2": [166, 177, 179], "and_0_8_11": [166, 177, 179], "xor_0_7_11": [166, 177, 179], "key_23": [166, 177, 179], "cms_xor_differential_propagation_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "cms_xor_linear_mask_propagation_constraint": [166, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "cp_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "xor_0_7": [166, 177, 179, 192], "cp_deterministic_truncated_xor_differential_constraint": [166, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 191, 192], "cp_deterministic_truncated_xor_differential_trail_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "cp_wordwise_deterministic_truncated_xor_differential_constraint": [166, 167, 169, 171, 182, 183, 184, 185, 192], "wordwis": [166, 167, 169, 171, 183, 184, 192, 195], "sbox_0_2": [166, 172, 178, 180, 181, 182, 184, 185, 186, 187, 188], "sbox_0_6": [166, 178, 182, 184, 185], "sbox_0_10": [166, 178, 182, 184, 185], "sbox_0_14": [166, 178, 182, 184, 185], "and_0_18_act": 166, "and_0_18_valu": 166, "cp_xor_differential_propagation_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "and2inputs_ddt": [166, 177, 179], "cp_xor_linear_mask_propagation_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "and_0_8_i": 166, "and_0_8_o": 166, "and2inputs_lat": [166, 179], "generic_sign_linear_constraint": [166, 176, 177, 178, 179], "get_bit_based_vectorized_python_cod": [166, 167, 168, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "param": [166, 167, 168, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "get_byte_based_vectorized_python_cod": [166, 167, 168, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "get_word_operation_sign": [166, 174, 175, 176, 177, 178, 179, 182, 184, 185, 189, 190, 192], "milp_bitwise_deterministic_truncated_xor_differential_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "xor_0_7_0": [166, 177, 179], "xor_0_7_1": [166, 177, 179], "and_0_8_10": [166, 177, 179], "x_34": [166, 177, 179, 192], "x_35": [166, 177, 179], "x_36": [166, 177, 179], "x_47": [166, 172, 174, 175, 176, 177, 179, 180, 181, 186, 187, 188, 192], "milp_twoterms_xor_linear_probability_constraint": [166, 177, 179], "chunk_numb": [166, 174, 175, 176, 177, 179], "2x1": [166, 177, 179], "2020": [166, 177, 179, 197], "290": [166, 177, 179], "milp_xor_differential_propagation_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "constrain": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "632": [166, 177, 179], "www": [166, 177, 179, 197], "archiv": [166, 177, 179, 197], "fse2014": [166, 177, 179], "85400194": [166, 177, 179], "213": [166, 177, 179, 197], "and_0_4": [166, 177, 179], "rot_0_1_0": [166, 177, 179], "rot_0_1_1": [166, 177, 179], "and_0_4_14": [166, 177, 179], "x_46": [166, 172, 174, 175, 176, 177, 179, 180, 181, 186, 187, 188, 192], "and_0_4_15": [166, 177, 179], "x_32": [166, 167, 171, 173, 174, 175, 176, 177, 178, 179, 183, 191, 192], "x_48": [166, 174, 175, 176, 177, 179, 192], "x_33": [166, 173, 177, 178, 179, 183, 191, 192], "x_49": [166, 174, 175, 176, 177, 179, 192], "x_64": [166, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 186, 187, 188, 191, 192], "x_50": [166, 174, 175, 176, 177, 179], "x_51": [166, 174, 175, 176, 177, 179], "x_52": [166, 174, 175, 176, 177, 179], "x_53": [166, 174, 175, 176, 177, 179], "x_54": [166, 174, 175, 176, 177, 179], "x_55": [166, 174, 175, 176, 177, 179], "x_56": [166, 174, 175, 176, 177, 179], "x_57": [166, 174, 175, 176, 177, 179], "x_58": [166, 174, 175, 176, 177, 179], "x_59": [166, 172, 173, 174, 175, 176, 177, 179, 180, 181, 186, 187, 188, 191], "x_60": [166, 174, 175, 176, 177, 179], "x_61": [166, 174, 175, 176, 177, 179], "x_62": [166, 167, 171, 173, 174, 175, 176, 177, 178, 179, 191, 192], "x_63": [166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 186, 187, 188, 191, 192], "milp_xor_linear_mask_propagation_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "and_0_4_0_i": [166, 177, 179], "and_0_4_1_i": [166, 177, 179], "and_0_4_14_o": [166, 177, 179], "and_0_4_15_o": [166, 177, 179], "x_16": [166, 167, 171, 173, 174, 175, 176, 177, 179, 182, 183, 185, 191, 192], "x_17": [166, 167, 171, 174, 175, 176, 177, 179, 182, 183, 185], "x_37": [166, 177, 179], "x_38": [166, 177, 179], "x_39": [166, 177, 179, 192], "x_40": [166, 177, 179, 192], "x_41": [166, 177, 179, 192], "x_42": [166, 177, 179, 192], "x_43": [166, 177, 179, 192], "x_44": [166, 177, 179, 192], "x_45": [166, 177, 179, 192], "sat_bitwise_deterministic_truncated_xor_differential_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "and_0_8_0_0": [166, 177, 179], "and_0_8_1_0": [166, 177, 179], "and_0_8_2_0": [166, 177, 179], "and_0_8_11_0": [166, 177, 179], "key_23_1": [166, 177, 179], "and_0_8_11_1": [166, 177, 179], "xor_0_7_11_0": [166, 177, 179], "key_23_0": [166, 177, 179], "xor_0_7_11_1": [166, 177, 179], "sat_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "sat_xor_differential_propagation_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "allw2014": [166, 177, 179, 197], "heavili": [166, 174, 175, 176, 177, 179], "reli": [166, 174, 175, 176, 177, 179], "fact": [166, 174, 175, 176, 177, 179], "hw_and_0_8_11": [166, 177, 179], "sat_xor_linear_mask_propagation_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "and_0_8_0_i": [166, 177, 179], "and_0_8_1_i": [166, 177, 179], "and_0_8_2_i": [166, 177, 179], "and_0_8_23_i": [166, 177, 179], "hw_and_0_8_11_o": [166, 177, 179], "and_0_8_11_o": [166, 177, 179], "smt_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192], "FOR": [166, 172, 180, 181, 186, 187, 188], "key_12": [166, 177, 179], "key_13": [166, 177, 179], "xor_0_7_10": [166, 177, 179], "key_22": [166, 177, 179], "smt_xor_differential_propagation_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "perat": [166, 177, 179], "hw_and_0_8_10": [166, 177, 179], "hw_and_0_8_0": [166, 177, 179], "hw_and_0_8_1": [166, 177, 179], "smt_xor_linear_mask_propagation_constraint": [166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "hw_and_0_8_10_o": [166, 177, 179], "and_0_8_12_i": [166, 177, 179], "and_0_8_0_o": [166, 177, 179], "hw_and_0_8_0_o": [166, 177, 179], "and_0_8_13_i": [166, 177, 179], "and_0_8_1_o": [166, 177, 179], "hw_and_0_8_1_o": [166, 177, 179], "and_0_8_10_i": [166, 177, 179], "and_0_8_22_i": [166, 177, 179], "and_0_8_10_o": [166, 177, 179], "and_0_8_11_i": [166, 177, 179], "cp_twoterm": [166, 174, 175], "inp1": [166, 174], "inp2": [166, 174], "cp_xor_differential_probability_ddt": 166, "cp_xor_linear_probability_lat": 166, "cipheroutput": [167, 171], "is_intermedi": 167, "cipher_output_compon": [167, 171], "cipher_output_2_12_0": [167, 171], "cipher_output_2_12_1": [167, 171], "cipher_output_2_12_2": [167, 171], "xor_2_10_14": [167, 171], "cipher_output_2_12_30": [167, 171], "cipher_output_2_12_31": [167, 171], "xor_2_10_15": [167, 171], "xor_2_8": [167, 171], "xor_2_10": [167, 171], "35": [167, 171, 194], "intermediate_output_0_35_valu": [167, 171], "xor_0_31_valu": [167, 171], "intermediate_output_0_35_act": [167, 171], "xor_0_34_act": [167, 171], "cp_xor_differential_propagation_first_step_constraint": [167, 169, 171, 173, 178, 182, 183, 184, 185, 191, 192], "xor_0_34": [167, 171], "cipher_output_21_12_i": 167, "cipher_output_21_12_o": 167, "xor_1_6_0": [167, 171], "xor_1_6_1": [167, 171], "cipher_output_1_8_30": [167, 171], "cipher_output_1_8_31": [167, 171], "x_31": [167, 171, 173, 174, 175, 176, 178, 182, 183, 185, 191, 192], "milp_constraint": [167, 171, 172, 173, 178, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192], "milp_wordwise_deterministic_truncated_xor_differential_constraint": [167, 169, 171, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192], "xor_1_31_word_0_class": [167, 171], "xor_1_31_word_1_class": [167, 171], "x_286": [167, 171], "x_287": [167, 171], "x_158": [167, 171], "x_159": [167, 171, 174, 175, 176], "cipher_output_1_12_0_i": 167, "cipher_output_1_12_1_i": 167, "cipher_output_1_12_2_i": 167, "cipher_output_1_12_30_o": 167, "cipher_output_1_12_31_o": 167, "minizinc_constraint": [167, 171, 182, 184, 185, 192], "minizinc_deterministic_truncated_xor_differential_trail_constraint": [167, 169, 171, 182, 184, 185], "minizinc_xor_differential_propagation_constraint": [167, 169, 171, 174, 175, 176, 182, 184, 185, 190, 192], "cipher_output_2_12_0_0": [167, 171], "cipher_output_2_12_1_0": [167, 171], "cipher_output_2_12_2_0": [167, 171], "xor_2_10_14_1": [167, 171], "cipher_output_2_12_30_1": [167, 171], "cipher_output_2_12_31_1": [167, 171], "xor_2_10_15_1": [167, 171], "cipher_output_2_12_0_i": 167, "cipher_output_2_12_1_i": 167, "cipher_output_2_12_2_i": 167, "cipher_output_2_12_30_o": 167, "cipher_output_2_12_31_o": 167, "xor_2_8_0": [167, 171], "xor_2_8_1": [167, 171], "cipher_output_2_12_0_o": 167, "cipher_output_2_12_1_o": 167, "get_bit_based_c_cod": [168, 169, 172, 173, 180, 181, 183, 186, 187, 188, 191], "get_word_based_c_cod": [168, 169, 182, 183, 184, 185, 189, 190], "constant_compon": 169, "constant_0_10": 169, "constant_0_10_y0": 169, "constant_0_10_y1": 169, "constant_0_10_y2": 169, "constant_0_10_y3": 169, "constant_0_10_y4": 169, "constant_0_10_y5": 169, "constant_0_10_y6": 169, "constant_0_10_y7": 169, "constant_0_10_y8": 169, "constant_0_10_y9": 169, "constant_0_10_y10": 169, "constant_0_10_y11": 169, "constant_0_10_y12": 169, "constant_0_10_y13": 169, "constant_0_10_y14": 169, "constant_0_10_y15": 169, "constant_0_10_y16": 169, "constant_0_10_y17": 169, "constant_0_10_y18": 169, "constant_0_10_y19": 169, "constant_0_10_y20": 169, "constant_0_10_y21": 169, "constant_0_10_y22": 169, "constant_0_10_y23": 169, "constant_2_0_0": 169, "constant_2_0_1": 169, "constant_2_0_2": 169, "constant_2_0_13": 169, "constant_2_0_14": 169, "constant_2_0_15": 169, "array1d": [169, 174, 175, 176, 182, 184, 185, 190], "constant_0_18_act": 169, "constant_0_18_valu": 169, "constant_0_30": 169, "constant_2_0_o": 169, "constant_1_0_0": 169, "constant_1_0_1": 169, "constant_1_0_14": 169, "constant_1_0_15": 169, "constant_0_30_word_0_class": 169, "constant_0_30_word_1_class": 169, "constant_0_30_word_2_class": 169, "constant_0_30_word_3_class": 169, "constant_2_0_0_o": 169, "constant_2_0_1_o": 169, "constant_2_0_14_o": 169, "constant_2_0_15_o": 169, "constant_xor_differential_constraint": 169, "constant_2_0_0_0": 169, "constant_2_0_1_0": 169, "constant_2_0_2_0": 169, "constant_2_0_13_1": 169, "constant_2_0_14_1": 169, "constant_2_0_15_1": 169, "constant_2_0_2_o": 169, "constant_0_2_0": 169, "constant_0_2_1": 169, "constant_0_2_30": 169, "constant_0_2_31": 169, "constant_0_2_0_o": 169, "constant_0_2_1_o": 169, "constant_0_2_30_o": 169, "constant_0_2_31_o": 169, "constant_to_repr": 169, "intermediateoutput": 171, "intermediate_compon": 171, "intermediate_output_0_6_o": 171, "intermediate_output_0_6_i": 171, "xor_0_4_o": 171, "intermediate_output_0_6_1_i": 171, "intermediate_output_0_6_2_i": 171, "xor_0_4_14_o": 171, "x_110": 171, "xor_0_4_15_o": 171, "x_111": 171, "intermediate_output_0_6_0_o": 171, "intermediate_output_0_6_1_o": 171, "intermediate_output_0_6_30_i": 171, "intermediate_output_0_6_31_i": 171, "intermediate_output_0_6_2_o": 171, "intermediate_output_0_6_29_i": 171, "xor_0_4_13_o": 171, "update_xor_linear_constraints_for_more_than_one_bit": 171, "intermediate_var": 171, "linked_compon": 171, "linearlay": [172, 173, 180, 181, 186, 187, 188], "linear_layer_compon": [172, 173, 180, 181, 186, 187, 188, 191], "linear_layer_0_6": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_y0": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x23": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x19": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x18": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x16": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x15": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x14": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x12": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x9": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x8": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x6": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_x3": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_0": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_1": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_2": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_21": [172, 180, 181, 186, 187, 188], "sbox_0_0_1": [172, 180, 181, 186, 187, 188], "sbox_0_1_2": [172, 180, 181, 183, 186, 187, 188], "sbox_0_1_3": [172, 180, 181, 183, 186, 187, 188], "sbox_0_2_0": [172, 180, 181, 183, 186, 187, 188], "sbox_0_2_1": [172, 180, 181, 183, 186, 187, 188], "sbox_0_2_3": [172, 180, 181, 183, 186, 187, 188], "sbox_0_3_1": [172, 180, 181, 186, 187, 188], "sbox_0_3_2": [172, 180, 181, 186, 187, 188], "sbox_0_4_1": [172, 180, 181, 186, 187, 188], "sbox_0_4_2": [172, 180, 181, 186, 187, 188], "sbox_0_5_1": [172, 180, 181, 183, 186, 187, 188], "sbox_0_5_3": [172, 180, 181, 183, 186, 187, 188], "linear_layer_0_6_22": [172, 180, 181, 186, 187, 188], "sbox_0_0_2": [172, 180, 181, 186, 187, 188], "sbox_0_2_2": [172, 180, 181, 183, 186, 187, 188], "sbox_0_4_3": [172, 180, 181, 186, 187, 188], "sbox_0_5_0": [172, 180, 181, 183, 186, 187, 188], "linear_layer_0_6_23": [172, 180, 181, 186, 187, 188], "sbox_0_0_0": [172, 180, 181, 186, 187, 188], "sbox_0_0_3": [172, 180, 181, 186, 187, 188], "sbox_0_3_3": [172, 180, 181, 186, 187, 188], "sbox_0_5_2": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_0_i": [172, 173, 180, 181, 186, 187, 188, 191], "linear_layer_0_6_1_i": [172, 173, 180, 181, 186, 187, 188, 191], "linear_layer_0_6_2_i": [172, 173, 180, 181, 186, 187, 188, 191], "linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_0_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_1_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_2_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_3_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_4_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_5_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_6_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_8_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_9_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_10_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_11_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_12_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_18_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_19_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_23_linear_layer_0_6_21_o": [172, 173, 180, 181, 186, 187, 188, 191], "linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_0_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_1_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_2_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_3_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_4_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_6_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_9_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_13_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_14_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_15_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_16_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_19_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_20_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_21_linear_layer_0_6_22_o": [172, 173, 180, 181, 186, 187, 188, 191], "linear_layer_0_6_23_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_1_linear_layer_0_6_23_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_5_linear_layer_0_6_23_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_7_linear_layer_0_6_23_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_8_linear_layer_0_6_23_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_9_linear_layer_0_6_23_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_14_linear_layer_0_6_23_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_17_linear_layer_0_6_23_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_18_linear_layer_0_6_23_o": [172, 173, 180, 181, 186, 187, 188, 191], "dummy_23_linear_layer_0_6_23_o": [172, 173, 180, 181, 186, 187, 188, 191], "sbox_0_1": [172, 180, 181, 183, 186, 187, 188, 194], "sbox_0_3": [172, 180, 181, 186, 187, 188], "sbox_0_4": [172, 180, 181, 186, 187, 188], "sbox_0_5": [172, 180, 181, 183, 186, 187, 188], "linear_layer_0_6_i": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_o": [172, 180, 181, 186, 187, 188], "milp_bitwise_deterministic_truncated_xor_differential_binary_constraint": [172, 173, 174, 175, 176, 180, 181, 186, 187, 188, 191, 192], "68": [172, 173, 180, 181, 186, 187, 188, 191, 194], "sbox_0_1_0": [172, 173, 180, 181, 183, 186, 187, 188, 191], "sbox_0_1_1": [172, 173, 180, 181, 183, 186, 187, 188, 191], "linear_layer_0_17_62": [172, 173, 180, 181, 186, 187, 188, 191], "x_126": [172, 173, 178, 180, 181, 186, 187, 188, 191], "linear_layer_0_17_63": [172, 173, 180, 181, 186, 187, 188, 191], "x_127": [172, 173, 178, 180, 181, 186, 187, 188, 191], "x_65": [172, 173, 174, 175, 176, 178, 180, 181, 186, 187, 188, 191, 192], "mix_column_0_20_word_0_class_bit_0": [172, 180, 181, 186, 187, 188], "mix_column_0_20_word_0_class_bit_1": [172, 180, 181, 186, 187, 188], "mix_column_0_21_14": [172, 180, 181, 186, 187, 188], "mix_column_0_21_15": [172, 180, 181, 186, 187, 188], "x_18": [172, 180, 181, 183, 186, 187, 188], "x_19": [172, 180, 181, 183, 186, 187, 188], "x_25": [172, 173, 180, 181, 183, 186, 187, 188, 191], "linear_layer_0_17_0_i": [172, 180, 181, 186, 187, 188], "linear_layer_0_17_1_i": [172, 180, 181, 186, 187, 188], "linear_layer_0_17_62_o": [172, 180, 181, 186, 187, 188], "linear_layer_0_17_63_o": [172, 180, 181, 186, 187, 188], "inter_0_linear_layer_0_6_0_1": [172, 180, 181, 186, 187, 188], "inter_1_linear_layer_0_6_0_0": [172, 180, 181, 186, 187, 188], "inter_1_linear_layer_0_6_0_1": [172, 180, 181, 186, 187, 188], "sbox_0_1_0_1": [172, 180, 181, 186, 187, 188], "sbox_0_4_0": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_3_i": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_4_i": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_5_i": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_6_i": [172, 180, 181, 186, 187, 188], "dummy_7_linear_layer_0_6_13_o": [172, 180, 181, 186, 187, 188], "dummy_8_linear_layer_0_6_13_o": [172, 180, 181, 186, 187, 188], "dummy_9_linear_layer_0_6_13_o": [172, 180, 181, 186, 187, 188], "dummy_11_linear_layer_0_6_13_o": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_17_o": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_18_o": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_19_o": [172, 180, 181, 186, 187, 188], "linear_layer_0_6_20_o": [172, 180, 181, 186, 187, 188], "update_constraints_for_more_than_one_bit": 172, "dict_inequ": 172, "indexes_of_values_in_col": 172, "number_of_1": 172, "mix_column_0_20_x0": [173, 191], "mix_column_0_20_y0": [173, 191], "mix_column_0_20_x1": [173, 191], "mix_column_0_20_y1": [173, 191], "mix_column_0_20_x2": [173, 191], "mix_column_0_20_y2": [173, 191], "mix_column_0_20_y61": [173, 191], "mix_column_0_20_y62": [173, 191], "mix_column_0_20_y63": [173, 191], "mix_column_0_23_0": [173, 191], "mix_column_0_23_1": [173, 191], "mix_column_0_23_2": [173, 191], "mix_column_0_23_15": [173, 191], "mix_column_0_20_35": [173, 191], "mix_column_0_20_39": [173, 191], "mix_column_0_20_43": [173, 191], "rot_0_17": [173, 191], "rot_0_18": [173, 182, 185, 191, 194], "rot_0_19": [173, 191], "rot_0_20": [173, 191], "mix_column_0_21_i": [173, 191], "mix_column_0_21_o": [173, 191], "rot_0_17_0": [173, 191], "rot_0_17_1": [173, 191], "mix_column_0_21_30": [173, 191], "mix_column_0_21_31": [173, 191], "x_24": [173, 183, 191], "md": [173, 191, 195], "rot_0_17_word_0_class_bit_0": [173, 191], "rot_0_17_word_0_class_bit_1": [173, 191], "mix_column_0_21_word_3_class_bit_0": [173, 191], "mix_column_0_21_word_3_class_bit_1": [173, 191], "mix_column_0_31_0_i": [173, 191], "mix_column_0_31_1_i": [173, 191], "mix_column_0_31_30_o": [173, 191], "mix_column_0_31_31_o": [173, 191], "x_23": [173, 183, 191], "mix_column_0_23_0_0": [173, 191], "inter_0_mix_column_0_23_0_0": [173, 191], "mix_column_0_23_0_i": [173, 191], "mix_column_0_23_1_i": [173, 191], "mix_column_0_23_2_i": [173, 191], "mix_column_0_23_15_o": [173, 191], "dummy_3_mix_column_0_23_15_o": [173, 191], "dummy_7_mix_column_0_23_15_o": [173, 191], "dummy_11_mix_column_0_23_15_o": [173, 191], "mix_column_0_23_14": [173, 191], "mix_column_0_20_36": [173, 191], "mix_column_0_20_40": [173, 191], "mix_column_0_20_44": [173, 191], "mix_column_0_20_37": [173, 191], "mix_column_0_20_41": [173, 191], "mix_column_0_20_45": [173, 191], "mix_column_0_20_34": [173, 191], "mix_column_0_20_38": [173, 191], "mix_column_0_20_42": [173, 191], "mix_column_0_23_14_o": [173, 191], "dummy_0_mix_column_0_23_4_o": [173, 191], "dummy_0_mix_column_0_23_8_o": [173, 191], "dummy_0_mix_column_0_23_12_o": [173, 191], "dummy_1_mix_column_0_23_5_o": [173, 191], "dummy_1_mix_column_0_23_9_o": [173, 191], "dummy_1_mix_column_0_23_13_o": [173, 191], "dummy_2_mix_column_0_23_14_o": [173, 191], "dummy_6_mix_column_0_23_14_o": [173, 191], "dummy_10_mix_column_0_23_14_o": [173, 191], "output_id_link_1": 173, "output_id_link_2": 173, "cp_get_all_input": 173, "numb_of_inp": [173, 192], "modadd_compon": [174, 175, 176], "modadd_1_9": 174, "modadd_1_9_c0_0": 174, "modadd_1_9_o0_0": 174, "modadd_1_9_x6": [174, 175, 176], "modadd_1_9_x0": [174, 175, 176], "modadd_1_9_o0_4": 174, "modadd_1_9_c1_4": 174, "modadd_1_9_x16": 174, "modadd_1_9_c1_5": 174, "modadd_1_9_o0_5": 174, "modadd_1_9_y5": 174, "modadd_1_9_x17": 174, "carry_modadd_0_1_0": 174, "carry_modadd_0_1_1": 174, "carry_modadd_0_1_2": 174, "modadd_0_1_13": [174, 192], "plaintext_29": 174, "carry_modadd_0_1_13": 174, "modadd_0_1_14": [174, 175, 176, 192], "plaintext_30": 174, "carry_modadd_0_1_14": 174, "modadd_0_1_15": [174, 175, 176, 192], "plaintext_31": [174, 175, 176], "lwr2016": [174, 175, 176, 197], "substrat": [174, 175, 176], "modadd_0_1_0_i": [174, 175, 176], "modadd_0_1_1_i": [174, 175, 176], "modadd_0_1_2_i": [174, 175, 176], "hw_modadd_0_1_14_o": [174, 175, 176], "modadd_0_1_14_o": [174, 175, 176], "modadd_0_1_30_i": [174, 175, 176], "hw_modadd_0_1_15_o": [174, 175, 176], "modadd_0_1_15_o": [174, 175, 176], "modadd_0_1_31_i": [174, 175, 176], "pre_modadd_0_1_0": [174, 175, 176], "pre_modadd_0_1_1": [174, 175, 176], "carry_modadd_0_1": 174, "modular_addition_word": [174, 175, 176], "cp_twoterms_xor_differential_prob": [174, 175, 176], "inplen": 174, "eq_modadd_0_1": [174, 175, 176], "eq": [174, 175, 176], "shi_pre_modadd_0_1_1": [174, 175, 176], "shi_pre_modadd_0_1_0": [174, 175, 176], "shi_modadd_0_1": [174, 175, 176], "foral": [174, 175, 176], "modadd_0_1_i": [174, 175, 176], "modadd_0_1_o": [174, 175, 176], "modadd_linear": [174, 175, 176], "create_bct_mzn_constraint_from_component_id": [174, 175, 176], "rot_0_0_0_class_bit_0": [174, 175, 176], "rot_0_0_0_class_bit_1": [174, 175, 176], "modadd_0_1_15_class_bit_0": [174, 175, 176], "modadd_0_1_15_class_bit_1": [174, 175, 176], "x_30": [174, 175, 176, 178, 182, 183, 185, 192], "x_157": [174, 175, 176], "x_160": [174, 175, 176], "430": [174, 175, 176], "fwgsh2016": [174, 175, 176, 197], "arbitrari": [174, 175, 176], "x_66": [174, 175, 176], "modadd_1_9_x1": [174, 175, 176], "modadd_1_9_x2": [174, 175, 176], "modadd_1_9_x3": [174, 175, 176], "modadd_1_9_x4": [174, 175, 176], "modadd_1_9_x5": [174, 175, 176], "modadd_1_9_x7": [174, 175, 176], "modadd_1_9_x8": [174, 175, 176], "modadd_1_9_x9": [174, 175, 176], "modadd_1_9_x10": [174, 175, 176], "modadd_1_9_x11": [174, 175, 176], "modadd_1_9_y0_0": [174, 175, 176], "modadd_1_9_y1_0": [174, 175, 176], "modadd_1_9_y2_0": [174, 175, 176], "modadd_1_9_y3_0": [174, 175, 176], "modadd_1_9_y4_0": [174, 175, 176], "modadd_1_9_y5_0": [174, 175, 176], "p_modadd_1_9_0": [174, 175, 176], "dummy_modadd_1_9_0": [174, 175, 176], "modadd_0_1_0_0": [174, 175, 176], "modadd_0_1_1_0": [174, 175, 176], "modadd_0_1_2_0": [174, 175, 176], "rot_0_0_15_0": [174, 175, 176], "plaintext_31_0": [174, 175, 176], "rot_0_0_15_1": [174, 175, 176], "modadd_0_1_15_0": [174, 175, 176], "plaintext_31_1": [174, 175, 176], "modadd_0_1_15_1": [174, 175, 176, 192], "lm2001": [174, 175, 176, 197], "modadd_0_1_0": [174, 175, 176, 192], "modadd_0_1_1": [174, 175, 176, 192], "modadd_0_1_2": [174, 175, 176], "carry_0_modadd_0_1_0": 174, "carry_0_modadd_0_1_1": 174, "carry_0_modadd_0_1_29": 174, "carry_0_modadd_0_1_30": 174, "modadd_0_1_30": [174, 175, 176], "modadd_0_1_31": [174, 175, 176], "shift_0_0_1": [174, 175, 176, 184], "key_1": [174, 175, 176, 190], "shift_0_0_2": [174, 175, 176, 184], "key_2": [174, 175, 176, 190], "carry_0_modadd_0_1_2": 174, "shift_0_0_30": [174, 175, 176, 184], "key_30": [174, 175, 176], "shift_0_0_31": [174, 175, 176, 184], "key_31": [174, 175, 176], "shift_0_0_0": [174, 184], "key_0": [174, 190], "hw_modadd_0_1_30": [174, 175, 176], "hw_modadd_0_1_31": [174, 175, 176], "hw_modadd_0_1_0": [174, 175, 176], "hw_modadd_0_1_1": [174, 175, 176], "hw_modadd_0_1_29": [174, 175, 176], "shift_0_0_29": [174, 175, 176, 184], "key_29": [174, 175, 176], "modadd_0_1_29": [174, 175, 176], "hw_modadd_0_1_30_o": [174, 175, 176], "hw_modadd_0_1_31_o": [174, 175, 176], "hw_modadd_0_1_0_o": [174, 175, 176], "hw_modadd_0_1_1_o": [174, 175, 176], "modadd_0_1_0_o": [174, 175, 176], "modadd_0_1_32_i": [174, 175, 176], "hw_modadd_0_1_2_o": [174, 175, 176], "modadd_0_1_1_o": [174, 175, 176], "modadd_0_1_33_i": [174, 175, 176], "modadd_0_1_30_o": [174, 175, 176], "modadd_0_1_62_i": [174, 175, 176], "modadd_0_1_31_o": [174, 175, 176], "modadd_0_1_63_i": [174, 175, 176], "twoterms_milp_probability_xor_linear_constraint": [174, 175, 176], "fu2016": [174, 175, 176], "fukai6": [174, 175, 176], "milp_speck": [174, 175, 176], "speck_diff_find": [174, 175, 176], "cms_modadd": 174, "input0_id": 174, "input1_id": 174, "carry_id": 174, "cms_modadd_seq": 174, "outputs_id": 174, "inputs_id": [174, 205], "carries_id": 174, "sat_modadd": 174, "sat_modadd_seq": 174, "smt_modadd": 174, "smt_modadd_seq": 174, "modsub_0_0": [175, 194], "modsub_compon": 175, "modsub_0_0_b0_0": 175, "modsub_0_0_y0": 175, "modsub_0_0_x4": 175, "modsub_0_0_x0": 175, "modsub_0_0_b0_1": 175, "modsub_0_0_y1": 175, "modsub_0_0_x5": 175, "modsub_0_0_x1": 175, "modsub_0_0_b0_2": 175, "modsub_0_0_y2": 175, "modsub_0_0_x6": 175, "modsub_0_0_x2": 175, "modsub_0_0_b0_3": 175, "modsub_0_0_y3": 175, "modsub_0_0_x7": 175, "modsub_0_0_x3": 175, "temp_carry_plaintext_32": 175, "temp_carry_plaintext_33": 175, "temp_carry_plaintext_34": 175, "modsub_0_7_31": 175, "modadd_0_4_31": 175, "temp_input_plaintext_63": 175, "constant_modsub_0_7": 175, "minus_pre_modsub_0_7_1": 175, "pre_modsub_0_7_0": 175, "modadd_0_4": 175, "pre_minus_pre_modsub_0_7_1": 175, "pre_modsub_0_7_1": 175, "modsub_0_7": 175, "modsub_0_7_30": 175, "plaintext_33": 175, "plaintext_34": 175, "modadd_0_4_30": 175, "temp_input_plaintext_62": 175, "carry_modsub_0_7_30": 175, "component_nam": 175, "generate_constraints_for_window_size_with_full_window": 176, "first_addend": 176, "second_addend": 176, "aux_var": 176, "modular_compon": 176, "milp_n_window_heurist": 176, "window_s": 176, "sat_n_window_heuristc_bit_level": 176, "not_compon": 178, "not_0_5": 178, "not_0_5_y0": 178, "not_0_5_x0": 178, "not_0_5_y1": 178, "not_0_5_x1": 178, "not_0_5_y2": 178, "not_0_5_x2": 178, "not_0_5_y61": 178, "not_0_5_x61": 178, "not_0_5_y62": 178, "not_0_5_x62": 178, "not_0_5_y63": 178, "not_0_5_x63": 178, "not_0_8_0": 178, "not_0_8_1": 178, "not_0_8_2": 178, "not_0_8_30": 178, "xor_0_6_30": 178, "not_0_8_31": 178, "xor_0_6_31": 178, "not_0_8": 178, "xor_0_6": 178, "cp_xor_differential_first_step_constraint": [178, 182, 183, 184, 185], "not_0_18": 178, "not_0_5_i": 178, "not_0_5_o": 178, "xor_0_6_0": 178, "xor_0_6_1": 178, "xor_0_2_0": [178, 192], "xor_0_2_1": [178, 192], "not_0_5_62": 178, "not_0_5_63": 178, "not_0_5_0_i": 178, "not_0_5_1_i": 178, "not_0_5_62_o": 178, "not_0_5_63_o": 178, "not_0_8_0_0": 178, "not_0_8_1_0": 178, "not_0_8_2_0": 178, "xor_0_6_30_0": 178, "xor_0_6_30_1": 178, "not_0_8_30_1": 178, "xor_0_6_31_0": 178, "xor_0_6_31_1": 178, "not_0_8_31_1": 178, "not_0_8_0_i": 178, "not_0_8_1_i": 178, "not_0_8_2_i": 178, "not_0_8_30_o": 178, "not_0_8_30_i": 178, "not_0_8_31_i": 178, "not_0_8_31_o": 178, "not_0_5_0": 178, "not_0_5_1": 178, "xor_0_2_62": 178, "xor_0_2_63": 178, "not_0_5_0_o": 178, "not_0_5_1_o": 178, "not_0_5_62_i": 178, "not_0_5_63_i": 178, "or_compon": 179, "or_0_4": 179, "or_0_4_x0": 179, "or_0_4_x32": 179, "or_0_4_y0": 179, "or_0_4_x1": 179, "or_0_4_x33": 179, "or_0_4_y1": 179, "or_0_4_x2": 179, "or_0_4_x34": 179, "or_0_4_y2": 179, "or_0_4_x3": 179, "or_0_4_x35": 179, "or_0_4_y3": 179, "or_0_4_x4": 179, "or_0_4_x36": 179, "or_0_4_y4": 179, "or_0_4_x5": 179, "or_0_4_x37": 179, "or_0_4_y5": 179, "or_0_4_x6": 179, "or_0_4_x38": 179, "or_0_4_y6": 179, "or_0_4_x7": 179, "or_0_4_x39": 179, "or_0_4_y7": 179, "or_0_4_x8": 179, "or_0_4_x40": 179, "or_0_4_y8": 179, "or_0_4_x9": 179, "or_0_4_x41": 179, "or_0_4_y9": 179, "or_0_4_x10": 179, "or_0_4_x42": 179, "or_0_4_y10": 179, "or_0_4_x11": 179, "or_0_4_x43": 179, "or_0_4_y11": 179, "or_0_4_x12": 179, "or_0_4_x44": 179, "or_0_4_y12": 179, "or_0_4_x13": 179, "or_0_4_x45": 179, "or_0_4_y13": 179, "or_0_4_x14": 179, "or_0_4_x46": 179, "or_0_4_y14": 179, "or_0_4_x15": 179, "or_0_4_x47": 179, "or_0_4_y15": 179, "or_0_4_x16": 179, "or_0_4_x48": 179, "or_0_4_y16": 179, "or_0_4_x17": 179, "or_0_4_x49": 179, "or_0_4_y17": 179, "or_0_4_x18": 179, "or_0_4_x50": 179, "or_0_4_y18": 179, "or_0_4_x19": 179, "or_0_4_x51": 179, "or_0_4_y19": 179, "or_0_4_x20": 179, "or_0_4_x52": 179, "or_0_4_y20": 179, "or_0_4_x21": 179, "or_0_4_x53": 179, "or_0_4_y21": 179, "or_0_4_x22": 179, "or_0_4_x54": 179, "or_0_4_y22": 179, "or_0_4_x23": 179, "or_0_4_x55": 179, "or_0_4_y23": 179, "or_0_4_x24": 179, "or_0_4_x56": 179, "or_0_4_y24": 179, "or_0_4_x25": 179, "or_0_4_x57": 179, "or_0_4_y25": 179, "or_0_4_x26": 179, "or_0_4_x58": 179, "or_0_4_y26": 179, "or_0_4_x27": 179, "or_0_4_x59": 179, "or_0_4_y27": 179, "or_0_4_x28": 179, "or_0_4_x60": 179, "or_0_4_y28": 179, "or_0_4_x29": 179, "or_0_4_x61": 179, "or_0_4_y29": 179, "or_0_4_x30": 179, "or_0_4_x62": 179, "or_0_4_y30": 179, "or_0_4_x31": 179, "or_0_4_x63": 179, "or_0_4_y31": 179, "or_0_9": 179, "pre_or_0_9_0": 179, "pre_or_0_9_1": 179, "39": [179, 194], "p_or_39_6": 179, "or_39_6_i": 179, "or_39_6_o": 179, "or_0_4_0": 179, "or_0_4_1": 179, "or_0_4_2": 179, "or_0_4_31": 179, "xor_0_3_31": 179, "xor_0_1_31": 179, "or_0_4_30": 179, "xor_0_3_0": 179, "xor_0_1_0": 179, "xor_0_3_1": 179, "xor_0_1_1": 179, "xor_0_3_30": 179, "xor_0_1_30": 179, "rotate_compon": [182, 185], "rot_1_11_y0": [182, 185], "rot_1_11_x3": [182, 185], "rot_1_11_y1": [182, 185], "rot_1_11_x4": [182, 185], "rot_1_11_y2": [182, 185], "rot_1_11_x5": [182, 185], "rot_1_11_y3": [182, 185], "rot_1_11_x0": [182, 185], "rot_1_11_y4": [182, 185], "rot_1_11_x1": [182, 185], "rot_1_11_y5": [182, 185], "rot_1_11_x2": [182, 185], "rot_1_1_0": [182, 185], "rot_1_1_1": [182, 185], "rot_1_1_2": [182, 185], "key_39": [182, 185], "rot_1_1_14": [182, 185], "rot_1_1_15": [182, 185], "key_40": [182, 185], "cp_inverse_constraint": [182, 184, 185], "rot_0_0_invers": [182, 185], "_activ": [182, 183, 185], "sbox_0_6_act": [182, 184, 185], "sbox_0_10_act": [182, 185], "_valu": [182, 185], "sbox_0_14_valu": [182, 185], "sbox_0_2_valu": [182, 185], "rot_0_0_o": [182, 185], "rot_1_1": [182, 185], "key_32": [182, 185], "key_33": [182, 185], "sbox_0_2_word_0_class": [182, 184, 185], "sbox_0_6_word_0_class": [182, 184, 185], "rot_0_18_30": [182, 185], "x_70": [182, 184, 185], "rot_0_18_31": [182, 185], "x_71": [182, 184, 185], "rot_1_1_0_i": [182, 185], "rot_1_1_1_i": [182, 185], "rot_1_1_14_o": [182, 185], "rot_1_1_15_o": [182, 185], "rotate_mzn_constraint": [182, 185], "lrot": [182, 185], "rot_1_1_0_0": [182, 185], "rot_1_1_1_0": [182, 185], "rot_1_1_2_0": [182, 185], "key_39_1": [182, 185], "rot_1_1_14_1": [182, 185], "rot_1_1_15_1": [182, 185], "key_40_1": [182, 185], "rot_1_1_2_i": [182, 185], "rot_1_1_7_i": [182, 185], "rot_1_1_8_i": [182, 185], "plaintext_9": [182, 184, 185], "plaintext_10": [182, 185], "plaintext_7": [182, 185], "plaintext_8": [182, 184, 185], "rot_0_0_14_o": [182, 185], "rot_0_0_15_o": [182, 185], "rot_0_0_0_o": [182, 185], "rot_0_0_9_i": [182, 185], "rot_0_0_1_o": [182, 185], "rot_0_0_10_i": [182, 185], "rot_0_0_7_i": [182, 185], "rot_0_0_8_i": [182, 185], "s_box_descript": 183, "sbox_0_0_y2": 183, "sbox_0_0_y0": 183, "sbox_0_0_x3": 183, "sbox_0_0_y1": 183, "sbox_0_0_y3": 183, "xor_0_0_4": 183, "xor_0_0_5": 183, "xor_0_0_6": 183, "xor_0_0_7": 183, "sbox_mant": 183, "encount": 183, "again": 183, "table_sbox_0_5": 183, "xor_0_1": [183, 199], "xor_0_0_valu": [183, 192], "sbox_0_1_act": 183, "ddt_sbox_0_5": 183, "sbox_0_5_i": 183, "sbox_0_5_o": 183, "lat_sbox_0_5": 183, "generate_sbox_sign_lat": 183, "get_ddt_with_undisturbed_transit": 183, "undisturb": [183, 195], "valid_transit": 183, "81": [183, 197], "243": 183, "xor_0_0_0": 183, "xor_0_0_1": 183, "milp_large_xor_differential_probability_constraint": 183, "_non_linear_component_id": 183, "sbox_0_1_6": 183, "sbox_0_1_7": 183, "milp_large_xor_linear_probability_constraint": 183, "veri": 183, "sbox_0_1_0_i": 183, "sbox_0_1_1_i": 183, "sbox_0_1_6_o": 183, "sbox_0_1_7_o": 183, "x_20": 183, "x_21": 183, "x_22": 183, "x_26": 183, "x_27": 183, "x_28": [183, 197], "x_29": 183, "442": 183, "368": 183, "342": 183, "319": [183, 197], "milp_small_xor_differential_probability_constraint": 183, "milp_small_xor_linear_probability_constraint": 183, "appendix": 183, "sbox_0_1_2_o": 183, "sbox_0_1_3_o": 183, "milp_undisturbed_bits_bitwise_deterministic_truncated_xor_differential_constraint": 183, "mention": 183, "xor_0_0_0_class_bit_0": 183, "xor_0_0_0_class_bit_1": 183, "sbox_0_1_3_class_bit_0": 183, "sbox_0_1_3_class_bit_1": 183, "enforc": 183, "geometri": 183, "constructor": 183, "vertic": 183, "hrepresent": 183, "repr_pretti": 183, "xor_0_0_word_0_class_bit_0": 183, "xor_0_0_word_0_class_bit_1": 183, "sbox_0_1_word_0_class_bit_0": 183, "sbox_0_1_word_0_class_bit_1": 183, "milp_wordwise_deterministic_truncated_xor_differential_simple_constraint": [183, 192], "simplifi": [183, 192], "dx": 183, "dy": [183, 192], "xor_0_0_word_0_class": 183, "sbox_0_1_word_0_class": 183, "sbox_0_2_0_0": 183, "sbox_0_2_1_0": 183, "sbox_0_2_2_0": 183, "xor_0_0_6_0": 183, "sbox_0_2_3_0": 183, "xor_0_0_5_0": 183, "xor_0_0_4_0": 183, "hw_sbox_0_2_2": 183, "hw_sbox_0_2_3": 183, "hw_sbox_0_2_1": 183, "hw_sbox_0_2_0": 183, "sbox_0_2_0_i": 183, "sbox_0_2_1_i": 183, "sbox_0_2_2_i": 183, "sbox_0_2_1_o": 183, "hw_sbox_0_2_2_o": 183, "hw_sbox_0_2_1_o": 183, "hw_sbox_0_2_0_o": 183, "xor_0_0_2": 183, "xor_0_0_3": 183, "ak2019": [183, 197], "hw_sbox_0_5_2": 183, "hw_sbox_0_5_3": 183, "plaintext_20": 183, "hw_sbox_0_5_1": 183, "hw_sbox_0_5_0": 183, "hw_sbox_0_2_3_o": 183, "sbox_0_2_0_o": 183, "sbox_0_2_3_i": 183, "sbox_0_2_3_o": 183, "check_table_feas": 183, "table_typ": 183, "cp_update_ddt_valid_prob": 183, "table_item": 183, "cp_update_lat_valid_prob": 183, "milp_large_xor_probability_constraint_for_inequ": 183, "ineq": 183, "proba": 183, "sbox_input_s": 183, "sbox_output_s": 183, "milp_set_constraints_from_dictionnary_for_large_sbox": 183, "probability_dictionari": 183, "sat_build_table_templ": 183, "get_hamming_weight_funct": 183, "input_bit_len": 183, "output_bit_len": 183, "smt_build_table_templ": 183, "smt_get_sbox_probability_constraint": 183, "shift_compon": 184, "shift_1_12": 184, "shift_1_12_y0": 184, "shift_1_12_y1": 184, "shift_1_12_y2": 184, "shift_1_12_y3": 184, "shift_1_12_x0": 184, "shift_1_12_y4": 184, "shift_1_12_x1": 184, "shift_1_12_y5": 184, "shift_1_12_x2": 184, "36": [184, 194], "shift_0_0_invers": 184, "shift_0_18_act": 184, "shift_0_18_valu": 184, "shift_0_18": 184, "shift_0_0_i": 184, "shift_0_0_o": 184, "shift_0_0_6": 184, "shift_0_0_7": 184, "shift_0_18_30": 184, "shift_0_18_31": 184, "shift_0_0_0_i": 184, "shift_0_0_1_i": 184, "shift_0_0_6_o": 184, "shift_0_0_7_o": 184, "shift_mzn_constraint": 184, "lshift": [184, 190], "shift_0_0_x0": 184, "shift_0_0_x1": 184, "shift_0_0_x2": 184, "shift_0_0_x3": 184, "shift_0_0_x4": 184, "shift_0_0_x5": 184, "shift_0_0_x6": 184, "shift_0_0_x7": 184, "shift_0_0_x8": 184, "shift_0_0_x9": 184, "shift_0_0_x10": 184, "shift_0_0_x11": 184, "shift_0_0_x12": 184, "shift_0_0_x13": 184, "shift_0_0_x14": 184, "shift_0_0_x15": 184, "shift_0_0_x16": 184, "shift_0_0_x17": 184, "shift_0_0_x18": 184, "shift_0_0_x19": 184, "shift_0_0_x20": 184, "shift_0_0_x21": 184, "shift_0_0_x22": 184, "shift_0_0_x23": 184, "shift_0_0_x24": 184, "shift_0_0_x25": 184, "shift_0_0_x26": 184, "shift_0_0_x27": 184, "shift_0_0_x28": 184, "shift_0_0_x29": 184, "shift_0_0_x30": 184, "shift_0_0_x31": 184, "shift_0_0_y0": 184, "shift_0_0_y1": 184, "shift_0_0_y2": 184, "shift_0_0_y3": 184, "shift_0_0_y4": 184, "shift_0_0_y5": 184, "shift_0_0_y6": 184, "shift_0_0_y7": 184, "shift_0_0_y8": 184, "shift_0_0_y9": 184, "shift_0_0_y10": 184, "shift_0_0_y11": 184, "shift_0_0_y12": 184, "shift_0_0_y13": 184, "shift_0_0_y14": 184, "shift_0_0_y15": 184, "shift_0_0_y16": 184, "shift_0_0_y17": 184, "shift_0_0_y18": 184, "shift_0_0_y19": 184, "shift_0_0_y20": 184, "shift_0_0_y21": 184, "shift_0_0_y22": 184, "shift_0_0_y23": 184, "shift_0_0_y24": 184, "shift_0_0_y25": 184, "shift_0_0_y26": 184, "shift_0_0_y27": 184, "shift_0_0_y28": 184, "shift_0_0_y29": 184, "shift_0_0_y30": 184, "shift_0_0_y31": 184, "shift_0_0_0_0": 184, "shift_0_0_1_0": 184, "shift_0_0_2_0": 184, "shift_0_0_30_1": 184, "shift_0_0_31_0": 184, "shift_0_0_31_1": 184, "shift_0_0_2_i": 184, "shift_0_0_30_i": 184, "shift_0_0_26_o": 184, "shift_0_0_27_o": 184, "shift_0_0_31_i": 184, "plaintext_36": 184, "plaintext_37": 184, "shift_0_0_27": 184, "plaintext_63": 184, "shift_0_0_28": 184, "shift_0_0_30_o": 184, "shift_0_0_31_o": 184, "shiftrow": 185, "thetakeccak": 187, "thetaxoodoo": 188, "variablerot": 189, "variableshift": 190, "BY": 190, "variable_shift_compon": 190, "var_shift_0_2_0": 190, "var_shift_0_2_1": 190, "var_shift_0_2_2": 190, "var_shift_0_2_31": 190, "state_3_var_shift_0_2_31": 190, "key_91": 190, "pre_var_shift_0_2": 190, "shift_amount_var_shift_0_2": 190, "bitarraytoint": 190, "95": 190, "var_shift_0_2": 190, "mzn_shift_by_variable_amount_constraint": 190, "lshift_by_variable_amount": 190, "var_shift_0_2_x0": 190, "var_shift_0_2_x1": 190, "var_shift_0_2_x2": 190, "var_shift_0_2_x3": 190, "var_shift_0_2_x4": 190, "var_shift_0_2_x5": 190, "var_shift_0_2_x6": 190, "var_shift_0_2_x7": 190, "var_shift_0_2_x8": 190, "var_shift_0_2_x9": 190, "var_shift_0_2_x10": 190, "var_shift_0_2_x11": 190, "var_shift_0_2_x12": 190, "var_shift_0_2_x13": 190, "var_shift_0_2_x14": 190, "var_shift_0_2_x15": 190, "var_shift_0_2_x16": 190, "var_shift_0_2_x17": 190, "var_shift_0_2_x18": 190, "var_shift_0_2_x19": 190, "var_shift_0_2_x20": 190, "var_shift_0_2_x21": 190, "var_shift_0_2_x22": 190, "var_shift_0_2_x23": 190, "var_shift_0_2_x24": 190, "var_shift_0_2_x25": 190, "var_shift_0_2_x26": 190, "var_shift_0_2_x27": 190, "var_shift_0_2_x28": 190, "var_shift_0_2_x29": 190, "var_shift_0_2_x30": 190, "var_shift_0_2_x31": 190, "2147483648": 190, "var_shift_0_2_x63": 190, "1073741824": 190, "var_shift_0_2_x62": 190, "536870912": 190, "var_shift_0_2_x61": 190, "268435456": 190, "var_shift_0_2_x60": 190, "134217728": 190, "var_shift_0_2_x59": 190, "67108864": 190, "var_shift_0_2_x58": 190, "33554432": 190, "var_shift_0_2_x57": 190, "16777216": 190, "var_shift_0_2_x56": 190, "8388608": 190, "var_shift_0_2_x55": 190, "4194304": 190, "var_shift_0_2_x54": 190, "2097152": 190, "var_shift_0_2_x53": 190, "1048576": 190, "var_shift_0_2_x52": 190, "524288": 190, "var_shift_0_2_x51": 190, "262144": 190, "var_shift_0_2_x50": 190, "131072": 190, "var_shift_0_2_x49": 190, "65536": 190, "var_shift_0_2_x48": 190, "32768": 190, "var_shift_0_2_x47": 190, "16384": 190, "var_shift_0_2_x46": 190, "8192": 190, "var_shift_0_2_x45": 190, "4096": 190, "var_shift_0_2_x44": 190, "2048": 190, "var_shift_0_2_x43": 190, "var_shift_0_2_x42": 190, "var_shift_0_2_x41": 190, "var_shift_0_2_x40": 190, "var_shift_0_2_x39": 190, "var_shift_0_2_x38": 190, "var_shift_0_2_x37": 190, "var_shift_0_2_x36": 190, "var_shift_0_2_x35": 190, "var_shift_0_2_x34": 190, "var_shift_0_2_x33": 190, "var_shift_0_2_x32": 190, "var_shift_0_2_y0": 190, "var_shift_0_2_y1": 190, "var_shift_0_2_y2": 190, "var_shift_0_2_y3": 190, "var_shift_0_2_y4": 190, "var_shift_0_2_y5": 190, "var_shift_0_2_y6": 190, "var_shift_0_2_y7": 190, "var_shift_0_2_y8": 190, "var_shift_0_2_y9": 190, "var_shift_0_2_y10": 190, "var_shift_0_2_y11": 190, "var_shift_0_2_y12": 190, "var_shift_0_2_y13": 190, "var_shift_0_2_y14": 190, "var_shift_0_2_y15": 190, "var_shift_0_2_y16": 190, "var_shift_0_2_y17": 190, "var_shift_0_2_y18": 190, "var_shift_0_2_y19": 190, "var_shift_0_2_y20": 190, "var_shift_0_2_y21": 190, "var_shift_0_2_y22": 190, "var_shift_0_2_y23": 190, "var_shift_0_2_y24": 190, "var_shift_0_2_y25": 190, "var_shift_0_2_y26": 190, "var_shift_0_2_y27": 190, "var_shift_0_2_y28": 190, "var_shift_0_2_y29": 190, "var_shift_0_2_y30": 190, "var_shift_0_2_y31": 190, "state_0_var_shift_0_2_0": 190, "state_0_var_shift_0_2_1": 190, "var_shift_0_2_30": 190, "key_95": 190, "state_3_var_shift_0_2_30": 190, "wordpermut": 191, "xor_0_7_y0": 192, "xor_0_7_x12": 192, "xor_0_7_x0": 192, "xor_0_7_y1": 192, "xor_0_7_x13": 192, "xor_0_7_x1": 192, "xor_0_7_y2": 192, "xor_0_7_x14": 192, "xor_0_7_x2": 192, "xor_0_7_y3": 192, "xor_0_7_x15": 192, "xor_0_7_x3": 192, "xor_0_7_y4": 192, "xor_0_7_x16": 192, "xor_0_7_x4": 192, "xor_0_7_y5": 192, "xor_0_7_x17": 192, "xor_0_7_x5": 192, "xor_0_7_y6": 192, "xor_0_7_x18": 192, "xor_0_7_x6": 192, "xor_0_7_y7": 192, "xor_0_7_x19": 192, "xor_0_7_x7": 192, "xor_0_7_y8": 192, "xor_0_7_x20": 192, "xor_0_7_x8": 192, "xor_0_7_y9": 192, "xor_0_7_x21": 192, "xor_0_7_x9": 192, "xor_0_7_y10": 192, "xor_0_7_x22": 192, "xor_0_7_x10": 192, "xor_0_7_y11": 192, "xor_0_7_x23": 192, "xor_0_7_x11": 192, "xor_0_2_2": 192, "xor_0_2_13": 192, "key_61": 192, "xor_0_2_14": 192, "xor_0_2_15": 192, "cp_transform_xor_components_for_first_step": 192, "temp_0_0_valu": 192, "temp_0_0_act": 192, "temp_0_15_act": 192, "temp_1_15_act": 192, "xor_0_0_act": 192, "temp_0_15_valu": 192, "temp_1_15_valu": 192, "log2": 192, "variables_list": 192, "_variables_list": 192, "rot_2_16": 192, "xor_2_26": 192, "xor_0_2_i": 192, "xor_0_2_o": 192, "wich": 192, "xor_0_5": 192, "and_0_4_0_class_bit_0": 192, "and_0_4_0_class_bit_1": 192, "xor_0_5_15_class_bit_0": 192, "xor_0_5_15_class_bit_1": 192, "and_0_4_0": 192, "and_0_4_1": 192, "xor_0_5_14": 192, "xor_0_5_15": 192, "manner": 192, "inde": 192, "delta_x_0": 192, "delta_x_1": 192, "delta_x_2": 192, "yield": 192, "delta_i": 192, "cancel": 192, "infer": 192, "reason": 192, "instead": 192, "combin": 192, "xor_0_32": 192, "xor_0_31_word_0_class_bit_0": 192, "xor_0_31_word_0_class_bit_1": 192, "xor_0_32_30": 192, "x_118": 192, "xor_0_32_31": 192, "x_119": 192, "x_81": 192, "milp_wordwise_deterministic_truncated_xor_differential_sequential_constraint": 192, "xor_wordwise_deterministic_truncated_xor_differential_constraint": 192, "dx1": 192, "dx2": 192, "dx3": 192, "dx0": 192, "zeta": [192, 197], "zetax0": 192, "zetax1": 192, "milp_xor_linear_constraint": 192, "xor_0_5_0_i": 192, "xor_0_5_1_i": 192, "xor_0_5_14_o": 192, "xor_0_5_15_o": 192, "xor_minizinc_constraint": 192, "xor_word": 192, "narray1d": 192, "xor_0_2_x16": 192, "xor_0_2_x17": 192, "xor_0_2_x18": 192, "xor_0_2_x19": 192, "xor_0_2_x20": 192, "xor_0_2_x21": 192, "xor_0_2_x22": 192, "xor_0_2_x23": 192, "xor_0_2_x24": 192, "xor_0_2_x25": 192, "xor_0_2_x26": 192, "xor_0_2_x27": 192, "xor_0_2_x28": 192, "xor_0_2_x29": 192, "xor_0_2_x30": 192, "xor_0_2_x31": 192, "xor_0_2_x0": 192, "xor_0_2_x1": 192, "xor_0_2_x2": 192, "xor_0_2_x3": 192, "xor_0_2_x4": 192, "xor_0_2_x5": 192, "xor_0_2_x6": 192, "xor_0_2_x7": 192, "xor_0_2_x8": 192, "xor_0_2_x9": 192, "xor_0_2_x10": 192, "xor_0_2_x11": 192, "xor_0_2_x12": 192, "xor_0_2_x13": 192, "xor_0_2_x14": 192, "xor_0_2_x15": 192, "xor_0_2_y0": 192, "xor_0_2_y1": 192, "xor_0_2_y2": 192, "xor_0_2_y3": 192, "xor_0_2_y4": 192, "xor_0_2_y5": 192, "xor_0_2_y6": 192, "xor_0_2_y7": 192, "xor_0_2_y8": 192, "xor_0_2_y9": 192, "xor_0_2_y10": 192, "xor_0_2_y11": 192, "xor_0_2_y12": 192, "xor_0_2_y13": 192, "xor_0_2_y14": 192, "xor_0_2_y15": 192, "xor_0_2_0_0": 192, "xor_0_2_1_0": 192, "xor_0_2_2_0": 192, "xor_0_2_15_0": 192, "xor_0_2_15_1": 192, "key_63_1": 192, "xor_0_2_0_i": 192, "xor_0_2_1_i": 192, "xor_0_2_2_i": 192, "xor_0_2_15_i": 192, "xor_0_2_15_o": 192, "xor_0_2_31_i": 192, "key_48": 192, "key_49": 192, "xor_0_2_1_o": 192, "xor_0_2_30_i": 192, "xor_0_2_17_i": 192, "xor_0_2_14_o": 192, "xor_0_2_14_i": 192, "cp_build_truncated_t": 192, "generic_with_constant_sign_linear_constraint": 192, "const_mask": 192, "get_milp_constraints_from_inequ": 192, "get_transformed_xor_input_links_and_posit": 192, "input_len": 192, "component1_": 193, "component2_": 193, "round_object": 193, "create_xor_component_input": 193, "old_cipher_inputs_": 193, "get_component_pair": 193, "round_component_": 193, "update_cipher_input": [193, 194], "update_input_id_link": 193, "cipher_name_i4_o4_r1": 194, "word_oper": 194, "lfsr": 194, "nlfsr": 194, "register_1_info": 194, "register_2_info": 194, "register_n_info": 194, "register_word_length": 194, "feedback": 194, "coeffici": 194, "0101": 194, "0011": 194, "third": 194, "x8": 194, "fsr_0_0": 194, "register_len": 194, "cipher_name_i12_o12_r1": 194, "blanklin": 194, "not_0_0": 194, "or_0_0": 194, "component_0_0": [194, 199], "cipher_output_0_0": 194, "add_compon": [194, 198, 199], "0xab02": 194, "tag": 194, "mix_column_0_0": 194, "perm_0_0": 194, "rev_0_0": 194, "rotate_0_0": 194, "shift_row_0_0": 194, "shift_rows_0_0": 194, "sigma_0_0": 194, "theta": [194, 195], "var_rotate_0_0": 194, "var_rot_0_0": 194, "var_shift_0_0": 194, "word_bas": 194, "generate_expanded_link": 194, "get_final_input_posit": 194, "new_input_posit": 194, "unique_length": 194, "get_output_bit_size_from_id": 194, "get_unique_links_inform": 194, "new_link": 194, "is_linear_layer_permut": 194, "m_t": 194, "next_component_index_from": 194, "propagate_equival": 194, "new_expanded_link": 194, "new_posit": 194, "propagate_permut": 194, "propagate_rot": 194, "remove_cipher_input_kei": 194, "remove_forbidden_par": 194, "cipher_without_key_schedul": 194, "removed_key_speck": 194, "remove_orphan_compon": 194, "remove_permut": 194, "effect": 194, "removed_permutations_pres": 194, "sbox_0_16": 194, "61": 194, "62": 194, "38": 194, "41": 194, "43": 194, "44": 194, "45": 194, "46": [194, 197], "49": [194, 197], "51": 194, "52": [194, 197], "53": 194, "55": [194, 197], "56": 194, "57": 194, "58": 194, "66": 194, "69": 194, "70": [194, 197], "71": 194, "75": 194, "76": 194, "77": 194, "78": 194, "79": 194, "sbox_0_19": 194, "int_to_bytearrai": [194, 201], "remove_rot": 194, "removed_rotations_speck": 194, "sbox_that_should_be_second": 194, "sbox_that_should_be_first": 194, "modifi": 194, "offset": 194, "update_component_input": 194, "parent_link": 194, "update_input": 194, "manual": 195, "document": [195, 197], "guidelin": 195, "editor": [195, 197], "compound": 195, "multi": 195, "tester": 195, "neural": [195, 197], "network": [195, 197], "diehard": 195, "dataset": [195, 205], "usefulfunct": 195, "mzn": 195, "predic": 195, "window": 195, "heurist": 195, "helper": 195, "xordiff": 195, "boomerang": [195, 197], "bct": 195, "tinyjambu": 195, "32bit": 195, "spongent": 195, "pi": 195, "gimli": 195, "sparkl": 195, "chacha": 195, "core": 195, "salsa": 195, "gaston": 195, "photon": 195, "zuc": 195, "trivium": 195, "bivium": 195, "snow3g": 195, "bluetooth": 195, "e0": 195, "a5": 195, "sha1": 195, "whirlpool": 195, "blake": 195, "blake2": 195, "md5": 195, "sha2": 195, "sparx": 195, "lblock": 195, "bea1": 195, "speedi": [195, 197], "scarf": 195, "qarmav2": 195, "lowmc": 195, "de": [195, 197], "kasumi": 195, "hight": 195, "exact": 195, "lea": 195, "threefish": 195, "rc5": 195, "toyspn2": 195, "script": 195, "bibliograph": 195, "luck": 197, "wenzel": 197, "workshop": 197, "fast": 197, "softwar": 197, "content": [197, 204], "2f978": 197, "662": 197, "46706": 197, "0_27": 197, "adp2018": 197, "albrecht": 197, "deo": 197, "paterson": 197, "cold": 197, "boot": 197, "lwe": 197, "ntt": 197, "transact": 197, "cryptograph": 197, "hardwar": 197, "2018": 197, "173": 197, "ankel": 197, "k\u00f6lbl": 197, "mind": 197, "gap": 197, "closer": 197, "select": 197, "area": 197, "cryptographi": 197, "sac": 197, "publish": 197, "030": 197, "10970": 197, "7_8": 197, "bc2003": 197, "biryukov": 197, "cannier": 197, "quadrat": 197, "proceed": 197, "2003": 197, "lnc": 197, "2887": 197, "pp": 197, "274": 197, "289": 197, "verlag": 197, "bfs2003": 197, "bardet": 197, "faug\u00e8r": 197, "salvi": 197, "complex": 197, "gr\u00f6bner": 197, "semi": 197, "regular": 197, "overdetermin": 197, "over": 197, "f2": 197, "research": 197, "rr": 197, "5049": 197, "inria": 197, "bdkllssss18": 197, "bo": 197, "duca": 197, "kiltz": 197, "lepoint": 197, "lyubashevski": 197, "schanck": 197, "schwabe": 197, "seiler": 197, "stehl\u00e9": 197, "crystal": 197, "kyber": 197, "cca": 197, "lattic": 197, "kem": 197, "euro": 197, "353": 197, "367": 197, "bhpr2021": 197, "bellini": 197, "hambitz": 197, "protopapa": 197, "rossi": 197, "black": 197, "innov": 197, "technolog": 197, "commun": 197, "14th": 197, "confer": 197, "secitc": 197, "virtual": 197, "event": 197, "novemb": 197, "revis": 197, "paper": 197, "berlin": 197, "heidelberg": 197, "br2021": 197, "deep": 197, "learn": 197, "convent": 197, "distinguish": 197, "arai": 197, "ed": 197, "intellig": 197, "lectur": 197, "vol": 197, "285": 197, "bklpprsv2007": 197, "bogdanov": 197, "knudsen": 197, "leander": 197, "paar": 197, "poschmann": 197, "robshaw": 197, "seurin": 197, "vikkelso": 197, "ultra": 197, "lightweight": 197, "che": 197, "2007": 197, "4727": 197, "450": 197, "466": 197, "doi": 197, "540": 197, "74735": 197, "2_31": 197, "blp2008": 197, "bernstein": 197, "lang": 197, "peter": 197, "defend": 197, "mceliec": 197, "cryptosystem": 197, "post": 197, "quantum": 197, "2008": 197, "bfp2009": 197, "bettal": 197, "perret": 197, "hybrid": 197, "approach": 197, "multivari": 197, "mathemat": 197, "cryptolog": 197, "197": 197, "2009": 197, "bghr2023": 197, "gerault": 197, "agnost": 197, "train": 197, "pipelin": 197, "autom": 197, "good": 197, "2023": 197, "bcc": 197, "2010": 197, "bouillaguet": 197, "chen": 197, "cheng": 197, "chou": 197, "niederhagen": 197, "shamir": 197, "yang": 197, "exhaust": 197, "12th": 197, "santa": 197, "barbara": 197, "ca": 197, "usa": 197, "august17": 197, "203": 197, "218": 197, "ber2010": 197, "grover": 197, "vs": 197, "quantumcryptographi": 197, "bf": 197, "2011": 197, "spaenlehau": 197, "On": 197, "corr": 197, "1112": 197, "6263": 197, "blp2011": 197, "smaller": [197, 204], "decod": 197, "expon": 197, "ball": 197, "collis": 197, "annual": 197, "743": 197, "760": 197, "bs2011": 197, "byrn": 197, "sneyd": 197, "homogen": 197, "wcc": 197, "hal": 197, "fr": 197, "00607341": 197, "bh2012": 197, "brouwer": 197, "haemer": 197, "spectra": 197, "2012": 197, "homepag": 197, "cwi": 197, "nl": 197, "aeb": 197, "math": 197, "ipm": 197, "bfs2015": 197, "f5": 197, "journal": 197, "symbol": 197, "2015": 197, "bm2018": 197, "error": 197, "rate": 197, "impact": 197, "lpn": 197, "bkw2019": 197, "bj\u00f6rklund": 197, "kaski": 197, "william": 197, "systemsof": 197, "pariti": 197, "reduct": 197, "colloquium": 197, "automata": 197, "languag": 197, "icalp": 197, "volum": 197, "leibniz": 197, "informat": 197, "lipic": 197, "dagstuhl": 197, "germani": 197, "schloss": 197, "zentrum": 197, "fuer": 197, "informatik": 197, "bjmm2012": 197, "becker": 197, "joux": 197, "meurer": 197, "theori": 197, "520": 197, "536": 197, "bcg": 197, "bro": 197, "cabarca": 197, "gaborit": 197, "perlner": 197, "smith": 197, "tone": 197, "tillich": 197, "verbel": 197, "minrank": 197, "advanc": 197, "asiacrypt2020": 197, "cou2001": 197, "courtoi": 197, "la": 197, "s\u00e9curit\u00e9": 197, "primit": 197, "cryptographiqu": 197, "bas\u00e9": 197, "sur": 197, "probl\u00e8m": 197, "alg\u00e9briqu": 197, "mq": 197, "ip": 197, "hfe": 197, "phd": 197, "thesi": 197, "universit\u00e9": 197, "pari": 197, "pierr": 197, "et": 197, "mari": 197, "curi": 197, "2001": 197, "chpss18": 197, "cid": 197, "huang": 197, "peyrin": 197, "sasaki": 197, "song": 197, "tool": 197, "2017": 197, "issu": 197, "pre": 197, "161": 197, "dakrv18": 197, "anver": 197, "karmakar": 197, "roi": 197, "vercauteren": 197, "saber": 197, "lwr": 197, "exchang": 197, "cpa": 197, "africacrypt": 197, "282": 197, "305": 197, "din2021cri": 197, "dinur": 197, "cryptanalyt": 197, "din2021imp": 197, "acm": 197, "siam": 197, "symposium": 197, "discret": 197, "soda": 197, "2550": 197, "2564": 197, "dkllsss18": 197, "dilithium": 197, "signatur": 197, "scheme": 197, "tran": 197, "cryptogr": 197, "hardw": 197, "emb": 197, "syst": 197, "238": 197, "268": 197, "dum1991": 197, "dumer": 197, "distanc": [197, 205], "proc": 197, "5th": 197, "joint": 197, "soviet": 197, "swedish": 197, "1991": 197, "du2001": 197, "duursma": 197, "111": 197, "du2004": 197, "combinator": 197, "109": 197, "136": 197, "sci": 197, "2948": 197, "2004": 197, "du2018": 197, "dunkelman": 197, "preprint": 197, "631": 197, "dio2020": 197, "diogo": 197, "duart": 197, "crossbr": 197, "cryptologyeprint": 197, "1058": 197, "fss2011": 197, "safei": 197, "el": 197, "din": 197, "4411": 197, "fu": 197, "wang": 197, "guo": 197, "sun": 197, "hu": 197, "go2019": 197, "gohr": 197, "speck32": 197, "he2002": 197, "hei": 197, "tutori": 197, "2002": 197, "engr": 197, "mun": 197, "howard": 197, "ldc_tutori": 197, "hp2003": 197, "huffman": 197, "pless": 197, "fundament": 197, "correct": 197, "cambridg": 197, "univ": 197, "press": 197, "jv2018": 197, "vits": 197, "jerzi": 197, "kaczorowski": 197, "josef": 197, "pieprzyk": 197, "jacekpomyka": 197, "theoret": 197, "cham": 197, "kpg1999": 197, "kipni": 197, "patarin": 197, "goubin": 197, "unbalanc": 197, "oil": 197, "vinegar": 197, "eurocrypt99": 197, "206": 197, "222": 197, "1999": 197, "berlinheidelberg": 197, "moo": 197, "moradi": 197, "rasoolzadeh": 197, "engin": 197, "latenc": 197, "gate": 197, "architectur": 197, "510": 197, "545": 197, "46586": 197, "tche": 197, "v2021": 197, "i4": 197, "lin1999": 197, "van": 197, "lint": 197, "introduct": 197, "3rd": 197, "gtm": 197, "86": 197, "2f3": 197, "45473": 197, "lpt": 197, "lokshtanov": 197, "paturi": 197, "tamaki": 197, "yu": 197, "beat": 197, "brute": 197, "forc": 197, "sover": 197, "twenti": 197, "eighth": 197, "2190": 197, "2202": 197, "societi": 197, "industri": 197, "liu": 197, "rijmen": 197, "39555": 197, "5_26": 197, "mmt2011": 197, "thoma": 197, "054n": 197, "107": 197, "mht2013": 197, "miura": 197, "hashimoto": 197, "takagi": 197, "underdefin": 197, "2013": [197, 205], "mo2015": 197, "ozerov": 197, "nearest": 197, "neighbor": 197, "murilo": 197, "rafael": 197, "fabio": 197, "ieee": 197, "access": 197, "123735": 197, "123745": 197, "pra1962": 197, "prang": 197, "cyclic": 197, "ir": 197, "1962": 197, "ste1988": 197, "stern": 197, "codeword": 197, "106": 197, "113": 197, "1988": 197, "lafourcad": 197, "todo": 197, "qiao": 197, "281": 197, "306": 197, "tw2012": 197, "wolf": 197, "underdetermin": 197, "revisit": 197, "public": 197, "pkc": 197, "vbc": 197, "baena": 197, "superdetermin": 197, "167": 197, "186": 197, "yc2004": 197, "xl": 197, "privaci": 197, "277": 197, "are_there_forbidden_compon": 198, "get_components_id": 198, "get_number_of_compon": 198, "is_component_input": 198, "fixed_index": 198, "moving_index": 198, "number_of_compon": [198, 199], "print_round": [198, 199], "print_round_as_python_dictionari": 198, "remove_compon": 198, "remove_component_from_id": 198, "round_as_python_dictionari": 198, "swap_compon": 198, "are_there_not_forbidden_compon": 199, "xor_1_0": 199, "xor_1_1": 199, "component_1_0": 199, "components_in_round": 199, "print_rounds_as_python_dictionari": 199, "round_at": 199, "rounds_as_python_dictionari": 199, "generate_bitmask": 200, "0b1111": 200, "to_binari": 200, "0x67452301": 200, "bytearray_to_int": 201, "bytearray_to_wordlist": 201, "int_to_wordlist": 201, "lor": 201, "ror": 201, "wordlist_to_bytearrai": 201, "wordlist_to_int": 201, "wordlist": 201, "create_scenario_str": 202, "scenario_dict": 202, "get_ciph": 202, "get_cipher_typ": 202, "cipher_filenam": 202, "load_paramet": 202, "cipher_family_nam": 202, "stdtype": 203, "html": [203, 204], "rotate_left": 203, "sequence_oper": 203, "rotate_right": 203, "shift_left": 203, "shift_right": 203, "bodi": 204, "builder": 204, "variou": 204, "respons": 204, "get_bodi": 204, "get_foot": 204, "get_head": 204, "csvbuilder": 204, "concret": 204, "csv": 204, "footer": 204, "header": 204, "logo": 204, "latexbuild": 204, "latex": 204, "render_templ": 204, "rule_data_": 204, "set_bodi": 204, "set_foot": 204, "set_head": 204, "templatemanag": 204, "control": 204, "him": 204, "deleg": 204, "assembl": 204, "get_templ": 204, "set_build": 204, "aggregate_list_of_dictionari": 205, "group_by_kei": 205, "sum_value_kei": 205, "aggreg": 205, "summing_up": 205, "collect": 205, "datetim": 205, "my_dataset": 205, "date": 205, "99": 205, "value1": 205, "value2": 205, "98": 205, "expected_output": 205, "bytes_positions_to_little_endian_for_32_bit": 205, "lst": 205, "read": 205, "bytes_positions_to_little_endian_for_multiple_of_32": 205, "calculate_input": 205, "plane_num": 205, "lane_num": 205, "convert_2d_index_to_1d_index": 205, "array_dim": 205, "create_new_state_for_calcul": 205, "extract_input": 205, "input_ids_list": 205, "input_bit_positions_list": 205, "bit_positions_to_be_extract": 205, "generate_sample_from_gf_2_n": 205, "get_2d_array_element_from_1d_array_index": 205, "qi": 205, "si": 205, "get_inputs_paramet": 205, "inputs_list": 205, "get_ith_word": 205, "lst_by_id": 205, "get_k_th_bit": 205, "get_number_of_rounds_from": 205, "parameters_configur": 205, "group_list_by_kei": 205, "group": 205, "lst_exampl": 205, "defaultdict": 205, "layer_and_lane_initi": 205, "lane_s": 205, "merging_list_of_list": 205, "merg": 205, "point_pair": 205, "dist": 205, "dim": 205, "randomli": 205, "euclidean": 205, "poly_to_int": 205, "polynom": 205, "pprint_dictionari": 205, "pretti": 205, "pprint_dictionary_to_fil": 205, "name_fil": 205, "tests_configur": 205, "run_test": 205, "tii_path": 205, "getfil": 205, "tii_dir_path": 205, "dirnam": 205, "analyze_ciph": 205, "test_json": 205, "isfil": 205, "set_2d_array_element_from_1d_array_index": 205, "sgn_function": 205, "signed_dist": 205, "lst_x": 205, "lst_y": 205, "simplify_input": 205, "inputs_po": 205}, "objects": {"": [[0, 0, 0, "-", "cipher"], [165, 0, 0, "-", "component"], [193, 0, 0, "-", "compound_xor_differential_cipher"], [194, 0, 0, "-", "editor"], [196, 0, 0, "-", "input"], [198, 0, 0, "-", "round"], [199, 0, 0, "-", "rounds"]], "cipher": [[0, 1, 1, "", "Cipher"]], "cipher.Cipher": [[0, 2, 1, "", "add_AND_component"], [0, 2, 1, "", "add_FSR_component"], [0, 2, 1, "", "add_MODADD_component"], [0, 2, 1, "", "add_MODSUB_component"], [0, 2, 1, "", "add_NOT_component"], [0, 2, 1, "", "add_OR_component"], [0, 2, 1, "", "add_SBOX_component"], [0, 2, 1, "", "add_SHIFT_component"], [0, 2, 1, "", "add_XOR_component"], [0, 2, 1, "", "add_cipher_output_component"], [0, 2, 1, "", "add_concatenate_component"], [0, 2, 1, "", "add_constant_component"], [0, 2, 1, "", "add_intermediate_output_component"], [0, 2, 1, "", "add_linear_layer_component"], [0, 2, 1, "", "add_mix_column_component"], [0, 2, 1, "", "add_permutation_component"], [0, 2, 1, "", "add_reverse_component"], [0, 2, 1, "", "add_rotate_component"], [0, 2, 1, "", "add_round"], [0, 2, 1, "", "add_round_key_output_component"], [0, 2, 1, "", "add_round_output_component"], [0, 2, 1, "", "add_shift_rows_component"], [0, 2, 1, "", "add_sigma_component"], [0, 2, 1, "", "add_suffix_to_components"], [0, 2, 1, "", "add_theta_keccak_component"], [0, 2, 1, "", "add_theta_xoodoo_component"], [0, 2, 1, "", "add_variable_rotate_component"], [0, 2, 1, "", "add_variable_shift_component"], [0, 2, 1, "", "add_word_permutation_component"], [0, 2, 1, "", "as_python_dictionary"], [0, 2, 1, "", "cipher_inverse"], [0, 2, 1, "", "cipher_partial_inverse"], [0, 2, 1, "", "component_from"], [0, 2, 1, "", "convert_to_compound_xor_cipher"], [0, 2, 1, "", "create_networx_graph_from_input_ids"], [0, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [0, 3, 1, "", "current_round"], [0, 3, 1, "", "current_round_number"], [0, 3, 1, "", "current_round_number_of_components"], [0, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [0, 2, 1, "", "evaluate"], [0, 2, 1, "", "evaluate_using_c"], [0, 2, 1, "", "evaluate_vectorized"], [0, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [0, 3, 1, "", "family_name"], [0, 3, 1, "", "file_name"], [0, 2, 1, "", "find_impossible_property"], [0, 2, 1, "", "generate_bit_based_c_code"], [0, 2, 1, "", "generate_evaluate_c_code_shared_library"], [0, 2, 1, "", "generate_word_based_c_code"], [0, 2, 1, "", "get_all_components"], [0, 2, 1, "", "get_all_components_ids"], [0, 2, 1, "", "get_all_inputs_bit_positions"], [0, 2, 1, "", "get_component_from_id"], [0, 2, 1, "", "get_components_in_round"], [0, 2, 1, "", "get_current_component_id"], [0, 2, 1, "", "get_model"], [0, 2, 1, "", "get_number_of_components_in_round"], [0, 2, 1, "", "get_partial_cipher"], [0, 2, 1, "", "get_round_from_component_id"], [0, 2, 1, "", "get_sizes_of_components_by_type"], [0, 3, 1, "", "id"], [0, 2, 1, "", "impossible_differential_search"], [0, 3, 1, "", "inputs"], [0, 3, 1, "", "inputs_bit_size"], [0, 2, 1, "", "inputs_size_to_dict"], [0, 2, 1, "", "is_algebraically_secure"], [0, 2, 1, "", "is_andrx"], [0, 2, 1, "", "is_arx"], [0, 2, 1, "", "is_power_of_2_word_based"], [0, 2, 1, "", "is_shift_arx"], [0, 2, 1, "", "is_spn"], [0, 2, 1, "", "make_cipher_id"], [0, 2, 1, "", "make_file_name"], [0, 3, 1, "", "number_of_rounds"], [0, 3, 1, "", "output_bit_size"], [0, 2, 1, "", "polynomial_system"], [0, 2, 1, "", "polynomial_system_at_round"], [0, 2, 1, "", "print"], [0, 2, 1, "", "print_as_python_dictionary"], [0, 2, 1, "", "print_as_python_dictionary_to_file"], [0, 2, 1, "", "print_evaluation_python_code"], [0, 2, 1, "", "print_evaluation_python_code_to_file"], [0, 2, 1, "", "print_input_information"], [0, 3, 1, "", "reference_code"], [0, 2, 1, "", "remove_key_schedule"], [0, 2, 1, "", "remove_round_component"], [0, 2, 1, "", "remove_round_component_from_id"], [0, 3, 1, "", "rounds"], [0, 3, 1, "", "rounds_as_list"], [0, 2, 1, "", "set_file_name"], [0, 2, 1, "", "set_id"], [0, 2, 1, "", "set_inputs"], [0, 2, 1, "", "sort_cipher"], [0, 2, 1, "", "test_against_reference_code"], [0, 2, 1, "", "test_vector_check"], [0, 3, 1, "", "type"], [0, 2, 1, "", "update_input_id_links_from_component_id"], [0, 2, 1, "", "zero_correlation_linear_search"]], "cipher_modules": [[1, 0, 0, "-", "algebraic_tests"], [2, 0, 0, "-", "avalanche_tests"], [3, 0, 0, "-", "code_generator"], [4, 0, 0, "-", "component_analysis_tests"], [5, 0, 0, "-", "continuous_diffusion_analysis"], [6, 0, 0, "-", "evaluator"], [8, 0, 0, "-", "generic_functions"], [9, 0, 0, "-", "generic_functions_continuous_diffusion_analysis"], [10, 0, 0, "-", "generic_functions_vectorized_bit"], [11, 0, 0, "-", "generic_functions_vectorized_byte"], [13, 0, 0, "-", "graph_generator"], [14, 0, 0, "-", "inverse_cipher"], [87, 0, 0, "-", "report"], [92, 0, 0, "-", "tester"]], "cipher_modules.algebraic_tests": [[1, 1, 1, "", "AlgebraicTests"]], "cipher_modules.algebraic_tests.AlgebraicTests": [[1, 2, 1, "", "algebraic_tests"]], "cipher_modules.avalanche_tests": [[2, 1, 1, "", "AvalancheTests"]], "cipher_modules.avalanche_tests.AvalancheTests": [[2, 2, 1, "", "avalanche_probability_vectors"], [2, 2, 1, "", "avalanche_tests"], [2, 2, 1, "", "compute_criterion_from_avalanche_probability_vectors"], [2, 2, 1, "", "generate_3D_plot"]], "cipher_modules.code_generator": [[3, 4, 1, "", "build_code_for_components"], [3, 4, 1, "", "build_code_for_continuous_diffusion_analysis_components"], [3, 4, 1, "", "build_continuous_diffusion_analysis_function_call"], [3, 4, 1, "", "build_function_call"], [3, 4, 1, "", "constant_to_bitstring"], [3, 4, 1, "", "delete_generated_evaluate_c_shared_library"], [3, 4, 1, "", "generate_bit_based_c_code"], [3, 4, 1, "", "generate_bit_based_vectorized_python_code_string"], [3, 4, 1, "", "generate_byte_based_vectorized_python_code_string"], [3, 4, 1, "", "generate_evaluate_c_code_shared_library"], [3, 4, 1, "", "generate_python_code_string"], [3, 4, 1, "", "generate_python_code_string_for_continuous_diffusion_analysis"], [3, 4, 1, "", "generate_word_based_c_code"], [3, 4, 1, "", "get_cipher_output_component_bit_based_c_code"], [3, 4, 1, "", "get_cipher_output_word_based_c_code"], [3, 4, 1, "", "get_intermediate_output_component_bit_based_c_code"], [3, 4, 1, "", "get_intermediate_output_word_based_c_code"], [3, 4, 1, "", "get_number_of_inputs"], [3, 4, 1, "", "get_padding_component_bit_based_c_code"], [3, 4, 1, "", "get_rounds_bit_based_c_code"], [3, 4, 1, "", "get_rounds_word_based_c_code"], [3, 4, 1, "", "get_word_operation_component_bit_based_c_code"], [3, 4, 1, "", "get_word_operation_word_based_c_code"], [3, 4, 1, "", "prepare_input_bit_based_vectorized_python_code_string"], [3, 4, 1, "", "prepare_input_byte_based_vectorized_python_code_string"], [3, 4, 1, "", "update_intermediate_structure"]], "cipher_modules.component_analysis_tests": [[4, 1, 1, "", "CipherComponentsAnalysis"], [4, 4, 1, "", "binary_matrix_of_linear_component"], [4, 4, 1, "", "branch_number"], [4, 4, 1, "", "calculate_weights_for_linear_layer"], [4, 4, 1, "", "calculate_weights_for_mix_column"], [4, 4, 1, "", "field_element_matrix_to_integer_matrix"], [4, 4, 1, "", "get_inverse_matrix_in_integer_representation"], [4, 4, 1, "", "has_maximal_branch_number"], [4, 4, 1, "", "instantiate_matrix_over_correct_field"], [4, 4, 1, "", "int_to_poly"]], "cipher_modules.component_analysis_tests.CipherComponentsAnalysis": [[4, 2, 1, "", "component_analysis_tests"], [4, 2, 1, "", "get_all_operations"], [4, 2, 1, "", "print_component_analysis_as_radar_charts"]], "cipher_modules.continuous_diffusion_analysis": [[5, 1, 1, "", "ContinuousDiffusionAnalysis"]], "cipher_modules.continuous_diffusion_analysis.ContinuousDiffusionAnalysis": [[5, 2, 1, "", "continuous_avalanche_factor"], [5, 2, 1, "", "continuous_diffusion_factor"], [5, 2, 1, "", "continuous_diffusion_tests"], [5, 2, 1, "", "continuous_neutrality_measure_for_bit_j"]], "cipher_modules.evaluator": [[6, 4, 1, "", "evaluate"], [6, 4, 1, "", "evaluate_using_c"], [6, 4, 1, "", "evaluate_vectorized"], [6, 4, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"]], "cipher_modules.generic_functions": [[8, 4, 1, "", "AND"], [8, 4, 1, "", "MODADD"], [8, 4, 1, "", "MODSUB"], [8, 4, 1, "", "NOT"], [8, 4, 1, "", "OR"], [8, 4, 1, "", "ROTATE"], [8, 4, 1, "", "ROTATE_BY_VARIABLE_AMOUNT"], [8, 4, 1, "", "ROTATE_boolean_function"], [8, 4, 1, "", "SHIFT"], [8, 4, 1, "", "SHIFT_BY_VARIABLE_AMOUNT"], [8, 4, 1, "", "SIGMA"], [8, 4, 1, "", "THETA_KECCAK"], [8, 4, 1, "", "THETA_XOODOO"], [8, 4, 1, "", "XOR"], [8, 4, 1, "", "XOR_boolean_function"], [8, 4, 1, "", "add_padding"], [8, 4, 1, "", "concatenate_bool_func"], [8, 4, 1, "", "constant_bool_func"], [8, 4, 1, "", "convert_polynomial_to_binary_matrix_given_polynomial_modulus"], [8, 4, 1, "", "convert_x_to_binary_matrix_given_polynomial_modulus"], [8, 4, 1, "", "fsr_binary"], [8, 4, 1, "", "fsr_word"], [8, 4, 1, "", "int_to_byte_array"], [8, 4, 1, "", "linear_layer"], [8, 4, 1, "", "merge_bits"], [8, 4, 1, "", "mix_column_generalized"], [8, 4, 1, "", "mix_column_generalized_bool_func"], [8, 4, 1, "", "padding"], [8, 4, 1, "", "sbox"], [8, 4, 1, "", "sbox_bool_func"], [8, 4, 1, "", "select_bits"], [8, 4, 1, "", "set_from_hex_string"], [8, 4, 1, "", "transform_GF2NMatrix_to_BinMatrix"]], "cipher_modules.generic_functions_continuous_diffusion_analysis": [[9, 4, 1, "", "AND_continuous_diffusion_analysis"], [9, 4, 1, "", "CONSTANT_continuous_diffusion_analysis"], [9, 4, 1, "", "LINEAR_LAYER_continuous_diffusion_analysis"], [9, 4, 1, "", "MIX_COLUMN_generalized_continuous_diffusion_analysis"], [9, 4, 1, "", "MODADD_continuous_diffusion_analysis"], [9, 4, 1, "", "MODADD_continuous_diffusion_analysis_two_words"], [9, 4, 1, "", "MODSUB_continuous_diffusion_analysis"], [9, 4, 1, "", "NOT_continuous_diffusion_analysis"], [9, 4, 1, "", "OR_continuous_diffusion_analysis"], [9, 4, 1, "", "ROTATE_BY_VARIABLE_AMOUNT_continuous_diffusion_analysis"], [9, 4, 1, "", "ROTATE_continuous_diffusion_analysis"], [9, 4, 1, "", "SBOX_continuous_diffusion_analysis"], [9, 4, 1, "", "SHIFT_BY_VARIABLE_AMOUNT_continuous_diffusion_analysis"], [9, 4, 1, "", "SHIFT_continuous_diffusion_analysis"], [9, 4, 1, "", "SIGMA_continuous_diffusion_analysis"], [9, 4, 1, "", "XOR_continuous_diffusion_analysis"], [9, 4, 1, "", "XOR_continuous_diffusion_analysis_two_words"], [9, 4, 1, "", "compute_sbox_precomputations"], [9, 4, 1, "", "create_lookup_table_by_matrix"], [9, 4, 1, "", "create_lookup_table_for_finite_field_element"], [9, 4, 1, "", "extended_and_bit"], [9, 4, 1, "", "extended_left_rotation_by_variable_amount"], [9, 4, 1, "", "extended_left_shift_by_variable_amount"], [9, 4, 1, "", "extended_not_bit"], [9, 4, 1, "", "extended_one_left_rotation_iteration"], [9, 4, 1, "", "extended_one_left_shift_iteration"], [9, 4, 1, "", "extended_one_right_rotation_iteration"], [9, 4, 1, "", "extended_one_right_shift_iteration"], [9, 4, 1, "", "extended_right_rotation_by_variable_amount"], [9, 4, 1, "", "extended_right_shift_by_variable_amount"], [9, 4, 1, "", "extended_two_bit_multiplexer"], [9, 4, 1, "", "get_mix_column_precomputations"], [9, 4, 1, "", "get_sbox_precomputations"], [9, 4, 1, "", "select_bits_continuous_diffusion_analysis"]], "cipher_modules.generic_functions_vectorized_bit": [[10, 4, 1, "", "bit_vector_AND"], [10, 4, 1, "", "bit_vector_CONCAT"], [10, 4, 1, "", "bit_vector_MODADD"], [10, 4, 1, "", "bit_vector_MODSUB"], [10, 4, 1, "", "bit_vector_NOT"], [10, 4, 1, "", "bit_vector_OR"], [10, 4, 1, "", "bit_vector_ROTATE"], [10, 4, 1, "", "bit_vector_SBOX"], [10, 4, 1, "", "bit_vector_SHIFT"], [10, 4, 1, "", "bit_vector_SHIFT_BY_VARIABLE_AMOUNT"], [10, 4, 1, "", "bit_vector_XOR"], [10, 4, 1, "", "bit_vector_linear_layer"], [10, 4, 1, "", "bit_vector_mix_column"], [10, 4, 1, "", "bit_vector_mix_column_poly0"], [10, 4, 1, "", "bit_vector_print_as_hex_values"], [10, 4, 1, "", "bit_vector_select_word"], [10, 4, 1, "", "bit_vector_to_integer"], [10, 4, 1, "", "print_component_info"]], "cipher_modules.generic_functions_vectorized_byte": [[11, 4, 1, "", "byte_vector_AND"], [11, 4, 1, "", "byte_vector_MODADD"], [11, 4, 1, "", "byte_vector_MODSUB"], [11, 4, 1, "", "byte_vector_NOT"], [11, 4, 1, "", "byte_vector_OR"], [11, 4, 1, "", "byte_vector_ROTATE"], [11, 4, 1, "", "byte_vector_SBOX"], [11, 4, 1, "", "byte_vector_SHIFT"], [11, 4, 1, "", "byte_vector_SHIFT_BY_VARIABLE_AMOUNT"], [11, 4, 1, "", "byte_vector_XOR"], [11, 4, 1, "", "byte_vector_is_consecutive"], [11, 4, 1, "", "byte_vector_linear_layer"], [11, 4, 1, "", "byte_vector_mix_column"], [11, 4, 1, "", "byte_vector_mix_column_poly0"], [11, 4, 1, "", "byte_vector_print_as_hex_values"], [11, 4, 1, "", "byte_vector_select_all_words"], [11, 4, 1, "", "cipher_inputs_to_evaluate_vectorized_inputs"], [11, 4, 1, "", "evaluate_vectorized_outputs_to_integers"], [11, 4, 1, "", "generate_formatted_inputs"], [11, 4, 1, "", "get_number_of_bytes_needed_for_bit_size"], [11, 4, 1, "", "get_number_of_consecutive_bits"], [11, 4, 1, "", "integer_array_to_evaluate_vectorized_input"]], "cipher_modules.graph_generator": [[13, 4, 1, "", "create_networkx_graph_from_input_ids"], [13, 4, 1, "", "split_cipher_graph_into_top_bottom"]], "cipher_modules.inverse_cipher": [[14, 4, 1, "", "add_bit_to_bit_list"], [14, 4, 1, "", "add_new_component_to_list"], [14, 4, 1, "", "all_input_bits_available"], [14, 4, 1, "", "all_output_bits_available"], [14, 4, 1, "", "all_output_updated_bits_available"], [14, 4, 1, "", "are_equal_components"], [14, 4, 1, "", "are_there_enough_available_inputs_to_evaluate_component"], [14, 4, 1, "", "are_there_enough_available_inputs_to_perform_inversion"], [14, 4, 1, "", "are_these_bits_available"], [14, 4, 1, "", "cipher_find_component"], [14, 4, 1, "", "component_input_bits"], [14, 4, 1, "", "component_inverse"], [14, 4, 1, "", "component_output_bits"], [14, 4, 1, "", "compute_input_id_links_and_input_bit_positions_for_inverse_component_from_available_output_components"], [14, 4, 1, "", "compute_input_id_links_and_input_bit_positions_for_inverse_component_from_input_components"], [14, 4, 1, "", "delete_orphan_links"], [14, 4, 1, "", "equivalent_bits_in_common"], [14, 4, 1, "", "evaluated_component"], [14, 4, 1, "", "find_correct_order"], [14, 4, 1, "", "find_correct_order_for_inversion"], [14, 4, 1, "", "find_input_id_link_bits_equivalent"], [14, 4, 1, "", "get_all_bit_names"], [14, 4, 1, "", "get_all_components_with_the_same_input_id_link_and_input_bit_positions"], [14, 4, 1, "", "get_all_equivalent_bits"], [14, 4, 1, "", "get_available_output_components"], [14, 4, 1, "", "get_cipher_components"], [14, 4, 1, "", "get_component_from_id"], [14, 4, 1, "", "get_equivalent_input_bit_from_output_bit"], [14, 4, 1, "", "get_key_schedule_component_ids"], [14, 4, 1, "", "get_most_recent_intermediate_output"], [14, 4, 1, "", "get_output_components"], [14, 4, 1, "", "get_relative_position"], [14, 4, 1, "", "is_bit_adjacent_to_list_of_bits"], [14, 4, 1, "", "is_bit_contained_in"], [14, 4, 1, "", "is_intersection_of_input_id_links_null"], [14, 4, 1, "", "is_output_bits_updated_equivalent_to_input_bits"], [14, 4, 1, "", "is_possibly_invertible_component"], [14, 4, 1, "", "order_input_id_links_for_modadd"], [14, 4, 1, "", "remove_components_from_rounds"], [14, 4, 1, "", "sort_cipher_graph"], [14, 4, 1, "", "sort_input_id_links_and_input_bit_positions"], [14, 4, 1, "", "topological_sort"], [14, 4, 1, "", "update_available_bits_with_component_input_bits"], [14, 4, 1, "", "update_available_bits_with_component_output_bits"], [14, 4, 1, "", "update_input_links_from_rounds"], [14, 4, 1, "", "update_output_bits"]], "cipher_modules.models.algebraic": [[15, 0, 0, "-", "algebraic_model"], [16, 0, 0, "-", "boolean_polynomial_ring"], [17, 0, 0, "-", "constraints"]], "cipher_modules.models.algebraic.algebraic_model": [[15, 1, 1, "", "AlgebraicModel"]], "cipher_modules.models.algebraic.algebraic_model.AlgebraicModel": [[15, 2, 1, "", "connection_polynomials"], [15, 2, 1, "", "connection_polynomials_at_round"], [15, 2, 1, "", "is_algebraically_secure"], [15, 2, 1, "", "nvars"], [15, 2, 1, "", "polynomial_system"], [15, 2, 1, "", "polynomial_system_at_round"], [15, 2, 1, "", "ring"], [15, 2, 1, "", "var_names"]], "cipher_modules.models.algebraic.boolean_polynomial_ring": [[16, 4, 1, "", "is_boolean_polynomial_ring"]], "cipher_modules.models.algebraic.constraints": [[17, 4, 1, "", "equality_polynomials"], [17, 4, 1, "", "mod_addition_polynomials"], [17, 4, 1, "", "mod_binary_operation_polynomials"], [17, 4, 1, "", "mod_subtraction_polynomials"]], "cipher_modules.models.cp": [[18, 0, 0, "-", "cp_model"], [27, 0, 0, "-", "solvers"]], "cipher_modules.models.cp.cp_model": [[18, 1, 1, "", "CpModel"]], "cipher_modules.models.cp.cp_model.CpModel": [[18, 2, 1, "", "add_solution_to_components_values"], [18, 2, 1, "", "add_solutions_from_components_values"], [18, 2, 1, "", "build_mix_column_truncated_table"], [18, 2, 1, "", "calculate_bit_positions"], [18, 2, 1, "", "calculate_bit_values"], [18, 2, 1, "", "calculate_input_bit_positions"], [18, 3, 1, "", "cipher"], [18, 3, 1, "", "cipher_id"], [18, 2, 1, "", "find_possible_number_of_active_sboxes"], [18, 2, 1, "", "fix_variables_value_constraints"], [18, 3, 1, "", "float_and_lat_values"], [18, 2, 1, "", "format_component_value"], [18, 2, 1, "", "get_command_for_solver_process"], [18, 2, 1, "", "get_mix_column_all_inputs"], [18, 2, 1, "", "get_total_weight"], [18, 2, 1, "", "initialise_model"], [18, 3, 1, "", "model_constraints"], [18, 2, 1, "", "parse_solver_information"], [18, 2, 1, "", "set_component_solution_value"], [18, 2, 1, "", "solve"], [18, 2, 1, "", "solver_names"], [18, 2, 1, "", "weight_constraints"]], "cipher_modules.models.cp.cp_models": [[19, 0, 0, "-", "cp_cipher_model"], [20, 0, 0, "-", "cp_deterministic_truncated_xor_differential_model"], [21, 0, 0, "-", "cp_impossible_xor_differential_model"], [22, 0, 0, "-", "cp_xor_differential_model"], [23, 0, 0, "-", "cp_xor_differential_number_of_active_sboxes_model"], [24, 0, 0, "-", "cp_xor_differential_trail_search_fixing_number_of_active_sboxes_model"], [25, 0, 0, "-", "cp_xor_linear_model"]], "cipher_modules.models.cp.cp_models.cp_cipher_model": [[19, 1, 1, "", "CpCipherModel"]], "cipher_modules.models.cp.cp_models.cp_cipher_model.CpCipherModel": [[19, 2, 1, "", "add_solution_to_components_values"], [19, 2, 1, "", "add_solutions_from_components_values"], [19, 2, 1, "", "build_cipher_model"], [19, 2, 1, "", "build_mix_column_truncated_table"], [19, 2, 1, "", "calculate_bit_positions"], [19, 2, 1, "", "calculate_bit_values"], [19, 2, 1, "", "calculate_input_bit_positions"], [19, 3, 1, "", "cipher"], [19, 3, 1, "", "cipher_id"], [19, 2, 1, "", "evaluate_model"], [19, 2, 1, "", "final_constraints"], [19, 2, 1, "", "find_possible_number_of_active_sboxes"], [19, 2, 1, "", "fix_variables_value_constraints"], [19, 3, 1, "", "float_and_lat_values"], [19, 2, 1, "", "format_component_value"], [19, 2, 1, "", "get_command_for_solver_process"], [19, 2, 1, "", "get_mix_column_all_inputs"], [19, 2, 1, "", "get_total_weight"], [19, 2, 1, "", "initialise_model"], [19, 2, 1, "", "input_constraints"], [19, 3, 1, "", "model_constraints"], [19, 2, 1, "", "parse_solver_information"], [19, 2, 1, "", "set_component_solution_value"], [19, 2, 1, "", "solve"], [19, 2, 1, "", "solver_names"], [19, 2, 1, "", "weight_constraints"]], "cipher_modules.models.cp.cp_models.cp_deterministic_truncated_xor_differential_model": [[20, 1, 1, "", "CpDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.cp.cp_models.cp_deterministic_truncated_xor_differential_model.CpDeterministicTruncatedXorDifferentialModel": [[20, 2, 1, "", "add_solution_to_components_values"], [20, 2, 1, "", "add_solutions_from_components_values"], [20, 2, 1, "", "build_deterministic_truncated_xor_differential_trail_model"], [20, 2, 1, "", "build_inverse_deterministic_truncated_xor_differential_trail_model"], [20, 2, 1, "", "build_mix_column_truncated_table"], [20, 2, 1, "", "calculate_bit_positions"], [20, 2, 1, "", "calculate_bit_values"], [20, 2, 1, "", "calculate_input_bit_positions"], [20, 3, 1, "", "cipher"], [20, 3, 1, "", "cipher_id"], [20, 2, 1, "", "final_deterministic_truncated_xor_differential_constraints"], [20, 2, 1, "", "final_impossible_constraints"], [20, 2, 1, "", "find_all_deterministic_truncated_xor_differential_trail"], [20, 2, 1, "", "find_one_deterministic_truncated_xor_differential_trail"], [20, 2, 1, "", "find_possible_number_of_active_sboxes"], [20, 2, 1, "", "fix_variables_value_constraints"], [20, 3, 1, "", "float_and_lat_values"], [20, 2, 1, "", "format_component_value"], [20, 2, 1, "", "get_command_for_solver_process"], [20, 2, 1, "", "get_mix_column_all_inputs"], [20, 2, 1, "", "get_total_weight"], [20, 2, 1, "", "initialise_model"], [20, 2, 1, "", "input_deterministic_truncated_xor_differential_constraints"], [20, 2, 1, "", "input_wordwise_deterministic_truncated_xor_differential_constraints"], [20, 3, 1, "", "model_constraints"], [20, 2, 1, "", "output_constraints"], [20, 2, 1, "", "output_inverse_constraints"], [20, 2, 1, "", "parse_solver_information"], [20, 2, 1, "", "set_component_solution_value"], [20, 2, 1, "", "solve"], [20, 2, 1, "", "solver_names"], [20, 2, 1, "", "weight_constraints"]], "cipher_modules.models.cp.cp_models.cp_impossible_xor_differential_model": [[21, 1, 1, "", "CpImpossibleXorDifferentialModel"]], "cipher_modules.models.cp.cp_models.cp_impossible_xor_differential_model.CpImpossibleXorDifferentialModel": [[21, 2, 1, "", "add_solution_to_components_values"], [21, 2, 1, "", "add_solutions_from_components_values"], [21, 2, 1, "", "build_deterministic_truncated_xor_differential_trail_model"], [21, 2, 1, "", "build_impossible_xor_differential_trail_model"], [21, 2, 1, "", "build_inverse_deterministic_truncated_xor_differential_trail_model"], [21, 2, 1, "", "build_mix_column_truncated_table"], [21, 2, 1, "", "calculate_bit_positions"], [21, 2, 1, "", "calculate_bit_values"], [21, 2, 1, "", "calculate_input_bit_positions"], [21, 3, 1, "", "cipher"], [21, 3, 1, "", "cipher_id"], [21, 2, 1, "", "extract_incompatibilities_from_output"], [21, 2, 1, "", "extract_key_schedule"], [21, 2, 1, "", "final_deterministic_truncated_xor_differential_constraints"], [21, 2, 1, "", "final_impossible_constraints"], [21, 2, 1, "", "find_all_deterministic_truncated_xor_differential_trail"], [21, 2, 1, "", "find_all_impossible_xor_differential_trails"], [21, 2, 1, "", "find_one_deterministic_truncated_xor_differential_trail"], [21, 2, 1, "", "find_one_impossible_xor_differential_trail"], [21, 2, 1, "", "find_possible_number_of_active_sboxes"], [21, 2, 1, "", "fix_variables_value_constraints"], [21, 3, 1, "", "float_and_lat_values"], [21, 2, 1, "", "format_component_value"], [21, 2, 1, "", "get_command_for_solver_process"], [21, 2, 1, "", "get_mix_column_all_inputs"], [21, 2, 1, "", "get_total_weight"], [21, 2, 1, "", "initialise_model"], [21, 2, 1, "", "input_deterministic_truncated_xor_differential_constraints"], [21, 2, 1, "", "input_impossible_xor_differential_constraints"], [21, 2, 1, "", "input_wordwise_deterministic_truncated_xor_differential_constraints"], [21, 3, 1, "", "model_constraints"], [21, 2, 1, "", "output_constraints"], [21, 2, 1, "", "output_inverse_constraints"], [21, 2, 1, "", "parse_solver_information"], [21, 2, 1, "", "set_component_solution_value"], [21, 2, 1, "", "solve"], [21, 2, 1, "", "solver_names"], [21, 2, 1, "", "weight_constraints"]], "cipher_modules.models.cp.cp_models.cp_xor_differential_model": [[22, 1, 1, "", "CpXorDifferentialModel"], [22, 4, 1, "", "and_xor_differential_probability_ddt"], [22, 4, 1, "", "update_and_or_ddt_valid_probabilities"]], "cipher_modules.models.cp.cp_models.cp_xor_differential_model.CpXorDifferentialModel": [[22, 2, 1, "", "add_solution_to_components_values"], [22, 2, 1, "", "add_solutions_from_components_values"], [22, 2, 1, "", "build_mix_column_truncated_table"], [22, 2, 1, "", "build_xor_differential_trail_model"], [22, 2, 1, "", "build_xor_differential_trail_model_template"], [22, 2, 1, "", "calculate_bit_positions"], [22, 2, 1, "", "calculate_bit_values"], [22, 2, 1, "", "calculate_input_bit_positions"], [22, 3, 1, "", "cipher"], [22, 3, 1, "", "cipher_id"], [22, 2, 1, "", "final_xor_differential_constraints"], [22, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [22, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [22, 2, 1, "", "find_differential_weight"], [22, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [22, 2, 1, "", "find_one_xor_differential_trail"], [22, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [22, 2, 1, "", "find_possible_number_of_active_sboxes"], [22, 2, 1, "", "fix_variables_value_constraints"], [22, 3, 1, "", "float_and_lat_values"], [22, 2, 1, "", "format_component_value"], [22, 2, 1, "", "get_command_for_solver_process"], [22, 2, 1, "", "get_mix_column_all_inputs"], [22, 2, 1, "", "get_total_weight"], [22, 2, 1, "", "get_word_operation_xor_differential_constraints"], [22, 2, 1, "", "initialise_model"], [22, 2, 1, "", "input_xor_differential_constraints"], [22, 3, 1, "", "model_constraints"], [22, 2, 1, "", "parse_solver_information"], [22, 2, 1, "", "set_component_solution_value"], [22, 2, 1, "", "solve"], [22, 2, 1, "", "solver_names"], [22, 2, 1, "", "update_sbox_ddt_valid_probabilities"], [22, 2, 1, "", "weight_constraints"]], "cipher_modules.models.cp.cp_models.cp_xor_differential_number_of_active_sboxes_model": [[23, 1, 1, "", "CpXorDifferentialNumberOfActiveSboxesModel"], [23, 4, 1, "", "build_xor_truncated_table"]], "cipher_modules.models.cp.cp_models.cp_xor_differential_number_of_active_sboxes_model.CpXorDifferentialNumberOfActiveSboxesModel": [[23, 2, 1, "", "add_additional_xor_constraints"], [23, 2, 1, "", "add_solution_to_components_values"], [23, 2, 1, "", "add_solutions_from_components_values"], [23, 2, 1, "", "build_mix_column_truncated_table"], [23, 2, 1, "", "build_xor_differential_trail_first_step_model"], [23, 2, 1, "", "calculate_bit_positions"], [23, 2, 1, "", "calculate_bit_values"], [23, 2, 1, "", "calculate_input_bit_positions"], [23, 3, 1, "", "cipher"], [23, 3, 1, "", "cipher_id"], [23, 2, 1, "", "create_xor_component"], [23, 2, 1, "", "final_xor_differential_first_step_constraints"], [23, 2, 1, "", "find_possible_number_of_active_sboxes"], [23, 2, 1, "", "fix_variables_value_constraints"], [23, 3, 1, "", "float_and_lat_values"], [23, 2, 1, "", "format_component_value"], [23, 2, 1, "", "get_command_for_solver_process"], [23, 2, 1, "", "get_mix_column_all_inputs"], [23, 2, 1, "", "get_new_xor_input_links_and_positions"], [23, 2, 1, "", "get_total_weight"], [23, 2, 1, "", "get_xor_all_inputs"], [23, 2, 1, "", "initialise_model"], [23, 2, 1, "", "input_xor_differential_first_step_constraints"], [23, 3, 1, "", "model_constraints"], [23, 2, 1, "", "parse_solver_information"], [23, 2, 1, "", "set_component_solution_value"], [23, 2, 1, "", "solve"], [23, 2, 1, "", "solver_names"], [23, 2, 1, "", "weight_constraints"], [23, 2, 1, "", "xor_xor_differential_first_step_constraints"]], "cipher_modules.models.cp.cp_models.cp_xor_differential_trail_search_fixing_number_of_active_sboxes_model": [[24, 1, 1, "", "CpXorDifferentialFixingNumberOfActiveSboxesModel"]], "cipher_modules.models.cp.cp_models.cp_xor_differential_trail_search_fixing_number_of_active_sboxes_model.CpXorDifferentialFixingNumberOfActiveSboxesModel": [[24, 2, 1, "", "add_additional_xor_constraints"], [24, 2, 1, "", "add_solution_to_components_values"], [24, 2, 1, "", "add_solutions_from_components_values"], [24, 2, 1, "", "build_mix_column_truncated_table"], [24, 2, 1, "", "build_xor_differential_trail_first_step_model"], [24, 2, 1, "", "build_xor_differential_trail_model"], [24, 2, 1, "", "build_xor_differential_trail_model_template"], [24, 2, 1, "", "build_xor_differential_trail_second_step_model"], [24, 2, 1, "", "calculate_bit_positions"], [24, 2, 1, "", "calculate_bit_values"], [24, 2, 1, "", "calculate_input_bit_positions"], [24, 3, 1, "", "cipher"], [24, 3, 1, "", "cipher_id"], [24, 2, 1, "", "create_xor_component"], [24, 2, 1, "", "final_xor_differential_constraints"], [24, 2, 1, "", "final_xor_differential_first_step_constraints"], [24, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [24, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [24, 2, 1, "", "find_differential_weight"], [24, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [24, 2, 1, "", "find_one_xor_differential_trail"], [24, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [24, 2, 1, "", "find_possible_number_of_active_sboxes"], [24, 2, 1, "", "fix_variables_value_constraints"], [24, 3, 1, "", "float_and_lat_values"], [24, 2, 1, "", "format_component_value"], [24, 2, 1, "", "generate_table_of_solutions"], [24, 2, 1, "", "get_command_for_solver_process"], [24, 2, 1, "", "get_mix_column_all_inputs"], [24, 2, 1, "", "get_new_xor_input_links_and_positions"], [24, 2, 1, "", "get_solutions_dictionaries_with_build_time"], [24, 2, 1, "", "get_total_weight"], [24, 2, 1, "", "get_word_operation_xor_differential_constraints"], [24, 2, 1, "", "get_xor_all_inputs"], [24, 2, 1, "", "initialise_model"], [24, 2, 1, "", "input_xor_differential_constraints"], [24, 2, 1, "", "input_xor_differential_first_step_constraints"], [24, 3, 1, "", "model_constraints"], [24, 2, 1, "", "parse_solver_information"], [24, 2, 1, "", "set_component_solution_value"], [24, 2, 1, "", "solve"], [24, 2, 1, "", "solve_full_two_steps_xor_differential_model"], [24, 2, 1, "", "solve_model"], [24, 2, 1, "", "solver_names"], [24, 2, 1, "", "transform_first_step_model"], [24, 2, 1, "", "update_sbox_ddt_valid_probabilities"], [24, 2, 1, "", "weight_constraints"], [24, 2, 1, "", "xor_xor_differential_first_step_constraints"]], "cipher_modules.models.cp.cp_models.cp_xor_linear_model": [[25, 1, 1, "", "CpXorLinearModel"]], "cipher_modules.models.cp.cp_models.cp_xor_linear_model.CpXorLinearModel": [[25, 2, 1, "", "add_solution_to_components_values"], [25, 2, 1, "", "add_solutions_from_components_values"], [25, 2, 1, "", "and_xor_linear_probability_lat"], [25, 2, 1, "", "branch_xor_linear_constraints"], [25, 2, 1, "", "build_mix_column_truncated_table"], [25, 2, 1, "", "build_xor_linear_trail_model"], [25, 2, 1, "", "calculate_bit_positions"], [25, 2, 1, "", "calculate_bit_values"], [25, 2, 1, "", "calculate_input_bit_positions"], [25, 3, 1, "", "cipher"], [25, 3, 1, "", "cipher_id"], [25, 2, 1, "", "final_xor_linear_constraints"], [25, 2, 1, "", "find_all_xor_linear_trails_with_fixed_weight"], [25, 2, 1, "", "find_all_xor_linear_trails_with_weight_at_most"], [25, 2, 1, "", "find_lowest_weight_xor_linear_trail"], [25, 2, 1, "", "find_one_xor_linear_trail"], [25, 2, 1, "", "find_one_xor_linear_trail_with_fixed_weight"], [25, 2, 1, "", "find_possible_number_of_active_sboxes"], [25, 2, 1, "", "fix_variables_value_constraints"], [25, 2, 1, "", "fix_variables_value_xor_linear_constraints"], [25, 3, 1, "", "float_and_lat_values"], [25, 2, 1, "", "format_component_value"], [25, 2, 1, "", "get_command_for_solver_process"], [25, 2, 1, "", "get_lat_values"], [25, 2, 1, "", "get_mix_column_all_inputs"], [25, 2, 1, "", "get_total_weight"], [25, 2, 1, "", "get_word_operation_final_xor_linear_constraints"], [25, 2, 1, "", "initialise_model"], [25, 2, 1, "", "input_xor_linear_constraints"], [25, 3, 1, "", "model_constraints"], [25, 2, 1, "", "parse_solver_information"], [25, 2, 1, "", "set_component_solution_value"], [25, 2, 1, "", "solve"], [25, 2, 1, "", "solver_names"], [25, 2, 1, "", "update_and_or_lat_valid_probabilities"], [25, 2, 1, "", "update_sbox_lat_valid_probabilities"], [25, 2, 1, "", "weight_constraints"], [25, 2, 1, "", "weight_xor_linear_constraints"]], "cipher_modules.models.cp.minizinc_utils": [[26, 0, 0, "-", "usefulfunctions"]], "cipher_modules.models.milp": [[28, 0, 0, "-", "milp_model"], [36, 0, 0, "-", "solvers"]], "cipher_modules.models.milp.milp_model": [[28, 1, 1, "", "MilpModel"], [28, 4, 1, "", "get_independent_input_output_variables"], [28, 4, 1, "", "get_input_output_variables"]], "cipher_modules.models.milp.milp_model.MilpModel": [[28, 3, 1, "", "binary_variable"], [28, 3, 1, "", "cipher"], [28, 3, 1, "", "cipher_id"], [28, 2, 1, "", "fix_variables_value_constraints"], [28, 2, 1, "", "init_model_in_sage_milp_class"], [28, 3, 1, "", "integer_variable"], [28, 3, 1, "", "intermediate_output_names"], [28, 3, 1, "", "model"], [28, 3, 1, "", "model_constraints"], [28, 3, 1, "", "non_linear_component_id"], [28, 2, 1, "", "solve"], [28, 2, 1, "", "solver_names"], [28, 2, 1, "", "weight_constraints"]], "cipher_modules.models.milp.milp_models": [[29, 0, 0, "-", "milp_bitwise_deterministic_truncated_xor_differential_model"], [30, 0, 0, "-", "milp_bitwise_impossible_xor_differential_model"], [31, 0, 0, "-", "milp_cipher_model"], [32, 0, 0, "-", "milp_wordwise_deterministic_truncated_xor_differential_model"], [33, 0, 0, "-", "milp_wordwise_impossible_xor_differential_model"], [34, 0, 0, "-", "milp_xor_differential_model"], [35, 0, 0, "-", "milp_xor_linear_model"]], "cipher_modules.models.milp.milp_models.milp_bitwise_deterministic_truncated_xor_differential_model": [[29, 1, 1, "", "MilpBitwiseDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.milp.milp_models.milp_bitwise_deterministic_truncated_xor_differential_model.MilpBitwiseDeterministicTruncatedXorDifferentialModel": [[29, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [29, 3, 1, "", "binary_variable"], [29, 2, 1, "", "build_bitwise_deterministic_truncated_xor_differential_trail_model"], [29, 3, 1, "", "cipher"], [29, 3, 1, "", "cipher_id"], [29, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [29, 2, 1, "", "find_one_bitwise_deterministic_truncated_xor_differential_trail"], [29, 2, 1, "", "fix_variables_value_bitwise_deterministic_truncated_xor_differential_constraints"], [29, 2, 1, "", "fix_variables_value_constraints"], [29, 2, 1, "", "init_model_in_sage_milp_class"], [29, 3, 1, "", "integer_variable"], [29, 3, 1, "", "intermediate_output_names"], [29, 2, 1, "", "link_binary_tuples_to_integer_variables"], [29, 3, 1, "", "model"], [29, 3, 1, "", "model_constraints"], [29, 3, 1, "", "non_linear_component_id"], [29, 2, 1, "", "solve"], [29, 2, 1, "", "solver_names"], [29, 3, 1, "", "trunc_binvar"], [29, 2, 1, "", "weight_constraints"]], "cipher_modules.models.milp.milp_models.milp_bitwise_impossible_xor_differential_model": [[30, 1, 1, "", "MilpBitwiseImpossibleXorDifferentialModel"]], "cipher_modules.models.milp.milp_models.milp_bitwise_impossible_xor_differential_model.MilpBitwiseImpossibleXorDifferentialModel": [[30, 2, 1, "", "add_constraints_to_build_fully_automatic_model_in_sage_milp_class"], [30, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [30, 2, 1, "", "add_constraints_to_build_in_sage_milp_class_with_chosen_incompatible_components"], [30, 3, 1, "", "binary_variable"], [30, 2, 1, "", "build_bitwise_deterministic_truncated_xor_differential_trail_model"], [30, 2, 1, "", "build_bitwise_impossible_xor_differential_trail_model"], [30, 3, 1, "", "cipher"], [30, 3, 1, "", "cipher_id"], [30, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [30, 2, 1, "", "find_one_bitwise_deterministic_truncated_xor_differential_trail"], [30, 2, 1, "", "find_one_bitwise_impossible_xor_differential_trail"], [30, 2, 1, "", "find_one_bitwise_impossible_xor_differential_trail_with_chosen_incompatible_components"], [30, 2, 1, "", "find_one_bitwise_impossible_xor_differential_trail_with_fully_automatic_model"], [30, 2, 1, "", "fix_variables_value_bitwise_deterministic_truncated_xor_differential_constraints"], [30, 2, 1, "", "fix_variables_value_constraints"], [30, 2, 1, "", "init_model_in_sage_milp_class"], [30, 3, 1, "", "integer_variable"], [30, 3, 1, "", "intermediate_output_names"], [30, 2, 1, "", "link_binary_tuples_to_integer_variables"], [30, 3, 1, "", "model"], [30, 3, 1, "", "model_constraints"], [30, 3, 1, "", "non_linear_component_id"], [30, 2, 1, "", "solve"], [30, 2, 1, "", "solver_names"], [30, 3, 1, "", "trunc_binvar"], [30, 2, 1, "", "weight_constraints"]], "cipher_modules.models.milp.milp_models.milp_cipher_model": [[31, 1, 1, "", "MilpCipherModel"]], "cipher_modules.models.milp.milp_models.milp_cipher_model.MilpCipherModel": [[31, 3, 1, "", "binary_variable"], [31, 2, 1, "", "build_cipher_model"], [31, 3, 1, "", "cipher"], [31, 3, 1, "", "cipher_id"], [31, 2, 1, "", "fix_variables_value_constraints"], [31, 2, 1, "", "init_model_in_sage_milp_class"], [31, 3, 1, "", "integer_variable"], [31, 3, 1, "", "intermediate_output_names"], [31, 3, 1, "", "model"], [31, 3, 1, "", "model_constraints"], [31, 3, 1, "", "non_linear_component_id"], [31, 2, 1, "", "solve"], [31, 2, 1, "", "solver_names"], [31, 2, 1, "", "weight_constraints"]], "cipher_modules.models.milp.milp_models.milp_wordwise_deterministic_truncated_xor_differential_model": [[32, 1, 1, "", "MilpWordwiseDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.milp.milp_models.milp_wordwise_deterministic_truncated_xor_differential_model.MilpWordwiseDeterministicTruncatedXorDifferentialModel": [[32, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [32, 3, 1, "", "binary_variable"], [32, 2, 1, "", "build_wordwise_deterministic_truncated_xor_differential_trail_model"], [32, 3, 1, "", "cipher"], [32, 3, 1, "", "cipher_id"], [32, 2, 1, "", "find_lowest_varied_patterns_wordwise_deterministic_truncated_xor_differential_trail"], [32, 2, 1, "", "find_one_wordwise_deterministic_truncated_xor_differential_trail"], [32, 2, 1, "", "fix_variables_value_constraints"], [32, 2, 1, "", "fix_variables_value_wordwise_deterministic_truncated_xor_differential_constraints"], [32, 2, 1, "", "init_model_in_sage_milp_class"], [32, 2, 1, "", "input_wordwise_deterministic_truncated_xor_differential_constraints"], [32, 3, 1, "", "integer_variable"], [32, 3, 1, "", "intermediate_output_names"], [32, 3, 1, "", "model"], [32, 3, 1, "", "model_constraints"], [32, 3, 1, "", "non_linear_component_id"], [32, 2, 1, "", "solve"], [32, 2, 1, "", "solver_names"], [32, 3, 1, "", "trunc_wordvar"], [32, 2, 1, "", "weight_constraints"], [32, 3, 1, "", "word_size"]], "cipher_modules.models.milp.milp_models.milp_wordwise_impossible_xor_differential_model": [[33, 1, 1, "", "MilpWordwiseImpossibleXorDifferentialModel"]], "cipher_modules.models.milp.milp_models.milp_wordwise_impossible_xor_differential_model.MilpWordwiseImpossibleXorDifferentialModel": [[33, 2, 1, "", "add_constraints_to_build_fully_automatic_model_in_sage_milp_class"], [33, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [33, 2, 1, "", "add_constraints_to_build_in_sage_milp_class_with_chosen_incompatible_components"], [33, 3, 1, "", "binary_variable"], [33, 2, 1, "", "build_wordwise_deterministic_truncated_xor_differential_trail_model"], [33, 2, 1, "", "build_wordwise_impossible_xor_differential_trail_model"], [33, 3, 1, "", "cipher"], [33, 3, 1, "", "cipher_id"], [33, 2, 1, "", "find_lowest_varied_patterns_wordwise_deterministic_truncated_xor_differential_trail"], [33, 2, 1, "", "find_one_wordwise_deterministic_truncated_xor_differential_trail"], [33, 2, 1, "", "find_one_wordwise_impossible_xor_differential_trail"], [33, 2, 1, "", "find_one_wordwise_impossible_xor_differential_trail_with_chosen_components"], [33, 2, 1, "", "find_one_wordwise_impossible_xor_differential_trail_with_fully_automatic_model"], [33, 2, 1, "", "fix_variables_value_constraints"], [33, 2, 1, "", "fix_variables_value_wordwise_deterministic_truncated_xor_differential_constraints"], [33, 2, 1, "", "init_model_in_sage_milp_class"], [33, 2, 1, "", "input_wordwise_deterministic_truncated_xor_differential_constraints"], [33, 3, 1, "", "integer_variable"], [33, 3, 1, "", "intermediate_output_names"], [33, 3, 1, "", "model"], [33, 3, 1, "", "model_constraints"], [33, 3, 1, "", "non_linear_component_id"], [33, 2, 1, "", "solve"], [33, 2, 1, "", "solver_names"], [33, 3, 1, "", "trunc_wordvar"], [33, 2, 1, "", "weight_constraints"], [33, 3, 1, "", "word_size"]], "cipher_modules.models.milp.milp_models.milp_xor_differential_model": [[34, 1, 1, "", "MilpXorDifferentialModel"]], "cipher_modules.models.milp.milp_models.milp_xor_differential_model.MilpXorDifferentialModel": [[34, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [34, 3, 1, "", "binary_variable"], [34, 2, 1, "", "build_xor_differential_trail_model"], [34, 3, 1, "", "cipher"], [34, 3, 1, "", "cipher_id"], [34, 2, 1, "", "exclude_variables_value_constraints"], [34, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [34, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [34, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [34, 2, 1, "", "find_one_xor_differential_trail"], [34, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [34, 2, 1, "", "fix_variables_value_constraints"], [34, 2, 1, "", "init_model_in_sage_milp_class"], [34, 3, 1, "", "integer_variable"], [34, 3, 1, "", "intermediate_output_names"], [34, 2, 1, "", "is_single_key"], [34, 3, 1, "", "model"], [34, 3, 1, "", "model_constraints"], [34, 3, 1, "", "non_linear_component_id"], [34, 2, 1, "", "solve"], [34, 2, 1, "", "solver_names"], [34, 2, 1, "", "weight_constraints"], [34, 3, 1, "", "weight_precision"]], "cipher_modules.models.milp.milp_models.milp_xor_linear_model": [[35, 1, 1, "", "MilpXorLinearModel"]], "cipher_modules.models.milp.milp_models.milp_xor_linear_model.MilpXorLinearModel": [[35, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [35, 3, 1, "", "binary_variable"], [35, 2, 1, "", "branch_xor_linear_constraints"], [35, 2, 1, "", "build_xor_linear_trail_model"], [35, 3, 1, "", "cipher"], [35, 3, 1, "", "cipher_id"], [35, 2, 1, "", "exclude_variables_value_xor_linear_constraints"], [35, 2, 1, "", "find_all_xor_linear_trails_with_fixed_weight"], [35, 2, 1, "", "find_all_xor_linear_trails_with_weight_at_most"], [35, 2, 1, "", "find_lowest_weight_xor_linear_trail"], [35, 2, 1, "", "find_one_xor_linear_trail"], [35, 2, 1, "", "find_one_xor_linear_trail_with_fixed_weight"], [35, 2, 1, "", "fix_variables_value_constraints"], [35, 2, 1, "", "fix_variables_value_xor_linear_constraints"], [35, 2, 1, "", "init_model_in_sage_milp_class"], [35, 3, 1, "", "integer_variable"], [35, 3, 1, "", "intermediate_output_names"], [35, 3, 1, "", "model"], [35, 3, 1, "", "model_constraints"], [35, 3, 1, "", "non_linear_component_id"], [35, 2, 1, "", "solve"], [35, 2, 1, "", "solver_names"], [35, 2, 1, "", "update_xor_linear_constraints_for_more_than_two_bits"], [35, 2, 1, "", "weight_constraints"], [35, 3, 1, "", "weight_precision"], [35, 2, 1, "", "weight_xor_linear_constraints"]], "cipher_modules.models.milp.utils": [[47, 0, 0, "-", "generate_inequalities_for_and_operation_2_input_bits"], [48, 0, 0, "-", "generate_inequalities_for_large_sboxes"], [49, 0, 0, "-", "generate_inequalities_for_wordwise_truncated_mds_matrices"], [50, 0, 0, "-", "generate_inequalities_for_wordwise_truncated_xor_with_n_input_bits"], [51, 0, 0, "-", "generate_inequalities_for_xor_with_n_input_bits"], [52, 0, 0, "-", "generate_sbox_inequalities_for_trail_search"], [53, 0, 0, "-", "generate_undisturbed_bits_inequalities_for_sboxes"], [54, 0, 0, "-", "milp_name_mappings"], [55, 0, 0, "-", "milp_truncated_utils"], [56, 0, 0, "-", "mzn_predicates"], [57, 0, 0, "-", "utils"]], "cipher_modules.models.milp.utils.generate_inequalities_for_and_operation_2_input_bits": [[47, 4, 1, "", "and_LAT"], [47, 4, 1, "", "and_inequalities"], [47, 4, 1, "", "convex_hull"], [47, 4, 1, "", "cutting_off_greedy"], [47, 4, 1, "", "cutting_off_milp"]], "cipher_modules.models.milp.utils.generate_inequalities_for_large_sboxes": [[48, 4, 1, "", "delete_dictionary_that_contains_inequalities_for_large_sboxes"], [48, 4, 1, "", "generate_espresso_input"], [48, 4, 1, "", "generate_product_of_sum_from_espresso"], [48, 4, 1, "", "get_dictionary_that_contains_inequalities_for_large_sboxes"], [48, 4, 1, "", "update_dictionary_that_contains_inequalities_for_large_sboxes"]], "cipher_modules.models.milp.utils.generate_inequalities_for_wordwise_truncated_mds_matrices": [[49, 4, 1, "", "delete_dictionary_that_contains_wordwise_truncated_mds_inequalities"], [49, 4, 1, "", "generate_valid_points_for_truncated_mds_matrix"], [49, 4, 1, "", "output_dictionary_that_contains_wordwise_truncated_mds_inequalities"], [49, 4, 1, "", "update_dictionary_that_contains_wordwise_truncated_mds_inequalities"]], "cipher_modules.models.milp.utils.generate_inequalities_for_wordwise_truncated_xor_with_n_input_bits": [[50, 4, 1, "", "delete_dictionary_that_contains_wordwise_truncated_input_inequalities"], [50, 4, 1, "", "delete_dictionary_that_contains_wordwise_truncated_xor_inequalities"], [50, 4, 1, "", "generate_valid_points_for_xor_between_n_input_words"], [50, 4, 1, "", "generate_valid_points_input_words"], [50, 4, 1, "", "get_valid_points_for_wordwise_xor"], [50, 4, 1, "", "output_dictionary_that_contains_wordwise_truncated_input_inequalities"], [50, 4, 1, "", "output_dictionary_that_contains_wordwise_truncated_xor_inequalities"], [50, 4, 1, "", "update_dictionary_that_contains_wordwise_truncated_input_inequalities"], [50, 4, 1, "", "update_dictionary_that_contains_wordwise_truncated_xor_inequalities_between_n_inputs"], [50, 4, 1, "", "update_dictionary_that_contains_xor_inequalities_for_specific_wordwise_matrix"]], "cipher_modules.models.milp.utils.generate_inequalities_for_xor_with_n_input_bits": [[51, 4, 1, "", "delete_dictionary_that_contains_xor_inequalities"], [51, 4, 1, "", "generate_all_possible_points_with_n_bits"], [51, 4, 1, "", "generate_impossible_points_for_xor_between_n_input_bits"], [51, 4, 1, "", "output_dictionary_that_contains_xor_inequalities"], [51, 4, 1, "", "update_dictionary_that_contains_xor_inequalities_between_n_input_bits"], [51, 4, 1, "", "update_dictionary_that_contains_xor_inequalities_for_specific_matrix"]], "cipher_modules.models.milp.utils.generate_sbox_inequalities_for_trail_search": [[52, 4, 1, "", "convex_hull"], [52, 4, 1, "", "cutting_off_greedy"], [52, 4, 1, "", "cutting_off_milp"], [52, 4, 1, "", "delete_dictionary_that_contains_inequalities_for_small_sboxes"], [52, 4, 1, "", "get_dictionary_that_contains_inequalities_for_small_sboxes"], [52, 4, 1, "", "sbox_inequalities"], [52, 4, 1, "", "to_bits"], [52, 4, 1, "", "update_dictionary_that_contains_inequalities_for_small_sboxes"]], "cipher_modules.models.milp.utils.generate_undisturbed_bits_inequalities_for_sboxes": [[53, 4, 1, "", "delete_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bits"], [53, 4, 1, "", "generate_dict_product_of_sum_from_espresso"], [53, 4, 1, "", "get_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bits"], [53, 4, 1, "", "get_transitions_for_single_output_bit"], [53, 4, 1, "", "update_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bits"]], "cipher_modules.models.milp.utils.milp_truncated_utils": [[55, 4, 1, "", "fix_variables_value_deterministic_truncated_xor_differential_constraints"], [55, 4, 1, "", "generate_all_incompatibility_constraints_for_fully_automatic_model"], [55, 4, 1, "", "generate_incompatiblity_constraints_for_component"]], "cipher_modules.models.milp.utils.mzn_predicates": [[56, 4, 1, "", "get_word_operations"]], "cipher_modules.models.milp.utils.utils": [[57, 4, 1, "", "delete_espresso_dictionary"], [57, 4, 1, "", "espresso_pos_to_constraints"], [57, 4, 1, "", "generate_espresso_input"], [57, 4, 1, "", "generate_product_of_sum_from_espresso"], [57, 4, 1, "", "milp_and"], [57, 4, 1, "", "milp_else"], [57, 4, 1, "", "milp_eq"], [57, 4, 1, "", "milp_generalized_and"], [57, 4, 1, "", "milp_generalized_xor"], [57, 4, 1, "", "milp_geq"], [57, 4, 1, "", "milp_greater"], [57, 4, 1, "", "milp_if_elif_else"], [57, 4, 1, "", "milp_if_then"], [57, 4, 1, "", "milp_if_then_else"], [57, 4, 1, "", "milp_leq"], [57, 4, 1, "", "milp_less"], [57, 4, 1, "", "milp_neq"], [57, 4, 1, "", "milp_or"], [57, 4, 1, "", "milp_xor"], [57, 4, 1, "", "milp_xor_truncated"], [57, 4, 1, "", "milp_xor_truncated_wordwise"], [57, 4, 1, "", "output_espresso_dictionary"]], "cipher_modules.models.minizinc": [[58, 0, 0, "-", "minizinc_model"]], "cipher_modules.models.minizinc.minizinc_model": [[58, 1, 1, "", "MinizincModel"]], "cipher_modules.models.minizinc.minizinc_model.MinizincModel": [[58, 2, 1, "", "add_comment"], [58, 2, 1, "", "add_constraint_from_str"], [58, 2, 1, "", "add_output_comment"], [58, 3, 1, "", "cipher"], [58, 3, 1, "", "cipher_id"], [58, 2, 1, "", "fix_variables_value_constraints"], [58, 3, 1, "", "model_constraints"], [58, 2, 1, "", "output_probability_per_round"], [58, 2, 1, "", "solve"], [58, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.minizinc.minizinc_models": [[60, 0, 0, "-", "minizinc_cipher_model"], [61, 0, 0, "-", "minizinc_deterministic_truncated_xor_differential_model"], [62, 0, 0, "-", "minizinc_xor_differential_model"]], "cipher_modules.models.minizinc.minizinc_models.minizinc_cipher_model": [[60, 1, 1, "", "MinizincCipherModel"]], "cipher_modules.models.minizinc.minizinc_models.minizinc_cipher_model.MinizincCipherModel": [[60, 2, 1, "", "add_comment"], [60, 2, 1, "", "add_constraint_from_str"], [60, 2, 1, "", "add_output_comment"], [60, 2, 1, "", "build_cipher_model"], [60, 3, 1, "", "cipher"], [60, 3, 1, "", "cipher_id"], [60, 2, 1, "", "fix_variables_value_constraints"], [60, 3, 1, "", "model_constraints"], [60, 2, 1, "", "output_probability_per_round"], [60, 2, 1, "", "solve"], [60, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.minizinc.minizinc_models.minizinc_deterministic_truncated_xor_differential_model": [[61, 1, 1, "", "MinizincDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.minizinc.minizinc_models.minizinc_deterministic_truncated_xor_differential_model.MinizincDeterministicTruncatedXorDifferentialModel": [[61, 2, 1, "", "add_comment"], [61, 2, 1, "", "add_constraint_from_str"], [61, 2, 1, "", "add_output_comment"], [61, 2, 1, "", "build_deterministic_truncated_xor_differential_trail_model"], [61, 3, 1, "", "cipher"], [61, 3, 1, "", "cipher_id"], [61, 2, 1, "", "fix_variables_value_constraints"], [61, 3, 1, "", "model_constraints"], [61, 2, 1, "", "output_probability_per_round"], [61, 2, 1, "", "solve"], [61, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.minizinc.minizinc_models.minizinc_xor_differential_model": [[62, 1, 1, "", "MinizincXorDifferentialModel"]], "cipher_modules.models.minizinc.minizinc_models.minizinc_xor_differential_model.MinizincXorDifferentialModel": [[62, 2, 1, "", "add_comment"], [62, 2, 1, "", "add_constraint_from_str"], [62, 2, 1, "", "add_output_comment"], [62, 2, 1, "", "build_all_xor_differential_trails_with_fixed_weight"], [62, 2, 1, "", "build_lowest_weight_xor_differential_trail_model"], [62, 2, 1, "", "build_lowest_xor_differential_trails_with_at_most_weight"], [62, 2, 1, "", "build_xor_differential_trail_model"], [62, 3, 1, "", "cipher"], [62, 3, 1, "", "cipher_id"], [62, 2, 1, "", "connect_rounds"], [62, 2, 1, "", "constraint_permutation_and_key_schedule_separately_by_input_sizes"], [62, 2, 1, "", "extend_model_constraints"], [62, 2, 1, "", "extend_variables"], [62, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [62, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [62, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [62, 2, 1, "", "find_min_of_max_xor_differential_between_permutation_and_key_schedule"], [62, 2, 1, "", "fix_variables_value_constraints"], [62, 2, 1, "", "get_model_constraints"], [62, 2, 1, "", "get_probability_vars_from_key_schedule"], [62, 2, 1, "", "get_probability_vars_from_permutation"], [62, 2, 1, "", "get_variables"], [62, 2, 1, "", "init_constraints"], [62, 3, 1, "", "model_constraints"], [62, 2, 1, "", "objective_generator"], [62, 2, 1, "", "output_probability_per_round"], [62, 2, 1, "", "parse_probability_vars"], [62, 2, 1, "", "satisfy_generator"], [62, 2, 1, "", "set_max_number_of_carries_on_arx_cipher"], [62, 2, 1, "", "set_max_number_of_nonlinear_carries"], [62, 2, 1, "", "solve"], [62, 2, 1, "", "weight_constraints"], [62, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.minizinc.utils": [[63, 0, 0, "-", "mzn_bct_predicates"], [64, 0, 0, "-", "utils"]], "cipher_modules.models.minizinc.utils.mzn_bct_predicates": [[63, 4, 1, "", "get_bct_operations"]], "cipher_modules.models.minizinc.utils.utils": [[64, 4, 1, "", "filter_out_strings_containing_substring"], [64, 4, 1, "", "group_strings_by_pattern"]], "cipher_modules.models.sat.cms_models": [[65, 0, 0, "-", "cms_bitwise_deterministic_truncated_xor_differential_model"], [66, 0, 0, "-", "cms_cipher_model"], [67, 0, 0, "-", "cms_xor_differential_model"], [68, 0, 0, "-", "cms_xor_linear_model"]], "cipher_modules.models.sat.cms_models.cms_bitwise_deterministic_truncated_xor_differential_model": [[65, 1, 1, "", "CmsSatDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.sat.cms_models.cms_bitwise_deterministic_truncated_xor_differential_model.CmsSatDeterministicTruncatedXorDifferentialModel": [[65, 2, 1, "", "build_bitwise_deterministic_truncated_xor_differential_trail_model"], [65, 2, 1, "", "calculate_component_weight"], [65, 3, 1, "", "cipher_id"], [65, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [65, 2, 1, "", "find_one_bitwise_deterministic_truncated_xor_differential_trail"], [65, 2, 1, "", "fix_variables_value_constraints"], [65, 3, 1, "", "model_constraints"], [65, 3, 1, "", "sboxes_ddt_templates"], [65, 3, 1, "", "sboxes_lat_templates"], [65, 2, 1, "", "solve"], [65, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.cms_models.cms_cipher_model": [[66, 1, 1, "", "CmsSatCipherModel"]], "cipher_modules.models.sat.cms_models.cms_cipher_model.CmsSatCipherModel": [[66, 2, 1, "", "build_cipher_model"], [66, 2, 1, "", "calculate_component_weight"], [66, 3, 1, "", "cipher_id"], [66, 2, 1, "", "find_missing_bits"], [66, 2, 1, "", "fix_variables_value_constraints"], [66, 3, 1, "", "model_constraints"], [66, 3, 1, "", "sboxes_ddt_templates"], [66, 3, 1, "", "sboxes_lat_templates"], [66, 2, 1, "", "solve"], [66, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.cms_models.cms_xor_differential_model": [[67, 1, 1, "", "CmsSatXorDifferentialModel"]], "cipher_modules.models.sat.cms_models.cms_xor_differential_model.CmsSatXorDifferentialModel": [[67, 2, 1, "", "build_xor_differential_trail_and_checker_model_at_intermediate_output_level"], [67, 2, 1, "", "build_xor_differential_trail_model"], [67, 2, 1, "", "calculate_component_weight"], [67, 3, 1, "", "cipher_id"], [67, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [67, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [67, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [67, 2, 1, "", "find_one_xor_differential_trail"], [67, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [67, 2, 1, "", "fix_variables_value_constraints"], [67, 3, 1, "", "model_constraints"], [67, 3, 1, "", "sboxes_ddt_templates"], [67, 3, 1, "", "sboxes_lat_templates"], [67, 2, 1, "", "set_window_size_heuristic_by_component_id"], [67, 2, 1, "", "set_window_size_heuristic_by_round"], [67, 2, 1, "", "solve"], [67, 2, 1, "", "weight_constraints"], [67, 3, 1, "", "window_size_by_component_id_values"], [67, 3, 1, "", "window_size_by_round_values"], [67, 3, 1, "", "window_size_number_of_full_window"]], "cipher_modules.models.sat.cms_models.cms_xor_linear_model": [[68, 1, 1, "", "CmsSatXorLinearModel"]], "cipher_modules.models.sat.cms_models.cms_xor_linear_model.CmsSatXorLinearModel": [[68, 2, 1, "", "branch_xor_linear_constraints"], [68, 2, 1, "", "build_xor_linear_trail_model"], [68, 2, 1, "", "calculate_component_weight"], [68, 3, 1, "", "cipher_id"], [68, 2, 1, "", "find_all_xor_linear_trails_with_fixed_weight"], [68, 2, 1, "", "find_all_xor_linear_trails_with_weight_at_most"], [68, 2, 1, "", "find_lowest_weight_xor_linear_trail"], [68, 2, 1, "", "find_one_xor_linear_trail"], [68, 2, 1, "", "find_one_xor_linear_trail_with_fixed_weight"], [68, 2, 1, "", "fix_variables_value_constraints"], [68, 2, 1, "", "fix_variables_value_xor_linear_constraints"], [68, 3, 1, "", "model_constraints"], [68, 3, 1, "", "sboxes_ddt_templates"], [68, 3, 1, "", "sboxes_lat_templates"], [68, 2, 1, "", "solve"], [68, 2, 1, "", "weight_constraints"], [68, 2, 1, "", "weight_xor_linear_constraints"]], "cipher_modules.models.sat": [[69, 0, 0, "-", "sat_model"], [74, 0, 0, "-", "solvers"]], "cipher_modules.models.sat.sat_model": [[69, 1, 1, "", "SatModel"]], "cipher_modules.models.sat.sat_model.SatModel": [[69, 2, 1, "", "calculate_component_weight"], [69, 3, 1, "", "cipher_id"], [69, 2, 1, "", "fix_variables_value_constraints"], [69, 3, 1, "", "model_constraints"], [69, 3, 1, "", "sboxes_ddt_templates"], [69, 3, 1, "", "sboxes_lat_templates"], [69, 2, 1, "", "solve"], [69, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models": [[70, 0, 0, "-", "sat_bitwise_deterministic_truncated_xor_differential_model"], [71, 0, 0, "-", "sat_cipher_model"], [72, 0, 0, "-", "sat_xor_differential_model"], [73, 0, 0, "-", "sat_xor_linear_model"]], "cipher_modules.models.sat.sat_models.sat_bitwise_deterministic_truncated_xor_differential_model": [[70, 1, 1, "", "SatBitwiseDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.sat.sat_models.sat_bitwise_deterministic_truncated_xor_differential_model.SatBitwiseDeterministicTruncatedXorDifferentialModel": [[70, 2, 1, "", "build_bitwise_deterministic_truncated_xor_differential_trail_model"], [70, 2, 1, "", "calculate_component_weight"], [70, 3, 1, "", "cipher_id"], [70, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [70, 2, 1, "", "find_one_bitwise_deterministic_truncated_xor_differential_trail"], [70, 2, 1, "", "fix_variables_value_constraints"], [70, 3, 1, "", "model_constraints"], [70, 3, 1, "", "sboxes_ddt_templates"], [70, 3, 1, "", "sboxes_lat_templates"], [70, 2, 1, "", "solve"], [70, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models.sat_cipher_model": [[71, 1, 1, "", "SatCipherModel"]], "cipher_modules.models.sat.sat_models.sat_cipher_model.SatCipherModel": [[71, 2, 1, "", "build_cipher_model"], [71, 2, 1, "", "calculate_component_weight"], [71, 3, 1, "", "cipher_id"], [71, 2, 1, "", "find_missing_bits"], [71, 2, 1, "", "fix_variables_value_constraints"], [71, 3, 1, "", "model_constraints"], [71, 3, 1, "", "sboxes_ddt_templates"], [71, 3, 1, "", "sboxes_lat_templates"], [71, 2, 1, "", "solve"], [71, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models.sat_xor_differential_model": [[72, 1, 1, "", "SatXorDifferentialModel"]], "cipher_modules.models.sat.sat_models.sat_xor_differential_model.SatXorDifferentialModel": [[72, 2, 1, "", "build_xor_differential_trail_and_checker_model_at_intermediate_output_level"], [72, 2, 1, "", "build_xor_differential_trail_model"], [72, 2, 1, "", "calculate_component_weight"], [72, 3, 1, "", "cipher_id"], [72, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [72, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [72, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [72, 2, 1, "", "find_one_xor_differential_trail"], [72, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [72, 2, 1, "", "fix_variables_value_constraints"], [72, 3, 1, "", "model_constraints"], [72, 3, 1, "", "sboxes_ddt_templates"], [72, 3, 1, "", "sboxes_lat_templates"], [72, 2, 1, "", "set_window_size_heuristic_by_component_id"], [72, 2, 1, "", "set_window_size_heuristic_by_round"], [72, 2, 1, "", "solve"], [72, 2, 1, "", "weight_constraints"], [72, 3, 1, "", "window_size_by_component_id_values"], [72, 3, 1, "", "window_size_by_round_values"], [72, 3, 1, "", "window_size_number_of_full_window"]], "cipher_modules.models.sat.sat_models.sat_xor_linear_model": [[73, 1, 1, "", "SatXorLinearModel"]], "cipher_modules.models.sat.sat_models.sat_xor_linear_model.SatXorLinearModel": [[73, 2, 1, "", "branch_xor_linear_constraints"], [73, 2, 1, "", "build_xor_linear_trail_model"], [73, 2, 1, "", "calculate_component_weight"], [73, 3, 1, "", "cipher_id"], [73, 2, 1, "", "find_all_xor_linear_trails_with_fixed_weight"], [73, 2, 1, "", "find_all_xor_linear_trails_with_weight_at_most"], [73, 2, 1, "", "find_lowest_weight_xor_linear_trail"], [73, 2, 1, "", "find_one_xor_linear_trail"], [73, 2, 1, "", "find_one_xor_linear_trail_with_fixed_weight"], [73, 2, 1, "", "fix_variables_value_constraints"], [73, 2, 1, "", "fix_variables_value_xor_linear_constraints"], [73, 3, 1, "", "model_constraints"], [73, 3, 1, "", "sboxes_ddt_templates"], [73, 3, 1, "", "sboxes_lat_templates"], [73, 2, 1, "", "solve"], [73, 2, 1, "", "weight_constraints"], [73, 2, 1, "", "weight_xor_linear_constraints"]], "cipher_modules.models.sat.utils": [[75, 0, 0, "-", "mzn_predicates"], [76, 0, 0, "-", "n_window_heuristic_helper"], [77, 0, 0, "-", "utils"]], "cipher_modules.models.sat.utils.mzn_predicates": [[75, 4, 1, "", "get_word_operations"]], "cipher_modules.models.sat.utils.n_window_heuristic_helper": [[76, 4, 1, "", "window_size_0_cnf"], [76, 4, 1, "", "window_size_1_cnf"], [76, 4, 1, "", "window_size_2_cnf"], [76, 4, 1, "", "window_size_3_cnf"], [76, 4, 1, "", "window_size_4_cnf"], [76, 4, 1, "", "window_size_5_cnf"], [76, 4, 1, "", "window_size_with_full_1_window_cnf"], [76, 4, 1, "", "window_size_with_full_2_window_cnf"], [76, 4, 1, "", "window_size_with_full_3_window_cnf"], [76, 4, 1, "", "window_size_with_full_4_window_cnf"]], "cipher_modules.models.sat.utils.utils": [[77, 4, 1, "", "cms_add_clauses_to_solver"], [77, 4, 1, "", "cnf_and"], [77, 4, 1, "", "cnf_and_differential"], [77, 4, 1, "", "cnf_and_linear"], [77, 4, 1, "", "cnf_and_seq"], [77, 4, 1, "", "cnf_carry"], [77, 4, 1, "", "cnf_carry_comp2"], [77, 4, 1, "", "cnf_equivalent"], [77, 4, 1, "", "cnf_hw_lipmaa"], [77, 4, 1, "", "cnf_inequality"], [77, 4, 1, "", "cnf_lipmaa"], [77, 4, 1, "", "cnf_modadd_inequality"], [77, 4, 1, "", "cnf_n_window_heuristic_on_w_vars"], [77, 4, 1, "", "cnf_or"], [77, 4, 1, "", "cnf_or_seq"], [77, 4, 1, "", "cnf_result_comp2"], [77, 4, 1, "", "cnf_vshift_false"], [77, 4, 1, "", "cnf_vshift_id"], [77, 4, 1, "", "cnf_xor"], [77, 4, 1, "", "cnf_xor_seq"], [77, 4, 1, "", "cnf_xor_truncated"], [77, 4, 1, "", "cnf_xor_truncated_seq"], [77, 4, 1, "", "create_numerical_cnf"], [77, 4, 1, "", "modadd_truncated"], [77, 4, 1, "", "modadd_truncated_lsb"], [77, 4, 1, "", "modadd_truncated_msb"], [77, 4, 1, "", "numerical_cnf_to_dimacs"], [77, 4, 1, "", "run_minisat"], [77, 4, 1, "", "run_parkissat"], [77, 4, 1, "", "run_sat_solver"], [77, 4, 1, "", "run_yices"]], "cipher_modules.models.smt": [[78, 0, 0, "-", "smt_model"], [83, 0, 0, "-", "solvers"]], "cipher_modules.models.smt.smt_model": [[78, 1, 1, "", "SmtModel"], [78, 4, 1, "", "mathsat_parser"], [78, 4, 1, "", "yices_parser"], [78, 4, 1, "", "z3_parser"]], "cipher_modules.models.smt.smt_model.SmtModel": [[78, 2, 1, "", "calculate_component_weight"], [78, 3, 1, "", "cipher_id"], [78, 2, 1, "", "cipher_input_variables"], [78, 2, 1, "", "fix_variables_value_constraints"], [78, 2, 1, "", "get_xor_probability_constraints"], [78, 3, 1, "", "model_constraints"], [78, 3, 1, "", "sboxes_ddt_templates"], [78, 3, 1, "", "sboxes_lat_templates"], [78, 2, 1, "", "solve"], [78, 2, 1, "", "update_constraints_for_equal_type"], [78, 2, 1, "", "update_constraints_for_not_equal_type"], [78, 2, 1, "", "weight_constraints"]], "cipher_modules.models.smt.smt_models": [[79, 0, 0, "-", "smt_cipher_model"], [80, 0, 0, "-", "smt_deterministic_truncated_xor_differential_model"], [81, 0, 0, "-", "smt_xor_differential_model"], [82, 0, 0, "-", "smt_xor_linear_model"]], "cipher_modules.models.smt.smt_models.smt_cipher_model": [[79, 1, 1, "", "SmtCipherModel"]], "cipher_modules.models.smt.smt_models.smt_cipher_model.SmtCipherModel": [[79, 2, 1, "", "build_cipher_model"], [79, 2, 1, "", "calculate_component_weight"], [79, 3, 1, "", "cipher_id"], [79, 2, 1, "", "cipher_input_variables"], [79, 2, 1, "", "find_missing_bits"], [79, 2, 1, "", "fix_variables_value_constraints"], [79, 2, 1, "", "get_xor_probability_constraints"], [79, 3, 1, "", "model_constraints"], [79, 3, 1, "", "sboxes_ddt_templates"], [79, 3, 1, "", "sboxes_lat_templates"], [79, 2, 1, "", "solve"], [79, 2, 1, "", "update_constraints_for_equal_type"], [79, 2, 1, "", "update_constraints_for_not_equal_type"], [79, 2, 1, "", "weight_constraints"]], "cipher_modules.models.smt.smt_models.smt_deterministic_truncated_xor_differential_model": [[80, 1, 1, "", "SmtDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.smt.smt_models.smt_deterministic_truncated_xor_differential_model.SmtDeterministicTruncatedXorDifferentialModel": [[80, 2, 1, "", "calculate_component_weight"], [80, 3, 1, "", "cipher_id"], [80, 2, 1, "", "cipher_input_variables"], [80, 2, 1, "", "fix_variables_value_constraints"], [80, 2, 1, "", "get_xor_probability_constraints"], [80, 3, 1, "", "model_constraints"], [80, 3, 1, "", "sboxes_ddt_templates"], [80, 3, 1, "", "sboxes_lat_templates"], [80, 2, 1, "", "solve"], [80, 2, 1, "", "update_constraints_for_equal_type"], [80, 2, 1, "", "update_constraints_for_not_equal_type"], [80, 2, 1, "", "weight_constraints"]], "cipher_modules.models.smt.smt_models.smt_xor_differential_model": [[81, 1, 1, "", "SmtXorDifferentialModel"]], "cipher_modules.models.smt.smt_models.smt_xor_differential_model.SmtXorDifferentialModel": [[81, 2, 1, "", "build_xor_differential_trail_model"], [81, 2, 1, "", "calculate_component_weight"], [81, 3, 1, "", "cipher_id"], [81, 2, 1, "", "cipher_input_variables"], [81, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [81, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [81, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [81, 2, 1, "", "find_one_xor_differential_trail"], [81, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [81, 2, 1, "", "fix_variables_value_constraints"], [81, 2, 1, "", "get_operands"], [81, 2, 1, "", "get_xor_probability_constraints"], [81, 3, 1, "", "model_constraints"], [81, 3, 1, "", "sboxes_ddt_templates"], [81, 3, 1, "", "sboxes_lat_templates"], [81, 2, 1, "", "solve"], [81, 2, 1, "", "update_constraints_for_equal_type"], [81, 2, 1, "", "update_constraints_for_not_equal_type"], [81, 2, 1, "", "weight_constraints"]], "cipher_modules.models.smt.smt_models.smt_xor_linear_model": [[82, 1, 1, "", "SmtXorLinearModel"]], "cipher_modules.models.smt.smt_models.smt_xor_linear_model.SmtXorLinearModel": [[82, 2, 1, "", "branch_xor_linear_constraints"], [82, 2, 1, "", "build_xor_linear_trail_model"], [82, 2, 1, "", "calculate_component_weight"], [82, 3, 1, "", "cipher_id"], [82, 2, 1, "", "cipher_input_variables"], [82, 2, 1, "", "cipher_input_xor_linear_variables"], [82, 2, 1, "", "find_all_xor_linear_trails_with_fixed_weight"], [82, 2, 1, "", "find_all_xor_linear_trails_with_weight_at_most"], [82, 2, 1, "", "find_lowest_weight_xor_linear_trail"], [82, 2, 1, "", "find_one_xor_linear_trail"], [82, 2, 1, "", "find_one_xor_linear_trail_with_fixed_weight"], [82, 2, 1, "", "fix_variables_value_constraints"], [82, 2, 1, "", "fix_variables_value_xor_linear_constraints"], [82, 2, 1, "", "get_xor_probability_constraints"], [82, 3, 1, "", "model_constraints"], [82, 3, 1, "", "sboxes_ddt_templates"], [82, 3, 1, "", "sboxes_lat_templates"], [82, 2, 1, "", "solve"], [82, 2, 1, "", "update_constraints_for_equal_type"], [82, 2, 1, "", "update_constraints_for_not_equal_type"], [82, 2, 1, "", "weight_constraints"], [82, 2, 1, "", "weight_xor_linear_constraints"]], "cipher_modules.models.smt.utils": [[84, 0, 0, "-", "utils"]], "cipher_modules.models.smt.utils.utils": [[84, 4, 1, "", "get_component_hex_value"], [84, 4, 1, "", "smt_and"], [84, 4, 1, "", "smt_assert"], [84, 4, 1, "", "smt_carry"], [84, 4, 1, "", "smt_distinct"], [84, 4, 1, "", "smt_equivalent"], [84, 4, 1, "", "smt_implies"], [84, 4, 1, "", "smt_ite"], [84, 4, 1, "", "smt_lipmaa"], [84, 4, 1, "", "smt_not"], [84, 4, 1, "", "smt_or"], [84, 4, 1, "", "smt_xor"]], "cipher_modules.models": [[85, 0, 0, "-", "utils"]], "cipher_modules.models.utils": [[85, 4, 1, "", "add_arcs"], [85, 4, 1, "", "convert_solver_solution_to_dictionary"], [85, 4, 1, "", "create_directory"], [85, 4, 1, "", "find_sign_for_one_xor_linear_trail"], [85, 4, 1, "", "find_sign_for_xor_linear_trails"], [85, 4, 1, "", "get_bit_bindings"], [85, 4, 1, "", "get_library_path"], [85, 4, 1, "", "get_previous_output_bit_ids"], [85, 4, 1, "", "get_related_key_scenario_format_for_fixed_values"], [85, 4, 1, "", "get_single_key_scenario_format_for_fixed_values"], [85, 4, 1, "", "integer_to_bit_list"], [85, 4, 1, "", "print_components_values"], [85, 4, 1, "", "set_component_solution"], [85, 4, 1, "", "set_component_value_weight_sign"], [85, 4, 1, "", "set_fixed_variables"], [85, 4, 1, "", "to_bias_for_correlation_measure"], [85, 4, 1, "", "to_bias_for_probability_measure"], [85, 4, 1, "", "to_bias_for_xor_linear_trail"], [85, 4, 1, "", "to_correlation_for_bias_measure"], [85, 4, 1, "", "to_correlation_for_probability_measure"], [85, 4, 1, "", "to_correlation_for_xor_linear_trail"], [85, 4, 1, "", "to_probability_for_bias_measure"], [85, 4, 1, "", "to_probability_for_correlation_measure"], [85, 4, 1, "", "to_probability_for_xor_linear_trail"], [85, 4, 1, "", "write_model_to_file"], [85, 4, 1, "", "write_solution_into_a_file"], [85, 4, 1, "", "write_solution_to_file"]], "cipher_modules.report": [[87, 1, 1, "", "Report"]], "cipher_modules.report.Report": [[87, 2, 1, "", "clean_reports"], [87, 2, 1, "", "save_as_DataFrame"], [87, 2, 1, "", "save_as_image"], [87, 2, 1, "", "save_as_json"], [87, 2, 1, "", "save_as_latex_table"], [87, 2, 1, "", "show"]], "cipher_modules.statistical_tests": [[88, 0, 0, "-", "dataset_generator"], [89, 0, 0, "-", "dieharder_statistical_tests"], [91, 0, 0, "-", "nist_statistical_tests"]], "cipher_modules.statistical_tests.dataset_generator": [[88, 1, 1, "", "DatasetGenerator"], [88, 1, 1, "", "DatasetType"], [88, 4, 1, "", "get_low_density_sequences"], [88, 4, 1, "", "set_testing_data_amount"]], "cipher_modules.statistical_tests.dataset_generator.DatasetGenerator": [[88, 2, 1, "", "generate_avalanche_dataset"], [88, 2, 1, "", "generate_cbc_dataset"], [88, 2, 1, "", "generate_correlation_dataset"], [88, 2, 1, "", "generate_high_density_dataset"], [88, 2, 1, "", "generate_low_density_dataset"], [88, 2, 1, "", "generate_random_dataset"], [88, 2, 1, "", "get_cipher_outputs_for_cbc_dataset"], [88, 2, 1, "", "get_cipher_outputs_for_correlation_dataset"], [88, 2, 1, "", "get_cipher_outputs_for_density_dataset"]], "cipher_modules.statistical_tests.dataset_generator.DatasetType": [[88, 5, 1, "", "avalanche"], [88, 5, 1, "", "cbc"], [88, 5, 1, "", "correlation"], [88, 5, 1, "", "high_density"], [88, 5, 1, "", "low_density"], [88, 5, 1, "", "random"]], "cipher_modules.statistical_tests.dieharder_statistical_tests": [[89, 1, 1, "", "DieharderTests"]], "cipher_modules.statistical_tests.dieharder_statistical_tests.DieharderTests": [[89, 2, 1, "", "dieharder_statistical_tests"]], "cipher_modules.statistical_tests.nist_statistical_tests": [[91, 1, 1, "", "NISTStatisticalTests"]], "cipher_modules.statistical_tests.nist_statistical_tests.NISTStatisticalTests": [[91, 2, 1, "", "nist_statistical_tests"]], "cipher_modules.tester": [[92, 4, 1, "", "test_against_reference_code"], [92, 4, 1, "", "test_vector_check"]], "ciphers.block_ciphers": [[93, 0, 0, "-", "aes_block_cipher"], [94, 0, 0, "-", "bea1_block_cipher"], [95, 0, 0, "-", "constant_block_cipher"], [96, 0, 0, "-", "des_block_cipher"], [97, 0, 0, "-", "des_exact_key_length_block_cipher"], [98, 0, 0, "-", "fancy_block_cipher"], [99, 0, 0, "-", "hight_block_cipher"], [100, 0, 0, "-", "identity_block_cipher"], [101, 0, 0, "-", "kasumi_block_cipher"], [102, 0, 0, "-", "lblock_block_cipher"], [103, 0, 0, "-", "lea_block_cipher"], [104, 0, 0, "-", "lowmc_block_cipher"], [105, 0, 0, "-", "lowmc_generate_matrices"], [106, 0, 0, "-", "midori_block_cipher"], [107, 0, 0, "-", "present_block_cipher"], [108, 0, 0, "-", "qarmav2_block_cipher"], [109, 0, 0, "-", "qarmav2_with_mixcolumn_block_cipher"], [110, 0, 0, "-", "raiden_block_cipher"], [111, 0, 0, "-", "rc5_block_cipher"], [112, 0, 0, "-", "scarf_block_cipher"], [113, 0, 0, "-", "simon_block_cipher"], [114, 0, 0, "-", "skinny_block_cipher"], [115, 0, 0, "-", "sparx_block_cipher"], [116, 0, 0, "-", "speck_block_cipher"], [117, 0, 0, "-", "speedy_block_cipher"], [118, 0, 0, "-", "tea_block_cipher"], [119, 0, 0, "-", "threefish_block_cipher"], [120, 0, 0, "-", "twofish_block_cipher"], [121, 0, 0, "-", "xtea_block_cipher"]], "ciphers.block_ciphers.aes_block_cipher": [[93, 1, 1, "", "AESBlockCipher"]], "ciphers.block_ciphers.aes_block_cipher.AESBlockCipher": [[93, 2, 1, "", "add_AND_component"], [93, 2, 1, "", "add_FSR_component"], [93, 2, 1, "", "add_MODADD_component"], [93, 2, 1, "", "add_MODSUB_component"], [93, 2, 1, "", "add_NOT_component"], [93, 2, 1, "", "add_OR_component"], [93, 2, 1, "", "add_SBOX_component"], [93, 2, 1, "", "add_SHIFT_component"], [93, 2, 1, "", "add_XOR_component"], [93, 2, 1, "", "add_cipher_output_component"], [93, 2, 1, "", "add_concatenate_component"], [93, 2, 1, "", "add_constant_component"], [93, 2, 1, "", "add_intermediate_output_component"], [93, 2, 1, "", "add_linear_layer_component"], [93, 2, 1, "", "add_mix_column_component"], [93, 2, 1, "", "add_permutation_component"], [93, 2, 1, "", "add_reverse_component"], [93, 2, 1, "", "add_rotate_component"], [93, 2, 1, "", "add_round"], [93, 2, 1, "", "add_round_key_output_component"], [93, 2, 1, "", "add_round_output_component"], [93, 2, 1, "", "add_shift_rows_component"], [93, 2, 1, "", "add_sigma_component"], [93, 2, 1, "", "add_suffix_to_components"], [93, 2, 1, "", "add_theta_keccak_component"], [93, 2, 1, "", "add_theta_xoodoo_component"], [93, 2, 1, "", "add_variable_rotate_component"], [93, 2, 1, "", "add_variable_shift_component"], [93, 2, 1, "", "add_word_permutation_component"], [93, 2, 1, "", "as_python_dictionary"], [93, 2, 1, "", "cipher_inverse"], [93, 2, 1, "", "cipher_partial_inverse"], [93, 2, 1, "", "component_from"], [93, 2, 1, "", "convert_to_compound_xor_cipher"], [93, 2, 1, "", "create_constant_component"], [93, 2, 1, "", "create_key_sbox_components"], [93, 2, 1, "", "create_mix_column_components"], [93, 2, 1, "", "create_networx_graph_from_input_ids"], [93, 2, 1, "", "create_rotate_component"], [93, 2, 1, "", "create_round_key"], [93, 2, 1, "", "create_round_output_component"], [93, 2, 1, "", "create_sbox_components"], [93, 2, 1, "", "create_shift_row_components"], [93, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [93, 2, 1, "", "create_xor_components"], [93, 3, 1, "", "current_round"], [93, 3, 1, "", "current_round_number"], [93, 3, 1, "", "current_round_number_of_components"], [93, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [93, 2, 1, "", "evaluate"], [93, 2, 1, "", "evaluate_using_c"], [93, 2, 1, "", "evaluate_vectorized"], [93, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [93, 3, 1, "", "family_name"], [93, 3, 1, "", "file_name"], [93, 2, 1, "", "find_impossible_property"], [93, 2, 1, "", "generate_bit_based_c_code"], [93, 2, 1, "", "generate_evaluate_c_code_shared_library"], [93, 2, 1, "", "generate_word_based_c_code"], [93, 2, 1, "", "get_all_components"], [93, 2, 1, "", "get_all_components_ids"], [93, 2, 1, "", "get_all_inputs_bit_positions"], [93, 2, 1, "", "get_component_from_id"], [93, 2, 1, "", "get_components_in_round"], [93, 2, 1, "", "get_current_component_id"], [93, 2, 1, "", "get_model"], [93, 2, 1, "", "get_number_of_components_in_round"], [93, 2, 1, "", "get_partial_cipher"], [93, 2, 1, "", "get_round_from_component_id"], [93, 2, 1, "", "get_sizes_of_components_by_type"], [93, 3, 1, "", "id"], [93, 2, 1, "", "impossible_differential_search"], [93, 3, 1, "", "inputs"], [93, 3, 1, "", "inputs_bit_size"], [93, 2, 1, "", "inputs_size_to_dict"], [93, 2, 1, "", "is_algebraically_secure"], [93, 2, 1, "", "is_andrx"], [93, 2, 1, "", "is_arx"], [93, 2, 1, "", "is_power_of_2_word_based"], [93, 2, 1, "", "is_shift_arx"], [93, 2, 1, "", "is_spn"], [93, 2, 1, "", "make_cipher_id"], [93, 2, 1, "", "make_file_name"], [93, 3, 1, "", "number_of_rounds"], [93, 3, 1, "", "output_bit_size"], [93, 2, 1, "", "polynomial_system"], [93, 2, 1, "", "polynomial_system_at_round"], [93, 2, 1, "", "print"], [93, 2, 1, "", "print_as_python_dictionary"], [93, 2, 1, "", "print_as_python_dictionary_to_file"], [93, 2, 1, "", "print_evaluation_python_code"], [93, 2, 1, "", "print_evaluation_python_code_to_file"], [93, 2, 1, "", "print_input_information"], [93, 3, 1, "", "reference_code"], [93, 2, 1, "", "remove_key_schedule"], [93, 2, 1, "", "remove_round_component"], [93, 2, 1, "", "remove_round_component_from_id"], [93, 3, 1, "", "rounds"], [93, 3, 1, "", "rounds_as_list"], [93, 2, 1, "", "set_file_name"], [93, 2, 1, "", "set_id"], [93, 2, 1, "", "set_inputs"], [93, 2, 1, "", "sort_cipher"], [93, 2, 1, "", "test_against_reference_code"], [93, 2, 1, "", "test_vector_check"], [93, 3, 1, "", "type"], [93, 2, 1, "", "update_input_id_links_from_component_id"], [93, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.bea1_block_cipher": [[94, 1, 1, "", "BEA1BlockCipher"]], "ciphers.block_ciphers.bea1_block_cipher.BEA1BlockCipher": [[94, 2, 1, "", "add_AND_component"], [94, 2, 1, "", "add_FSR_component"], [94, 2, 1, "", "add_MODADD_component"], [94, 2, 1, "", "add_MODSUB_component"], [94, 2, 1, "", "add_NOT_component"], [94, 2, 1, "", "add_OR_component"], [94, 2, 1, "", "add_SBOX_component"], [94, 2, 1, "", "add_SHIFT_component"], [94, 2, 1, "", "add_XOR_component"], [94, 2, 1, "", "add_cipher_output_component"], [94, 2, 1, "", "add_concatenate_component"], [94, 2, 1, "", "add_constant_component"], [94, 2, 1, "", "add_intermediate_output_component"], [94, 2, 1, "", "add_linear_layer_component"], [94, 2, 1, "", "add_mix_column_component"], [94, 2, 1, "", "add_permutation_component"], [94, 2, 1, "", "add_reverse_component"], [94, 2, 1, "", "add_rotate_component"], [94, 2, 1, "", "add_round"], [94, 2, 1, "", "add_round_key_output_component"], [94, 2, 1, "", "add_round_output_component"], [94, 2, 1, "", "add_shift_rows_component"], [94, 2, 1, "", "add_sigma_component"], [94, 2, 1, "", "add_suffix_to_components"], [94, 2, 1, "", "add_theta_keccak_component"], [94, 2, 1, "", "add_theta_xoodoo_component"], [94, 2, 1, "", "add_variable_rotate_component"], [94, 2, 1, "", "add_variable_shift_component"], [94, 2, 1, "", "add_word_permutation_component"], [94, 2, 1, "", "as_python_dictionary"], [94, 2, 1, "", "cipher_inverse"], [94, 2, 1, "", "cipher_partial_inverse"], [94, 2, 1, "", "component_from"], [94, 2, 1, "", "convert_to_compound_xor_cipher"], [94, 2, 1, "", "create_networx_graph_from_input_ids"], [94, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [94, 3, 1, "", "current_round"], [94, 3, 1, "", "current_round_number"], [94, 3, 1, "", "current_round_number_of_components"], [94, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [94, 2, 1, "", "evaluate"], [94, 2, 1, "", "evaluate_using_c"], [94, 2, 1, "", "evaluate_vectorized"], [94, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [94, 3, 1, "", "family_name"], [94, 3, 1, "", "file_name"], [94, 2, 1, "", "find_impossible_property"], [94, 2, 1, "", "generate_bit_based_c_code"], [94, 2, 1, "", "generate_evaluate_c_code_shared_library"], [94, 2, 1, "", "generate_word_based_c_code"], [94, 2, 1, "", "get_all_components"], [94, 2, 1, "", "get_all_components_ids"], [94, 2, 1, "", "get_all_inputs_bit_positions"], [94, 2, 1, "", "get_component_from_id"], [94, 2, 1, "", "get_components_in_round"], [94, 2, 1, "", "get_current_component_id"], [94, 2, 1, "", "get_model"], [94, 2, 1, "", "get_number_of_components_in_round"], [94, 2, 1, "", "get_partial_cipher"], [94, 2, 1, "", "get_round_from_component_id"], [94, 2, 1, "", "get_sizes_of_components_by_type"], [94, 3, 1, "", "id"], [94, 2, 1, "", "impossible_differential_search"], [94, 3, 1, "", "inputs"], [94, 3, 1, "", "inputs_bit_size"], [94, 2, 1, "", "inputs_size_to_dict"], [94, 2, 1, "", "is_algebraically_secure"], [94, 2, 1, "", "is_andrx"], [94, 2, 1, "", "is_arx"], [94, 2, 1, "", "is_power_of_2_word_based"], [94, 2, 1, "", "is_shift_arx"], [94, 2, 1, "", "is_spn"], [94, 2, 1, "", "make_cipher_id"], [94, 2, 1, "", "make_file_name"], [94, 3, 1, "", "number_of_rounds"], [94, 3, 1, "", "output_bit_size"], [94, 2, 1, "", "polynomial_system"], [94, 2, 1, "", "polynomial_system_at_round"], [94, 2, 1, "", "print"], [94, 2, 1, "", "print_as_python_dictionary"], [94, 2, 1, "", "print_as_python_dictionary_to_file"], [94, 2, 1, "", "print_evaluation_python_code"], [94, 2, 1, "", "print_evaluation_python_code_to_file"], [94, 2, 1, "", "print_input_information"], [94, 3, 1, "", "reference_code"], [94, 2, 1, "", "remove_key_schedule"], [94, 2, 1, "", "remove_round_component"], [94, 2, 1, "", "remove_round_component_from_id"], [94, 3, 1, "", "rounds"], [94, 3, 1, "", "rounds_as_list"], [94, 2, 1, "", "set_file_name"], [94, 2, 1, "", "set_id"], [94, 2, 1, "", "set_inputs"], [94, 2, 1, "", "sort_cipher"], [94, 2, 1, "", "test_against_reference_code"], [94, 2, 1, "", "test_vector_check"], [94, 3, 1, "", "type"], [94, 2, 1, "", "update_input_id_links_from_component_id"], [94, 2, 1, "", "xor_round_key"], [94, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.constant_block_cipher": [[95, 1, 1, "", "ConstantBlockCipher"]], "ciphers.block_ciphers.constant_block_cipher.ConstantBlockCipher": [[95, 2, 1, "", "add_AND_component"], [95, 2, 1, "", "add_FSR_component"], [95, 2, 1, "", "add_MODADD_component"], [95, 2, 1, "", "add_MODSUB_component"], [95, 2, 1, "", "add_NOT_component"], [95, 2, 1, "", "add_OR_component"], [95, 2, 1, "", "add_SBOX_component"], [95, 2, 1, "", "add_SHIFT_component"], [95, 2, 1, "", "add_XOR_component"], [95, 2, 1, "", "add_cipher_output_component"], [95, 2, 1, "", "add_concatenate_component"], [95, 2, 1, "", "add_constant_component"], [95, 2, 1, "", "add_intermediate_output_component"], [95, 2, 1, "", "add_linear_layer_component"], [95, 2, 1, "", "add_mix_column_component"], [95, 2, 1, "", "add_permutation_component"], [95, 2, 1, "", "add_reverse_component"], [95, 2, 1, "", "add_rotate_component"], [95, 2, 1, "", "add_round"], [95, 2, 1, "", "add_round_key_output_component"], [95, 2, 1, "", "add_round_output_component"], [95, 2, 1, "", "add_shift_rows_component"], [95, 2, 1, "", "add_sigma_component"], [95, 2, 1, "", "add_suffix_to_components"], [95, 2, 1, "", "add_theta_keccak_component"], [95, 2, 1, "", "add_theta_xoodoo_component"], [95, 2, 1, "", "add_variable_rotate_component"], [95, 2, 1, "", "add_variable_shift_component"], [95, 2, 1, "", "add_word_permutation_component"], [95, 2, 1, "", "as_python_dictionary"], [95, 2, 1, "", "cipher_inverse"], [95, 2, 1, "", "cipher_partial_inverse"], [95, 2, 1, "", "component_from"], [95, 2, 1, "", "convert_to_compound_xor_cipher"], [95, 2, 1, "", "create_networx_graph_from_input_ids"], [95, 2, 1, "", "create_rounds"], [95, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [95, 3, 1, "", "current_round"], [95, 3, 1, "", "current_round_number"], [95, 3, 1, "", "current_round_number_of_components"], [95, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [95, 2, 1, "", "evaluate"], [95, 2, 1, "", "evaluate_using_c"], [95, 2, 1, "", "evaluate_vectorized"], [95, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [95, 3, 1, "", "family_name"], [95, 3, 1, "", "file_name"], [95, 2, 1, "", "find_impossible_property"], [95, 2, 1, "", "generate_bit_based_c_code"], [95, 2, 1, "", "generate_evaluate_c_code_shared_library"], [95, 2, 1, "", "generate_word_based_c_code"], [95, 2, 1, "", "get_all_components"], [95, 2, 1, "", "get_all_components_ids"], [95, 2, 1, "", "get_all_inputs_bit_positions"], [95, 2, 1, "", "get_component_from_id"], [95, 2, 1, "", "get_components_in_round"], [95, 2, 1, "", "get_current_component_id"], [95, 2, 1, "", "get_model"], [95, 2, 1, "", "get_number_of_components_in_round"], [95, 2, 1, "", "get_partial_cipher"], [95, 2, 1, "", "get_round_from_component_id"], [95, 2, 1, "", "get_sizes_of_components_by_type"], [95, 3, 1, "", "id"], [95, 2, 1, "", "impossible_differential_search"], [95, 3, 1, "", "inputs"], [95, 3, 1, "", "inputs_bit_size"], [95, 2, 1, "", "inputs_size_to_dict"], [95, 2, 1, "", "is_algebraically_secure"], [95, 2, 1, "", "is_andrx"], [95, 2, 1, "", "is_arx"], [95, 2, 1, "", "is_power_of_2_word_based"], [95, 2, 1, "", "is_shift_arx"], [95, 2, 1, "", "is_spn"], [95, 2, 1, "", "make_cipher_id"], [95, 2, 1, "", "make_file_name"], [95, 3, 1, "", "number_of_rounds"], [95, 3, 1, "", "output_bit_size"], [95, 2, 1, "", "polynomial_system"], [95, 2, 1, "", "polynomial_system_at_round"], [95, 2, 1, "", "print"], [95, 2, 1, "", "print_as_python_dictionary"], [95, 2, 1, "", "print_as_python_dictionary_to_file"], [95, 2, 1, "", "print_evaluation_python_code"], [95, 2, 1, "", "print_evaluation_python_code_to_file"], [95, 2, 1, "", "print_input_information"], [95, 3, 1, "", "reference_code"], [95, 2, 1, "", "remove_key_schedule"], [95, 2, 1, "", "remove_round_component"], [95, 2, 1, "", "remove_round_component_from_id"], [95, 3, 1, "", "rounds"], [95, 3, 1, "", "rounds_as_list"], [95, 2, 1, "", "set_file_name"], [95, 2, 1, "", "set_id"], [95, 2, 1, "", "set_inputs"], [95, 2, 1, "", "sort_cipher"], [95, 2, 1, "", "test_against_reference_code"], [95, 2, 1, "", "test_vector_check"], [95, 3, 1, "", "type"], [95, 2, 1, "", "update_input_id_links_from_component_id"], [95, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.des_block_cipher": [[96, 1, 1, "", "DESBlockCipher"]], "ciphers.block_ciphers.des_block_cipher.DESBlockCipher": [[96, 2, 1, "", "add_AND_component"], [96, 2, 1, "", "add_FSR_component"], [96, 2, 1, "", "add_MODADD_component"], [96, 2, 1, "", "add_MODSUB_component"], [96, 2, 1, "", "add_NOT_component"], [96, 2, 1, "", "add_OR_component"], [96, 2, 1, "", "add_SBOX_component"], [96, 2, 1, "", "add_SHIFT_component"], [96, 2, 1, "", "add_XOR_component"], [96, 2, 1, "", "add_cipher_output_component"], [96, 2, 1, "", "add_concatenate_component"], [96, 2, 1, "", "add_constant_component"], [96, 2, 1, "", "add_intermediate_output_component"], [96, 2, 1, "", "add_linear_layer_component"], [96, 2, 1, "", "add_mix_column_component"], [96, 2, 1, "", "add_permutation_component"], [96, 2, 1, "", "add_reverse_component"], [96, 2, 1, "", "add_rotate_component"], [96, 2, 1, "", "add_round"], [96, 2, 1, "", "add_round_key_output_component"], [96, 2, 1, "", "add_round_output_component"], [96, 2, 1, "", "add_shift_rows_component"], [96, 2, 1, "", "add_sigma_component"], [96, 2, 1, "", "add_suffix_to_components"], [96, 2, 1, "", "add_theta_keccak_component"], [96, 2, 1, "", "add_theta_xoodoo_component"], [96, 2, 1, "", "add_variable_rotate_component"], [96, 2, 1, "", "add_variable_shift_component"], [96, 2, 1, "", "add_word_permutation_component"], [96, 2, 1, "", "as_python_dictionary"], [96, 2, 1, "", "cipher_inverse"], [96, 2, 1, "", "cipher_partial_inverse"], [96, 2, 1, "", "component_from"], [96, 2, 1, "", "convert_to_compound_xor_cipher"], [96, 2, 1, "", "create_networx_graph_from_input_ids"], [96, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [96, 3, 1, "", "current_round"], [96, 3, 1, "", "current_round_number"], [96, 3, 1, "", "current_round_number_of_components"], [96, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [96, 2, 1, "", "evaluate"], [96, 2, 1, "", "evaluate_using_c"], [96, 2, 1, "", "evaluate_vectorized"], [96, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [96, 3, 1, "", "family_name"], [96, 3, 1, "", "file_name"], [96, 2, 1, "", "find_impossible_property"], [96, 2, 1, "", "generate_bit_based_c_code"], [96, 2, 1, "", "generate_evaluate_c_code_shared_library"], [96, 2, 1, "", "generate_word_based_c_code"], [96, 2, 1, "", "get_all_components"], [96, 2, 1, "", "get_all_components_ids"], [96, 2, 1, "", "get_all_inputs_bit_positions"], [96, 2, 1, "", "get_component_from_id"], [96, 2, 1, "", "get_components_in_round"], [96, 2, 1, "", "get_current_component_id"], [96, 2, 1, "", "get_model"], [96, 2, 1, "", "get_number_of_components_in_round"], [96, 2, 1, "", "get_partial_cipher"], [96, 2, 1, "", "get_round_from_component_id"], [96, 2, 1, "", "get_sizes_of_components_by_type"], [96, 3, 1, "", "id"], [96, 2, 1, "", "impossible_differential_search"], [96, 3, 1, "", "inputs"], [96, 3, 1, "", "inputs_bit_size"], [96, 2, 1, "", "inputs_size_to_dict"], [96, 2, 1, "", "is_algebraically_secure"], [96, 2, 1, "", "is_andrx"], [96, 2, 1, "", "is_arx"], [96, 2, 1, "", "is_power_of_2_word_based"], [96, 2, 1, "", "is_shift_arx"], [96, 2, 1, "", "is_spn"], [96, 2, 1, "", "make_cipher_id"], [96, 2, 1, "", "make_file_name"], [96, 3, 1, "", "number_of_rounds"], [96, 3, 1, "", "output_bit_size"], [96, 2, 1, "", "polynomial_system"], [96, 2, 1, "", "polynomial_system_at_round"], [96, 2, 1, "", "print"], [96, 2, 1, "", "print_as_python_dictionary"], [96, 2, 1, "", "print_as_python_dictionary_to_file"], [96, 2, 1, "", "print_evaluation_python_code"], [96, 2, 1, "", "print_evaluation_python_code_to_file"], [96, 2, 1, "", "print_input_information"], [96, 3, 1, "", "reference_code"], [96, 2, 1, "", "remove_key_schedule"], [96, 2, 1, "", "remove_round_component"], [96, 2, 1, "", "remove_round_component_from_id"], [96, 3, 1, "", "rounds"], [96, 3, 1, "", "rounds_as_list"], [96, 2, 1, "", "set_file_name"], [96, 2, 1, "", "set_id"], [96, 2, 1, "", "set_inputs"], [96, 2, 1, "", "sort_cipher"], [96, 2, 1, "", "test_against_reference_code"], [96, 2, 1, "", "test_vector_check"], [96, 3, 1, "", "type"], [96, 2, 1, "", "update_input_id_links_from_component_id"], [96, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.des_exact_key_length_block_cipher": [[97, 1, 1, "", "DESExactKeyLengthBlockCipher"]], "ciphers.block_ciphers.des_exact_key_length_block_cipher.DESExactKeyLengthBlockCipher": [[97, 2, 1, "", "add_AND_component"], [97, 2, 1, "", "add_FSR_component"], [97, 2, 1, "", "add_MODADD_component"], [97, 2, 1, "", "add_MODSUB_component"], [97, 2, 1, "", "add_NOT_component"], [97, 2, 1, "", "add_OR_component"], [97, 2, 1, "", "add_SBOX_component"], [97, 2, 1, "", "add_SHIFT_component"], [97, 2, 1, "", "add_XOR_component"], [97, 2, 1, "", "add_cipher_output_component"], [97, 2, 1, "", "add_concatenate_component"], [97, 2, 1, "", "add_constant_component"], [97, 2, 1, "", "add_intermediate_output_component"], [97, 2, 1, "", "add_linear_layer_component"], [97, 2, 1, "", "add_mix_column_component"], [97, 2, 1, "", "add_permutation_component"], [97, 2, 1, "", "add_reverse_component"], [97, 2, 1, "", "add_rotate_component"], [97, 2, 1, "", "add_round"], [97, 2, 1, "", "add_round_key_output_component"], [97, 2, 1, "", "add_round_output_component"], [97, 2, 1, "", "add_shift_rows_component"], [97, 2, 1, "", "add_sigma_component"], [97, 2, 1, "", "add_suffix_to_components"], [97, 2, 1, "", "add_theta_keccak_component"], [97, 2, 1, "", "add_theta_xoodoo_component"], [97, 2, 1, "", "add_variable_rotate_component"], [97, 2, 1, "", "add_variable_shift_component"], [97, 2, 1, "", "add_word_permutation_component"], [97, 2, 1, "", "as_python_dictionary"], [97, 2, 1, "", "cipher_inverse"], [97, 2, 1, "", "cipher_partial_inverse"], [97, 2, 1, "", "component_from"], [97, 2, 1, "", "convert_to_compound_xor_cipher"], [97, 2, 1, "", "create_networx_graph_from_input_ids"], [97, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [97, 3, 1, "", "current_round"], [97, 3, 1, "", "current_round_number"], [97, 3, 1, "", "current_round_number_of_components"], [97, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [97, 2, 1, "", "evaluate"], [97, 2, 1, "", "evaluate_using_c"], [97, 2, 1, "", "evaluate_vectorized"], [97, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [97, 3, 1, "", "family_name"], [97, 3, 1, "", "file_name"], [97, 2, 1, "", "find_impossible_property"], [97, 2, 1, "", "generate_bit_based_c_code"], [97, 2, 1, "", "generate_evaluate_c_code_shared_library"], [97, 2, 1, "", "generate_word_based_c_code"], [97, 2, 1, "", "get_all_components"], [97, 2, 1, "", "get_all_components_ids"], [97, 2, 1, "", "get_all_inputs_bit_positions"], [97, 2, 1, "", "get_component_from_id"], [97, 2, 1, "", "get_components_in_round"], [97, 2, 1, "", "get_current_component_id"], [97, 2, 1, "", "get_model"], [97, 2, 1, "", "get_number_of_components_in_round"], [97, 2, 1, "", "get_partial_cipher"], [97, 2, 1, "", "get_round_from_component_id"], [97, 2, 1, "", "get_sizes_of_components_by_type"], [97, 3, 1, "", "id"], [97, 2, 1, "", "impossible_differential_search"], [97, 3, 1, "", "inputs"], [97, 3, 1, "", "inputs_bit_size"], [97, 2, 1, "", "inputs_size_to_dict"], [97, 2, 1, "", "is_algebraically_secure"], [97, 2, 1, "", "is_andrx"], [97, 2, 1, "", "is_arx"], [97, 2, 1, "", "is_power_of_2_word_based"], [97, 2, 1, "", "is_shift_arx"], [97, 2, 1, "", "is_spn"], [97, 2, 1, "", "make_cipher_id"], [97, 2, 1, "", "make_file_name"], [97, 3, 1, "", "number_of_rounds"], [97, 3, 1, "", "output_bit_size"], [97, 2, 1, "", "polynomial_system"], [97, 2, 1, "", "polynomial_system_at_round"], [97, 2, 1, "", "print"], [97, 2, 1, "", "print_as_python_dictionary"], [97, 2, 1, "", "print_as_python_dictionary_to_file"], [97, 2, 1, "", "print_evaluation_python_code"], [97, 2, 1, "", "print_evaluation_python_code_to_file"], [97, 2, 1, "", "print_input_information"], [97, 3, 1, "", "reference_code"], [97, 2, 1, "", "remove_key_schedule"], [97, 2, 1, "", "remove_round_component"], [97, 2, 1, "", "remove_round_component_from_id"], [97, 3, 1, "", "rounds"], [97, 3, 1, "", "rounds_as_list"], [97, 2, 1, "", "set_file_name"], [97, 2, 1, "", "set_id"], [97, 2, 1, "", "set_inputs"], [97, 2, 1, "", "sort_cipher"], [97, 2, 1, "", "test_against_reference_code"], [97, 2, 1, "", "test_vector_check"], [97, 3, 1, "", "type"], [97, 2, 1, "", "update_input_id_links_from_component_id"], [97, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.fancy_block_cipher": [[98, 1, 1, "", "FancyBlockCipher"]], "ciphers.block_ciphers.fancy_block_cipher.FancyBlockCipher": [[98, 2, 1, "", "add_AND_component"], [98, 2, 1, "", "add_FSR_component"], [98, 2, 1, "", "add_MODADD_component"], [98, 2, 1, "", "add_MODSUB_component"], [98, 2, 1, "", "add_NOT_component"], [98, 2, 1, "", "add_OR_component"], [98, 2, 1, "", "add_SBOX_component"], [98, 2, 1, "", "add_SHIFT_component"], [98, 2, 1, "", "add_XOR_component"], [98, 2, 1, "", "add_and_component_to_even_round"], [98, 2, 1, "", "add_cipher_output_component"], [98, 2, 1, "", "add_concatenate_component"], [98, 2, 1, "", "add_constant_component"], [98, 2, 1, "", "add_intermediate_output_component"], [98, 2, 1, "", "add_linear_layer_component"], [98, 2, 1, "", "add_mix_column_component"], [98, 2, 1, "", "add_permutation_component"], [98, 2, 1, "", "add_reverse_component"], [98, 2, 1, "", "add_rotate_component"], [98, 2, 1, "", "add_round"], [98, 2, 1, "", "add_round_key_output_component"], [98, 2, 1, "", "add_round_output_component"], [98, 2, 1, "", "add_sbox_components_layer_in_even_rounds"], [98, 2, 1, "", "add_shift_rows_component"], [98, 2, 1, "", "add_sigma_component"], [98, 2, 1, "", "add_suffix_to_components"], [98, 2, 1, "", "add_theta_keccak_component"], [98, 2, 1, "", "add_theta_xoodoo_component"], [98, 2, 1, "", "add_variable_rotate_component"], [98, 2, 1, "", "add_variable_shift_component"], [98, 2, 1, "", "add_word_permutation_component"], [98, 2, 1, "", "add_xor_component_to_even_round"], [98, 2, 1, "", "as_python_dictionary"], [98, 2, 1, "", "cipher_inverse"], [98, 2, 1, "", "cipher_partial_inverse"], [98, 2, 1, "", "collect_input_id_links"], [98, 2, 1, "", "component_from"], [98, 2, 1, "", "convert_to_compound_xor_cipher"], [98, 2, 1, "", "create_networx_graph_from_input_ids"], [98, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [98, 3, 1, "", "current_round"], [98, 3, 1, "", "current_round_number"], [98, 3, 1, "", "current_round_number_of_components"], [98, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [98, 2, 1, "", "evaluate"], [98, 2, 1, "", "evaluate_using_c"], [98, 2, 1, "", "evaluate_vectorized"], [98, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [98, 3, 1, "", "family_name"], [98, 3, 1, "", "file_name"], [98, 2, 1, "", "find_impossible_property"], [98, 2, 1, "", "generate_bit_based_c_code"], [98, 2, 1, "", "generate_evaluate_c_code_shared_library"], [98, 2, 1, "", "generate_word_based_c_code"], [98, 2, 1, "", "get_all_components"], [98, 2, 1, "", "get_all_components_ids"], [98, 2, 1, "", "get_all_inputs_bit_positions"], [98, 2, 1, "", "get_component_from_id"], [98, 2, 1, "", "get_components_in_round"], [98, 2, 1, "", "get_current_component_id"], [98, 2, 1, "", "get_model"], [98, 2, 1, "", "get_number_of_components_in_round"], [98, 2, 1, "", "get_partial_cipher"], [98, 2, 1, "", "get_round_from_component_id"], [98, 2, 1, "", "get_sizes_of_components_by_type"], [98, 3, 1, "", "id"], [98, 2, 1, "", "impossible_differential_search"], [98, 3, 1, "", "inputs"], [98, 3, 1, "", "inputs_bit_size"], [98, 2, 1, "", "inputs_size_to_dict"], [98, 2, 1, "", "is_algebraically_secure"], [98, 2, 1, "", "is_andrx"], [98, 2, 1, "", "is_arx"], [98, 2, 1, "", "is_power_of_2_word_based"], [98, 2, 1, "", "is_shift_arx"], [98, 2, 1, "", "is_spn"], [98, 2, 1, "", "make_cipher_id"], [98, 2, 1, "", "make_file_name"], [98, 3, 1, "", "number_of_rounds"], [98, 3, 1, "", "output_bit_size"], [98, 2, 1, "", "polynomial_system"], [98, 2, 1, "", "polynomial_system_at_round"], [98, 2, 1, "", "print"], [98, 2, 1, "", "print_as_python_dictionary"], [98, 2, 1, "", "print_as_python_dictionary_to_file"], [98, 2, 1, "", "print_evaluation_python_code"], [98, 2, 1, "", "print_evaluation_python_code_to_file"], [98, 2, 1, "", "print_input_information"], [98, 3, 1, "", "reference_code"], [98, 2, 1, "", "remove_key_schedule"], [98, 2, 1, "", "remove_round_component"], [98, 2, 1, "", "remove_round_component_from_id"], [98, 3, 1, "", "rounds"], [98, 3, 1, "", "rounds_as_list"], [98, 2, 1, "", "set_file_name"], [98, 2, 1, "", "set_id"], [98, 2, 1, "", "set_inputs"], [98, 2, 1, "", "sort_cipher"], [98, 2, 1, "", "test_against_reference_code"], [98, 2, 1, "", "test_vector_check"], [98, 3, 1, "", "type"], [98, 2, 1, "", "update_input_id_links_from_component_id"], [98, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.hight_block_cipher": [[99, 1, 1, "", "HightBlockCipher"], [99, 4, 1, "", "init_input"], [99, 4, 1, "", "temp_subkey_generation"], [99, 4, 1, "", "whitening_key_generation"]], "ciphers.block_ciphers.hight_block_cipher.HightBlockCipher": [[99, 2, 1, "", "add_AND_component"], [99, 2, 1, "", "add_FSR_component"], [99, 2, 1, "", "add_MODADD_component"], [99, 2, 1, "", "add_MODSUB_component"], [99, 2, 1, "", "add_NOT_component"], [99, 2, 1, "", "add_OR_component"], [99, 2, 1, "", "add_SBOX_component"], [99, 2, 1, "", "add_SHIFT_component"], [99, 2, 1, "", "add_XOR_component"], [99, 2, 1, "", "add_cipher_output_component"], [99, 2, 1, "", "add_concatenate_component"], [99, 2, 1, "", "add_constant_component"], [99, 2, 1, "", "add_intermediate_output_component"], [99, 2, 1, "", "add_intermediate_output_components"], [99, 2, 1, "", "add_linear_layer_component"], [99, 2, 1, "", "add_mix_column_component"], [99, 2, 1, "", "add_permutation_component"], [99, 2, 1, "", "add_reverse_component"], [99, 2, 1, "", "add_rotate_component"], [99, 2, 1, "", "add_round"], [99, 2, 1, "", "add_round_key_output_component"], [99, 2, 1, "", "add_round_output_component"], [99, 2, 1, "", "add_shift_rows_component"], [99, 2, 1, "", "add_sigma_component"], [99, 2, 1, "", "add_suffix_to_components"], [99, 2, 1, "", "add_theta_keccak_component"], [99, 2, 1, "", "add_theta_xoodoo_component"], [99, 2, 1, "", "add_variable_rotate_component"], [99, 2, 1, "", "add_variable_shift_component"], [99, 2, 1, "", "add_word_permutation_component"], [99, 2, 1, "", "as_python_dictionary"], [99, 2, 1, "", "cipher_inverse"], [99, 2, 1, "", "cipher_partial_inverse"], [99, 2, 1, "", "component_from"], [99, 2, 1, "", "convert_to_compound_xor_cipher"], [99, 2, 1, "", "create_networx_graph_from_input_ids"], [99, 2, 1, "", "create_sub_key"], [99, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [99, 3, 1, "", "current_round"], [99, 3, 1, "", "current_round_number"], [99, 3, 1, "", "current_round_number_of_components"], [99, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [99, 2, 1, "", "evaluate"], [99, 2, 1, "", "evaluate_using_c"], [99, 2, 1, "", "evaluate_vectorized"], [99, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [99, 3, 1, "", "family_name"], [99, 3, 1, "", "file_name"], [99, 2, 1, "", "final_transformation"], [99, 2, 1, "", "find_impossible_property"], [99, 2, 1, "", "generate_bit_based_c_code"], [99, 2, 1, "", "generate_evaluate_c_code_shared_library"], [99, 2, 1, "", "generate_word_based_c_code"], [99, 2, 1, "", "get_all_components"], [99, 2, 1, "", "get_all_components_ids"], [99, 2, 1, "", "get_all_inputs_bit_positions"], [99, 2, 1, "", "get_component_from_id"], [99, 2, 1, "", "get_components_in_round"], [99, 2, 1, "", "get_current_component_id"], [99, 2, 1, "", "get_model"], [99, 2, 1, "", "get_number_of_components_in_round"], [99, 2, 1, "", "get_numbers_of_rounds"], [99, 2, 1, "", "get_partial_cipher"], [99, 2, 1, "", "get_round_from_component_id"], [99, 2, 1, "", "get_sizes_of_components_by_type"], [99, 3, 1, "", "id"], [99, 2, 1, "", "impossible_differential_search"], [99, 2, 1, "", "initial_transformation"], [99, 3, 1, "", "inputs"], [99, 3, 1, "", "inputs_bit_size"], [99, 2, 1, "", "inputs_size_to_dict"], [99, 2, 1, "", "is_algebraically_secure"], [99, 2, 1, "", "is_andrx"], [99, 2, 1, "", "is_arx"], [99, 2, 1, "", "is_power_of_2_word_based"], [99, 2, 1, "", "is_shift_arx"], [99, 2, 1, "", "is_spn"], [99, 2, 1, "", "make_cipher_id"], [99, 2, 1, "", "make_file_name"], [99, 3, 1, "", "number_of_rounds"], [99, 3, 1, "", "output_bit_size"], [99, 2, 1, "", "polynomial_system"], [99, 2, 1, "", "polynomial_system_at_round"], [99, 2, 1, "", "print"], [99, 2, 1, "", "print_as_python_dictionary"], [99, 2, 1, "", "print_as_python_dictionary_to_file"], [99, 2, 1, "", "print_evaluation_python_code"], [99, 2, 1, "", "print_evaluation_python_code_to_file"], [99, 2, 1, "", "print_input_information"], [99, 3, 1, "", "reference_code"], [99, 2, 1, "", "remove_key_schedule"], [99, 2, 1, "", "remove_round_component"], [99, 2, 1, "", "remove_round_component_from_id"], [99, 2, 1, "", "round_function"], [99, 3, 1, "", "rounds"], [99, 3, 1, "", "rounds_as_list"], [99, 2, 1, "", "set_file_name"], [99, 2, 1, "", "set_id"], [99, 2, 1, "", "set_inputs"], [99, 2, 1, "", "sort_cipher"], [99, 2, 1, "", "test_against_reference_code"], [99, 2, 1, "", "test_vector_check"], [99, 3, 1, "", "type"], [99, 2, 1, "", "update_input_id_links_from_component_id"], [99, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.identity_block_cipher": [[100, 1, 1, "", "IdentityBlockCipher"]], "ciphers.block_ciphers.identity_block_cipher.IdentityBlockCipher": [[100, 2, 1, "", "add_AND_component"], [100, 2, 1, "", "add_FSR_component"], [100, 2, 1, "", "add_MODADD_component"], [100, 2, 1, "", "add_MODSUB_component"], [100, 2, 1, "", "add_NOT_component"], [100, 2, 1, "", "add_OR_component"], [100, 2, 1, "", "add_SBOX_component"], [100, 2, 1, "", "add_SHIFT_component"], [100, 2, 1, "", "add_XOR_component"], [100, 2, 1, "", "add_cipher_output_component"], [100, 2, 1, "", "add_concatenate_component"], [100, 2, 1, "", "add_constant_component"], [100, 2, 1, "", "add_intermediate_output_component"], [100, 2, 1, "", "add_linear_layer_component"], [100, 2, 1, "", "add_mix_column_component"], [100, 2, 1, "", "add_permutation_component"], [100, 2, 1, "", "add_reverse_component"], [100, 2, 1, "", "add_rotate_component"], [100, 2, 1, "", "add_round"], [100, 2, 1, "", "add_round_key_output_component"], [100, 2, 1, "", "add_round_output_component"], [100, 2, 1, "", "add_shift_rows_component"], [100, 2, 1, "", "add_sigma_component"], [100, 2, 1, "", "add_suffix_to_components"], [100, 2, 1, "", "add_theta_keccak_component"], [100, 2, 1, "", "add_theta_xoodoo_component"], [100, 2, 1, "", "add_variable_rotate_component"], [100, 2, 1, "", "add_variable_shift_component"], [100, 2, 1, "", "add_word_permutation_component"], [100, 2, 1, "", "as_python_dictionary"], [100, 2, 1, "", "cipher_inverse"], [100, 2, 1, "", "cipher_partial_inverse"], [100, 2, 1, "", "component_from"], [100, 2, 1, "", "convert_to_compound_xor_cipher"], [100, 2, 1, "", "create_networx_graph_from_input_ids"], [100, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [100, 3, 1, "", "current_round"], [100, 3, 1, "", "current_round_number"], [100, 3, 1, "", "current_round_number_of_components"], [100, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [100, 2, 1, "", "evaluate"], [100, 2, 1, "", "evaluate_using_c"], [100, 2, 1, "", "evaluate_vectorized"], [100, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [100, 3, 1, "", "family_name"], [100, 3, 1, "", "file_name"], [100, 2, 1, "", "find_impossible_property"], [100, 2, 1, "", "generate_bit_based_c_code"], [100, 2, 1, "", "generate_evaluate_c_code_shared_library"], [100, 2, 1, "", "generate_word_based_c_code"], [100, 2, 1, "", "get_all_components"], [100, 2, 1, "", "get_all_components_ids"], [100, 2, 1, "", "get_all_inputs_bit_positions"], [100, 2, 1, "", "get_component_from_id"], [100, 2, 1, "", "get_components_in_round"], [100, 2, 1, "", "get_current_component_id"], [100, 2, 1, "", "get_model"], [100, 2, 1, "", "get_number_of_components_in_round"], [100, 2, 1, "", "get_partial_cipher"], [100, 2, 1, "", "get_round_from_component_id"], [100, 2, 1, "", "get_sizes_of_components_by_type"], [100, 3, 1, "", "id"], [100, 2, 1, "", "impossible_differential_search"], [100, 3, 1, "", "inputs"], [100, 3, 1, "", "inputs_bit_size"], [100, 2, 1, "", "inputs_size_to_dict"], [100, 2, 1, "", "is_algebraically_secure"], [100, 2, 1, "", "is_andrx"], [100, 2, 1, "", "is_arx"], [100, 2, 1, "", "is_power_of_2_word_based"], [100, 2, 1, "", "is_shift_arx"], [100, 2, 1, "", "is_spn"], [100, 2, 1, "", "make_cipher_id"], [100, 2, 1, "", "make_file_name"], [100, 3, 1, "", "number_of_rounds"], [100, 3, 1, "", "output_bit_size"], [100, 2, 1, "", "polynomial_system"], [100, 2, 1, "", "polynomial_system_at_round"], [100, 2, 1, "", "print"], [100, 2, 1, "", "print_as_python_dictionary"], [100, 2, 1, "", "print_as_python_dictionary_to_file"], [100, 2, 1, "", "print_evaluation_python_code"], [100, 2, 1, "", "print_evaluation_python_code_to_file"], [100, 2, 1, "", "print_input_information"], [100, 3, 1, "", "reference_code"], [100, 2, 1, "", "remove_key_schedule"], [100, 2, 1, "", "remove_round_component"], [100, 2, 1, "", "remove_round_component_from_id"], [100, 3, 1, "", "rounds"], [100, 3, 1, "", "rounds_as_list"], [100, 2, 1, "", "set_file_name"], [100, 2, 1, "", "set_id"], [100, 2, 1, "", "set_inputs"], [100, 2, 1, "", "sort_cipher"], [100, 2, 1, "", "test_against_reference_code"], [100, 2, 1, "", "test_vector_check"], [100, 3, 1, "", "type"], [100, 2, 1, "", "update_input_id_links_from_component_id"], [100, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.kasumi_block_cipher": [[101, 1, 1, "", "KasumiBlockCipher"]], "ciphers.block_ciphers.kasumi_block_cipher.KasumiBlockCipher": [[101, 2, 1, "", "add_AND_component"], [101, 2, 1, "", "add_FSR_component"], [101, 2, 1, "", "add_MODADD_component"], [101, 2, 1, "", "add_MODSUB_component"], [101, 2, 1, "", "add_NOT_component"], [101, 2, 1, "", "add_OR_component"], [101, 2, 1, "", "add_SBOX_component"], [101, 2, 1, "", "add_SHIFT_component"], [101, 2, 1, "", "add_XOR_component"], [101, 2, 1, "", "add_cipher_output_component"], [101, 2, 1, "", "add_concatenate_component"], [101, 2, 1, "", "add_constant_component"], [101, 2, 1, "", "add_intermediate_output_component"], [101, 2, 1, "", "add_linear_layer_component"], [101, 2, 1, "", "add_mix_column_component"], [101, 2, 1, "", "add_permutation_component"], [101, 2, 1, "", "add_reverse_component"], [101, 2, 1, "", "add_rotate_component"], [101, 2, 1, "", "add_round"], [101, 2, 1, "", "add_round_key_output_component"], [101, 2, 1, "", "add_round_output_component"], [101, 2, 1, "", "add_shift_rows_component"], [101, 2, 1, "", "add_sigma_component"], [101, 2, 1, "", "add_suffix_to_components"], [101, 2, 1, "", "add_theta_keccak_component"], [101, 2, 1, "", "add_theta_xoodoo_component"], [101, 2, 1, "", "add_variable_rotate_component"], [101, 2, 1, "", "add_variable_shift_component"], [101, 2, 1, "", "add_word_permutation_component"], [101, 2, 1, "", "as_python_dictionary"], [101, 2, 1, "", "cipher_inverse"], [101, 2, 1, "", "cipher_partial_inverse"], [101, 2, 1, "", "component_from"], [101, 2, 1, "", "convert_to_compound_xor_cipher"], [101, 2, 1, "", "create_networx_graph_from_input_ids"], [101, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [101, 3, 1, "", "current_round"], [101, 3, 1, "", "current_round_number"], [101, 3, 1, "", "current_round_number_of_components"], [101, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [101, 2, 1, "", "derived_key"], [101, 2, 1, "", "evaluate"], [101, 2, 1, "", "evaluate_using_c"], [101, 2, 1, "", "evaluate_vectorized"], [101, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [101, 3, 1, "", "family_name"], [101, 2, 1, "", "fi_function1"], [101, 3, 1, "", "file_name"], [101, 2, 1, "", "find_impossible_property"], [101, 2, 1, "", "fl_function"], [101, 2, 1, "", "fo_function"], [101, 2, 1, "", "generate_bit_based_c_code"], [101, 2, 1, "", "generate_evaluate_c_code_shared_library"], [101, 2, 1, "", "generate_word_based_c_code"], [101, 2, 1, "", "get_all_components"], [101, 2, 1, "", "get_all_components_ids"], [101, 2, 1, "", "get_all_inputs_bit_positions"], [101, 2, 1, "", "get_component_from_id"], [101, 2, 1, "", "get_components_in_round"], [101, 2, 1, "", "get_current_component_id"], [101, 2, 1, "", "get_model"], [101, 2, 1, "", "get_number_of_components_in_round"], [101, 2, 1, "", "get_partial_cipher"], [101, 2, 1, "", "get_round_from_component_id"], [101, 2, 1, "", "get_sizes_of_components_by_type"], [101, 3, 1, "", "id"], [101, 2, 1, "", "impossible_differential_search"], [101, 2, 1, "", "init_halves"], [101, 3, 1, "", "inputs"], [101, 3, 1, "", "inputs_bit_size"], [101, 2, 1, "", "inputs_size_to_dict"], [101, 2, 1, "", "is_algebraically_secure"], [101, 2, 1, "", "is_andrx"], [101, 2, 1, "", "is_arx"], [101, 2, 1, "", "is_power_of_2_word_based"], [101, 2, 1, "", "is_shift_arx"], [101, 2, 1, "", "is_spn"], [101, 2, 1, "", "make_cipher_id"], [101, 2, 1, "", "make_file_name"], [101, 3, 1, "", "number_of_rounds"], [101, 3, 1, "", "output_bit_size"], [101, 2, 1, "", "polynomial_system"], [101, 2, 1, "", "polynomial_system_at_round"], [101, 2, 1, "", "print"], [101, 2, 1, "", "print_as_python_dictionary"], [101, 2, 1, "", "print_as_python_dictionary_to_file"], [101, 2, 1, "", "print_evaluation_python_code"], [101, 2, 1, "", "print_evaluation_python_code_to_file"], [101, 2, 1, "", "print_input_information"], [101, 3, 1, "", "reference_code"], [101, 2, 1, "", "remove_key_schedule"], [101, 2, 1, "", "remove_round_component"], [101, 2, 1, "", "remove_round_component_from_id"], [101, 2, 1, "", "round_key"], [101, 3, 1, "", "rounds"], [101, 3, 1, "", "rounds_as_list"], [101, 2, 1, "", "set_file_name"], [101, 2, 1, "", "set_id"], [101, 2, 1, "", "set_inputs"], [101, 2, 1, "", "sort_cipher"], [101, 2, 1, "", "test_against_reference_code"], [101, 2, 1, "", "test_vector_check"], [101, 3, 1, "", "type"], [101, 2, 1, "", "update_input_id_links_from_component_id"], [101, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.lblock_block_cipher": [[102, 1, 1, "", "LBlockBlockCipher"]], "ciphers.block_ciphers.lblock_block_cipher.LBlockBlockCipher": [[102, 2, 1, "", "add_AND_component"], [102, 2, 1, "", "add_FSR_component"], [102, 2, 1, "", "add_MODADD_component"], [102, 2, 1, "", "add_MODSUB_component"], [102, 2, 1, "", "add_NOT_component"], [102, 2, 1, "", "add_OR_component"], [102, 2, 1, "", "add_SBOX_component"], [102, 2, 1, "", "add_SHIFT_component"], [102, 2, 1, "", "add_XOR_component"], [102, 2, 1, "", "add_cipher_output_component"], [102, 2, 1, "", "add_concatenate_component"], [102, 2, 1, "", "add_constant_component"], [102, 2, 1, "", "add_intermediate_output_component"], [102, 2, 1, "", "add_linear_layer_component"], [102, 2, 1, "", "add_mix_column_component"], [102, 2, 1, "", "add_permutation_component"], [102, 2, 1, "", "add_reverse_component"], [102, 2, 1, "", "add_rotate_component"], [102, 2, 1, "", "add_round"], [102, 2, 1, "", "add_round_key_output_component"], [102, 2, 1, "", "add_round_output_component"], [102, 2, 1, "", "add_shift_rows_component"], [102, 2, 1, "", "add_sigma_component"], [102, 2, 1, "", "add_suffix_to_components"], [102, 2, 1, "", "add_theta_keccak_component"], [102, 2, 1, "", "add_theta_xoodoo_component"], [102, 2, 1, "", "add_variable_rotate_component"], [102, 2, 1, "", "add_variable_shift_component"], [102, 2, 1, "", "add_word_permutation_component"], [102, 2, 1, "", "as_python_dictionary"], [102, 2, 1, "", "cipher_inverse"], [102, 2, 1, "", "cipher_partial_inverse"], [102, 2, 1, "", "component_from"], [102, 2, 1, "", "convert_to_compound_xor_cipher"], [102, 2, 1, "", "create_networx_graph_from_input_ids"], [102, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [102, 3, 1, "", "current_round"], [102, 3, 1, "", "current_round_number"], [102, 3, 1, "", "current_round_number_of_components"], [102, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [102, 2, 1, "", "evaluate"], [102, 2, 1, "", "evaluate_using_c"], [102, 2, 1, "", "evaluate_vectorized"], [102, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [102, 3, 1, "", "family_name"], [102, 3, 1, "", "file_name"], [102, 2, 1, "", "find_impossible_property"], [102, 2, 1, "", "generate_bit_based_c_code"], [102, 2, 1, "", "generate_evaluate_c_code_shared_library"], [102, 2, 1, "", "generate_word_based_c_code"], [102, 2, 1, "", "get_all_components"], [102, 2, 1, "", "get_all_components_ids"], [102, 2, 1, "", "get_all_inputs_bit_positions"], [102, 2, 1, "", "get_component_from_id"], [102, 2, 1, "", "get_components_in_round"], [102, 2, 1, "", "get_current_component_id"], [102, 2, 1, "", "get_model"], [102, 2, 1, "", "get_number_of_components_in_round"], [102, 2, 1, "", "get_partial_cipher"], [102, 2, 1, "", "get_round_from_component_id"], [102, 2, 1, "", "get_sizes_of_components_by_type"], [102, 3, 1, "", "id"], [102, 2, 1, "", "impossible_differential_search"], [102, 3, 1, "", "inputs"], [102, 3, 1, "", "inputs_bit_size"], [102, 2, 1, "", "inputs_size_to_dict"], [102, 2, 1, "", "is_algebraically_secure"], [102, 2, 1, "", "is_andrx"], [102, 2, 1, "", "is_arx"], [102, 2, 1, "", "is_power_of_2_word_based"], [102, 2, 1, "", "is_shift_arx"], [102, 2, 1, "", "is_spn"], [102, 2, 1, "", "make_cipher_id"], [102, 2, 1, "", "make_file_name"], [102, 3, 1, "", "number_of_rounds"], [102, 3, 1, "", "output_bit_size"], [102, 2, 1, "", "polynomial_system"], [102, 2, 1, "", "polynomial_system_at_round"], [102, 2, 1, "", "print"], [102, 2, 1, "", "print_as_python_dictionary"], [102, 2, 1, "", "print_as_python_dictionary_to_file"], [102, 2, 1, "", "print_evaluation_python_code"], [102, 2, 1, "", "print_evaluation_python_code_to_file"], [102, 2, 1, "", "print_input_information"], [102, 3, 1, "", "reference_code"], [102, 2, 1, "", "remove_key_schedule"], [102, 2, 1, "", "remove_round_component"], [102, 2, 1, "", "remove_round_component_from_id"], [102, 2, 1, "", "round_function"], [102, 3, 1, "", "rounds"], [102, 3, 1, "", "rounds_as_list"], [102, 2, 1, "", "set_file_name"], [102, 2, 1, "", "set_id"], [102, 2, 1, "", "set_inputs"], [102, 2, 1, "", "sort_cipher"], [102, 2, 1, "", "test_against_reference_code"], [102, 2, 1, "", "test_vector_check"], [102, 3, 1, "", "type"], [102, 2, 1, "", "update_input_id_links_from_component_id"], [102, 2, 1, "", "update_key"], [102, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.lea_block_cipher": [[103, 1, 1, "", "LeaBlockCipher"], [103, 4, 1, "", "format_output"], [103, 4, 1, "", "init_input"]], "ciphers.block_ciphers.lea_block_cipher.LeaBlockCipher": [[103, 2, 1, "", "add_AND_component"], [103, 2, 1, "", "add_FSR_component"], [103, 2, 1, "", "add_MODADD_component"], [103, 2, 1, "", "add_MODSUB_component"], [103, 2, 1, "", "add_NOT_component"], [103, 2, 1, "", "add_OR_component"], [103, 2, 1, "", "add_SBOX_component"], [103, 2, 1, "", "add_SHIFT_component"], [103, 2, 1, "", "add_XOR_component"], [103, 2, 1, "", "add_cipher_output_component"], [103, 2, 1, "", "add_concatenate_component"], [103, 2, 1, "", "add_constant_component"], [103, 2, 1, "", "add_intermediate_output_component"], [103, 2, 1, "", "add_intermediate_output_components"], [103, 2, 1, "", "add_linear_layer_component"], [103, 2, 1, "", "add_mix_column_component"], [103, 2, 1, "", "add_permutation_component"], [103, 2, 1, "", "add_reverse_component"], [103, 2, 1, "", "add_rotate_component"], [103, 2, 1, "", "add_round"], [103, 2, 1, "", "add_round_key_output_component"], [103, 2, 1, "", "add_round_output_component"], [103, 2, 1, "", "add_shift_rows_component"], [103, 2, 1, "", "add_sigma_component"], [103, 2, 1, "", "add_suffix_to_components"], [103, 2, 1, "", "add_theta_keccak_component"], [103, 2, 1, "", "add_theta_xoodoo_component"], [103, 2, 1, "", "add_variable_rotate_component"], [103, 2, 1, "", "add_variable_shift_component"], [103, 2, 1, "", "add_word_permutation_component"], [103, 2, 1, "", "as_python_dictionary"], [103, 2, 1, "", "cipher_inverse"], [103, 2, 1, "", "cipher_partial_inverse"], [103, 2, 1, "", "component_from"], [103, 2, 1, "", "convert_to_compound_xor_cipher"], [103, 2, 1, "", "create_networx_graph_from_input_ids"], [103, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [103, 3, 1, "", "current_round"], [103, 3, 1, "", "current_round_number"], [103, 3, 1, "", "current_round_number_of_components"], [103, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [103, 2, 1, "", "evaluate"], [103, 2, 1, "", "evaluate_using_c"], [103, 2, 1, "", "evaluate_vectorized"], [103, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [103, 3, 1, "", "family_name"], [103, 3, 1, "", "file_name"], [103, 2, 1, "", "find_impossible_property"], [103, 2, 1, "", "generate_bit_based_c_code"], [103, 2, 1, "", "generate_evaluate_c_code_shared_library"], [103, 2, 1, "", "generate_word_based_c_code"], [103, 2, 1, "", "get_all_components"], [103, 2, 1, "", "get_all_components_ids"], [103, 2, 1, "", "get_all_inputs_bit_positions"], [103, 2, 1, "", "get_component_from_id"], [103, 2, 1, "", "get_components_in_round"], [103, 2, 1, "", "get_current_component_id"], [103, 2, 1, "", "get_ith_key128"], [103, 2, 1, "", "get_ith_key192"], [103, 2, 1, "", "get_ith_key256"], [103, 2, 1, "", "get_model"], [103, 2, 1, "", "get_number_of_components_in_round"], [103, 2, 1, "", "get_numbers_of_rounds"], [103, 2, 1, "", "get_partial_cipher"], [103, 2, 1, "", "get_round_from_component_id"], [103, 2, 1, "", "get_sizes_of_components_by_type"], [103, 3, 1, "", "id"], [103, 2, 1, "", "impossible_differential_search"], [103, 3, 1, "", "inputs"], [103, 3, 1, "", "inputs_bit_size"], [103, 2, 1, "", "inputs_size_to_dict"], [103, 2, 1, "", "is_algebraically_secure"], [103, 2, 1, "", "is_andrx"], [103, 2, 1, "", "is_arx"], [103, 2, 1, "", "is_power_of_2_word_based"], [103, 2, 1, "", "is_shift_arx"], [103, 2, 1, "", "is_spn"], [103, 2, 1, "", "make_cipher_id"], [103, 2, 1, "", "make_file_name"], [103, 3, 1, "", "number_of_rounds"], [103, 3, 1, "", "output_bit_size"], [103, 2, 1, "", "polynomial_system"], [103, 2, 1, "", "polynomial_system_at_round"], [103, 2, 1, "", "print"], [103, 2, 1, "", "print_as_python_dictionary"], [103, 2, 1, "", "print_as_python_dictionary_to_file"], [103, 2, 1, "", "print_evaluation_python_code"], [103, 2, 1, "", "print_evaluation_python_code_to_file"], [103, 2, 1, "", "print_input_information"], [103, 3, 1, "", "reference_code"], [103, 2, 1, "", "remove_key_schedule"], [103, 2, 1, "", "remove_round_component"], [103, 2, 1, "", "remove_round_component_from_id"], [103, 2, 1, "", "round_function"], [103, 3, 1, "", "rounds"], [103, 3, 1, "", "rounds_as_list"], [103, 2, 1, "", "set_file_name"], [103, 2, 1, "", "set_id"], [103, 2, 1, "", "set_inputs"], [103, 2, 1, "", "sort_cipher"], [103, 2, 1, "", "test_against_reference_code"], [103, 2, 1, "", "test_vector_check"], [103, 3, 1, "", "type"], [103, 2, 1, "", "update_input_id_links_from_component_id"], [103, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.lowmc_block_cipher": [[104, 1, 1, "", "LowMCBlockCipher"]], "ciphers.block_ciphers.lowmc_block_cipher.LowMCBlockCipher": [[104, 2, 1, "", "add_AND_component"], [104, 2, 1, "", "add_FSR_component"], [104, 2, 1, "", "add_MODADD_component"], [104, 2, 1, "", "add_MODSUB_component"], [104, 2, 1, "", "add_NOT_component"], [104, 2, 1, "", "add_OR_component"], [104, 2, 1, "", "add_SBOX_component"], [104, 2, 1, "", "add_SHIFT_component"], [104, 2, 1, "", "add_XOR_component"], [104, 2, 1, "", "add_cipher_output_component"], [104, 2, 1, "", "add_concatenate_component"], [104, 2, 1, "", "add_constant_component"], [104, 2, 1, "", "add_intermediate_output_component"], [104, 2, 1, "", "add_linear_layer_component"], [104, 2, 1, "", "add_mix_column_component"], [104, 2, 1, "", "add_output_component"], [104, 2, 1, "", "add_permutation_component"], [104, 2, 1, "", "add_reverse_component"], [104, 2, 1, "", "add_rotate_component"], [104, 2, 1, "", "add_round"], [104, 2, 1, "", "add_round_constant"], [104, 2, 1, "", "add_round_key"], [104, 2, 1, "", "add_round_key_output_component"], [104, 2, 1, "", "add_round_output_component"], [104, 2, 1, "", "add_shift_rows_component"], [104, 2, 1, "", "add_sigma_component"], [104, 2, 1, "", "add_suffix_to_components"], [104, 2, 1, "", "add_theta_keccak_component"], [104, 2, 1, "", "add_theta_xoodoo_component"], [104, 2, 1, "", "add_variable_rotate_component"], [104, 2, 1, "", "add_variable_shift_component"], [104, 2, 1, "", "add_word_permutation_component"], [104, 2, 1, "", "as_python_dictionary"], [104, 2, 1, "", "cipher_inverse"], [104, 2, 1, "", "cipher_partial_inverse"], [104, 2, 1, "", "component_from"], [104, 2, 1, "", "convert_to_compound_xor_cipher"], [104, 2, 1, "", "create_networx_graph_from_input_ids"], [104, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [104, 3, 1, "", "current_round"], [104, 3, 1, "", "current_round_number"], [104, 3, 1, "", "current_round_number_of_components"], [104, 2, 1, "", "define_number_of_rounds"], [104, 2, 1, "", "define_number_of_sboxes"], [104, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [104, 2, 1, "", "evaluate"], [104, 2, 1, "", "evaluate_using_c"], [104, 2, 1, "", "evaluate_vectorized"], [104, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [104, 3, 1, "", "family_name"], [104, 3, 1, "", "file_name"], [104, 2, 1, "", "find_impossible_property"], [104, 2, 1, "", "generate_bit_based_c_code"], [104, 2, 1, "", "generate_evaluate_c_code_shared_library"], [104, 2, 1, "", "generate_word_based_c_code"], [104, 2, 1, "", "get_all_components"], [104, 2, 1, "", "get_all_components_ids"], [104, 2, 1, "", "get_all_inputs_bit_positions"], [104, 2, 1, "", "get_component_from_id"], [104, 2, 1, "", "get_components_in_round"], [104, 2, 1, "", "get_current_component_id"], [104, 2, 1, "", "get_model"], [104, 2, 1, "", "get_number_of_components_in_round"], [104, 2, 1, "", "get_partial_cipher"], [104, 2, 1, "", "get_round_from_component_id"], [104, 2, 1, "", "get_sizes_of_components_by_type"], [104, 3, 1, "", "id"], [104, 2, 1, "", "impossible_differential_search"], [104, 3, 1, "", "inputs"], [104, 3, 1, "", "inputs_bit_size"], [104, 2, 1, "", "inputs_size_to_dict"], [104, 2, 1, "", "is_algebraically_secure"], [104, 2, 1, "", "is_andrx"], [104, 2, 1, "", "is_arx"], [104, 2, 1, "", "is_power_of_2_word_based"], [104, 2, 1, "", "is_shift_arx"], [104, 2, 1, "", "is_spn"], [104, 2, 1, "", "linear_layer"], [104, 2, 1, "", "load_constants"], [104, 2, 1, "", "make_cipher_id"], [104, 2, 1, "", "make_file_name"], [104, 3, 1, "", "number_of_rounds"], [104, 3, 1, "", "output_bit_size"], [104, 2, 1, "", "polynomial_system"], [104, 2, 1, "", "polynomial_system_at_round"], [104, 2, 1, "", "print"], [104, 2, 1, "", "print_as_python_dictionary"], [104, 2, 1, "", "print_as_python_dictionary_to_file"], [104, 2, 1, "", "print_evaluation_python_code"], [104, 2, 1, "", "print_evaluation_python_code_to_file"], [104, 2, 1, "", "print_input_information"], [104, 3, 1, "", "reference_code"], [104, 2, 1, "", "remove_key_schedule"], [104, 2, 1, "", "remove_round_component"], [104, 2, 1, "", "remove_round_component_from_id"], [104, 3, 1, "", "rounds"], [104, 3, 1, "", "rounds_as_list"], [104, 2, 1, "", "sbox_layer"], [104, 2, 1, "", "sbox_layer_picnic"], [104, 2, 1, "", "set_file_name"], [104, 2, 1, "", "set_id"], [104, 2, 1, "", "set_inputs"], [104, 2, 1, "", "sort_cipher"], [104, 2, 1, "", "test_against_reference_code"], [104, 2, 1, "", "test_vector_check"], [104, 3, 1, "", "type"], [104, 2, 1, "", "update_input_id_links_from_component_id"], [104, 2, 1, "", "update_key_register"], [104, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.lowmc_generate_matrices": [[105, 4, 1, "", "grain_ssg"], [105, 4, 1, "", "instantiate_matrix"], [105, 4, 1, "", "main"], [105, 4, 1, "", "rank"], [105, 4, 1, "", "xor_matrix_values"]], "ciphers.block_ciphers.midori_block_cipher": [[106, 1, 1, "", "MidoriBlockCipher"]], "ciphers.block_ciphers.midori_block_cipher.MidoriBlockCipher": [[106, 2, 1, "", "add_AND_component"], [106, 2, 1, "", "add_FSR_component"], [106, 2, 1, "", "add_MODADD_component"], [106, 2, 1, "", "add_MODSUB_component"], [106, 2, 1, "", "add_NOT_component"], [106, 2, 1, "", "add_OR_component"], [106, 2, 1, "", "add_SBOX_component"], [106, 2, 1, "", "add_SHIFT_component"], [106, 2, 1, "", "add_XOR_component"], [106, 2, 1, "", "add_cipher_output_component"], [106, 2, 1, "", "add_concatenate_component"], [106, 2, 1, "", "add_constant_component"], [106, 2, 1, "", "add_intermediate_output_component"], [106, 2, 1, "", "add_linear_layer_component"], [106, 2, 1, "", "add_mix_column_component"], [106, 2, 1, "", "add_permutation_component"], [106, 2, 1, "", "add_reverse_component"], [106, 2, 1, "", "add_rotate_component"], [106, 2, 1, "", "add_round"], [106, 2, 1, "", "add_round_key_output_component"], [106, 2, 1, "", "add_round_output_component"], [106, 2, 1, "", "add_shift_rows_component"], [106, 2, 1, "", "add_sigma_component"], [106, 2, 1, "", "add_suffix_to_components"], [106, 2, 1, "", "add_theta_keccak_component"], [106, 2, 1, "", "add_theta_xoodoo_component"], [106, 2, 1, "", "add_variable_rotate_component"], [106, 2, 1, "", "add_variable_shift_component"], [106, 2, 1, "", "add_word_permutation_component"], [106, 2, 1, "", "as_python_dictionary"], [106, 2, 1, "", "cipher_inverse"], [106, 2, 1, "", "cipher_partial_inverse"], [106, 2, 1, "", "component_from"], [106, 2, 1, "", "convert_to_compound_xor_cipher"], [106, 2, 1, "", "create_networx_graph_from_input_ids"], [106, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [106, 3, 1, "", "current_round"], [106, 3, 1, "", "current_round_number"], [106, 3, 1, "", "current_round_number_of_components"], [106, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [106, 2, 1, "", "evaluate"], [106, 2, 1, "", "evaluate_using_c"], [106, 2, 1, "", "evaluate_vectorized"], [106, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [106, 3, 1, "", "family_name"], [106, 3, 1, "", "file_name"], [106, 2, 1, "", "find_impossible_property"], [106, 2, 1, "", "generate_bit_based_c_code"], [106, 2, 1, "", "generate_evaluate_c_code_shared_library"], [106, 2, 1, "", "generate_word_based_c_code"], [106, 2, 1, "", "get_all_components"], [106, 2, 1, "", "get_all_components_ids"], [106, 2, 1, "", "get_all_inputs_bit_positions"], [106, 2, 1, "", "get_component_from_id"], [106, 2, 1, "", "get_components_in_round"], [106, 2, 1, "", "get_current_component_id"], [106, 2, 1, "", "get_model"], [106, 2, 1, "", "get_number_of_components_in_round"], [106, 2, 1, "", "get_partial_cipher"], [106, 2, 1, "", "get_round_from_component_id"], [106, 2, 1, "", "get_sizes_of_components_by_type"], [106, 3, 1, "", "id"], [106, 2, 1, "", "impossible_differential_search"], [106, 3, 1, "", "inputs"], [106, 3, 1, "", "inputs_bit_size"], [106, 2, 1, "", "inputs_size_to_dict"], [106, 2, 1, "", "is_algebraically_secure"], [106, 2, 1, "", "is_andrx"], [106, 2, 1, "", "is_arx"], [106, 2, 1, "", "is_power_of_2_word_based"], [106, 2, 1, "", "is_shift_arx"], [106, 2, 1, "", "is_spn"], [106, 2, 1, "", "key_add"], [106, 2, 1, "", "make_cipher_id"], [106, 2, 1, "", "make_file_name"], [106, 2, 1, "", "mix_column"], [106, 3, 1, "", "number_of_rounds"], [106, 3, 1, "", "output_bit_size"], [106, 2, 1, "", "polynomial_system"], [106, 2, 1, "", "polynomial_system_at_round"], [106, 2, 1, "", "print"], [106, 2, 1, "", "print_as_python_dictionary"], [106, 2, 1, "", "print_as_python_dictionary_to_file"], [106, 2, 1, "", "print_evaluation_python_code"], [106, 2, 1, "", "print_evaluation_python_code_to_file"], [106, 2, 1, "", "print_input_information"], [106, 3, 1, "", "reference_code"], [106, 2, 1, "", "remove_key_schedule"], [106, 2, 1, "", "remove_round_component"], [106, 2, 1, "", "remove_round_component_from_id"], [106, 2, 1, "", "round_key"], [106, 3, 1, "", "rounds"], [106, 3, 1, "", "rounds_as_list"], [106, 2, 1, "", "set_file_name"], [106, 2, 1, "", "set_id"], [106, 2, 1, "", "set_inputs"], [106, 2, 1, "", "shuffle_cell"], [106, 2, 1, "", "sort_cipher"], [106, 2, 1, "", "sub_cell"], [106, 2, 1, "", "test_against_reference_code"], [106, 2, 1, "", "test_vector_check"], [106, 3, 1, "", "type"], [106, 2, 1, "", "update_input_id_links_from_component_id"], [106, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.present_block_cipher": [[107, 1, 1, "", "PresentBlockCipher"]], "ciphers.block_ciphers.present_block_cipher.PresentBlockCipher": [[107, 2, 1, "", "add_AND_component"], [107, 2, 1, "", "add_FSR_component"], [107, 2, 1, "", "add_MODADD_component"], [107, 2, 1, "", "add_MODSUB_component"], [107, 2, 1, "", "add_NOT_component"], [107, 2, 1, "", "add_OR_component"], [107, 2, 1, "", "add_SBOX_component"], [107, 2, 1, "", "add_SHIFT_component"], [107, 2, 1, "", "add_XOR_component"], [107, 2, 1, "", "add_cipher_output_component"], [107, 2, 1, "", "add_concatenate_component"], [107, 2, 1, "", "add_constant_component"], [107, 2, 1, "", "add_intermediate_output_component"], [107, 2, 1, "", "add_linear_layer_component"], [107, 2, 1, "", "add_mix_column_component"], [107, 2, 1, "", "add_permutation_component"], [107, 2, 1, "", "add_reverse_component"], [107, 2, 1, "", "add_rotate_component"], [107, 2, 1, "", "add_round"], [107, 2, 1, "", "add_round_key"], [107, 2, 1, "", "add_round_key_output_component"], [107, 2, 1, "", "add_round_output_component"], [107, 2, 1, "", "add_shift_rows_component"], [107, 2, 1, "", "add_sigma_component"], [107, 2, 1, "", "add_suffix_to_components"], [107, 2, 1, "", "add_theta_keccak_component"], [107, 2, 1, "", "add_theta_xoodoo_component"], [107, 2, 1, "", "add_variable_rotate_component"], [107, 2, 1, "", "add_variable_shift_component"], [107, 2, 1, "", "add_word_permutation_component"], [107, 2, 1, "", "as_python_dictionary"], [107, 2, 1, "", "cipher_inverse"], [107, 2, 1, "", "cipher_partial_inverse"], [107, 2, 1, "", "component_from"], [107, 2, 1, "", "convert_to_compound_xor_cipher"], [107, 2, 1, "", "create_networx_graph_from_input_ids"], [107, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [107, 3, 1, "", "current_round"], [107, 3, 1, "", "current_round_number"], [107, 3, 1, "", "current_round_number_of_components"], [107, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [107, 2, 1, "", "evaluate"], [107, 2, 1, "", "evaluate_using_c"], [107, 2, 1, "", "evaluate_vectorized"], [107, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [107, 3, 1, "", "family_name"], [107, 3, 1, "", "file_name"], [107, 2, 1, "", "find_impossible_property"], [107, 2, 1, "", "generate_bit_based_c_code"], [107, 2, 1, "", "generate_evaluate_c_code_shared_library"], [107, 2, 1, "", "generate_word_based_c_code"], [107, 2, 1, "", "get_all_components"], [107, 2, 1, "", "get_all_components_ids"], [107, 2, 1, "", "get_all_inputs_bit_positions"], [107, 2, 1, "", "get_component_from_id"], [107, 2, 1, "", "get_components_in_round"], [107, 2, 1, "", "get_current_component_id"], [107, 2, 1, "", "get_model"], [107, 2, 1, "", "get_number_of_components_in_round"], [107, 2, 1, "", "get_partial_cipher"], [107, 2, 1, "", "get_round_from_component_id"], [107, 2, 1, "", "get_sizes_of_components_by_type"], [107, 3, 1, "", "id"], [107, 2, 1, "", "impossible_differential_search"], [107, 3, 1, "", "inputs"], [107, 3, 1, "", "inputs_bit_size"], [107, 2, 1, "", "inputs_size_to_dict"], [107, 2, 1, "", "is_algebraically_secure"], [107, 2, 1, "", "is_andrx"], [107, 2, 1, "", "is_arx"], [107, 2, 1, "", "is_power_of_2_word_based"], [107, 2, 1, "", "is_shift_arx"], [107, 2, 1, "", "is_spn"], [107, 2, 1, "", "make_cipher_id"], [107, 2, 1, "", "make_file_name"], [107, 3, 1, "", "number_of_rounds"], [107, 3, 1, "", "output_bit_size"], [107, 2, 1, "", "permutation_layer"], [107, 2, 1, "", "polynomial_system"], [107, 2, 1, "", "polynomial_system_at_round"], [107, 2, 1, "", "print"], [107, 2, 1, "", "print_as_python_dictionary"], [107, 2, 1, "", "print_as_python_dictionary_to_file"], [107, 2, 1, "", "print_evaluation_python_code"], [107, 2, 1, "", "print_evaluation_python_code_to_file"], [107, 2, 1, "", "print_input_information"], [107, 3, 1, "", "reference_code"], [107, 2, 1, "", "remove_key_schedule"], [107, 2, 1, "", "remove_round_component"], [107, 2, 1, "", "remove_round_component_from_id"], [107, 3, 1, "", "rounds"], [107, 3, 1, "", "rounds_as_list"], [107, 2, 1, "", "sbox_layer"], [107, 2, 1, "", "set_file_name"], [107, 2, 1, "", "set_id"], [107, 2, 1, "", "set_inputs"], [107, 2, 1, "", "sort_cipher"], [107, 2, 1, "", "test_against_reference_code"], [107, 2, 1, "", "test_vector_check"], [107, 3, 1, "", "type"], [107, 2, 1, "", "update_input_id_links_from_component_id"], [107, 2, 1, "", "update_key_register"], [107, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.qarmav2_block_cipher": [[108, 1, 1, "", "QARMAv2BlockCipher"]], "ciphers.block_ciphers.qarmav2_block_cipher.QARMAv2BlockCipher": [[108, 2, 1, "", "M_function"], [108, 2, 1, "", "add_AND_component"], [108, 2, 1, "", "add_FSR_component"], [108, 2, 1, "", "add_MODADD_component"], [108, 2, 1, "", "add_MODSUB_component"], [108, 2, 1, "", "add_NOT_component"], [108, 2, 1, "", "add_OR_component"], [108, 2, 1, "", "add_SBOX_component"], [108, 2, 1, "", "add_SHIFT_component"], [108, 2, 1, "", "add_XOR_component"], [108, 2, 1, "", "add_cipher_output_component"], [108, 2, 1, "", "add_concatenate_component"], [108, 2, 1, "", "add_constant_component"], [108, 2, 1, "", "add_intermediate_output_component"], [108, 2, 1, "", "add_linear_layer_component"], [108, 2, 1, "", "add_mix_column_component"], [108, 2, 1, "", "add_permutation_component"], [108, 2, 1, "", "add_reverse_component"], [108, 2, 1, "", "add_rotate_component"], [108, 2, 1, "", "add_round"], [108, 2, 1, "", "add_round_key_output_component"], [108, 2, 1, "", "add_round_output_component"], [108, 2, 1, "", "add_shift_rows_component"], [108, 2, 1, "", "add_sigma_component"], [108, 2, 1, "", "add_suffix_to_components"], [108, 2, 1, "", "add_theta_keccak_component"], [108, 2, 1, "", "add_theta_xoodoo_component"], [108, 2, 1, "", "add_variable_rotate_component"], [108, 2, 1, "", "add_variable_shift_component"], [108, 2, 1, "", "add_word_permutation_component"], [108, 2, 1, "", "as_python_dictionary"], [108, 2, 1, "", "cipher_inverse"], [108, 2, 1, "", "cipher_partial_inverse"], [108, 2, 1, "", "component_from"], [108, 2, 1, "", "constants_initialization"], [108, 2, 1, "", "constants_update"], [108, 2, 1, "", "convert_to_compound_xor_cipher"], [108, 2, 1, "", "create_networx_graph_from_input_ids"], [108, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [108, 3, 1, "", "current_round"], [108, 3, 1, "", "current_round_number"], [108, 3, 1, "", "current_round_number_of_components"], [108, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [108, 2, 1, "", "direct_round"], [108, 2, 1, "", "evaluate"], [108, 2, 1, "", "evaluate_using_c"], [108, 2, 1, "", "evaluate_vectorized"], [108, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [108, 3, 1, "", "family_name"], [108, 3, 1, "", "file_name"], [108, 2, 1, "", "find_impossible_property"], [108, 2, 1, "", "first_round_start"], [108, 2, 1, "", "generate_bit_based_c_code"], [108, 2, 1, "", "generate_evaluate_c_code_shared_library"], [108, 2, 1, "", "generate_word_based_c_code"], [108, 2, 1, "", "get_all_components"], [108, 2, 1, "", "get_all_components_ids"], [108, 2, 1, "", "get_all_inputs_bit_positions"], [108, 2, 1, "", "get_component_from_id"], [108, 2, 1, "", "get_components_in_round"], [108, 2, 1, "", "get_current_component_id"], [108, 2, 1, "", "get_model"], [108, 2, 1, "", "get_number_of_components_in_round"], [108, 2, 1, "", "get_partial_cipher"], [108, 2, 1, "", "get_round_from_component_id"], [108, 2, 1, "", "get_sizes_of_components_by_type"], [108, 3, 1, "", "id"], [108, 2, 1, "", "impossible_differential_search"], [108, 3, 1, "", "inputs"], [108, 3, 1, "", "inputs_bit_size"], [108, 2, 1, "", "inputs_size_to_dict"], [108, 2, 1, "", "inverse_round"], [108, 2, 1, "", "is_algebraically_secure"], [108, 2, 1, "", "is_andrx"], [108, 2, 1, "", "is_arx"], [108, 2, 1, "", "is_power_of_2_word_based"], [108, 2, 1, "", "is_shift_arx"], [108, 2, 1, "", "is_spn"], [108, 2, 1, "", "key_initialization"], [108, 2, 1, "", "key_update"], [108, 2, 1, "", "last_round_end"], [108, 2, 1, "", "majority_function"], [108, 2, 1, "", "make_cipher_id"], [108, 2, 1, "", "make_file_name"], [108, 3, 1, "", "number_of_rounds"], [108, 2, 1, "", "o_function"], [108, 3, 1, "", "output_bit_size"], [108, 2, 1, "", "polynomial_system"], [108, 2, 1, "", "polynomial_system_at_round"], [108, 2, 1, "", "print"], [108, 2, 1, "", "print_as_python_dictionary"], [108, 2, 1, "", "print_as_python_dictionary_to_file"], [108, 2, 1, "", "print_evaluation_python_code"], [108, 2, 1, "", "print_evaluation_python_code_to_file"], [108, 2, 1, "", "print_input_information"], [108, 3, 1, "", "reference_code"], [108, 2, 1, "", "reflector"], [108, 2, 1, "", "remove_key_schedule"], [108, 2, 1, "", "remove_round_component"], [108, 2, 1, "", "remove_round_component_from_id"], [108, 3, 1, "", "rounds"], [108, 3, 1, "", "rounds_as_list"], [108, 2, 1, "", "set_file_name"], [108, 2, 1, "", "set_id"], [108, 2, 1, "", "set_inputs"], [108, 2, 1, "", "sort_cipher"], [108, 2, 1, "", "state_masking"], [108, 2, 1, "", "state_rotation"], [108, 2, 1, "", "state_sboxing"], [108, 2, 1, "", "test_against_reference_code"], [108, 2, 1, "", "test_vector_check"], [108, 2, 1, "", "tweak_initialization"], [108, 2, 1, "", "tweak_update"], [108, 3, 1, "", "type"], [108, 2, 1, "", "update_input_id_links_from_component_id"], [108, 2, 1, "", "update_single_constant"], [108, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.qarmav2_with_mixcolumn_block_cipher": [[109, 1, 1, "", "QARMAv2MixColumnBlockCipher"]], "ciphers.block_ciphers.qarmav2_with_mixcolumn_block_cipher.QARMAv2MixColumnBlockCipher": [[109, 2, 1, "", "add_AND_component"], [109, 2, 1, "", "add_FSR_component"], [109, 2, 1, "", "add_MODADD_component"], [109, 2, 1, "", "add_MODSUB_component"], [109, 2, 1, "", "add_NOT_component"], [109, 2, 1, "", "add_OR_component"], [109, 2, 1, "", "add_SBOX_component"], [109, 2, 1, "", "add_SHIFT_component"], [109, 2, 1, "", "add_XOR_component"], [109, 2, 1, "", "add_cipher_output_component"], [109, 2, 1, "", "add_concatenate_component"], [109, 2, 1, "", "add_constant_component"], [109, 2, 1, "", "add_intermediate_output_component"], [109, 2, 1, "", "add_linear_layer_component"], [109, 2, 1, "", "add_mix_column_component"], [109, 2, 1, "", "add_permutation_component"], [109, 2, 1, "", "add_reverse_component"], [109, 2, 1, "", "add_rotate_component"], [109, 2, 1, "", "add_round"], [109, 2, 1, "", "add_round_key_output_component"], [109, 2, 1, "", "add_round_output_component"], [109, 2, 1, "", "add_shift_rows_component"], [109, 2, 1, "", "add_sigma_component"], [109, 2, 1, "", "add_suffix_to_components"], [109, 2, 1, "", "add_theta_keccak_component"], [109, 2, 1, "", "add_theta_xoodoo_component"], [109, 2, 1, "", "add_variable_rotate_component"], [109, 2, 1, "", "add_variable_shift_component"], [109, 2, 1, "", "add_word_permutation_component"], [109, 2, 1, "", "as_python_dictionary"], [109, 2, 1, "", "cipher_inverse"], [109, 2, 1, "", "cipher_partial_inverse"], [109, 2, 1, "", "component_from"], [109, 2, 1, "", "constants_initialization"], [109, 2, 1, "", "constants_update"], [109, 2, 1, "", "convert_to_compound_xor_cipher"], [109, 2, 1, "", "create_networx_graph_from_input_ids"], [109, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [109, 3, 1, "", "current_round"], [109, 3, 1, "", "current_round_number"], [109, 3, 1, "", "current_round_number_of_components"], [109, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [109, 2, 1, "", "direct_round"], [109, 2, 1, "", "evaluate"], [109, 2, 1, "", "evaluate_using_c"], [109, 2, 1, "", "evaluate_vectorized"], [109, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [109, 3, 1, "", "family_name"], [109, 3, 1, "", "file_name"], [109, 2, 1, "", "find_impossible_property"], [109, 2, 1, "", "first_round_start"], [109, 2, 1, "", "generate_bit_based_c_code"], [109, 2, 1, "", "generate_evaluate_c_code_shared_library"], [109, 2, 1, "", "generate_word_based_c_code"], [109, 2, 1, "", "get_all_components"], [109, 2, 1, "", "get_all_components_ids"], [109, 2, 1, "", "get_all_inputs_bit_positions"], [109, 2, 1, "", "get_component_from_id"], [109, 2, 1, "", "get_components_in_round"], [109, 2, 1, "", "get_current_component_id"], [109, 2, 1, "", "get_model"], [109, 2, 1, "", "get_number_of_components_in_round"], [109, 2, 1, "", "get_partial_cipher"], [109, 2, 1, "", "get_round_from_component_id"], [109, 2, 1, "", "get_sizes_of_components_by_type"], [109, 3, 1, "", "id"], [109, 2, 1, "", "impossible_differential_search"], [109, 3, 1, "", "inputs"], [109, 3, 1, "", "inputs_bit_size"], [109, 2, 1, "", "inputs_size_to_dict"], [109, 2, 1, "", "inverse_round"], [109, 2, 1, "", "is_algebraically_secure"], [109, 2, 1, "", "is_andrx"], [109, 2, 1, "", "is_arx"], [109, 2, 1, "", "is_power_of_2_word_based"], [109, 2, 1, "", "is_shift_arx"], [109, 2, 1, "", "is_spn"], [109, 2, 1, "", "key_initialization"], [109, 2, 1, "", "key_update"], [109, 2, 1, "", "last_round_end"], [109, 2, 1, "", "majority_function"], [109, 2, 1, "", "make_cipher_id"], [109, 2, 1, "", "make_file_name"], [109, 3, 1, "", "number_of_rounds"], [109, 2, 1, "", "o_function"], [109, 3, 1, "", "output_bit_size"], [109, 2, 1, "", "polynomial_system"], [109, 2, 1, "", "polynomial_system_at_round"], [109, 2, 1, "", "print"], [109, 2, 1, "", "print_as_python_dictionary"], [109, 2, 1, "", "print_as_python_dictionary_to_file"], [109, 2, 1, "", "print_evaluation_python_code"], [109, 2, 1, "", "print_evaluation_python_code_to_file"], [109, 2, 1, "", "print_input_information"], [109, 3, 1, "", "reference_code"], [109, 2, 1, "", "reflector"], [109, 2, 1, "", "remove_key_schedule"], [109, 2, 1, "", "remove_round_component"], [109, 2, 1, "", "remove_round_component_from_id"], [109, 3, 1, "", "rounds"], [109, 3, 1, "", "rounds_as_list"], [109, 2, 1, "", "set_file_name"], [109, 2, 1, "", "set_id"], [109, 2, 1, "", "set_inputs"], [109, 2, 1, "", "sort_cipher"], [109, 2, 1, "", "test_against_reference_code"], [109, 2, 1, "", "test_vector_check"], [109, 2, 1, "", "tweak_initialization"], [109, 3, 1, "", "type"], [109, 2, 1, "", "update_input_id_links_from_component_id"], [109, 2, 1, "", "update_single_constant"], [109, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.raiden_block_cipher": [[110, 1, 1, "", "RaidenBlockCipher"]], "ciphers.block_ciphers.raiden_block_cipher.RaidenBlockCipher": [[110, 2, 1, "", "add_AND_component"], [110, 2, 1, "", "add_FSR_component"], [110, 2, 1, "", "add_MODADD_component"], [110, 2, 1, "", "add_MODSUB_component"], [110, 2, 1, "", "add_NOT_component"], [110, 2, 1, "", "add_OR_component"], [110, 2, 1, "", "add_SBOX_component"], [110, 2, 1, "", "add_SHIFT_component"], [110, 2, 1, "", "add_XOR_component"], [110, 2, 1, "", "add_cipher_output_component"], [110, 2, 1, "", "add_concatenate_component"], [110, 2, 1, "", "add_constant_component"], [110, 2, 1, "", "add_intermediate_output_component"], [110, 2, 1, "", "add_linear_layer_component"], [110, 2, 1, "", "add_mix_column_component"], [110, 2, 1, "", "add_permutation_component"], [110, 2, 1, "", "add_reverse_component"], [110, 2, 1, "", "add_rotate_component"], [110, 2, 1, "", "add_round"], [110, 2, 1, "", "add_round_key_output_component"], [110, 2, 1, "", "add_round_output_component"], [110, 2, 1, "", "add_shift_rows_component"], [110, 2, 1, "", "add_sigma_component"], [110, 2, 1, "", "add_suffix_to_components"], [110, 2, 1, "", "add_theta_keccak_component"], [110, 2, 1, "", "add_theta_xoodoo_component"], [110, 2, 1, "", "add_variable_rotate_component"], [110, 2, 1, "", "add_variable_shift_component"], [110, 2, 1, "", "add_word_permutation_component"], [110, 2, 1, "", "as_python_dictionary"], [110, 2, 1, "", "cipher_inverse"], [110, 2, 1, "", "cipher_partial_inverse"], [110, 2, 1, "", "component_from"], [110, 2, 1, "", "convert_to_compound_xor_cipher"], [110, 2, 1, "", "create_networx_graph_from_input_ids"], [110, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [110, 3, 1, "", "current_round"], [110, 3, 1, "", "current_round_number"], [110, 3, 1, "", "current_round_number_of_components"], [110, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [110, 2, 1, "", "evaluate"], [110, 2, 1, "", "evaluate_using_c"], [110, 2, 1, "", "evaluate_vectorized"], [110, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [110, 3, 1, "", "family_name"], [110, 3, 1, "", "file_name"], [110, 2, 1, "", "find_impossible_property"], [110, 2, 1, "", "generate_bit_based_c_code"], [110, 2, 1, "", "generate_evaluate_c_code_shared_library"], [110, 2, 1, "", "generate_word_based_c_code"], [110, 2, 1, "", "get_all_components"], [110, 2, 1, "", "get_all_components_ids"], [110, 2, 1, "", "get_all_inputs_bit_positions"], [110, 2, 1, "", "get_component_from_id"], [110, 2, 1, "", "get_components_in_round"], [110, 2, 1, "", "get_current_component_id"], [110, 2, 1, "", "get_model"], [110, 2, 1, "", "get_number_of_components_in_round"], [110, 2, 1, "", "get_partial_cipher"], [110, 2, 1, "", "get_round_from_component_id"], [110, 2, 1, "", "get_sizes_of_components_by_type"], [110, 3, 1, "", "id"], [110, 2, 1, "", "impossible_differential_search"], [110, 3, 1, "", "inputs"], [110, 3, 1, "", "inputs_bit_size"], [110, 2, 1, "", "inputs_size_to_dict"], [110, 2, 1, "", "is_algebraically_secure"], [110, 2, 1, "", "is_andrx"], [110, 2, 1, "", "is_arx"], [110, 2, 1, "", "is_power_of_2_word_based"], [110, 2, 1, "", "is_shift_arx"], [110, 2, 1, "", "is_spn"], [110, 2, 1, "", "make_cipher_id"], [110, 2, 1, "", "make_file_name"], [110, 3, 1, "", "number_of_rounds"], [110, 3, 1, "", "output_bit_size"], [110, 2, 1, "", "polynomial_system"], [110, 2, 1, "", "polynomial_system_at_round"], [110, 2, 1, "", "print"], [110, 2, 1, "", "print_as_python_dictionary"], [110, 2, 1, "", "print_as_python_dictionary_to_file"], [110, 2, 1, "", "print_evaluation_python_code"], [110, 2, 1, "", "print_evaluation_python_code_to_file"], [110, 2, 1, "", "print_input_information"], [110, 3, 1, "", "reference_code"], [110, 2, 1, "", "remove_key_schedule"], [110, 2, 1, "", "remove_round_component"], [110, 2, 1, "", "remove_round_component_from_id"], [110, 3, 1, "", "rounds"], [110, 3, 1, "", "rounds_as_list"], [110, 2, 1, "", "set_file_name"], [110, 2, 1, "", "set_id"], [110, 2, 1, "", "set_inputs"], [110, 2, 1, "", "sort_cipher"], [110, 2, 1, "", "test_against_reference_code"], [110, 2, 1, "", "test_vector_check"], [110, 3, 1, "", "type"], [110, 2, 1, "", "update_input_id_links_from_component_id"], [110, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.rc5_block_cipher": [[111, 1, 1, "", "RC5BlockCipher"]], "ciphers.block_ciphers.rc5_block_cipher.RC5BlockCipher": [[111, 2, 1, "", "add_AND_component"], [111, 2, 1, "", "add_FSR_component"], [111, 2, 1, "", "add_MODADD_component"], [111, 2, 1, "", "add_MODSUB_component"], [111, 2, 1, "", "add_NOT_component"], [111, 2, 1, "", "add_OR_component"], [111, 2, 1, "", "add_SBOX_component"], [111, 2, 1, "", "add_SHIFT_component"], [111, 2, 1, "", "add_XOR_component"], [111, 2, 1, "", "add_cipher_output_component"], [111, 2, 1, "", "add_concatenate_component"], [111, 2, 1, "", "add_constant_component"], [111, 2, 1, "", "add_intermediate_output_component"], [111, 2, 1, "", "add_linear_layer_component"], [111, 2, 1, "", "add_mix_column_component"], [111, 2, 1, "", "add_permutation_component"], [111, 2, 1, "", "add_reverse_component"], [111, 2, 1, "", "add_rotate_component"], [111, 2, 1, "", "add_round"], [111, 2, 1, "", "add_round_key_output_component"], [111, 2, 1, "", "add_round_output_component"], [111, 2, 1, "", "add_shift_rows_component"], [111, 2, 1, "", "add_sigma_component"], [111, 2, 1, "", "add_suffix_to_components"], [111, 2, 1, "", "add_theta_keccak_component"], [111, 2, 1, "", "add_theta_xoodoo_component"], [111, 2, 1, "", "add_variable_rotate_component"], [111, 2, 1, "", "add_variable_shift_component"], [111, 2, 1, "", "add_word_permutation_component"], [111, 2, 1, "", "as_python_dictionary"], [111, 2, 1, "", "cipher_inverse"], [111, 2, 1, "", "cipher_partial_inverse"], [111, 2, 1, "", "component_from"], [111, 2, 1, "", "compute_magic_constants"], [111, 2, 1, "", "convert_to_compound_xor_cipher"], [111, 2, 1, "", "create_networx_graph_from_input_ids"], [111, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [111, 3, 1, "", "current_round"], [111, 3, 1, "", "current_round_number"], [111, 3, 1, "", "current_round_number_of_components"], [111, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [111, 2, 1, "", "evaluate"], [111, 2, 1, "", "evaluate_using_c"], [111, 2, 1, "", "evaluate_vectorized"], [111, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [111, 3, 1, "", "family_name"], [111, 3, 1, "", "file_name"], [111, 2, 1, "", "find_impossible_property"], [111, 2, 1, "", "first_round"], [111, 2, 1, "", "generate_bit_based_c_code"], [111, 2, 1, "", "generate_evaluate_c_code_shared_library"], [111, 2, 1, "", "generate_word_based_c_code"], [111, 2, 1, "", "get_all_components"], [111, 2, 1, "", "get_all_components_ids"], [111, 2, 1, "", "get_all_inputs_bit_positions"], [111, 2, 1, "", "get_component_from_id"], [111, 2, 1, "", "get_components_in_round"], [111, 2, 1, "", "get_current_component_id"], [111, 2, 1, "", "get_model"], [111, 2, 1, "", "get_number_of_components_in_round"], [111, 2, 1, "", "get_partial_cipher"], [111, 2, 1, "", "get_round_from_component_id"], [111, 2, 1, "", "get_sizes_of_components_by_type"], [111, 3, 1, "", "id"], [111, 2, 1, "", "impossible_differential_search"], [111, 3, 1, "", "inputs"], [111, 3, 1, "", "inputs_bit_size"], [111, 2, 1, "", "inputs_size_to_dict"], [111, 2, 1, "", "is_algebraically_secure"], [111, 2, 1, "", "is_andrx"], [111, 2, 1, "", "is_arx"], [111, 2, 1, "", "is_power_of_2_word_based"], [111, 2, 1, "", "is_shift_arx"], [111, 2, 1, "", "is_spn"], [111, 2, 1, "", "key_expansion"], [111, 2, 1, "", "make_cipher_id"], [111, 2, 1, "", "make_file_name"], [111, 3, 1, "", "number_of_rounds"], [111, 3, 1, "", "output_bit_size"], [111, 2, 1, "", "polynomial_system"], [111, 2, 1, "", "polynomial_system_at_round"], [111, 2, 1, "", "print"], [111, 2, 1, "", "print_as_python_dictionary"], [111, 2, 1, "", "print_as_python_dictionary_to_file"], [111, 2, 1, "", "print_evaluation_python_code"], [111, 2, 1, "", "print_evaluation_python_code_to_file"], [111, 2, 1, "", "print_input_information"], [111, 3, 1, "", "reference_code"], [111, 2, 1, "", "remove_key_schedule"], [111, 2, 1, "", "remove_round_component"], [111, 2, 1, "", "remove_round_component_from_id"], [111, 2, 1, "", "round_function"], [111, 3, 1, "", "rounds"], [111, 3, 1, "", "rounds_as_list"], [111, 2, 1, "", "set_file_name"], [111, 2, 1, "", "set_id"], [111, 2, 1, "", "set_inputs"], [111, 2, 1, "", "sort_cipher"], [111, 2, 1, "", "test_against_reference_code"], [111, 2, 1, "", "test_vector_check"], [111, 3, 1, "", "type"], [111, 2, 1, "", "update_input_id_links_from_component_id"], [111, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.scarf_block_cipher": [[112, 1, 1, "", "SCARFBlockCipher"]], "ciphers.block_ciphers.scarf_block_cipher.SCARFBlockCipher": [[112, 2, 1, "", "F_function"], [112, 2, 1, "", "add_AND_component"], [112, 2, 1, "", "add_FSR_component"], [112, 2, 1, "", "add_MODADD_component"], [112, 2, 1, "", "add_MODSUB_component"], [112, 2, 1, "", "add_NOT_component"], [112, 2, 1, "", "add_OR_component"], [112, 2, 1, "", "add_SBOX_component"], [112, 2, 1, "", "add_SHIFT_component"], [112, 2, 1, "", "add_XOR_component"], [112, 2, 1, "", "add_cipher_output_component"], [112, 2, 1, "", "add_concatenate_component"], [112, 2, 1, "", "add_constant_component"], [112, 2, 1, "", "add_intermediate_output_component"], [112, 2, 1, "", "add_linear_layer_component"], [112, 2, 1, "", "add_mix_column_component"], [112, 2, 1, "", "add_permutation_component"], [112, 2, 1, "", "add_reverse_component"], [112, 2, 1, "", "add_rotate_component"], [112, 2, 1, "", "add_round"], [112, 2, 1, "", "add_round_key_output_component"], [112, 2, 1, "", "add_round_output_component"], [112, 2, 1, "", "add_shift_rows_component"], [112, 2, 1, "", "add_sigma_component"], [112, 2, 1, "", "add_subkey"], [112, 2, 1, "", "add_suffix_to_components"], [112, 2, 1, "", "add_theta_keccak_component"], [112, 2, 1, "", "add_theta_xoodoo_component"], [112, 2, 1, "", "add_variable_rotate_component"], [112, 2, 1, "", "add_variable_shift_component"], [112, 2, 1, "", "add_word_permutation_component"], [112, 2, 1, "", "as_python_dictionary"], [112, 2, 1, "", "cipher_inverse"], [112, 2, 1, "", "cipher_partial_inverse"], [112, 2, 1, "", "component_from"], [112, 2, 1, "", "convert_to_compound_xor_cipher"], [112, 2, 1, "", "create_and_components"], [112, 2, 1, "", "create_networx_graph_from_input_ids"], [112, 2, 1, "", "create_rot_components"], [112, 2, 1, "", "create_sbox_components"], [112, 2, 1, "", "create_sigma_components"], [112, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [112, 3, 1, "", "current_round"], [112, 3, 1, "", "current_round_number"], [112, 3, 1, "", "current_round_number_of_components"], [112, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [112, 2, 1, "", "evaluate"], [112, 2, 1, "", "evaluate_using_c"], [112, 2, 1, "", "evaluate_vectorized"], [112, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [112, 3, 1, "", "family_name"], [112, 3, 1, "", "file_name"], [112, 2, 1, "", "find_impossible_property"], [112, 2, 1, "", "generate_bit_based_c_code"], [112, 2, 1, "", "generate_evaluate_c_code_shared_library"], [112, 2, 1, "", "generate_word_based_c_code"], [112, 2, 1, "", "get_all_components"], [112, 2, 1, "", "get_all_components_ids"], [112, 2, 1, "", "get_all_inputs_bit_positions"], [112, 2, 1, "", "get_component_from_id"], [112, 2, 1, "", "get_components_in_round"], [112, 2, 1, "", "get_current_component_id"], [112, 2, 1, "", "get_model"], [112, 2, 1, "", "get_number_of_components_in_round"], [112, 2, 1, "", "get_partial_cipher"], [112, 2, 1, "", "get_round_from_component_id"], [112, 2, 1, "", "get_sizes_of_components_by_type"], [112, 3, 1, "", "id"], [112, 2, 1, "", "impossible_differential_search"], [112, 3, 1, "", "inputs"], [112, 3, 1, "", "inputs_bit_size"], [112, 2, 1, "", "inputs_size_to_dict"], [112, 2, 1, "", "is_algebraically_secure"], [112, 2, 1, "", "is_andrx"], [112, 2, 1, "", "is_arx"], [112, 2, 1, "", "is_power_of_2_word_based"], [112, 2, 1, "", "is_shift_arx"], [112, 2, 1, "", "is_spn"], [112, 2, 1, "", "make_cipher_id"], [112, 2, 1, "", "make_file_name"], [112, 3, 1, "", "number_of_rounds"], [112, 3, 1, "", "output_bit_size"], [112, 2, 1, "", "polynomial_system"], [112, 2, 1, "", "polynomial_system_at_round"], [112, 2, 1, "", "print"], [112, 2, 1, "", "print_as_python_dictionary"], [112, 2, 1, "", "print_as_python_dictionary_to_file"], [112, 2, 1, "", "print_evaluation_python_code"], [112, 2, 1, "", "print_evaluation_python_code_to_file"], [112, 2, 1, "", "print_input_information"], [112, 3, 1, "", "reference_code"], [112, 2, 1, "", "remove_key_schedule"], [112, 2, 1, "", "remove_round_component"], [112, 2, 1, "", "remove_round_component_from_id"], [112, 3, 1, "", "rounds"], [112, 3, 1, "", "rounds_as_list"], [112, 2, 1, "", "set_file_name"], [112, 2, 1, "", "set_id"], [112, 2, 1, "", "set_inputs"], [112, 2, 1, "", "sort_cipher"], [112, 2, 1, "", "test_against_reference_code"], [112, 2, 1, "", "test_vector_check"], [112, 2, 1, "", "tweakey_schedule"], [112, 3, 1, "", "type"], [112, 2, 1, "", "update_input_id_links_from_component_id"], [112, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.simon_block_cipher": [[113, 1, 1, "", "SimonBlockCipher"]], "ciphers.block_ciphers.simon_block_cipher.SimonBlockCipher": [[113, 2, 1, "", "add_AND_component"], [113, 2, 1, "", "add_FSR_component"], [113, 2, 1, "", "add_MODADD_component"], [113, 2, 1, "", "add_MODSUB_component"], [113, 2, 1, "", "add_NOT_component"], [113, 2, 1, "", "add_OR_component"], [113, 2, 1, "", "add_SBOX_component"], [113, 2, 1, "", "add_SHIFT_component"], [113, 2, 1, "", "add_XOR_component"], [113, 2, 1, "", "add_cipher_output_component"], [113, 2, 1, "", "add_concatenate_component"], [113, 2, 1, "", "add_constant_component"], [113, 2, 1, "", "add_intermediate_output_component"], [113, 2, 1, "", "add_linear_layer_component"], [113, 2, 1, "", "add_mix_column_component"], [113, 2, 1, "", "add_permutation_component"], [113, 2, 1, "", "add_reverse_component"], [113, 2, 1, "", "add_rotate_component"], [113, 2, 1, "", "add_round"], [113, 2, 1, "", "add_round_key_output_component"], [113, 2, 1, "", "add_round_output_component"], [113, 2, 1, "", "add_shift_rows_component"], [113, 2, 1, "", "add_sigma_component"], [113, 2, 1, "", "add_suffix_to_components"], [113, 2, 1, "", "add_theta_keccak_component"], [113, 2, 1, "", "add_theta_xoodoo_component"], [113, 2, 1, "", "add_variable_rotate_component"], [113, 2, 1, "", "add_variable_shift_component"], [113, 2, 1, "", "add_word_permutation_component"], [113, 2, 1, "", "as_python_dictionary"], [113, 2, 1, "", "cipher_inverse"], [113, 2, 1, "", "cipher_partial_inverse"], [113, 2, 1, "", "component_from"], [113, 2, 1, "", "convert_to_compound_xor_cipher"], [113, 2, 1, "", "create_networx_graph_from_input_ids"], [113, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [113, 3, 1, "", "current_round"], [113, 3, 1, "", "current_round_number"], [113, 3, 1, "", "current_round_number_of_components"], [113, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [113, 2, 1, "", "evaluate"], [113, 2, 1, "", "evaluate_using_c"], [113, 2, 1, "", "evaluate_vectorized"], [113, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [113, 2, 1, "", "f"], [113, 3, 1, "", "family_name"], [113, 2, 1, "", "feistel_function"], [113, 3, 1, "", "file_name"], [113, 2, 1, "", "find_impossible_property"], [113, 2, 1, "", "generate_bit_based_c_code"], [113, 2, 1, "", "generate_evaluate_c_code_shared_library"], [113, 2, 1, "", "generate_round_key"], [113, 2, 1, "", "generate_word_based_c_code"], [113, 2, 1, "", "get_all_components"], [113, 2, 1, "", "get_all_components_ids"], [113, 2, 1, "", "get_all_inputs_bit_positions"], [113, 2, 1, "", "get_component_from_id"], [113, 2, 1, "", "get_components_in_round"], [113, 2, 1, "", "get_current_component_id"], [113, 2, 1, "", "get_model"], [113, 2, 1, "", "get_number_of_components_in_round"], [113, 2, 1, "", "get_partial_cipher"], [113, 2, 1, "", "get_round_from_component_id"], [113, 2, 1, "", "get_sizes_of_components_by_type"], [113, 3, 1, "", "id"], [113, 2, 1, "", "impossible_differential_search"], [113, 3, 1, "", "inputs"], [113, 3, 1, "", "inputs_bit_size"], [113, 2, 1, "", "inputs_size_to_dict"], [113, 2, 1, "", "is_algebraically_secure"], [113, 2, 1, "", "is_andrx"], [113, 2, 1, "", "is_arx"], [113, 2, 1, "", "is_power_of_2_word_based"], [113, 2, 1, "", "is_shift_arx"], [113, 2, 1, "", "is_spn"], [113, 2, 1, "", "make_cipher_id"], [113, 2, 1, "", "make_file_name"], [113, 3, 1, "", "number_of_rounds"], [113, 3, 1, "", "output_bit_size"], [113, 2, 1, "", "polynomial_system"], [113, 2, 1, "", "polynomial_system_at_round"], [113, 2, 1, "", "print"], [113, 2, 1, "", "print_as_python_dictionary"], [113, 2, 1, "", "print_as_python_dictionary_to_file"], [113, 2, 1, "", "print_evaluation_python_code"], [113, 2, 1, "", "print_evaluation_python_code_to_file"], [113, 2, 1, "", "print_input_information"], [113, 3, 1, "", "reference_code"], [113, 2, 1, "", "remove_key_schedule"], [113, 2, 1, "", "remove_round_component"], [113, 2, 1, "", "remove_round_component_from_id"], [113, 3, 1, "", "rounds"], [113, 3, 1, "", "rounds_as_list"], [113, 2, 1, "", "set_file_name"], [113, 2, 1, "", "set_id"], [113, 2, 1, "", "set_inputs"], [113, 2, 1, "", "sort_cipher"], [113, 2, 1, "", "test_against_reference_code"], [113, 2, 1, "", "test_vector_check"], [113, 3, 1, "", "type"], [113, 2, 1, "", "update_input_id_links_from_component_id"], [113, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.skinny_block_cipher": [[114, 1, 1, "", "SkinnyBlockCipher"], [114, 4, 1, "", "add_shift_rows_components"], [114, 4, 1, "", "key_initialization"], [114, 4, 1, "", "state_initialization"]], "ciphers.block_ciphers.skinny_block_cipher.SkinnyBlockCipher": [[114, 2, 1, "", "add_AND_component"], [114, 2, 1, "", "add_FSR_component"], [114, 2, 1, "", "add_MODADD_component"], [114, 2, 1, "", "add_MODSUB_component"], [114, 2, 1, "", "add_NOT_component"], [114, 2, 1, "", "add_OR_component"], [114, 2, 1, "", "add_SBOX_component"], [114, 2, 1, "", "add_SHIFT_component"], [114, 2, 1, "", "add_XOR_component"], [114, 2, 1, "", "add_add_round_tweakey"], [114, 2, 1, "", "add_cipher_output_component"], [114, 2, 1, "", "add_concatenate_component"], [114, 2, 1, "", "add_constant_component"], [114, 2, 1, "", "add_intermediate_output_component"], [114, 2, 1, "", "add_linear_layer_component"], [114, 2, 1, "", "add_mix_column_component"], [114, 2, 1, "", "add_mix_column_serials"], [114, 2, 1, "", "add_output_component"], [114, 2, 1, "", "add_permutation_component"], [114, 2, 1, "", "add_reverse_component"], [114, 2, 1, "", "add_rotate_component"], [114, 2, 1, "", "add_round"], [114, 2, 1, "", "add_round_key_output_component"], [114, 2, 1, "", "add_round_output_component"], [114, 2, 1, "", "add_shift_rows_component"], [114, 2, 1, "", "add_sigma_component"], [114, 2, 1, "", "add_suffix_to_components"], [114, 2, 1, "", "add_theta_keccak_component"], [114, 2, 1, "", "add_theta_xoodoo_component"], [114, 2, 1, "", "add_variable_rotate_component"], [114, 2, 1, "", "add_variable_shift_component"], [114, 2, 1, "", "add_word_permutation_component"], [114, 2, 1, "", "as_python_dictionary"], [114, 2, 1, "", "cipher_inverse"], [114, 2, 1, "", "cipher_partial_inverse"], [114, 2, 1, "", "component_from"], [114, 2, 1, "", "convert_to_compound_xor_cipher"], [114, 2, 1, "", "create_networx_graph_from_input_ids"], [114, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [114, 3, 1, "", "current_round"], [114, 3, 1, "", "current_round_number"], [114, 3, 1, "", "current_round_number_of_components"], [114, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [114, 2, 1, "", "evaluate"], [114, 2, 1, "", "evaluate_using_c"], [114, 2, 1, "", "evaluate_vectorized"], [114, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [114, 3, 1, "", "family_name"], [114, 3, 1, "", "file_name"], [114, 2, 1, "", "find_impossible_property"], [114, 2, 1, "", "generate_bit_based_c_code"], [114, 2, 1, "", "generate_evaluate_c_code_shared_library"], [114, 2, 1, "", "generate_word_based_c_code"], [114, 2, 1, "", "get_all_components"], [114, 2, 1, "", "get_all_components_ids"], [114, 2, 1, "", "get_all_inputs_bit_positions"], [114, 2, 1, "", "get_component_from_id"], [114, 2, 1, "", "get_components_in_round"], [114, 2, 1, "", "get_current_component_id"], [114, 2, 1, "", "get_model"], [114, 2, 1, "", "get_number_of_components_in_round"], [114, 2, 1, "", "get_partial_cipher"], [114, 2, 1, "", "get_round_from_component_id"], [114, 2, 1, "", "get_sizes_of_components_by_type"], [114, 3, 1, "", "id"], [114, 2, 1, "", "impossible_differential_search"], [114, 2, 1, "", "initial_round_elements_definition"], [114, 3, 1, "", "inputs"], [114, 3, 1, "", "inputs_bit_size"], [114, 2, 1, "", "inputs_size_to_dict"], [114, 2, 1, "", "is_algebraically_secure"], [114, 2, 1, "", "is_andrx"], [114, 2, 1, "", "is_arx"], [114, 2, 1, "", "is_power_of_2_word_based"], [114, 2, 1, "", "is_shift_arx"], [114, 2, 1, "", "is_spn"], [114, 2, 1, "", "key_schedule"], [114, 2, 1, "", "make_cipher_id"], [114, 2, 1, "", "make_file_name"], [114, 3, 1, "", "number_of_rounds"], [114, 3, 1, "", "output_bit_size"], [114, 2, 1, "", "polynomial_system"], [114, 2, 1, "", "polynomial_system_at_round"], [114, 2, 1, "", "print"], [114, 2, 1, "", "print_as_python_dictionary"], [114, 2, 1, "", "print_as_python_dictionary_to_file"], [114, 2, 1, "", "print_evaluation_python_code"], [114, 2, 1, "", "print_evaluation_python_code_to_file"], [114, 2, 1, "", "print_input_information"], [114, 3, 1, "", "reference_code"], [114, 2, 1, "", "remove_key_schedule"], [114, 2, 1, "", "remove_round_component"], [114, 2, 1, "", "remove_round_component_from_id"], [114, 2, 1, "", "round_function"], [114, 3, 1, "", "rounds"], [114, 3, 1, "", "rounds_as_list"], [114, 2, 1, "", "set_file_name"], [114, 2, 1, "", "set_id"], [114, 2, 1, "", "set_inputs"], [114, 2, 1, "", "sort_cipher"], [114, 2, 1, "", "test_against_reference_code"], [114, 2, 1, "", "test_vector_check"], [114, 3, 1, "", "type"], [114, 2, 1, "", "update_input_id_links_from_component_id"], [114, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.sparx_block_cipher": [[115, 1, 1, "", "SparxBlockCipher"], [115, 4, 1, "", "get_number_of_steps_from"]], "ciphers.block_ciphers.sparx_block_cipher.SparxBlockCipher": [[115, 2, 1, "", "K_4_128"], [115, 2, 1, "", "K_4_64"], [115, 2, 1, "", "K_8_256"], [115, 2, 1, "", "add_AND_component"], [115, 2, 1, "", "add_FSR_component"], [115, 2, 1, "", "add_MODADD_component"], [115, 2, 1, "", "add_MODSUB_component"], [115, 2, 1, "", "add_NOT_component"], [115, 2, 1, "", "add_OR_component"], [115, 2, 1, "", "add_SBOX_component"], [115, 2, 1, "", "add_SHIFT_component"], [115, 2, 1, "", "add_XOR_component"], [115, 2, 1, "", "add_cipher_output_component"], [115, 2, 1, "", "add_concatenate_component"], [115, 2, 1, "", "add_constant_component"], [115, 2, 1, "", "add_intermediate_output_component"], [115, 2, 1, "", "add_linear_layer_component"], [115, 2, 1, "", "add_mix_column_component"], [115, 2, 1, "", "add_permutation_component"], [115, 2, 1, "", "add_reverse_component"], [115, 2, 1, "", "add_rotate_component"], [115, 2, 1, "", "add_round"], [115, 2, 1, "", "add_round_key_output_component"], [115, 2, 1, "", "add_round_output_component"], [115, 2, 1, "", "add_shift_rows_component"], [115, 2, 1, "", "add_sigma_component"], [115, 2, 1, "", "add_suffix_to_components"], [115, 2, 1, "", "add_theta_keccak_component"], [115, 2, 1, "", "add_theta_xoodoo_component"], [115, 2, 1, "", "add_variable_rotate_component"], [115, 2, 1, "", "add_variable_shift_component"], [115, 2, 1, "", "add_word_permutation_component"], [115, 2, 1, "", "arx_box"], [115, 2, 1, "", "as_python_dictionary"], [115, 2, 1, "", "assign_functions_based_on"], [115, 2, 1, "", "cipher_inverse"], [115, 2, 1, "", "cipher_partial_inverse"], [115, 2, 1, "", "component_from"], [115, 2, 1, "", "convert_to_compound_xor_cipher"], [115, 2, 1, "", "create_networx_graph_from_input_ids"], [115, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [115, 3, 1, "", "current_round"], [115, 3, 1, "", "current_round_number"], [115, 3, 1, "", "current_round_number_of_components"], [115, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [115, 2, 1, "", "evaluate"], [115, 2, 1, "", "evaluate_using_c"], [115, 2, 1, "", "evaluate_vectorized"], [115, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [115, 3, 1, "", "family_name"], [115, 3, 1, "", "file_name"], [115, 2, 1, "", "find_impossible_property"], [115, 2, 1, "", "generate_bit_based_c_code"], [115, 2, 1, "", "generate_evaluate_c_code_shared_library"], [115, 2, 1, "", "generate_word_based_c_code"], [115, 2, 1, "", "get_all_components"], [115, 2, 1, "", "get_all_components_ids"], [115, 2, 1, "", "get_all_inputs_bit_positions"], [115, 2, 1, "", "get_component_from_id"], [115, 2, 1, "", "get_components_in_round"], [115, 2, 1, "", "get_current_component_id"], [115, 2, 1, "", "get_model"], [115, 2, 1, "", "get_number_of_components_in_round"], [115, 2, 1, "", "get_partial_cipher"], [115, 2, 1, "", "get_round_from_component_id"], [115, 2, 1, "", "get_sizes_of_components_by_type"], [115, 3, 1, "", "id"], [115, 2, 1, "", "impossible_differential_search"], [115, 3, 1, "", "inputs"], [115, 3, 1, "", "inputs_bit_size"], [115, 2, 1, "", "inputs_size_to_dict"], [115, 2, 1, "", "is_algebraically_secure"], [115, 2, 1, "", "is_andrx"], [115, 2, 1, "", "is_arx"], [115, 2, 1, "", "is_power_of_2_word_based"], [115, 2, 1, "", "is_shift_arx"], [115, 2, 1, "", "is_spn"], [115, 2, 1, "", "lambda_2"], [115, 2, 1, "", "lambda_4"], [115, 2, 1, "", "make_cipher_id"], [115, 2, 1, "", "make_file_name"], [115, 3, 1, "", "number_of_rounds"], [115, 3, 1, "", "output_bit_size"], [115, 2, 1, "", "polynomial_system"], [115, 2, 1, "", "polynomial_system_at_round"], [115, 2, 1, "", "print"], [115, 2, 1, "", "print_as_python_dictionary"], [115, 2, 1, "", "print_as_python_dictionary_to_file"], [115, 2, 1, "", "print_evaluation_python_code"], [115, 2, 1, "", "print_evaluation_python_code_to_file"], [115, 2, 1, "", "print_input_information"], [115, 3, 1, "", "reference_code"], [115, 2, 1, "", "remove_key_schedule"], [115, 2, 1, "", "remove_round_component"], [115, 2, 1, "", "remove_round_component_from_id"], [115, 3, 1, "", "rounds"], [115, 3, 1, "", "rounds_as_list"], [115, 2, 1, "", "set_file_name"], [115, 2, 1, "", "set_id"], [115, 2, 1, "", "set_inputs"], [115, 2, 1, "", "sort_cipher"], [115, 2, 1, "", "test_against_reference_code"], [115, 2, 1, "", "test_vector_check"], [115, 3, 1, "", "type"], [115, 2, 1, "", "update_input_id_links_from_component_id"], [115, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.speck_block_cipher": [[116, 1, 1, "", "SpeckBlockCipher"]], "ciphers.block_ciphers.speck_block_cipher.SpeckBlockCipher": [[116, 2, 1, "", "add_AND_component"], [116, 2, 1, "", "add_FSR_component"], [116, 2, 1, "", "add_MODADD_component"], [116, 2, 1, "", "add_MODSUB_component"], [116, 2, 1, "", "add_NOT_component"], [116, 2, 1, "", "add_OR_component"], [116, 2, 1, "", "add_SBOX_component"], [116, 2, 1, "", "add_SHIFT_component"], [116, 2, 1, "", "add_XOR_component"], [116, 2, 1, "", "add_cipher_output_component"], [116, 2, 1, "", "add_concatenate_component"], [116, 2, 1, "", "add_constant_component"], [116, 2, 1, "", "add_intermediate_output_component"], [116, 2, 1, "", "add_linear_layer_component"], [116, 2, 1, "", "add_mix_column_component"], [116, 2, 1, "", "add_output_component"], [116, 2, 1, "", "add_permutation_component"], [116, 2, 1, "", "add_reverse_component"], [116, 2, 1, "", "add_rotate_component"], [116, 2, 1, "", "add_round"], [116, 2, 1, "", "add_round_key_output_component"], [116, 2, 1, "", "add_round_output_component"], [116, 2, 1, "", "add_shift_rows_component"], [116, 2, 1, "", "add_sigma_component"], [116, 2, 1, "", "add_suffix_to_components"], [116, 2, 1, "", "add_theta_keccak_component"], [116, 2, 1, "", "add_theta_xoodoo_component"], [116, 2, 1, "", "add_variable_rotate_component"], [116, 2, 1, "", "add_variable_shift_component"], [116, 2, 1, "", "add_word_permutation_component"], [116, 2, 1, "", "as_python_dictionary"], [116, 2, 1, "", "cipher_inverse"], [116, 2, 1, "", "cipher_partial_inverse"], [116, 2, 1, "", "component_from"], [116, 2, 1, "", "convert_to_compound_xor_cipher"], [116, 2, 1, "", "create_networx_graph_from_input_ids"], [116, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [116, 3, 1, "", "current_round"], [116, 3, 1, "", "current_round_number"], [116, 3, 1, "", "current_round_number_of_components"], [116, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [116, 2, 1, "", "evaluate"], [116, 2, 1, "", "evaluate_using_c"], [116, 2, 1, "", "evaluate_vectorized"], [116, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [116, 3, 1, "", "family_name"], [116, 3, 1, "", "file_name"], [116, 2, 1, "", "find_impossible_property"], [116, 2, 1, "", "generate_bit_based_c_code"], [116, 2, 1, "", "generate_evaluate_c_code_shared_library"], [116, 2, 1, "", "generate_word_based_c_code"], [116, 2, 1, "", "get_all_components"], [116, 2, 1, "", "get_all_components_ids"], [116, 2, 1, "", "get_all_inputs_bit_positions"], [116, 2, 1, "", "get_component_from_id"], [116, 2, 1, "", "get_components_in_round"], [116, 2, 1, "", "get_current_component_id"], [116, 2, 1, "", "get_model"], [116, 2, 1, "", "get_number_of_components_in_round"], [116, 2, 1, "", "get_partial_cipher"], [116, 2, 1, "", "get_round_from_component_id"], [116, 2, 1, "", "get_sizes_of_components_by_type"], [116, 3, 1, "", "id"], [116, 2, 1, "", "impossible_differential_search"], [116, 3, 1, "", "inputs"], [116, 3, 1, "", "inputs_bit_size"], [116, 2, 1, "", "inputs_size_to_dict"], [116, 2, 1, "", "is_algebraically_secure"], [116, 2, 1, "", "is_andrx"], [116, 2, 1, "", "is_arx"], [116, 2, 1, "", "is_power_of_2_word_based"], [116, 2, 1, "", "is_shift_arx"], [116, 2, 1, "", "is_spn"], [116, 2, 1, "", "key_initialization"], [116, 2, 1, "", "make_cipher_id"], [116, 2, 1, "", "make_file_name"], [116, 3, 1, "", "number_of_rounds"], [116, 3, 1, "", "output_bit_size"], [116, 2, 1, "", "polynomial_system"], [116, 2, 1, "", "polynomial_system_at_round"], [116, 2, 1, "", "print"], [116, 2, 1, "", "print_as_python_dictionary"], [116, 2, 1, "", "print_as_python_dictionary_to_file"], [116, 2, 1, "", "print_evaluation_python_code"], [116, 2, 1, "", "print_evaluation_python_code_to_file"], [116, 2, 1, "", "print_input_information"], [116, 3, 1, "", "reference_code"], [116, 2, 1, "", "remove_key_schedule"], [116, 2, 1, "", "remove_round_component"], [116, 2, 1, "", "remove_round_component_from_id"], [116, 2, 1, "", "round_function"], [116, 2, 1, "", "round_initialization"], [116, 3, 1, "", "rounds"], [116, 3, 1, "", "rounds_as_list"], [116, 2, 1, "", "set_file_name"], [116, 2, 1, "", "set_id"], [116, 2, 1, "", "set_inputs"], [116, 2, 1, "", "sort_cipher"], [116, 2, 1, "", "test_against_reference_code"], [116, 2, 1, "", "test_vector_check"], [116, 3, 1, "", "type"], [116, 2, 1, "", "update_input_id_links_from_component_id"], [116, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.speedy_block_cipher": [[117, 1, 1, "", "SpeedyBlockCipher"]], "ciphers.block_ciphers.speedy_block_cipher.SpeedyBlockCipher": [[117, 2, 1, "", "add_AND_component"], [117, 2, 1, "", "add_FSR_component"], [117, 2, 1, "", "add_MODADD_component"], [117, 2, 1, "", "add_MODSUB_component"], [117, 2, 1, "", "add_NOT_component"], [117, 2, 1, "", "add_OR_component"], [117, 2, 1, "", "add_SBOX_component"], [117, 2, 1, "", "add_SHIFT_component"], [117, 2, 1, "", "add_XOR_component"], [117, 2, 1, "", "add_cipher_output_component"], [117, 2, 1, "", "add_concatenate_component"], [117, 2, 1, "", "add_constant_component"], [117, 2, 1, "", "add_intermediate_output_component"], [117, 2, 1, "", "add_linear_layer_component"], [117, 2, 1, "", "add_mix_column_component"], [117, 2, 1, "", "add_permutation_component"], [117, 2, 1, "", "add_reverse_component"], [117, 2, 1, "", "add_rotate_component"], [117, 2, 1, "", "add_round"], [117, 2, 1, "", "add_round_key_output_component"], [117, 2, 1, "", "add_round_output_component"], [117, 2, 1, "", "add_shift_rows_component"], [117, 2, 1, "", "add_sigma_component"], [117, 2, 1, "", "add_suffix_to_components"], [117, 2, 1, "", "add_theta_keccak_component"], [117, 2, 1, "", "add_theta_xoodoo_component"], [117, 2, 1, "", "add_variable_rotate_component"], [117, 2, 1, "", "add_variable_shift_component"], [117, 2, 1, "", "add_word_permutation_component"], [117, 2, 1, "", "as_python_dictionary"], [117, 2, 1, "", "cipher_inverse"], [117, 2, 1, "", "cipher_partial_inverse"], [117, 2, 1, "", "component_from"], [117, 2, 1, "", "convert_to_compound_xor_cipher"], [117, 2, 1, "", "create_networx_graph_from_input_ids"], [117, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [117, 3, 1, "", "current_round"], [117, 3, 1, "", "current_round_number"], [117, 3, 1, "", "current_round_number_of_components"], [117, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [117, 2, 1, "", "evaluate"], [117, 2, 1, "", "evaluate_using_c"], [117, 2, 1, "", "evaluate_vectorized"], [117, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [117, 3, 1, "", "family_name"], [117, 3, 1, "", "file_name"], [117, 2, 1, "", "find_impossible_property"], [117, 2, 1, "", "generate_bit_based_c_code"], [117, 2, 1, "", "generate_evaluate_c_code_shared_library"], [117, 2, 1, "", "generate_word_based_c_code"], [117, 2, 1, "", "get_all_components"], [117, 2, 1, "", "get_all_components_ids"], [117, 2, 1, "", "get_all_inputs_bit_positions"], [117, 2, 1, "", "get_component_from_id"], [117, 2, 1, "", "get_components_in_round"], [117, 2, 1, "", "get_current_component_id"], [117, 2, 1, "", "get_model"], [117, 2, 1, "", "get_number_of_components_in_round"], [117, 2, 1, "", "get_partial_cipher"], [117, 2, 1, "", "get_round_from_component_id"], [117, 2, 1, "", "get_sizes_of_components_by_type"], [117, 3, 1, "", "id"], [117, 2, 1, "", "impossible_differential_search"], [117, 3, 1, "", "inputs"], [117, 3, 1, "", "inputs_bit_size"], [117, 2, 1, "", "inputs_size_to_dict"], [117, 2, 1, "", "is_algebraically_secure"], [117, 2, 1, "", "is_andrx"], [117, 2, 1, "", "is_arx"], [117, 2, 1, "", "is_power_of_2_word_based"], [117, 2, 1, "", "is_shift_arx"], [117, 2, 1, "", "is_spn"], [117, 2, 1, "", "make_cipher_id"], [117, 2, 1, "", "make_file_name"], [117, 3, 1, "", "number_of_rounds"], [117, 3, 1, "", "output_bit_size"], [117, 2, 1, "", "polynomial_system"], [117, 2, 1, "", "polynomial_system_at_round"], [117, 2, 1, "", "print"], [117, 2, 1, "", "print_as_python_dictionary"], [117, 2, 1, "", "print_as_python_dictionary_to_file"], [117, 2, 1, "", "print_evaluation_python_code"], [117, 2, 1, "", "print_evaluation_python_code_to_file"], [117, 2, 1, "", "print_input_information"], [117, 3, 1, "", "reference_code"], [117, 2, 1, "", "remove_key_schedule"], [117, 2, 1, "", "remove_round_component"], [117, 2, 1, "", "remove_round_component_from_id"], [117, 3, 1, "", "rounds"], [117, 3, 1, "", "rounds_as_list"], [117, 2, 1, "", "set_file_name"], [117, 2, 1, "", "set_id"], [117, 2, 1, "", "set_inputs"], [117, 2, 1, "", "sort_cipher"], [117, 2, 1, "", "test_against_reference_code"], [117, 2, 1, "", "test_vector_check"], [117, 3, 1, "", "type"], [117, 2, 1, "", "update_input_id_links_from_component_id"], [117, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.tea_block_cipher": [[118, 1, 1, "", "TeaBlockCipher"]], "ciphers.block_ciphers.tea_block_cipher.TeaBlockCipher": [[118, 2, 1, "", "add_AND_component"], [118, 2, 1, "", "add_FSR_component"], [118, 2, 1, "", "add_MODADD_component"], [118, 2, 1, "", "add_MODSUB_component"], [118, 2, 1, "", "add_NOT_component"], [118, 2, 1, "", "add_OR_component"], [118, 2, 1, "", "add_SBOX_component"], [118, 2, 1, "", "add_SHIFT_component"], [118, 2, 1, "", "add_XOR_component"], [118, 2, 1, "", "add_cipher_output_component"], [118, 2, 1, "", "add_concatenate_component"], [118, 2, 1, "", "add_constant_component"], [118, 2, 1, "", "add_intermediate_output_component"], [118, 2, 1, "", "add_linear_layer_component"], [118, 2, 1, "", "add_mix_column_component"], [118, 2, 1, "", "add_permutation_component"], [118, 2, 1, "", "add_reverse_component"], [118, 2, 1, "", "add_rotate_component"], [118, 2, 1, "", "add_round"], [118, 2, 1, "", "add_round_key_output_component"], [118, 2, 1, "", "add_round_output_component"], [118, 2, 1, "", "add_shift_rows_component"], [118, 2, 1, "", "add_sigma_component"], [118, 2, 1, "", "add_suffix_to_components"], [118, 2, 1, "", "add_theta_keccak_component"], [118, 2, 1, "", "add_theta_xoodoo_component"], [118, 2, 1, "", "add_variable_rotate_component"], [118, 2, 1, "", "add_variable_shift_component"], [118, 2, 1, "", "add_word_permutation_component"], [118, 2, 1, "", "as_python_dictionary"], [118, 2, 1, "", "cipher_inverse"], [118, 2, 1, "", "cipher_partial_inverse"], [118, 2, 1, "", "component_from"], [118, 2, 1, "", "convert_to_compound_xor_cipher"], [118, 2, 1, "", "create_networx_graph_from_input_ids"], [118, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [118, 3, 1, "", "current_round"], [118, 3, 1, "", "current_round_number"], [118, 3, 1, "", "current_round_number_of_components"], [118, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [118, 2, 1, "", "evaluate"], [118, 2, 1, "", "evaluate_using_c"], [118, 2, 1, "", "evaluate_vectorized"], [118, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [118, 3, 1, "", "family_name"], [118, 3, 1, "", "file_name"], [118, 2, 1, "", "find_impossible_property"], [118, 2, 1, "", "generate_bit_based_c_code"], [118, 2, 1, "", "generate_evaluate_c_code_shared_library"], [118, 2, 1, "", "generate_word_based_c_code"], [118, 2, 1, "", "get_all_components"], [118, 2, 1, "", "get_all_components_ids"], [118, 2, 1, "", "get_all_inputs_bit_positions"], [118, 2, 1, "", "get_component_from_id"], [118, 2, 1, "", "get_components_in_round"], [118, 2, 1, "", "get_current_component_id"], [118, 2, 1, "", "get_model"], [118, 2, 1, "", "get_number_of_components_in_round"], [118, 2, 1, "", "get_partial_cipher"], [118, 2, 1, "", "get_round_from_component_id"], [118, 2, 1, "", "get_sizes_of_components_by_type"], [118, 3, 1, "", "id"], [118, 2, 1, "", "impossible_differential_search"], [118, 3, 1, "", "inputs"], [118, 3, 1, "", "inputs_bit_size"], [118, 2, 1, "", "inputs_size_to_dict"], [118, 2, 1, "", "is_algebraically_secure"], [118, 2, 1, "", "is_andrx"], [118, 2, 1, "", "is_arx"], [118, 2, 1, "", "is_power_of_2_word_based"], [118, 2, 1, "", "is_shift_arx"], [118, 2, 1, "", "is_spn"], [118, 2, 1, "", "make_cipher_id"], [118, 2, 1, "", "make_file_name"], [118, 3, 1, "", "number_of_rounds"], [118, 3, 1, "", "output_bit_size"], [118, 2, 1, "", "polynomial_system"], [118, 2, 1, "", "polynomial_system_at_round"], [118, 2, 1, "", "print"], [118, 2, 1, "", "print_as_python_dictionary"], [118, 2, 1, "", "print_as_python_dictionary_to_file"], [118, 2, 1, "", "print_evaluation_python_code"], [118, 2, 1, "", "print_evaluation_python_code_to_file"], [118, 2, 1, "", "print_input_information"], [118, 3, 1, "", "reference_code"], [118, 2, 1, "", "remove_key_schedule"], [118, 2, 1, "", "remove_round_component"], [118, 2, 1, "", "remove_round_component_from_id"], [118, 3, 1, "", "rounds"], [118, 3, 1, "", "rounds_as_list"], [118, 2, 1, "", "set_file_name"], [118, 2, 1, "", "set_id"], [118, 2, 1, "", "set_inputs"], [118, 2, 1, "", "sort_cipher"], [118, 2, 1, "", "test_against_reference_code"], [118, 2, 1, "", "test_vector_check"], [118, 3, 1, "", "type"], [118, 2, 1, "", "update_input_id_links_from_component_id"], [118, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.threefish_block_cipher": [[119, 1, 1, "", "ThreefishBlockCipher"]], "ciphers.block_ciphers.threefish_block_cipher.ThreefishBlockCipher": [[119, 2, 1, "", "add_AND_component"], [119, 2, 1, "", "add_FSR_component"], [119, 2, 1, "", "add_MODADD_component"], [119, 2, 1, "", "add_MODSUB_component"], [119, 2, 1, "", "add_NOT_component"], [119, 2, 1, "", "add_OR_component"], [119, 2, 1, "", "add_SBOX_component"], [119, 2, 1, "", "add_SHIFT_component"], [119, 2, 1, "", "add_XOR_component"], [119, 2, 1, "", "add_cipher_output_component"], [119, 2, 1, "", "add_concatenate_component"], [119, 2, 1, "", "add_constant_component"], [119, 2, 1, "", "add_intermediate_output_component"], [119, 2, 1, "", "add_linear_layer_component"], [119, 2, 1, "", "add_mix_column_component"], [119, 2, 1, "", "add_permutation_component"], [119, 2, 1, "", "add_reverse_component"], [119, 2, 1, "", "add_rotate_component"], [119, 2, 1, "", "add_round"], [119, 2, 1, "", "add_round_key_output_component"], [119, 2, 1, "", "add_round_output_component"], [119, 2, 1, "", "add_shift_rows_component"], [119, 2, 1, "", "add_sigma_component"], [119, 2, 1, "", "add_subkey"], [119, 2, 1, "", "add_suffix_to_components"], [119, 2, 1, "", "add_theta_keccak_component"], [119, 2, 1, "", "add_theta_xoodoo_component"], [119, 2, 1, "", "add_variable_rotate_component"], [119, 2, 1, "", "add_variable_shift_component"], [119, 2, 1, "", "add_word_permutation_component"], [119, 2, 1, "", "as_python_dictionary"], [119, 2, 1, "", "cipher_inverse"], [119, 2, 1, "", "cipher_partial_inverse"], [119, 2, 1, "", "component_from"], [119, 2, 1, "", "convert_to_compound_xor_cipher"], [119, 2, 1, "", "create_networx_graph_from_input_ids"], [119, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [119, 3, 1, "", "current_round"], [119, 3, 1, "", "current_round_number"], [119, 3, 1, "", "current_round_number_of_components"], [119, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [119, 2, 1, "", "evaluate"], [119, 2, 1, "", "evaluate_using_c"], [119, 2, 1, "", "evaluate_vectorized"], [119, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [119, 3, 1, "", "family_name"], [119, 3, 1, "", "file_name"], [119, 2, 1, "", "find_impossible_property"], [119, 2, 1, "", "generate_bit_based_c_code"], [119, 2, 1, "", "generate_evaluate_c_code_shared_library"], [119, 2, 1, "", "generate_word_based_c_code"], [119, 2, 1, "", "get_all_components"], [119, 2, 1, "", "get_all_components_ids"], [119, 2, 1, "", "get_all_inputs_bit_positions"], [119, 2, 1, "", "get_component_from_id"], [119, 2, 1, "", "get_components_in_round"], [119, 2, 1, "", "get_current_component_id"], [119, 2, 1, "", "get_model"], [119, 2, 1, "", "get_number_of_components_in_round"], [119, 2, 1, "", "get_partial_cipher"], [119, 2, 1, "", "get_round_from_component_id"], [119, 2, 1, "", "get_sizes_of_components_by_type"], [119, 3, 1, "", "id"], [119, 2, 1, "", "impossible_differential_search"], [119, 3, 1, "", "inputs"], [119, 3, 1, "", "inputs_bit_size"], [119, 2, 1, "", "inputs_size_to_dict"], [119, 2, 1, "", "is_algebraically_secure"], [119, 2, 1, "", "is_andrx"], [119, 2, 1, "", "is_arx"], [119, 2, 1, "", "is_power_of_2_word_based"], [119, 2, 1, "", "is_shift_arx"], [119, 2, 1, "", "is_spn"], [119, 2, 1, "", "make_cipher_id"], [119, 2, 1, "", "make_file_name"], [119, 2, 1, "", "mix"], [119, 3, 1, "", "number_of_rounds"], [119, 3, 1, "", "output_bit_size"], [119, 2, 1, "", "polynomial_system"], [119, 2, 1, "", "polynomial_system_at_round"], [119, 2, 1, "", "print"], [119, 2, 1, "", "print_as_python_dictionary"], [119, 2, 1, "", "print_as_python_dictionary_to_file"], [119, 2, 1, "", "print_evaluation_python_code"], [119, 2, 1, "", "print_evaluation_python_code_to_file"], [119, 2, 1, "", "print_input_information"], [119, 3, 1, "", "reference_code"], [119, 2, 1, "", "remove_key_schedule"], [119, 2, 1, "", "remove_round_component"], [119, 2, 1, "", "remove_round_component_from_id"], [119, 3, 1, "", "rounds"], [119, 3, 1, "", "rounds_as_list"], [119, 2, 1, "", "set_file_name"], [119, 2, 1, "", "set_id"], [119, 2, 1, "", "set_inputs"], [119, 2, 1, "", "sort_cipher"], [119, 2, 1, "", "subkey_schedule"], [119, 2, 1, "", "test_against_reference_code"], [119, 2, 1, "", "test_vector_check"], [119, 3, 1, "", "type"], [119, 2, 1, "", "update_input_id_links_from_component_id"], [119, 2, 1, "", "word_permutation"], [119, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.twofish_block_cipher": [[120, 1, 1, "", "TwofishBlockCipher"]], "ciphers.block_ciphers.twofish_block_cipher.TwofishBlockCipher": [[120, 2, 1, "", "add_AND_component"], [120, 2, 1, "", "add_FSR_component"], [120, 2, 1, "", "add_MODADD_component"], [120, 2, 1, "", "add_MODSUB_component"], [120, 2, 1, "", "add_NOT_component"], [120, 2, 1, "", "add_OR_component"], [120, 2, 1, "", "add_SBOX_component"], [120, 2, 1, "", "add_SHIFT_component"], [120, 2, 1, "", "add_XOR_component"], [120, 2, 1, "", "add_cipher_output_component"], [120, 2, 1, "", "add_concatenate_component"], [120, 2, 1, "", "add_constant_component"], [120, 2, 1, "", "add_intermediate_output_component"], [120, 2, 1, "", "add_linear_layer_component"], [120, 2, 1, "", "add_mix_column_component"], [120, 2, 1, "", "add_permutation_component"], [120, 2, 1, "", "add_reverse_component"], [120, 2, 1, "", "add_rotate_component"], [120, 2, 1, "", "add_round"], [120, 2, 1, "", "add_round_key_output_component"], [120, 2, 1, "", "add_round_output_component"], [120, 2, 1, "", "add_shift_rows_component"], [120, 2, 1, "", "add_sigma_component"], [120, 2, 1, "", "add_suffix_to_components"], [120, 2, 1, "", "add_theta_keccak_component"], [120, 2, 1, "", "add_theta_xoodoo_component"], [120, 2, 1, "", "add_variable_rotate_component"], [120, 2, 1, "", "add_variable_shift_component"], [120, 2, 1, "", "add_word_permutation_component"], [120, 2, 1, "", "as_python_dictionary"], [120, 2, 1, "", "cipher_inverse"], [120, 2, 1, "", "cipher_partial_inverse"], [120, 2, 1, "", "component_from"], [120, 2, 1, "", "convert_to_compound_xor_cipher"], [120, 2, 1, "", "create_networx_graph_from_input_ids"], [120, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [120, 3, 1, "", "current_round"], [120, 3, 1, "", "current_round_number"], [120, 3, 1, "", "current_round_number_of_components"], [120, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [120, 2, 1, "", "evaluate"], [120, 2, 1, "", "evaluate_using_c"], [120, 2, 1, "", "evaluate_vectorized"], [120, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [120, 3, 1, "", "family_name"], [120, 3, 1, "", "file_name"], [120, 2, 1, "", "find_impossible_property"], [120, 2, 1, "", "generate_bit_based_c_code"], [120, 2, 1, "", "generate_evaluate_c_code_shared_library"], [120, 2, 1, "", "generate_word_based_c_code"], [120, 2, 1, "", "get_all_components"], [120, 2, 1, "", "get_all_components_ids"], [120, 2, 1, "", "get_all_inputs_bit_positions"], [120, 2, 1, "", "get_component_from_id"], [120, 2, 1, "", "get_components_in_round"], [120, 2, 1, "", "get_current_component_id"], [120, 2, 1, "", "get_model"], [120, 2, 1, "", "get_number_of_components_in_round"], [120, 2, 1, "", "get_partial_cipher"], [120, 2, 1, "", "get_round_from_component_id"], [120, 2, 1, "", "get_sizes_of_components_by_type"], [120, 2, 1, "", "h_function"], [120, 3, 1, "", "id"], [120, 2, 1, "", "impossible_differential_search"], [120, 3, 1, "", "inputs"], [120, 3, 1, "", "inputs_bit_size"], [120, 2, 1, "", "inputs_size_to_dict"], [120, 2, 1, "", "is_algebraically_secure"], [120, 2, 1, "", "is_andrx"], [120, 2, 1, "", "is_arx"], [120, 2, 1, "", "is_power_of_2_word_based"], [120, 2, 1, "", "is_shift_arx"], [120, 2, 1, "", "is_spn"], [120, 2, 1, "", "make_cipher_id"], [120, 2, 1, "", "make_file_name"], [120, 3, 1, "", "number_of_rounds"], [120, 3, 1, "", "output_bit_size"], [120, 2, 1, "", "polynomial_system"], [120, 2, 1, "", "polynomial_system_at_round"], [120, 2, 1, "", "print"], [120, 2, 1, "", "print_as_python_dictionary"], [120, 2, 1, "", "print_as_python_dictionary_to_file"], [120, 2, 1, "", "print_evaluation_python_code"], [120, 2, 1, "", "print_evaluation_python_code_to_file"], [120, 2, 1, "", "print_input_information"], [120, 3, 1, "", "reference_code"], [120, 2, 1, "", "remove_key_schedule"], [120, 2, 1, "", "remove_round_component"], [120, 2, 1, "", "remove_round_component_from_id"], [120, 3, 1, "", "rounds"], [120, 3, 1, "", "rounds_as_list"], [120, 2, 1, "", "set_file_name"], [120, 2, 1, "", "set_id"], [120, 2, 1, "", "set_inputs"], [120, 2, 1, "", "sort_cipher"], [120, 2, 1, "", "test_against_reference_code"], [120, 2, 1, "", "test_vector_check"], [120, 3, 1, "", "type"], [120, 2, 1, "", "update_input_id_links_from_component_id"], [120, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.xtea_block_cipher": [[121, 1, 1, "", "XTeaBlockCipher"]], "ciphers.block_ciphers.xtea_block_cipher.XTeaBlockCipher": [[121, 2, 1, "", "add_AND_component"], [121, 2, 1, "", "add_FSR_component"], [121, 2, 1, "", "add_MODADD_component"], [121, 2, 1, "", "add_MODSUB_component"], [121, 2, 1, "", "add_NOT_component"], [121, 2, 1, "", "add_OR_component"], [121, 2, 1, "", "add_SBOX_component"], [121, 2, 1, "", "add_SHIFT_component"], [121, 2, 1, "", "add_XOR_component"], [121, 2, 1, "", "add_cipher_output_component"], [121, 2, 1, "", "add_concatenate_component"], [121, 2, 1, "", "add_constant_component"], [121, 2, 1, "", "add_intermediate_output_component"], [121, 2, 1, "", "add_linear_layer_component"], [121, 2, 1, "", "add_mix_column_component"], [121, 2, 1, "", "add_permutation_component"], [121, 2, 1, "", "add_reverse_component"], [121, 2, 1, "", "add_rotate_component"], [121, 2, 1, "", "add_round"], [121, 2, 1, "", "add_round_key_output_component"], [121, 2, 1, "", "add_round_output_component"], [121, 2, 1, "", "add_shift_rows_component"], [121, 2, 1, "", "add_sigma_component"], [121, 2, 1, "", "add_suffix_to_components"], [121, 2, 1, "", "add_theta_keccak_component"], [121, 2, 1, "", "add_theta_xoodoo_component"], [121, 2, 1, "", "add_variable_rotate_component"], [121, 2, 1, "", "add_variable_shift_component"], [121, 2, 1, "", "add_word_permutation_component"], [121, 2, 1, "", "as_python_dictionary"], [121, 2, 1, "", "cipher_inverse"], [121, 2, 1, "", "cipher_partial_inverse"], [121, 2, 1, "", "component_from"], [121, 2, 1, "", "convert_to_compound_xor_cipher"], [121, 2, 1, "", "create_networx_graph_from_input_ids"], [121, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [121, 3, 1, "", "current_round"], [121, 3, 1, "", "current_round_number"], [121, 3, 1, "", "current_round_number_of_components"], [121, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [121, 2, 1, "", "evaluate"], [121, 2, 1, "", "evaluate_using_c"], [121, 2, 1, "", "evaluate_vectorized"], [121, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [121, 3, 1, "", "family_name"], [121, 3, 1, "", "file_name"], [121, 2, 1, "", "find_impossible_property"], [121, 2, 1, "", "generate_bit_based_c_code"], [121, 2, 1, "", "generate_evaluate_c_code_shared_library"], [121, 2, 1, "", "generate_word_based_c_code"], [121, 2, 1, "", "get_all_components"], [121, 2, 1, "", "get_all_components_ids"], [121, 2, 1, "", "get_all_inputs_bit_positions"], [121, 2, 1, "", "get_component_from_id"], [121, 2, 1, "", "get_components_in_round"], [121, 2, 1, "", "get_current_component_id"], [121, 2, 1, "", "get_model"], [121, 2, 1, "", "get_number_of_components_in_round"], [121, 2, 1, "", "get_partial_cipher"], [121, 2, 1, "", "get_round_from_component_id"], [121, 2, 1, "", "get_sizes_of_components_by_type"], [121, 3, 1, "", "id"], [121, 2, 1, "", "impossible_differential_search"], [121, 3, 1, "", "inputs"], [121, 3, 1, "", "inputs_bit_size"], [121, 2, 1, "", "inputs_size_to_dict"], [121, 2, 1, "", "is_algebraically_secure"], [121, 2, 1, "", "is_andrx"], [121, 2, 1, "", "is_arx"], [121, 2, 1, "", "is_power_of_2_word_based"], [121, 2, 1, "", "is_shift_arx"], [121, 2, 1, "", "is_spn"], [121, 2, 1, "", "make_cipher_id"], [121, 2, 1, "", "make_file_name"], [121, 3, 1, "", "number_of_rounds"], [121, 3, 1, "", "output_bit_size"], [121, 2, 1, "", "polynomial_system"], [121, 2, 1, "", "polynomial_system_at_round"], [121, 2, 1, "", "print"], [121, 2, 1, "", "print_as_python_dictionary"], [121, 2, 1, "", "print_as_python_dictionary_to_file"], [121, 2, 1, "", "print_evaluation_python_code"], [121, 2, 1, "", "print_evaluation_python_code_to_file"], [121, 2, 1, "", "print_input_information"], [121, 3, 1, "", "reference_code"], [121, 2, 1, "", "remove_key_schedule"], [121, 2, 1, "", "remove_round_component"], [121, 2, 1, "", "remove_round_component_from_id"], [121, 3, 1, "", "rounds"], [121, 3, 1, "", "rounds_as_list"], [121, 2, 1, "", "set_file_name"], [121, 2, 1, "", "set_id"], [121, 2, 1, "", "set_inputs"], [121, 2, 1, "", "sort_cipher"], [121, 2, 1, "", "test_against_reference_code"], [121, 2, 1, "", "test_vector_check"], [121, 3, 1, "", "type"], [121, 2, 1, "", "update_input_id_links_from_component_id"], [121, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions": [[122, 0, 0, "-", "blake2_hash_function"], [123, 0, 0, "-", "blake_hash_function"], [124, 0, 0, "-", "md5_hash_function"], [125, 0, 0, "-", "sha1_hash_function"], [126, 0, 0, "-", "sha2_hash_function"], [127, 0, 0, "-", "whirlpool_hash_function"]], "ciphers.hash_functions.blake2_hash_function": [[122, 1, 1, "", "Blake2HashFunction"]], "ciphers.hash_functions.blake2_hash_function.Blake2HashFunction": [[122, 2, 1, "", "add_AND_component"], [122, 2, 1, "", "add_FSR_component"], [122, 2, 1, "", "add_MODADD_component"], [122, 2, 1, "", "add_MODSUB_component"], [122, 2, 1, "", "add_NOT_component"], [122, 2, 1, "", "add_OR_component"], [122, 2, 1, "", "add_SBOX_component"], [122, 2, 1, "", "add_SHIFT_component"], [122, 2, 1, "", "add_XOR_component"], [122, 2, 1, "", "add_cipher_output_component"], [122, 2, 1, "", "add_concatenate_component"], [122, 2, 1, "", "add_constant_component"], [122, 2, 1, "", "add_intermediate_output_component"], [122, 2, 1, "", "add_linear_layer_component"], [122, 2, 1, "", "add_mix_column_component"], [122, 2, 1, "", "add_permutation_component"], [122, 2, 1, "", "add_reverse_component"], [122, 2, 1, "", "add_rotate_component"], [122, 2, 1, "", "add_round"], [122, 2, 1, "", "add_round_key_output_component"], [122, 2, 1, "", "add_round_output_component"], [122, 2, 1, "", "add_shift_rows_component"], [122, 2, 1, "", "add_sigma_component"], [122, 2, 1, "", "add_suffix_to_components"], [122, 2, 1, "", "add_theta_keccak_component"], [122, 2, 1, "", "add_theta_xoodoo_component"], [122, 2, 1, "", "add_variable_rotate_component"], [122, 2, 1, "", "add_variable_shift_component"], [122, 2, 1, "", "add_word_permutation_component"], [122, 2, 1, "", "as_python_dictionary"], [122, 2, 1, "", "cipher_inverse"], [122, 2, 1, "", "cipher_partial_inverse"], [122, 2, 1, "", "column_step"], [122, 2, 1, "", "component_from"], [122, 2, 1, "", "convert_to_compound_xor_cipher"], [122, 2, 1, "", "create_networx_graph_from_input_ids"], [122, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [122, 3, 1, "", "current_round"], [122, 3, 1, "", "current_round_number"], [122, 3, 1, "", "current_round_number_of_components"], [122, 2, 1, "", "define_number_of_rounds"], [122, 2, 1, "", "define_permutations"], [122, 2, 1, "", "define_rotation_amounts"], [122, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [122, 2, 1, "", "diagonal_step"], [122, 2, 1, "", "evaluate"], [122, 2, 1, "", "evaluate_using_c"], [122, 2, 1, "", "evaluate_vectorized"], [122, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [122, 3, 1, "", "family_name"], [122, 3, 1, "", "file_name"], [122, 2, 1, "", "find_impossible_property"], [122, 2, 1, "", "generate_bit_based_c_code"], [122, 2, 1, "", "generate_evaluate_c_code_shared_library"], [122, 2, 1, "", "generate_word_based_c_code"], [122, 2, 1, "", "get_all_components"], [122, 2, 1, "", "get_all_components_ids"], [122, 2, 1, "", "get_all_inputs_bit_positions"], [122, 2, 1, "", "get_component_from_id"], [122, 2, 1, "", "get_components_in_round"], [122, 2, 1, "", "get_current_component_id"], [122, 2, 1, "", "get_model"], [122, 2, 1, "", "get_number_of_components_in_round"], [122, 2, 1, "", "get_partial_cipher"], [122, 2, 1, "", "get_round_from_component_id"], [122, 2, 1, "", "get_sizes_of_components_by_type"], [122, 3, 1, "", "id"], [122, 2, 1, "", "impossible_differential_search"], [122, 3, 1, "", "inputs"], [122, 3, 1, "", "inputs_bit_size"], [122, 2, 1, "", "inputs_size_to_dict"], [122, 2, 1, "", "is_algebraically_secure"], [122, 2, 1, "", "is_andrx"], [122, 2, 1, "", "is_arx"], [122, 2, 1, "", "is_power_of_2_word_based"], [122, 2, 1, "", "is_shift_arx"], [122, 2, 1, "", "is_spn"], [122, 2, 1, "", "make_cipher_id"], [122, 2, 1, "", "make_file_name"], [122, 3, 1, "", "number_of_rounds"], [122, 3, 1, "", "output_bit_size"], [122, 2, 1, "", "polynomial_system"], [122, 2, 1, "", "polynomial_system_at_round"], [122, 2, 1, "", "print"], [122, 2, 1, "", "print_as_python_dictionary"], [122, 2, 1, "", "print_as_python_dictionary_to_file"], [122, 2, 1, "", "print_evaluation_python_code"], [122, 2, 1, "", "print_evaluation_python_code_to_file"], [122, 2, 1, "", "print_input_information"], [122, 3, 1, "", "reference_code"], [122, 2, 1, "", "remove_key_schedule"], [122, 2, 1, "", "remove_round_component"], [122, 2, 1, "", "remove_round_component_from_id"], [122, 3, 1, "", "rounds"], [122, 3, 1, "", "rounds_as_list"], [122, 2, 1, "", "set_file_name"], [122, 2, 1, "", "set_id"], [122, 2, 1, "", "set_inputs"], [122, 2, 1, "", "sort_cipher"], [122, 2, 1, "", "state_transformation"], [122, 2, 1, "", "test_against_reference_code"], [122, 2, 1, "", "test_vector_check"], [122, 3, 1, "", "type"], [122, 2, 1, "", "update_input_id_links_from_component_id"], [122, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions.blake_hash_function": [[123, 1, 1, "", "BlakeHashFunction"]], "ciphers.hash_functions.blake_hash_function.BlakeHashFunction": [[123, 2, 1, "", "add_AND_component"], [123, 2, 1, "", "add_FSR_component"], [123, 2, 1, "", "add_MODADD_component"], [123, 2, 1, "", "add_MODSUB_component"], [123, 2, 1, "", "add_NOT_component"], [123, 2, 1, "", "add_OR_component"], [123, 2, 1, "", "add_SBOX_component"], [123, 2, 1, "", "add_SHIFT_component"], [123, 2, 1, "", "add_XOR_component"], [123, 2, 1, "", "add_cipher_output_component"], [123, 2, 1, "", "add_concatenate_component"], [123, 2, 1, "", "add_constant_component"], [123, 2, 1, "", "add_intermediate_output_component"], [123, 2, 1, "", "add_linear_layer_component"], [123, 2, 1, "", "add_mix_column_component"], [123, 2, 1, "", "add_permutation_component"], [123, 2, 1, "", "add_reverse_component"], [123, 2, 1, "", "add_rotate_component"], [123, 2, 1, "", "add_round"], [123, 2, 1, "", "add_round_key_output_component"], [123, 2, 1, "", "add_round_output_component"], [123, 2, 1, "", "add_shift_rows_component"], [123, 2, 1, "", "add_sigma_component"], [123, 2, 1, "", "add_suffix_to_components"], [123, 2, 1, "", "add_theta_keccak_component"], [123, 2, 1, "", "add_theta_xoodoo_component"], [123, 2, 1, "", "add_variable_rotate_component"], [123, 2, 1, "", "add_variable_shift_component"], [123, 2, 1, "", "add_word_permutation_component"], [123, 2, 1, "", "as_python_dictionary"], [123, 2, 1, "", "cipher_inverse"], [123, 2, 1, "", "cipher_partial_inverse"], [123, 2, 1, "", "column_step"], [123, 2, 1, "", "component_from"], [123, 2, 1, "", "convert_to_compound_xor_cipher"], [123, 2, 1, "", "create_networx_graph_from_input_ids"], [123, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [123, 3, 1, "", "current_round"], [123, 3, 1, "", "current_round_number"], [123, 3, 1, "", "current_round_number_of_components"], [123, 2, 1, "", "define_constants"], [123, 2, 1, "", "define_number_of_rounds"], [123, 2, 1, "", "define_permutations"], [123, 2, 1, "", "define_rotation_amounts"], [123, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [123, 2, 1, "", "diagonal_step"], [123, 2, 1, "", "evaluate"], [123, 2, 1, "", "evaluate_using_c"], [123, 2, 1, "", "evaluate_vectorized"], [123, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [123, 3, 1, "", "family_name"], [123, 3, 1, "", "file_name"], [123, 2, 1, "", "find_impossible_property"], [123, 2, 1, "", "generate_bit_based_c_code"], [123, 2, 1, "", "generate_evaluate_c_code_shared_library"], [123, 2, 1, "", "generate_word_based_c_code"], [123, 2, 1, "", "get_all_components"], [123, 2, 1, "", "get_all_components_ids"], [123, 2, 1, "", "get_all_inputs_bit_positions"], [123, 2, 1, "", "get_component_from_id"], [123, 2, 1, "", "get_components_in_round"], [123, 2, 1, "", "get_current_component_id"], [123, 2, 1, "", "get_model"], [123, 2, 1, "", "get_number_of_components_in_round"], [123, 2, 1, "", "get_partial_cipher"], [123, 2, 1, "", "get_round_from_component_id"], [123, 2, 1, "", "get_sizes_of_components_by_type"], [123, 3, 1, "", "id"], [123, 2, 1, "", "impossible_differential_search"], [123, 3, 1, "", "inputs"], [123, 3, 1, "", "inputs_bit_size"], [123, 2, 1, "", "inputs_size_to_dict"], [123, 2, 1, "", "is_algebraically_secure"], [123, 2, 1, "", "is_andrx"], [123, 2, 1, "", "is_arx"], [123, 2, 1, "", "is_power_of_2_word_based"], [123, 2, 1, "", "is_shift_arx"], [123, 2, 1, "", "is_spn"], [123, 2, 1, "", "make_cipher_id"], [123, 2, 1, "", "make_file_name"], [123, 3, 1, "", "number_of_rounds"], [123, 3, 1, "", "output_bit_size"], [123, 2, 1, "", "polynomial_system"], [123, 2, 1, "", "polynomial_system_at_round"], [123, 2, 1, "", "print"], [123, 2, 1, "", "print_as_python_dictionary"], [123, 2, 1, "", "print_as_python_dictionary_to_file"], [123, 2, 1, "", "print_evaluation_python_code"], [123, 2, 1, "", "print_evaluation_python_code_to_file"], [123, 2, 1, "", "print_input_information"], [123, 3, 1, "", "reference_code"], [123, 2, 1, "", "remove_key_schedule"], [123, 2, 1, "", "remove_round_component"], [123, 2, 1, "", "remove_round_component_from_id"], [123, 3, 1, "", "rounds"], [123, 3, 1, "", "rounds_as_list"], [123, 2, 1, "", "set_file_name"], [123, 2, 1, "", "set_id"], [123, 2, 1, "", "set_inputs"], [123, 2, 1, "", "sort_cipher"], [123, 2, 1, "", "state_transformation"], [123, 2, 1, "", "test_against_reference_code"], [123, 2, 1, "", "test_vector_check"], [123, 3, 1, "", "type"], [123, 2, 1, "", "update_input_id_links_from_component_id"], [123, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions.md5_hash_function": [[124, 1, 1, "", "MD5HashFunction"]], "ciphers.hash_functions.md5_hash_function.MD5HashFunction": [[124, 2, 1, "", "F"], [124, 2, 1, "", "G"], [124, 2, 1, "", "H"], [124, 2, 1, "", "I"], [124, 2, 1, "", "add_AND_component"], [124, 2, 1, "", "add_FSR_component"], [124, 2, 1, "", "add_MODADD_component"], [124, 2, 1, "", "add_MODSUB_component"], [124, 2, 1, "", "add_NOT_component"], [124, 2, 1, "", "add_OR_component"], [124, 2, 1, "", "add_SBOX_component"], [124, 2, 1, "", "add_SHIFT_component"], [124, 2, 1, "", "add_XOR_component"], [124, 2, 1, "", "add_and_component_in_md5"], [124, 2, 1, "", "add_cipher_output_component"], [124, 2, 1, "", "add_concatenate_component"], [124, 2, 1, "", "add_constant_component"], [124, 2, 1, "", "add_intermediate_output_component"], [124, 2, 1, "", "add_linear_layer_component"], [124, 2, 1, "", "add_mix_column_component"], [124, 2, 1, "", "add_modadd_component_in_md5"], [124, 2, 1, "", "add_modadd_component_in_md5_for_x"], [124, 2, 1, "", "add_not_component_in_md5"], [124, 2, 1, "", "add_or_component_in_md5"], [124, 2, 1, "", "add_permutation_component"], [124, 2, 1, "", "add_reverse_component"], [124, 2, 1, "", "add_rotate_component"], [124, 2, 1, "", "add_rotate_component_in_md5"], [124, 2, 1, "", "add_round"], [124, 2, 1, "", "add_round_key_output_component"], [124, 2, 1, "", "add_round_output_component"], [124, 2, 1, "", "add_round_output_component_in_md5"], [124, 2, 1, "", "add_shift_rows_component"], [124, 2, 1, "", "add_sigma_component"], [124, 2, 1, "", "add_suffix_to_components"], [124, 2, 1, "", "add_theta_keccak_component"], [124, 2, 1, "", "add_theta_xoodoo_component"], [124, 2, 1, "", "add_variable_rotate_component"], [124, 2, 1, "", "add_variable_shift_component"], [124, 2, 1, "", "add_word_permutation_component"], [124, 2, 1, "", "add_xor_component_in_md5"], [124, 2, 1, "", "as_python_dictionary"], [124, 2, 1, "", "cipher_inverse"], [124, 2, 1, "", "cipher_partial_inverse"], [124, 2, 1, "", "component_from"], [124, 2, 1, "", "convert_to_compound_xor_cipher"], [124, 2, 1, "", "create_networx_graph_from_input_ids"], [124, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [124, 3, 1, "", "current_round"], [124, 3, 1, "", "current_round_number"], [124, 3, 1, "", "current_round_number_of_components"], [124, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [124, 2, 1, "", "evaluate"], [124, 2, 1, "", "evaluate_using_c"], [124, 2, 1, "", "evaluate_vectorized"], [124, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [124, 3, 1, "", "family_name"], [124, 3, 1, "", "file_name"], [124, 2, 1, "", "find_impossible_property"], [124, 2, 1, "", "generate_bit_based_c_code"], [124, 2, 1, "", "generate_evaluate_c_code_shared_library"], [124, 2, 1, "", "generate_word_based_c_code"], [124, 2, 1, "", "get_all_components"], [124, 2, 1, "", "get_all_components_ids"], [124, 2, 1, "", "get_all_inputs_bit_positions"], [124, 2, 1, "", "get_component_from_id"], [124, 2, 1, "", "get_components_in_round"], [124, 2, 1, "", "get_current_component_id"], [124, 2, 1, "", "get_model"], [124, 2, 1, "", "get_number_of_components_in_round"], [124, 2, 1, "", "get_partial_cipher"], [124, 2, 1, "", "get_round_from_component_id"], [124, 2, 1, "", "get_sizes_of_components_by_type"], [124, 3, 1, "", "id"], [124, 2, 1, "", "impossible_differential_search"], [124, 3, 1, "", "inputs"], [124, 3, 1, "", "inputs_bit_size"], [124, 2, 1, "", "inputs_size_to_dict"], [124, 2, 1, "", "is_algebraically_secure"], [124, 2, 1, "", "is_andrx"], [124, 2, 1, "", "is_arx"], [124, 2, 1, "", "is_power_of_2_word_based"], [124, 2, 1, "", "is_shift_arx"], [124, 2, 1, "", "is_spn"], [124, 2, 1, "", "make_cipher_id"], [124, 2, 1, "", "make_file_name"], [124, 2, 1, "", "md5_step"], [124, 3, 1, "", "number_of_rounds"], [124, 3, 1, "", "output_bit_size"], [124, 2, 1, "", "polynomial_system"], [124, 2, 1, "", "polynomial_system_at_round"], [124, 2, 1, "", "print"], [124, 2, 1, "", "print_as_python_dictionary"], [124, 2, 1, "", "print_as_python_dictionary_to_file"], [124, 2, 1, "", "print_evaluation_python_code"], [124, 2, 1, "", "print_evaluation_python_code_to_file"], [124, 2, 1, "", "print_input_information"], [124, 3, 1, "", "reference_code"], [124, 2, 1, "", "remove_key_schedule"], [124, 2, 1, "", "remove_round_component"], [124, 2, 1, "", "remove_round_component_from_id"], [124, 3, 1, "", "rounds"], [124, 3, 1, "", "rounds_as_list"], [124, 2, 1, "", "set_file_name"], [124, 2, 1, "", "set_id"], [124, 2, 1, "", "set_inputs"], [124, 2, 1, "", "sort_cipher"], [124, 2, 1, "", "test_against_reference_code"], [124, 2, 1, "", "test_vector_check"], [124, 3, 1, "", "type"], [124, 2, 1, "", "update_input_id_links_from_component_id"], [124, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions.sha1_hash_function": [[125, 1, 1, "", "SHA1HashFunction"]], "ciphers.hash_functions.sha1_hash_function.SHA1HashFunction": [[125, 2, 1, "", "add_AND_component"], [125, 2, 1, "", "add_FSR_component"], [125, 2, 1, "", "add_MODADD_component"], [125, 2, 1, "", "add_MODSUB_component"], [125, 2, 1, "", "add_NOT_component"], [125, 2, 1, "", "add_OR_component"], [125, 2, 1, "", "add_SBOX_component"], [125, 2, 1, "", "add_SHIFT_component"], [125, 2, 1, "", "add_XOR_component"], [125, 2, 1, "", "add_and_component_in_sha1"], [125, 2, 1, "", "add_cipher_output_component"], [125, 2, 1, "", "add_concatenate_component"], [125, 2, 1, "", "add_constant_component"], [125, 2, 1, "", "add_intermediate_output_component"], [125, 2, 1, "", "add_linear_layer_component"], [125, 2, 1, "", "add_mix_column_component"], [125, 2, 1, "", "add_modadd_component_in_sha1"], [125, 2, 1, "", "add_permutation_component"], [125, 2, 1, "", "add_reverse_component"], [125, 2, 1, "", "add_rotate_component"], [125, 2, 1, "", "add_rotate_component_in_sha1"], [125, 2, 1, "", "add_round"], [125, 2, 1, "", "add_round_key_output_component"], [125, 2, 1, "", "add_round_output_component"], [125, 2, 1, "", "add_round_output_component_in_sha1"], [125, 2, 1, "", "add_shift_rows_component"], [125, 2, 1, "", "add_sigma_component"], [125, 2, 1, "", "add_suffix_to_components"], [125, 2, 1, "", "add_theta_keccak_component"], [125, 2, 1, "", "add_theta_xoodoo_component"], [125, 2, 1, "", "add_variable_rotate_component"], [125, 2, 1, "", "add_variable_shift_component"], [125, 2, 1, "", "add_word_permutation_component"], [125, 2, 1, "", "as_python_dictionary"], [125, 2, 1, "", "cipher_inverse"], [125, 2, 1, "", "cipher_partial_inverse"], [125, 2, 1, "", "component_from"], [125, 2, 1, "", "compute_temp_and_s_30_b"], [125, 2, 1, "", "convert_to_compound_xor_cipher"], [125, 2, 1, "", "create_networx_graph_from_input_ids"], [125, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [125, 3, 1, "", "current_round"], [125, 3, 1, "", "current_round_number"], [125, 3, 1, "", "current_round_number_of_components"], [125, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [125, 2, 1, "", "evaluate"], [125, 2, 1, "", "evaluate_using_c"], [125, 2, 1, "", "evaluate_vectorized"], [125, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [125, 3, 1, "", "family_name"], [125, 3, 1, "", "file_name"], [125, 2, 1, "", "find_impossible_property"], [125, 2, 1, "", "generate_bit_based_c_code"], [125, 2, 1, "", "generate_evaluate_c_code_shared_library"], [125, 2, 1, "", "generate_word_based_c_code"], [125, 2, 1, "", "get_all_components"], [125, 2, 1, "", "get_all_components_ids"], [125, 2, 1, "", "get_all_inputs_bit_positions"], [125, 2, 1, "", "get_component_from_id"], [125, 2, 1, "", "get_components_in_round"], [125, 2, 1, "", "get_current_component_id"], [125, 2, 1, "", "get_model"], [125, 2, 1, "", "get_number_of_components_in_round"], [125, 2, 1, "", "get_partial_cipher"], [125, 2, 1, "", "get_round_from_component_id"], [125, 2, 1, "", "get_sizes_of_components_by_type"], [125, 3, 1, "", "id"], [125, 2, 1, "", "impossible_differential_search"], [125, 3, 1, "", "inputs"], [125, 3, 1, "", "inputs_bit_size"], [125, 2, 1, "", "inputs_size_to_dict"], [125, 2, 1, "", "is_algebraically_secure"], [125, 2, 1, "", "is_andrx"], [125, 2, 1, "", "is_arx"], [125, 2, 1, "", "is_power_of_2_word_based"], [125, 2, 1, "", "is_shift_arx"], [125, 2, 1, "", "is_spn"], [125, 2, 1, "", "make_cipher_id"], [125, 2, 1, "", "make_file_name"], [125, 3, 1, "", "number_of_rounds"], [125, 3, 1, "", "output_bit_size"], [125, 2, 1, "", "polynomial_system"], [125, 2, 1, "", "polynomial_system_at_round"], [125, 2, 1, "", "print"], [125, 2, 1, "", "print_as_python_dictionary"], [125, 2, 1, "", "print_as_python_dictionary_to_file"], [125, 2, 1, "", "print_evaluation_python_code"], [125, 2, 1, "", "print_evaluation_python_code_to_file"], [125, 2, 1, "", "print_input_information"], [125, 3, 1, "", "reference_code"], [125, 2, 1, "", "remove_key_schedule"], [125, 2, 1, "", "remove_round_component"], [125, 2, 1, "", "remove_round_component_from_id"], [125, 3, 1, "", "rounds"], [125, 2, 1, "", "rounds_0_19"], [125, 2, 1, "", "rounds_20_39"], [125, 2, 1, "", "rounds_40_59"], [125, 3, 1, "", "rounds_as_list"], [125, 2, 1, "", "schedule"], [125, 2, 1, "", "set_file_name"], [125, 2, 1, "", "set_id"], [125, 2, 1, "", "set_inputs"], [125, 2, 1, "", "sort_cipher"], [125, 2, 1, "", "test_against_reference_code"], [125, 2, 1, "", "test_vector_check"], [125, 3, 1, "", "type"], [125, 2, 1, "", "update_input_id_links_from_component_id"], [125, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions.sha2_hash_function": [[126, 1, 1, "", "SHA2HashFunction"]], "ciphers.hash_functions.sha2_hash_function.SHA2HashFunction": [[126, 2, 1, "", "add_AND_component"], [126, 2, 1, "", "add_FSR_component"], [126, 2, 1, "", "add_MODADD_component"], [126, 2, 1, "", "add_MODSUB_component"], [126, 2, 1, "", "add_NOT_component"], [126, 2, 1, "", "add_OR_component"], [126, 2, 1, "", "add_SBOX_component"], [126, 2, 1, "", "add_SHIFT_component"], [126, 2, 1, "", "add_XOR_component"], [126, 2, 1, "", "add_and_component_sha2"], [126, 2, 1, "", "add_cipher_output_component"], [126, 2, 1, "", "add_concatenate_component"], [126, 2, 1, "", "add_constant_component"], [126, 2, 1, "", "add_intermediate_output_component"], [126, 2, 1, "", "add_linear_layer_component"], [126, 2, 1, "", "add_mix_column_component"], [126, 2, 1, "", "add_modadd_component_sha2"], [126, 2, 1, "", "add_permutation_component"], [126, 2, 1, "", "add_reverse_component"], [126, 2, 1, "", "add_rotate_component"], [126, 2, 1, "", "add_rotate_component_sha2"], [126, 2, 1, "", "add_round"], [126, 2, 1, "", "add_round_key_output_component"], [126, 2, 1, "", "add_round_output_component"], [126, 2, 1, "", "add_round_output_component_sha2"], [126, 2, 1, "", "add_shift_rows_component"], [126, 2, 1, "", "add_sigma_component"], [126, 2, 1, "", "add_suffix_to_components"], [126, 2, 1, "", "add_theta_keccak_component"], [126, 2, 1, "", "add_theta_xoodoo_component"], [126, 2, 1, "", "add_variable_rotate_component"], [126, 2, 1, "", "add_variable_shift_component"], [126, 2, 1, "", "add_word_permutation_component"], [126, 2, 1, "", "add_xor_component_sha2"], [126, 2, 1, "", "as_python_dictionary"], [126, 2, 1, "", "cipher_inverse"], [126, 2, 1, "", "cipher_partial_inverse"], [126, 2, 1, "", "component_from"], [126, 2, 1, "", "compute_bsig0_bsig1"], [126, 2, 1, "", "compute_ch"], [126, 2, 1, "", "compute_maj"], [126, 2, 1, "", "compute_ssig0_ssig1"], [126, 2, 1, "", "convert_to_compound_xor_cipher"], [126, 2, 1, "", "create_networx_graph_from_input_ids"], [126, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [126, 3, 1, "", "current_round"], [126, 3, 1, "", "current_round_number"], [126, 3, 1, "", "current_round_number_of_components"], [126, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [126, 2, 1, "", "evaluate"], [126, 2, 1, "", "evaluate_using_c"], [126, 2, 1, "", "evaluate_vectorized"], [126, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [126, 3, 1, "", "family_name"], [126, 3, 1, "", "file_name"], [126, 2, 1, "", "find_impossible_property"], [126, 2, 1, "", "generate_bit_based_c_code"], [126, 2, 1, "", "generate_evaluate_c_code_shared_library"], [126, 2, 1, "", "generate_word_based_c_code"], [126, 2, 1, "", "get_all_components"], [126, 2, 1, "", "get_all_components_ids"], [126, 2, 1, "", "get_all_inputs_bit_positions"], [126, 2, 1, "", "get_component_from_id"], [126, 2, 1, "", "get_components_in_round"], [126, 2, 1, "", "get_current_component_id"], [126, 2, 1, "", "get_model"], [126, 2, 1, "", "get_number_of_components_in_round"], [126, 2, 1, "", "get_partial_cipher"], [126, 2, 1, "", "get_round_from_component_id"], [126, 2, 1, "", "get_sizes_of_components_by_type"], [126, 3, 1, "", "id"], [126, 2, 1, "", "impossible_differential_search"], [126, 3, 1, "", "inputs"], [126, 3, 1, "", "inputs_bit_size"], [126, 2, 1, "", "inputs_size_to_dict"], [126, 2, 1, "", "is_algebraically_secure"], [126, 2, 1, "", "is_andrx"], [126, 2, 1, "", "is_arx"], [126, 2, 1, "", "is_power_of_2_word_based"], [126, 2, 1, "", "is_shift_arx"], [126, 2, 1, "", "is_spn"], [126, 2, 1, "", "make_cipher_id"], [126, 2, 1, "", "make_file_name"], [126, 3, 1, "", "number_of_rounds"], [126, 3, 1, "", "output_bit_size"], [126, 2, 1, "", "polynomial_system"], [126, 2, 1, "", "polynomial_system_at_round"], [126, 2, 1, "", "print"], [126, 2, 1, "", "print_as_python_dictionary"], [126, 2, 1, "", "print_as_python_dictionary_to_file"], [126, 2, 1, "", "print_evaluation_python_code"], [126, 2, 1, "", "print_evaluation_python_code_to_file"], [126, 2, 1, "", "print_input_information"], [126, 3, 1, "", "reference_code"], [126, 2, 1, "", "remove_key_schedule"], [126, 2, 1, "", "remove_round_component"], [126, 2, 1, "", "remove_round_component_from_id"], [126, 2, 1, "", "round_function"], [126, 3, 1, "", "rounds"], [126, 3, 1, "", "rounds_as_list"], [126, 2, 1, "", "schedule"], [126, 2, 1, "", "set_file_name"], [126, 2, 1, "", "set_id"], [126, 2, 1, "", "set_inputs"], [126, 2, 1, "", "sort_cipher"], [126, 2, 1, "", "test_against_reference_code"], [126, 2, 1, "", "test_vector_check"], [126, 3, 1, "", "type"], [126, 2, 1, "", "update_input_id_links_from_component_id"], [126, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions.whirlpool_hash_function": [[127, 1, 1, "", "WhirlpoolHashFunction"]], "ciphers.hash_functions.whirlpool_hash_function.WhirlpoolHashFunction": [[127, 2, 1, "", "add_AND_component"], [127, 2, 1, "", "add_FSR_component"], [127, 2, 1, "", "add_MODADD_component"], [127, 2, 1, "", "add_MODSUB_component"], [127, 2, 1, "", "add_NOT_component"], [127, 2, 1, "", "add_OR_component"], [127, 2, 1, "", "add_SBOX_component"], [127, 2, 1, "", "add_SHIFT_component"], [127, 2, 1, "", "add_XOR_component"], [127, 2, 1, "", "add_cipher_output_component"], [127, 2, 1, "", "add_concatenate_component"], [127, 2, 1, "", "add_constant_component"], [127, 2, 1, "", "add_intermediate_output_component"], [127, 2, 1, "", "add_linear_layer_component"], [127, 2, 1, "", "add_mix_column_component"], [127, 2, 1, "", "add_permutation_component"], [127, 2, 1, "", "add_reverse_component"], [127, 2, 1, "", "add_rotate_component"], [127, 2, 1, "", "add_round"], [127, 2, 1, "", "add_round_key_output_component"], [127, 2, 1, "", "add_round_output_component"], [127, 2, 1, "", "add_shift_rows_component"], [127, 2, 1, "", "add_sigma_component"], [127, 2, 1, "", "add_suffix_to_components"], [127, 2, 1, "", "add_theta_keccak_component"], [127, 2, 1, "", "add_theta_xoodoo_component"], [127, 2, 1, "", "add_variable_rotate_component"], [127, 2, 1, "", "add_variable_shift_component"], [127, 2, 1, "", "add_word_permutation_component"], [127, 2, 1, "", "as_python_dictionary"], [127, 2, 1, "", "cipher_inverse"], [127, 2, 1, "", "cipher_partial_inverse"], [127, 2, 1, "", "component_from"], [127, 2, 1, "", "convert_to_compound_xor_cipher"], [127, 2, 1, "", "create_SBOX_component"], [127, 2, 1, "", "create_mix_row_components"], [127, 2, 1, "", "create_networx_graph_from_input_ids"], [127, 2, 1, "", "create_round_constant_component"], [127, 2, 1, "", "create_shift_column_components"], [127, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [127, 3, 1, "", "current_round"], [127, 3, 1, "", "current_round_number"], [127, 3, 1, "", "current_round_number_of_components"], [127, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [127, 2, 1, "", "evaluate"], [127, 2, 1, "", "evaluate_using_c"], [127, 2, 1, "", "evaluate_vectorized"], [127, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [127, 3, 1, "", "family_name"], [127, 3, 1, "", "file_name"], [127, 2, 1, "", "find_impossible_property"], [127, 2, 1, "", "generate_bit_based_c_code"], [127, 2, 1, "", "generate_evaluate_c_code_shared_library"], [127, 2, 1, "", "generate_word_based_c_code"], [127, 2, 1, "", "get_all_components"], [127, 2, 1, "", "get_all_components_ids"], [127, 2, 1, "", "get_all_inputs_bit_positions"], [127, 2, 1, "", "get_component_from_id"], [127, 2, 1, "", "get_components_in_round"], [127, 2, 1, "", "get_current_component_id"], [127, 2, 1, "", "get_model"], [127, 2, 1, "", "get_number_of_components_in_round"], [127, 2, 1, "", "get_partial_cipher"], [127, 2, 1, "", "get_round_from_component_id"], [127, 2, 1, "", "get_sizes_of_components_by_type"], [127, 3, 1, "", "id"], [127, 2, 1, "", "impossible_differential_search"], [127, 3, 1, "", "inputs"], [127, 3, 1, "", "inputs_bit_size"], [127, 2, 1, "", "inputs_size_to_dict"], [127, 2, 1, "", "is_algebraically_secure"], [127, 2, 1, "", "is_andrx"], [127, 2, 1, "", "is_arx"], [127, 2, 1, "", "is_power_of_2_word_based"], [127, 2, 1, "", "is_shift_arx"], [127, 2, 1, "", "is_spn"], [127, 2, 1, "", "make_cipher_id"], [127, 2, 1, "", "make_file_name"], [127, 3, 1, "", "number_of_rounds"], [127, 3, 1, "", "output_bit_size"], [127, 2, 1, "", "polynomial_system"], [127, 2, 1, "", "polynomial_system_at_round"], [127, 2, 1, "", "print"], [127, 2, 1, "", "print_as_python_dictionary"], [127, 2, 1, "", "print_as_python_dictionary_to_file"], [127, 2, 1, "", "print_evaluation_python_code"], [127, 2, 1, "", "print_evaluation_python_code_to_file"], [127, 2, 1, "", "print_input_information"], [127, 3, 1, "", "reference_code"], [127, 2, 1, "", "remove_key_schedule"], [127, 2, 1, "", "remove_round_component"], [127, 2, 1, "", "remove_round_component_from_id"], [127, 3, 1, "", "rounds"], [127, 3, 1, "", "rounds_as_list"], [127, 2, 1, "", "set_file_name"], [127, 2, 1, "", "set_id"], [127, 2, 1, "", "set_inputs"], [127, 2, 1, "", "sort_cipher"], [127, 2, 1, "", "test_against_reference_code"], [127, 2, 1, "", "test_vector_check"], [127, 3, 1, "", "type"], [127, 2, 1, "", "update_input_id_links_from_component_id"], [127, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations": [[128, 0, 0, "-", "ascon_permutation"], [129, 0, 0, "-", "ascon_sbox_sigma_no_matrix_permutation"], [130, 0, 0, "-", "ascon_sbox_sigma_permutation"], [131, 0, 0, "-", "chacha_permutation"], [132, 0, 0, "-", "gaston_permutation"], [133, 0, 0, "-", "gaston_sbox_permutation"], [134, 0, 0, "-", "gift_permutation"], [135, 0, 0, "-", "gift_sbox_permutation"], [136, 0, 0, "-", "gimli_permutation"], [137, 0, 0, "-", "gimli_sbox_permutation"], [138, 0, 0, "-", "grain_core_permutation"], [139, 0, 0, "-", "keccak_invertible_permutation"], [140, 0, 0, "-", "keccak_permutation"], [141, 0, 0, "-", "keccak_sbox_permutation"], [142, 0, 0, "-", "photon_permutation"], [143, 0, 0, "-", "salsa_permutation"], [144, 0, 0, "-", "sparkle_permutation"], [145, 0, 0, "-", "spongent_pi_fsr_permutation"], [146, 0, 0, "-", "spongent_pi_permutation"], [147, 0, 0, "-", "spongent_pi_precomputation_permutation"], [148, 0, 0, "-", "tinyjambu_32bits_word_permutation"], [149, 0, 0, "-", "tinyjambu_fsr_32bits_word_permutation"], [150, 0, 0, "-", "tinyjambu_permutation"], [151, 0, 0, "-", "util"], [152, 0, 0, "-", "xoodoo_invertible_permutation"], [153, 0, 0, "-", "xoodoo_permutation"], [154, 0, 0, "-", "xoodoo_sbox_permutation"]], "ciphers.permutations.ascon_permutation": [[128, 1, 1, "", "AsconPermutation"]], "ciphers.permutations.ascon_permutation.AsconPermutation": [[128, 2, 1, "", "add_AND_component"], [128, 2, 1, "", "add_FSR_component"], [128, 2, 1, "", "add_MODADD_component"], [128, 2, 1, "", "add_MODSUB_component"], [128, 2, 1, "", "add_NOT_component"], [128, 2, 1, "", "add_OR_component"], [128, 2, 1, "", "add_SBOX_component"], [128, 2, 1, "", "add_SHIFT_component"], [128, 2, 1, "", "add_XOR_component"], [128, 2, 1, "", "add_cipher_output_component"], [128, 2, 1, "", "add_concatenate_component"], [128, 2, 1, "", "add_constant_component"], [128, 2, 1, "", "add_intermediate_output_component"], [128, 2, 1, "", "add_linear_layer_component"], [128, 2, 1, "", "add_mix_column_component"], [128, 2, 1, "", "add_permutation_component"], [128, 2, 1, "", "add_reverse_component"], [128, 2, 1, "", "add_rotate_component"], [128, 2, 1, "", "add_round"], [128, 2, 1, "", "add_round_key_output_component"], [128, 2, 1, "", "add_round_output_component"], [128, 2, 1, "", "add_shift_rows_component"], [128, 2, 1, "", "add_sigma_component"], [128, 2, 1, "", "add_suffix_to_components"], [128, 2, 1, "", "add_theta_keccak_component"], [128, 2, 1, "", "add_theta_xoodoo_component"], [128, 2, 1, "", "add_variable_rotate_component"], [128, 2, 1, "", "add_variable_shift_component"], [128, 2, 1, "", "add_word_permutation_component"], [128, 2, 1, "", "as_python_dictionary"], [128, 2, 1, "", "cipher_inverse"], [128, 2, 1, "", "cipher_partial_inverse"], [128, 2, 1, "", "component_from"], [128, 2, 1, "", "convert_to_compound_xor_cipher"], [128, 2, 1, "", "create_networx_graph_from_input_ids"], [128, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [128, 3, 1, "", "current_round"], [128, 3, 1, "", "current_round_number"], [128, 3, 1, "", "current_round_number_of_components"], [128, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [128, 2, 1, "", "evaluate"], [128, 2, 1, "", "evaluate_using_c"], [128, 2, 1, "", "evaluate_vectorized"], [128, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [128, 3, 1, "", "family_name"], [128, 3, 1, "", "file_name"], [128, 2, 1, "", "find_impossible_property"], [128, 2, 1, "", "generate_bit_based_c_code"], [128, 2, 1, "", "generate_evaluate_c_code_shared_library"], [128, 2, 1, "", "generate_word_based_c_code"], [128, 2, 1, "", "get_all_components"], [128, 2, 1, "", "get_all_components_ids"], [128, 2, 1, "", "get_all_inputs_bit_positions"], [128, 2, 1, "", "get_component_from_id"], [128, 2, 1, "", "get_components_in_round"], [128, 2, 1, "", "get_current_component_id"], [128, 2, 1, "", "get_model"], [128, 2, 1, "", "get_number_of_components_in_round"], [128, 2, 1, "", "get_partial_cipher"], [128, 2, 1, "", "get_round_from_component_id"], [128, 2, 1, "", "get_sizes_of_components_by_type"], [128, 3, 1, "", "id"], [128, 2, 1, "", "impossible_differential_search"], [128, 3, 1, "", "inputs"], [128, 3, 1, "", "inputs_bit_size"], [128, 2, 1, "", "inputs_size_to_dict"], [128, 2, 1, "", "is_algebraically_secure"], [128, 2, 1, "", "is_andrx"], [128, 2, 1, "", "is_arx"], [128, 2, 1, "", "is_power_of_2_word_based"], [128, 2, 1, "", "is_shift_arx"], [128, 2, 1, "", "is_spn"], [128, 2, 1, "", "make_cipher_id"], [128, 2, 1, "", "make_file_name"], [128, 3, 1, "", "number_of_rounds"], [128, 3, 1, "", "output_bit_size"], [128, 2, 1, "", "polynomial_system"], [128, 2, 1, "", "polynomial_system_at_round"], [128, 2, 1, "", "print"], [128, 2, 1, "", "print_as_python_dictionary"], [128, 2, 1, "", "print_as_python_dictionary_to_file"], [128, 2, 1, "", "print_evaluation_python_code"], [128, 2, 1, "", "print_evaluation_python_code_to_file"], [128, 2, 1, "", "print_input_information"], [128, 3, 1, "", "reference_code"], [128, 2, 1, "", "remove_key_schedule"], [128, 2, 1, "", "remove_round_component"], [128, 2, 1, "", "remove_round_component_from_id"], [128, 2, 1, "", "round_function"], [128, 3, 1, "", "rounds"], [128, 3, 1, "", "rounds_as_list"], [128, 2, 1, "", "set_file_name"], [128, 2, 1, "", "set_id"], [128, 2, 1, "", "set_inputs"], [128, 2, 1, "", "sort_cipher"], [128, 2, 1, "", "test_against_reference_code"], [128, 2, 1, "", "test_vector_check"], [128, 3, 1, "", "type"], [128, 2, 1, "", "update_input_id_links_from_component_id"], [128, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.ascon_sbox_sigma_no_matrix_permutation": [[129, 1, 1, "", "AsconSboxSigmaNoMatrixPermutation"]], "ciphers.permutations.ascon_sbox_sigma_no_matrix_permutation.AsconSboxSigmaNoMatrixPermutation": [[129, 2, 1, "", "add_AND_component"], [129, 2, 1, "", "add_FSR_component"], [129, 2, 1, "", "add_MODADD_component"], [129, 2, 1, "", "add_MODSUB_component"], [129, 2, 1, "", "add_NOT_component"], [129, 2, 1, "", "add_OR_component"], [129, 2, 1, "", "add_SBOX_component"], [129, 2, 1, "", "add_SHIFT_component"], [129, 2, 1, "", "add_XOR_component"], [129, 2, 1, "", "add_cipher_output_component"], [129, 2, 1, "", "add_concatenate_component"], [129, 2, 1, "", "add_constant_component"], [129, 2, 1, "", "add_intermediate_output_component"], [129, 2, 1, "", "add_linear_layer_component"], [129, 2, 1, "", "add_mix_column_component"], [129, 2, 1, "", "add_permutation_component"], [129, 2, 1, "", "add_reverse_component"], [129, 2, 1, "", "add_rotate_component"], [129, 2, 1, "", "add_round"], [129, 2, 1, "", "add_round_key_output_component"], [129, 2, 1, "", "add_round_output_component"], [129, 2, 1, "", "add_shift_rows_component"], [129, 2, 1, "", "add_sigma_component"], [129, 2, 1, "", "add_suffix_to_components"], [129, 2, 1, "", "add_theta_keccak_component"], [129, 2, 1, "", "add_theta_xoodoo_component"], [129, 2, 1, "", "add_variable_rotate_component"], [129, 2, 1, "", "add_variable_shift_component"], [129, 2, 1, "", "add_word_permutation_component"], [129, 2, 1, "", "as_python_dictionary"], [129, 2, 1, "", "cipher_inverse"], [129, 2, 1, "", "cipher_partial_inverse"], [129, 2, 1, "", "component_from"], [129, 2, 1, "", "convert_to_compound_xor_cipher"], [129, 2, 1, "", "create_networx_graph_from_input_ids"], [129, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [129, 3, 1, "", "current_round"], [129, 3, 1, "", "current_round_number"], [129, 3, 1, "", "current_round_number_of_components"], [129, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [129, 2, 1, "", "evaluate"], [129, 2, 1, "", "evaluate_using_c"], [129, 2, 1, "", "evaluate_vectorized"], [129, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [129, 3, 1, "", "family_name"], [129, 3, 1, "", "file_name"], [129, 2, 1, "", "find_impossible_property"], [129, 2, 1, "", "generate_bit_based_c_code"], [129, 2, 1, "", "generate_evaluate_c_code_shared_library"], [129, 2, 1, "", "generate_word_based_c_code"], [129, 2, 1, "", "get_all_components"], [129, 2, 1, "", "get_all_components_ids"], [129, 2, 1, "", "get_all_inputs_bit_positions"], [129, 2, 1, "", "get_component_from_id"], [129, 2, 1, "", "get_components_in_round"], [129, 2, 1, "", "get_current_component_id"], [129, 2, 1, "", "get_model"], [129, 2, 1, "", "get_number_of_components_in_round"], [129, 2, 1, "", "get_partial_cipher"], [129, 2, 1, "", "get_round_from_component_id"], [129, 2, 1, "", "get_sizes_of_components_by_type"], [129, 3, 1, "", "id"], [129, 2, 1, "", "impossible_differential_search"], [129, 3, 1, "", "inputs"], [129, 3, 1, "", "inputs_bit_size"], [129, 2, 1, "", "inputs_size_to_dict"], [129, 2, 1, "", "is_algebraically_secure"], [129, 2, 1, "", "is_andrx"], [129, 2, 1, "", "is_arx"], [129, 2, 1, "", "is_power_of_2_word_based"], [129, 2, 1, "", "is_shift_arx"], [129, 2, 1, "", "is_spn"], [129, 2, 1, "", "make_cipher_id"], [129, 2, 1, "", "make_file_name"], [129, 3, 1, "", "number_of_rounds"], [129, 3, 1, "", "output_bit_size"], [129, 2, 1, "", "polynomial_system"], [129, 2, 1, "", "polynomial_system_at_round"], [129, 2, 1, "", "print"], [129, 2, 1, "", "print_as_python_dictionary"], [129, 2, 1, "", "print_as_python_dictionary_to_file"], [129, 2, 1, "", "print_evaluation_python_code"], [129, 2, 1, "", "print_evaluation_python_code_to_file"], [129, 2, 1, "", "print_input_information"], [129, 3, 1, "", "reference_code"], [129, 2, 1, "", "remove_key_schedule"], [129, 2, 1, "", "remove_round_component"], [129, 2, 1, "", "remove_round_component_from_id"], [129, 2, 1, "", "round_function"], [129, 3, 1, "", "rounds"], [129, 3, 1, "", "rounds_as_list"], [129, 2, 1, "", "set_file_name"], [129, 2, 1, "", "set_id"], [129, 2, 1, "", "set_inputs"], [129, 2, 1, "", "sort_cipher"], [129, 2, 1, "", "test_against_reference_code"], [129, 2, 1, "", "test_vector_check"], [129, 3, 1, "", "type"], [129, 2, 1, "", "update_input_id_links_from_component_id"], [129, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.ascon_sbox_sigma_permutation": [[130, 1, 1, "", "AsconSboxSigmaPermutation"]], "ciphers.permutations.ascon_sbox_sigma_permutation.AsconSboxSigmaPermutation": [[130, 2, 1, "", "add_AND_component"], [130, 2, 1, "", "add_FSR_component"], [130, 2, 1, "", "add_MODADD_component"], [130, 2, 1, "", "add_MODSUB_component"], [130, 2, 1, "", "add_NOT_component"], [130, 2, 1, "", "add_OR_component"], [130, 2, 1, "", "add_SBOX_component"], [130, 2, 1, "", "add_SHIFT_component"], [130, 2, 1, "", "add_XOR_component"], [130, 2, 1, "", "add_cipher_output_component"], [130, 2, 1, "", "add_concatenate_component"], [130, 2, 1, "", "add_constant_component"], [130, 2, 1, "", "add_intermediate_output_component"], [130, 2, 1, "", "add_linear_layer_component"], [130, 2, 1, "", "add_mix_column_component"], [130, 2, 1, "", "add_permutation_component"], [130, 2, 1, "", "add_reverse_component"], [130, 2, 1, "", "add_rotate_component"], [130, 2, 1, "", "add_round"], [130, 2, 1, "", "add_round_key_output_component"], [130, 2, 1, "", "add_round_output_component"], [130, 2, 1, "", "add_shift_rows_component"], [130, 2, 1, "", "add_sigma_component"], [130, 2, 1, "", "add_suffix_to_components"], [130, 2, 1, "", "add_theta_keccak_component"], [130, 2, 1, "", "add_theta_xoodoo_component"], [130, 2, 1, "", "add_variable_rotate_component"], [130, 2, 1, "", "add_variable_shift_component"], [130, 2, 1, "", "add_word_permutation_component"], [130, 2, 1, "", "as_python_dictionary"], [130, 2, 1, "", "cipher_inverse"], [130, 2, 1, "", "cipher_partial_inverse"], [130, 2, 1, "", "component_from"], [130, 2, 1, "", "convert_to_compound_xor_cipher"], [130, 2, 1, "", "create_networx_graph_from_input_ids"], [130, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [130, 3, 1, "", "current_round"], [130, 3, 1, "", "current_round_number"], [130, 3, 1, "", "current_round_number_of_components"], [130, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [130, 2, 1, "", "evaluate"], [130, 2, 1, "", "evaluate_using_c"], [130, 2, 1, "", "evaluate_vectorized"], [130, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [130, 3, 1, "", "family_name"], [130, 3, 1, "", "file_name"], [130, 2, 1, "", "find_impossible_property"], [130, 2, 1, "", "generate_bit_based_c_code"], [130, 2, 1, "", "generate_evaluate_c_code_shared_library"], [130, 2, 1, "", "generate_word_based_c_code"], [130, 2, 1, "", "get_all_components"], [130, 2, 1, "", "get_all_components_ids"], [130, 2, 1, "", "get_all_inputs_bit_positions"], [130, 2, 1, "", "get_component_from_id"], [130, 2, 1, "", "get_components_in_round"], [130, 2, 1, "", "get_current_component_id"], [130, 2, 1, "", "get_model"], [130, 2, 1, "", "get_number_of_components_in_round"], [130, 2, 1, "", "get_partial_cipher"], [130, 2, 1, "", "get_round_from_component_id"], [130, 2, 1, "", "get_sizes_of_components_by_type"], [130, 3, 1, "", "id"], [130, 2, 1, "", "impossible_differential_search"], [130, 3, 1, "", "inputs"], [130, 3, 1, "", "inputs_bit_size"], [130, 2, 1, "", "inputs_size_to_dict"], [130, 2, 1, "", "is_algebraically_secure"], [130, 2, 1, "", "is_andrx"], [130, 2, 1, "", "is_arx"], [130, 2, 1, "", "is_power_of_2_word_based"], [130, 2, 1, "", "is_shift_arx"], [130, 2, 1, "", "is_spn"], [130, 2, 1, "", "make_cipher_id"], [130, 2, 1, "", "make_file_name"], [130, 3, 1, "", "number_of_rounds"], [130, 3, 1, "", "output_bit_size"], [130, 2, 1, "", "polynomial_system"], [130, 2, 1, "", "polynomial_system_at_round"], [130, 2, 1, "", "print"], [130, 2, 1, "", "print_as_python_dictionary"], [130, 2, 1, "", "print_as_python_dictionary_to_file"], [130, 2, 1, "", "print_evaluation_python_code"], [130, 2, 1, "", "print_evaluation_python_code_to_file"], [130, 2, 1, "", "print_input_information"], [130, 3, 1, "", "reference_code"], [130, 2, 1, "", "remove_key_schedule"], [130, 2, 1, "", "remove_round_component"], [130, 2, 1, "", "remove_round_component_from_id"], [130, 2, 1, "", "round_function"], [130, 3, 1, "", "rounds"], [130, 3, 1, "", "rounds_as_list"], [130, 2, 1, "", "set_file_name"], [130, 2, 1, "", "set_id"], [130, 2, 1, "", "set_inputs"], [130, 2, 1, "", "sort_cipher"], [130, 2, 1, "", "test_against_reference_code"], [130, 2, 1, "", "test_vector_check"], [130, 3, 1, "", "type"], [130, 2, 1, "", "update_input_id_links_from_component_id"], [130, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.chacha_permutation": [[131, 1, 1, "", "ChachaPermutation"]], "ciphers.permutations.chacha_permutation.ChachaPermutation": [[131, 2, 1, "", "add_AND_component"], [131, 2, 1, "", "add_FSR_component"], [131, 2, 1, "", "add_MODADD_component"], [131, 2, 1, "", "add_MODSUB_component"], [131, 2, 1, "", "add_NOT_component"], [131, 2, 1, "", "add_OR_component"], [131, 2, 1, "", "add_SBOX_component"], [131, 2, 1, "", "add_SHIFT_component"], [131, 2, 1, "", "add_XOR_component"], [131, 2, 1, "", "add_cipher_output_component"], [131, 2, 1, "", "add_concatenate_component"], [131, 2, 1, "", "add_constant_component"], [131, 2, 1, "", "add_intermediate_output_component"], [131, 2, 1, "", "add_linear_layer_component"], [131, 2, 1, "", "add_mix_column_component"], [131, 2, 1, "", "add_permutation_component"], [131, 2, 1, "", "add_reverse_component"], [131, 2, 1, "", "add_rotate_component"], [131, 2, 1, "", "add_round"], [131, 2, 1, "", "add_round_key_output_component"], [131, 2, 1, "", "add_round_output_component"], [131, 2, 1, "", "add_shift_rows_component"], [131, 2, 1, "", "add_sigma_component"], [131, 2, 1, "", "add_suffix_to_components"], [131, 2, 1, "", "add_theta_keccak_component"], [131, 2, 1, "", "add_theta_xoodoo_component"], [131, 2, 1, "", "add_variable_rotate_component"], [131, 2, 1, "", "add_variable_shift_component"], [131, 2, 1, "", "add_word_permutation_component"], [131, 2, 1, "", "as_python_dictionary"], [131, 2, 1, "", "bottom_half_quarter_round"], [131, 2, 1, "", "cipher_inverse"], [131, 2, 1, "", "cipher_partial_inverse"], [131, 2, 1, "", "component_from"], [131, 2, 1, "", "convert_to_compound_xor_cipher"], [131, 2, 1, "", "create_networx_graph_from_input_ids"], [131, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [131, 3, 1, "", "current_round"], [131, 3, 1, "", "current_round_number"], [131, 3, 1, "", "current_round_number_of_components"], [131, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [131, 2, 1, "", "evaluate"], [131, 2, 1, "", "evaluate_using_c"], [131, 2, 1, "", "evaluate_vectorized"], [131, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [131, 3, 1, "", "family_name"], [131, 3, 1, "", "file_name"], [131, 2, 1, "", "find_impossible_property"], [131, 2, 1, "", "generate_bit_based_c_code"], [131, 2, 1, "", "generate_evaluate_c_code_shared_library"], [131, 2, 1, "", "generate_word_based_c_code"], [131, 2, 1, "", "get_all_components"], [131, 2, 1, "", "get_all_components_ids"], [131, 2, 1, "", "get_all_inputs_bit_positions"], [131, 2, 1, "", "get_component_from_id"], [131, 2, 1, "", "get_components_in_round"], [131, 2, 1, "", "get_current_component_id"], [131, 2, 1, "", "get_model"], [131, 2, 1, "", "get_number_of_components_in_round"], [131, 2, 1, "", "get_partial_cipher"], [131, 2, 1, "", "get_round_from_component_id"], [131, 2, 1, "", "get_sizes_of_components_by_type"], [131, 3, 1, "", "id"], [131, 2, 1, "", "impossible_differential_search"], [131, 3, 1, "", "inputs"], [131, 3, 1, "", "inputs_bit_size"], [131, 2, 1, "", "inputs_size_to_dict"], [131, 2, 1, "", "is_algebraically_secure"], [131, 2, 1, "", "is_andrx"], [131, 2, 1, "", "is_arx"], [131, 2, 1, "", "is_power_of_2_word_based"], [131, 2, 1, "", "is_shift_arx"], [131, 2, 1, "", "is_spn"], [131, 2, 1, "", "make_cipher_id"], [131, 2, 1, "", "make_file_name"], [131, 3, 1, "", "number_of_rounds"], [131, 3, 1, "", "output_bit_size"], [131, 2, 1, "", "polynomial_system"], [131, 2, 1, "", "polynomial_system_at_round"], [131, 2, 1, "", "print"], [131, 2, 1, "", "print_as_python_dictionary"], [131, 2, 1, "", "print_as_python_dictionary_to_file"], [131, 2, 1, "", "print_evaluation_python_code"], [131, 2, 1, "", "print_evaluation_python_code_to_file"], [131, 2, 1, "", "print_input_information"], [131, 3, 1, "", "reference_code"], [131, 2, 1, "", "remove_key_schedule"], [131, 2, 1, "", "remove_round_component"], [131, 2, 1, "", "remove_round_component_from_id"], [131, 3, 1, "", "rounds"], [131, 3, 1, "", "rounds_as_list"], [131, 2, 1, "", "set_file_name"], [131, 2, 1, "", "set_id"], [131, 2, 1, "", "set_inputs"], [131, 2, 1, "", "sort_cipher"], [131, 2, 1, "", "test_against_reference_code"], [131, 2, 1, "", "test_vector_check"], [131, 2, 1, "", "top_half_quarter_round"], [131, 3, 1, "", "type"], [131, 2, 1, "", "update_input_id_links_from_component_id"], [131, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gaston_permutation": [[132, 1, 1, "", "GastonPermutation"]], "ciphers.permutations.gaston_permutation.GastonPermutation": [[132, 2, 1, "", "add_AND_component"], [132, 2, 1, "", "add_FSR_component"], [132, 2, 1, "", "add_MODADD_component"], [132, 2, 1, "", "add_MODSUB_component"], [132, 2, 1, "", "add_NOT_component"], [132, 2, 1, "", "add_OR_component"], [132, 2, 1, "", "add_SBOX_component"], [132, 2, 1, "", "add_SHIFT_component"], [132, 2, 1, "", "add_XOR_component"], [132, 2, 1, "", "add_cipher_output_component"], [132, 2, 1, "", "add_concatenate_component"], [132, 2, 1, "", "add_constant_component"], [132, 2, 1, "", "add_intermediate_output_component"], [132, 2, 1, "", "add_linear_layer_component"], [132, 2, 1, "", "add_mix_column_component"], [132, 2, 1, "", "add_permutation_component"], [132, 2, 1, "", "add_reverse_component"], [132, 2, 1, "", "add_rotate_component"], [132, 2, 1, "", "add_round"], [132, 2, 1, "", "add_round_key_output_component"], [132, 2, 1, "", "add_round_output_component"], [132, 2, 1, "", "add_shift_rows_component"], [132, 2, 1, "", "add_sigma_component"], [132, 2, 1, "", "add_suffix_to_components"], [132, 2, 1, "", "add_theta_keccak_component"], [132, 2, 1, "", "add_theta_xoodoo_component"], [132, 2, 1, "", "add_variable_rotate_component"], [132, 2, 1, "", "add_variable_shift_component"], [132, 2, 1, "", "add_word_permutation_component"], [132, 2, 1, "", "as_python_dictionary"], [132, 2, 1, "", "cipher_inverse"], [132, 2, 1, "", "cipher_partial_inverse"], [132, 2, 1, "", "component_from"], [132, 2, 1, "", "convert_to_compound_xor_cipher"], [132, 2, 1, "", "create_networx_graph_from_input_ids"], [132, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [132, 3, 1, "", "current_round"], [132, 3, 1, "", "current_round_number"], [132, 3, 1, "", "current_round_number_of_components"], [132, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [132, 2, 1, "", "evaluate"], [132, 2, 1, "", "evaluate_using_c"], [132, 2, 1, "", "evaluate_vectorized"], [132, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [132, 3, 1, "", "family_name"], [132, 3, 1, "", "file_name"], [132, 2, 1, "", "find_impossible_property"], [132, 2, 1, "", "gaston_chi"], [132, 2, 1, "", "gaston_iota"], [132, 2, 1, "", "gaston_rho_east"], [132, 2, 1, "", "gaston_rho_west"], [132, 2, 1, "", "gaston_round_function"], [132, 2, 1, "", "gaston_theta"], [132, 2, 1, "", "generate_bit_based_c_code"], [132, 2, 1, "", "generate_evaluate_c_code_shared_library"], [132, 2, 1, "", "generate_word_based_c_code"], [132, 2, 1, "", "get_all_components"], [132, 2, 1, "", "get_all_components_ids"], [132, 2, 1, "", "get_all_inputs_bit_positions"], [132, 2, 1, "", "get_component_from_id"], [132, 2, 1, "", "get_components_in_round"], [132, 2, 1, "", "get_current_component_id"], [132, 2, 1, "", "get_model"], [132, 2, 1, "", "get_number_of_components_in_round"], [132, 2, 1, "", "get_partial_cipher"], [132, 2, 1, "", "get_round_from_component_id"], [132, 2, 1, "", "get_sizes_of_components_by_type"], [132, 3, 1, "", "id"], [132, 2, 1, "", "impossible_differential_search"], [132, 3, 1, "", "inputs"], [132, 3, 1, "", "inputs_bit_size"], [132, 2, 1, "", "inputs_size_to_dict"], [132, 2, 1, "", "is_algebraically_secure"], [132, 2, 1, "", "is_andrx"], [132, 2, 1, "", "is_arx"], [132, 2, 1, "", "is_power_of_2_word_based"], [132, 2, 1, "", "is_shift_arx"], [132, 2, 1, "", "is_spn"], [132, 2, 1, "", "make_cipher_id"], [132, 2, 1, "", "make_file_name"], [132, 3, 1, "", "number_of_rounds"], [132, 3, 1, "", "output_bit_size"], [132, 2, 1, "", "polynomial_system"], [132, 2, 1, "", "polynomial_system_at_round"], [132, 2, 1, "", "print"], [132, 2, 1, "", "print_as_python_dictionary"], [132, 2, 1, "", "print_as_python_dictionary_to_file"], [132, 2, 1, "", "print_evaluation_python_code"], [132, 2, 1, "", "print_evaluation_python_code_to_file"], [132, 2, 1, "", "print_input_information"], [132, 3, 1, "", "reference_code"], [132, 2, 1, "", "remove_key_schedule"], [132, 2, 1, "", "remove_round_component"], [132, 2, 1, "", "remove_round_component_from_id"], [132, 3, 1, "", "rounds"], [132, 3, 1, "", "rounds_as_list"], [132, 2, 1, "", "set_file_name"], [132, 2, 1, "", "set_id"], [132, 2, 1, "", "set_inputs"], [132, 2, 1, "", "sort_cipher"], [132, 2, 1, "", "test_against_reference_code"], [132, 2, 1, "", "test_vector_check"], [132, 3, 1, "", "type"], [132, 2, 1, "", "update_input_id_links_from_component_id"], [132, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gaston_sbox_permutation": [[133, 1, 1, "", "GastonSboxPermutation"]], "ciphers.permutations.gaston_sbox_permutation.GastonSboxPermutation": [[133, 2, 1, "", "add_AND_component"], [133, 2, 1, "", "add_FSR_component"], [133, 2, 1, "", "add_MODADD_component"], [133, 2, 1, "", "add_MODSUB_component"], [133, 2, 1, "", "add_NOT_component"], [133, 2, 1, "", "add_OR_component"], [133, 2, 1, "", "add_SBOX_component"], [133, 2, 1, "", "add_SHIFT_component"], [133, 2, 1, "", "add_XOR_component"], [133, 2, 1, "", "add_cipher_output_component"], [133, 2, 1, "", "add_concatenate_component"], [133, 2, 1, "", "add_constant_component"], [133, 2, 1, "", "add_intermediate_output_component"], [133, 2, 1, "", "add_linear_layer_component"], [133, 2, 1, "", "add_mix_column_component"], [133, 2, 1, "", "add_permutation_component"], [133, 2, 1, "", "add_reverse_component"], [133, 2, 1, "", "add_rotate_component"], [133, 2, 1, "", "add_round"], [133, 2, 1, "", "add_round_key_output_component"], [133, 2, 1, "", "add_round_output_component"], [133, 2, 1, "", "add_shift_rows_component"], [133, 2, 1, "", "add_sigma_component"], [133, 2, 1, "", "add_suffix_to_components"], [133, 2, 1, "", "add_theta_keccak_component"], [133, 2, 1, "", "add_theta_xoodoo_component"], [133, 2, 1, "", "add_variable_rotate_component"], [133, 2, 1, "", "add_variable_shift_component"], [133, 2, 1, "", "add_word_permutation_component"], [133, 2, 1, "", "as_python_dictionary"], [133, 2, 1, "", "cipher_inverse"], [133, 2, 1, "", "cipher_partial_inverse"], [133, 2, 1, "", "component_from"], [133, 2, 1, "", "convert_to_compound_xor_cipher"], [133, 2, 1, "", "create_networx_graph_from_input_ids"], [133, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [133, 3, 1, "", "current_round"], [133, 3, 1, "", "current_round_number"], [133, 3, 1, "", "current_round_number_of_components"], [133, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [133, 2, 1, "", "evaluate"], [133, 2, 1, "", "evaluate_using_c"], [133, 2, 1, "", "evaluate_vectorized"], [133, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [133, 3, 1, "", "family_name"], [133, 3, 1, "", "file_name"], [133, 2, 1, "", "find_impossible_property"], [133, 2, 1, "", "gaston_chi_sbox"], [133, 2, 1, "", "gaston_iota"], [133, 2, 1, "", "gaston_rho_east"], [133, 2, 1, "", "gaston_rho_west"], [133, 2, 1, "", "gaston_round_function"], [133, 2, 1, "", "gaston_theta"], [133, 2, 1, "", "generate_bit_based_c_code"], [133, 2, 1, "", "generate_evaluate_c_code_shared_library"], [133, 2, 1, "", "generate_word_based_c_code"], [133, 2, 1, "", "get_all_components"], [133, 2, 1, "", "get_all_components_ids"], [133, 2, 1, "", "get_all_inputs_bit_positions"], [133, 2, 1, "", "get_component_from_id"], [133, 2, 1, "", "get_components_in_round"], [133, 2, 1, "", "get_current_component_id"], [133, 2, 1, "", "get_model"], [133, 2, 1, "", "get_number_of_components_in_round"], [133, 2, 1, "", "get_partial_cipher"], [133, 2, 1, "", "get_round_from_component_id"], [133, 2, 1, "", "get_sizes_of_components_by_type"], [133, 3, 1, "", "id"], [133, 2, 1, "", "impossible_differential_search"], [133, 3, 1, "", "inputs"], [133, 3, 1, "", "inputs_bit_size"], [133, 2, 1, "", "inputs_size_to_dict"], [133, 2, 1, "", "is_algebraically_secure"], [133, 2, 1, "", "is_andrx"], [133, 2, 1, "", "is_arx"], [133, 2, 1, "", "is_power_of_2_word_based"], [133, 2, 1, "", "is_shift_arx"], [133, 2, 1, "", "is_spn"], [133, 2, 1, "", "make_cipher_id"], [133, 2, 1, "", "make_file_name"], [133, 3, 1, "", "number_of_rounds"], [133, 3, 1, "", "output_bit_size"], [133, 2, 1, "", "polynomial_system"], [133, 2, 1, "", "polynomial_system_at_round"], [133, 2, 1, "", "print"], [133, 2, 1, "", "print_as_python_dictionary"], [133, 2, 1, "", "print_as_python_dictionary_to_file"], [133, 2, 1, "", "print_evaluation_python_code"], [133, 2, 1, "", "print_evaluation_python_code_to_file"], [133, 2, 1, "", "print_input_information"], [133, 3, 1, "", "reference_code"], [133, 2, 1, "", "remove_key_schedule"], [133, 2, 1, "", "remove_round_component"], [133, 2, 1, "", "remove_round_component_from_id"], [133, 3, 1, "", "rounds"], [133, 3, 1, "", "rounds_as_list"], [133, 2, 1, "", "set_file_name"], [133, 2, 1, "", "set_id"], [133, 2, 1, "", "set_inputs"], [133, 2, 1, "", "sort_cipher"], [133, 2, 1, "", "test_against_reference_code"], [133, 2, 1, "", "test_vector_check"], [133, 3, 1, "", "type"], [133, 2, 1, "", "update_input_id_links_from_component_id"], [133, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gift_permutation": [[134, 1, 1, "", "GiftPermutation"]], "ciphers.permutations.gift_permutation.GiftPermutation": [[134, 2, 1, "", "add_AND_component"], [134, 2, 1, "", "add_FSR_component"], [134, 2, 1, "", "add_MODADD_component"], [134, 2, 1, "", "add_MODSUB_component"], [134, 2, 1, "", "add_NOT_component"], [134, 2, 1, "", "add_OR_component"], [134, 2, 1, "", "add_SBOX_component"], [134, 2, 1, "", "add_SHIFT_component"], [134, 2, 1, "", "add_XOR_component"], [134, 2, 1, "", "add_cipher_output_component"], [134, 2, 1, "", "add_concatenate_component"], [134, 2, 1, "", "add_constant_component"], [134, 2, 1, "", "add_intermediate_output_component"], [134, 2, 1, "", "add_linear_layer_component"], [134, 2, 1, "", "add_mix_column_component"], [134, 2, 1, "", "add_permutation_component"], [134, 2, 1, "", "add_reverse_component"], [134, 2, 1, "", "add_rotate_component"], [134, 2, 1, "", "add_round"], [134, 2, 1, "", "add_round_key_output_component"], [134, 2, 1, "", "add_round_output_component"], [134, 2, 1, "", "add_shift_rows_component"], [134, 2, 1, "", "add_sigma_component"], [134, 2, 1, "", "add_suffix_to_components"], [134, 2, 1, "", "add_theta_keccak_component"], [134, 2, 1, "", "add_theta_xoodoo_component"], [134, 2, 1, "", "add_variable_rotate_component"], [134, 2, 1, "", "add_variable_shift_component"], [134, 2, 1, "", "add_word_permutation_component"], [134, 2, 1, "", "as_python_dictionary"], [134, 2, 1, "", "cipher_inverse"], [134, 2, 1, "", "cipher_partial_inverse"], [134, 2, 1, "", "component_from"], [134, 2, 1, "", "convert_to_compound_xor_cipher"], [134, 2, 1, "", "create_networx_graph_from_input_ids"], [134, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [134, 3, 1, "", "current_round"], [134, 3, 1, "", "current_round_number"], [134, 3, 1, "", "current_round_number_of_components"], [134, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [134, 2, 1, "", "evaluate"], [134, 2, 1, "", "evaluate_using_c"], [134, 2, 1, "", "evaluate_vectorized"], [134, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [134, 3, 1, "", "family_name"], [134, 3, 1, "", "file_name"], [134, 2, 1, "", "find_impossible_property"], [134, 2, 1, "", "generate_bit_based_c_code"], [134, 2, 1, "", "generate_evaluate_c_code_shared_library"], [134, 2, 1, "", "generate_word_based_c_code"], [134, 2, 1, "", "get_all_components"], [134, 2, 1, "", "get_all_components_ids"], [134, 2, 1, "", "get_all_inputs_bit_positions"], [134, 2, 1, "", "get_component_from_id"], [134, 2, 1, "", "get_components_in_round"], [134, 2, 1, "", "get_current_component_id"], [134, 2, 1, "", "get_model"], [134, 2, 1, "", "get_number_of_components_in_round"], [134, 2, 1, "", "get_partial_cipher"], [134, 2, 1, "", "get_round_from_component_id"], [134, 2, 1, "", "get_sizes_of_components_by_type"], [134, 3, 1, "", "id"], [134, 2, 1, "", "impossible_differential_search"], [134, 3, 1, "", "inputs"], [134, 3, 1, "", "inputs_bit_size"], [134, 2, 1, "", "inputs_size_to_dict"], [134, 2, 1, "", "is_algebraically_secure"], [134, 2, 1, "", "is_andrx"], [134, 2, 1, "", "is_arx"], [134, 2, 1, "", "is_power_of_2_word_based"], [134, 2, 1, "", "is_shift_arx"], [134, 2, 1, "", "is_spn"], [134, 2, 1, "", "key_schedule"], [134, 2, 1, "", "make_cipher_id"], [134, 2, 1, "", "make_file_name"], [134, 3, 1, "", "number_of_rounds"], [134, 3, 1, "", "output_bit_size"], [134, 2, 1, "", "polynomial_system"], [134, 2, 1, "", "polynomial_system_at_round"], [134, 2, 1, "", "print"], [134, 2, 1, "", "print_as_python_dictionary"], [134, 2, 1, "", "print_as_python_dictionary_to_file"], [134, 2, 1, "", "print_evaluation_python_code"], [134, 2, 1, "", "print_evaluation_python_code_to_file"], [134, 2, 1, "", "print_input_information"], [134, 3, 1, "", "reference_code"], [134, 2, 1, "", "remove_key_schedule"], [134, 2, 1, "", "remove_round_component"], [134, 2, 1, "", "remove_round_component_from_id"], [134, 2, 1, "", "round_function"], [134, 3, 1, "", "rounds"], [134, 3, 1, "", "rounds_as_list"], [134, 2, 1, "", "set_file_name"], [134, 2, 1, "", "set_id"], [134, 2, 1, "", "set_inputs"], [134, 2, 1, "", "sort_cipher"], [134, 2, 1, "", "test_against_reference_code"], [134, 2, 1, "", "test_vector_check"], [134, 3, 1, "", "type"], [134, 2, 1, "", "update_input_id_links_from_component_id"], [134, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gift_sbox_permutation": [[135, 1, 1, "", "GiftSboxPermutation"]], "ciphers.permutations.gift_sbox_permutation.GiftSboxPermutation": [[135, 2, 1, "", "add_AND_component"], [135, 2, 1, "", "add_FSR_component"], [135, 2, 1, "", "add_MODADD_component"], [135, 2, 1, "", "add_MODSUB_component"], [135, 2, 1, "", "add_NOT_component"], [135, 2, 1, "", "add_OR_component"], [135, 2, 1, "", "add_SBOX_component"], [135, 2, 1, "", "add_SHIFT_component"], [135, 2, 1, "", "add_XOR_component"], [135, 2, 1, "", "add_cipher_output_component"], [135, 2, 1, "", "add_concatenate_component"], [135, 2, 1, "", "add_constant_component"], [135, 2, 1, "", "add_intermediate_output_component"], [135, 2, 1, "", "add_linear_layer_component"], [135, 2, 1, "", "add_mix_column_component"], [135, 2, 1, "", "add_permutation_component"], [135, 2, 1, "", "add_reverse_component"], [135, 2, 1, "", "add_rotate_component"], [135, 2, 1, "", "add_round"], [135, 2, 1, "", "add_round_key_output_component"], [135, 2, 1, "", "add_round_output_component"], [135, 2, 1, "", "add_shift_rows_component"], [135, 2, 1, "", "add_sigma_component"], [135, 2, 1, "", "add_suffix_to_components"], [135, 2, 1, "", "add_theta_keccak_component"], [135, 2, 1, "", "add_theta_xoodoo_component"], [135, 2, 1, "", "add_variable_rotate_component"], [135, 2, 1, "", "add_variable_shift_component"], [135, 2, 1, "", "add_word_permutation_component"], [135, 2, 1, "", "as_python_dictionary"], [135, 2, 1, "", "cipher_inverse"], [135, 2, 1, "", "cipher_partial_inverse"], [135, 2, 1, "", "component_from"], [135, 2, 1, "", "convert_to_compound_xor_cipher"], [135, 2, 1, "", "create_networx_graph_from_input_ids"], [135, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [135, 3, 1, "", "current_round"], [135, 3, 1, "", "current_round_number"], [135, 3, 1, "", "current_round_number_of_components"], [135, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [135, 2, 1, "", "evaluate"], [135, 2, 1, "", "evaluate_using_c"], [135, 2, 1, "", "evaluate_vectorized"], [135, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [135, 3, 1, "", "family_name"], [135, 3, 1, "", "file_name"], [135, 2, 1, "", "find_impossible_property"], [135, 2, 1, "", "generate_bit_based_c_code"], [135, 2, 1, "", "generate_evaluate_c_code_shared_library"], [135, 2, 1, "", "generate_word_based_c_code"], [135, 2, 1, "", "get_all_components"], [135, 2, 1, "", "get_all_components_ids"], [135, 2, 1, "", "get_all_inputs_bit_positions"], [135, 2, 1, "", "get_component_from_id"], [135, 2, 1, "", "get_components_in_round"], [135, 2, 1, "", "get_current_component_id"], [135, 2, 1, "", "get_model"], [135, 2, 1, "", "get_number_of_components_in_round"], [135, 2, 1, "", "get_partial_cipher"], [135, 2, 1, "", "get_round_from_component_id"], [135, 2, 1, "", "get_sizes_of_components_by_type"], [135, 3, 1, "", "id"], [135, 2, 1, "", "impossible_differential_search"], [135, 3, 1, "", "inputs"], [135, 3, 1, "", "inputs_bit_size"], [135, 2, 1, "", "inputs_size_to_dict"], [135, 2, 1, "", "is_algebraically_secure"], [135, 2, 1, "", "is_andrx"], [135, 2, 1, "", "is_arx"], [135, 2, 1, "", "is_power_of_2_word_based"], [135, 2, 1, "", "is_shift_arx"], [135, 2, 1, "", "is_spn"], [135, 2, 1, "", "key_schedule"], [135, 2, 1, "", "make_cipher_id"], [135, 2, 1, "", "make_file_name"], [135, 3, 1, "", "number_of_rounds"], [135, 3, 1, "", "output_bit_size"], [135, 2, 1, "", "polynomial_system"], [135, 2, 1, "", "polynomial_system_at_round"], [135, 2, 1, "", "print"], [135, 2, 1, "", "print_as_python_dictionary"], [135, 2, 1, "", "print_as_python_dictionary_to_file"], [135, 2, 1, "", "print_evaluation_python_code"], [135, 2, 1, "", "print_evaluation_python_code_to_file"], [135, 2, 1, "", "print_input_information"], [135, 3, 1, "", "reference_code"], [135, 2, 1, "", "remove_key_schedule"], [135, 2, 1, "", "remove_round_component"], [135, 2, 1, "", "remove_round_component_from_id"], [135, 2, 1, "", "round_function"], [135, 3, 1, "", "rounds"], [135, 3, 1, "", "rounds_as_list"], [135, 2, 1, "", "set_file_name"], [135, 2, 1, "", "set_id"], [135, 2, 1, "", "set_inputs"], [135, 2, 1, "", "sort_cipher"], [135, 2, 1, "", "test_against_reference_code"], [135, 2, 1, "", "test_vector_check"], [135, 3, 1, "", "type"], [135, 2, 1, "", "update_input_id_links_from_component_id"], [135, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gimli_permutation": [[136, 1, 1, "", "GimliPermutation"], [136, 4, 1, "", "big_swap"], [136, 4, 1, "", "small_swap"]], "ciphers.permutations.gimli_permutation.GimliPermutation": [[136, 2, 1, "", "add_AND_component"], [136, 2, 1, "", "add_FSR_component"], [136, 2, 1, "", "add_MODADD_component"], [136, 2, 1, "", "add_MODSUB_component"], [136, 2, 1, "", "add_NOT_component"], [136, 2, 1, "", "add_OR_component"], [136, 2, 1, "", "add_SBOX_component"], [136, 2, 1, "", "add_SHIFT_component"], [136, 2, 1, "", "add_XOR_component"], [136, 2, 1, "", "add_cipher_output_component"], [136, 2, 1, "", "add_concatenate_component"], [136, 2, 1, "", "add_constant_component"], [136, 2, 1, "", "add_intermediate_output_component"], [136, 2, 1, "", "add_linear_layer_component"], [136, 2, 1, "", "add_mix_column_component"], [136, 2, 1, "", "add_permutation_component"], [136, 2, 1, "", "add_reverse_component"], [136, 2, 1, "", "add_rotate_component"], [136, 2, 1, "", "add_round"], [136, 2, 1, "", "add_round_key_output_component"], [136, 2, 1, "", "add_round_output_component"], [136, 2, 1, "", "add_shift_rows_component"], [136, 2, 1, "", "add_sigma_component"], [136, 2, 1, "", "add_suffix_to_components"], [136, 2, 1, "", "add_theta_keccak_component"], [136, 2, 1, "", "add_theta_xoodoo_component"], [136, 2, 1, "", "add_variable_rotate_component"], [136, 2, 1, "", "add_variable_shift_component"], [136, 2, 1, "", "add_word_permutation_component"], [136, 2, 1, "", "as_python_dictionary"], [136, 2, 1, "", "cipher_inverse"], [136, 2, 1, "", "cipher_partial_inverse"], [136, 2, 1, "", "component_from"], [136, 2, 1, "", "convert_to_compound_xor_cipher"], [136, 2, 1, "", "create_networx_graph_from_input_ids"], [136, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [136, 3, 1, "", "current_round"], [136, 3, 1, "", "current_round_number"], [136, 3, 1, "", "current_round_number_of_components"], [136, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [136, 2, 1, "", "evaluate"], [136, 2, 1, "", "evaluate_using_c"], [136, 2, 1, "", "evaluate_vectorized"], [136, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [136, 3, 1, "", "family_name"], [136, 3, 1, "", "file_name"], [136, 2, 1, "", "find_impossible_property"], [136, 2, 1, "", "generate_bit_based_c_code"], [136, 2, 1, "", "generate_evaluate_c_code_shared_library"], [136, 2, 1, "", "generate_word_based_c_code"], [136, 2, 1, "", "get_all_components"], [136, 2, 1, "", "get_all_components_ids"], [136, 2, 1, "", "get_all_inputs_bit_positions"], [136, 2, 1, "", "get_component_from_id"], [136, 2, 1, "", "get_components_in_round"], [136, 2, 1, "", "get_current_component_id"], [136, 2, 1, "", "get_model"], [136, 2, 1, "", "get_number_of_components_in_round"], [136, 2, 1, "", "get_partial_cipher"], [136, 2, 1, "", "get_round_from_component_id"], [136, 2, 1, "", "get_sizes_of_components_by_type"], [136, 3, 1, "", "id"], [136, 2, 1, "", "impossible_differential_search"], [136, 3, 1, "", "inputs"], [136, 3, 1, "", "inputs_bit_size"], [136, 2, 1, "", "inputs_size_to_dict"], [136, 2, 1, "", "is_algebraically_secure"], [136, 2, 1, "", "is_andrx"], [136, 2, 1, "", "is_arx"], [136, 2, 1, "", "is_power_of_2_word_based"], [136, 2, 1, "", "is_shift_arx"], [136, 2, 1, "", "is_spn"], [136, 2, 1, "", "make_cipher_id"], [136, 2, 1, "", "make_file_name"], [136, 3, 1, "", "number_of_rounds"], [136, 3, 1, "", "output_bit_size"], [136, 2, 1, "", "polynomial_system"], [136, 2, 1, "", "polynomial_system_at_round"], [136, 2, 1, "", "print"], [136, 2, 1, "", "print_as_python_dictionary"], [136, 2, 1, "", "print_as_python_dictionary_to_file"], [136, 2, 1, "", "print_evaluation_python_code"], [136, 2, 1, "", "print_evaluation_python_code_to_file"], [136, 2, 1, "", "print_input_information"], [136, 3, 1, "", "reference_code"], [136, 2, 1, "", "remove_key_schedule"], [136, 2, 1, "", "remove_round_component"], [136, 2, 1, "", "remove_round_component_from_id"], [136, 2, 1, "", "round_constant"], [136, 2, 1, "", "round_function"], [136, 3, 1, "", "rounds"], [136, 3, 1, "", "rounds_as_list"], [136, 2, 1, "", "set_file_name"], [136, 2, 1, "", "set_id"], [136, 2, 1, "", "set_inputs"], [136, 2, 1, "", "sort_cipher"], [136, 2, 1, "", "sp_box"], [136, 2, 1, "", "test_against_reference_code"], [136, 2, 1, "", "test_vector_check"], [136, 3, 1, "", "type"], [136, 2, 1, "", "update_input_id_links_from_component_id"], [136, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gimli_sbox_permutation": [[137, 1, 1, "", "GimliSboxPermutation"], [137, 4, 1, "", "big_swap"], [137, 4, 1, "", "small_swap"]], "ciphers.permutations.gimli_sbox_permutation.GimliSboxPermutation": [[137, 2, 1, "", "add_AND_component"], [137, 2, 1, "", "add_FSR_component"], [137, 2, 1, "", "add_MODADD_component"], [137, 2, 1, "", "add_MODSUB_component"], [137, 2, 1, "", "add_NOT_component"], [137, 2, 1, "", "add_OR_component"], [137, 2, 1, "", "add_SBOX_component"], [137, 2, 1, "", "add_SHIFT_component"], [137, 2, 1, "", "add_XOR_component"], [137, 2, 1, "", "add_cipher_output_component"], [137, 2, 1, "", "add_concatenate_component"], [137, 2, 1, "", "add_constant_component"], [137, 2, 1, "", "add_intermediate_output_component"], [137, 2, 1, "", "add_linear_layer_component"], [137, 2, 1, "", "add_mix_column_component"], [137, 2, 1, "", "add_permutation_component"], [137, 2, 1, "", "add_reverse_component"], [137, 2, 1, "", "add_rotate_component"], [137, 2, 1, "", "add_round"], [137, 2, 1, "", "add_round_key_output_component"], [137, 2, 1, "", "add_round_output_component"], [137, 2, 1, "", "add_shift_rows_component"], [137, 2, 1, "", "add_sigma_component"], [137, 2, 1, "", "add_suffix_to_components"], [137, 2, 1, "", "add_theta_keccak_component"], [137, 2, 1, "", "add_theta_xoodoo_component"], [137, 2, 1, "", "add_variable_rotate_component"], [137, 2, 1, "", "add_variable_shift_component"], [137, 2, 1, "", "add_word_permutation_component"], [137, 2, 1, "", "as_python_dictionary"], [137, 2, 1, "", "cipher_inverse"], [137, 2, 1, "", "cipher_partial_inverse"], [137, 2, 1, "", "component_from"], [137, 2, 1, "", "convert_to_compound_xor_cipher"], [137, 2, 1, "", "create_networx_graph_from_input_ids"], [137, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [137, 3, 1, "", "current_round"], [137, 3, 1, "", "current_round_number"], [137, 3, 1, "", "current_round_number_of_components"], [137, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [137, 2, 1, "", "evaluate"], [137, 2, 1, "", "evaluate_using_c"], [137, 2, 1, "", "evaluate_vectorized"], [137, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [137, 3, 1, "", "family_name"], [137, 3, 1, "", "file_name"], [137, 2, 1, "", "find_impossible_property"], [137, 2, 1, "", "generate_bit_based_c_code"], [137, 2, 1, "", "generate_evaluate_c_code_shared_library"], [137, 2, 1, "", "generate_word_based_c_code"], [137, 2, 1, "", "get_all_components"], [137, 2, 1, "", "get_all_components_ids"], [137, 2, 1, "", "get_all_inputs_bit_positions"], [137, 2, 1, "", "get_component_from_id"], [137, 2, 1, "", "get_components_in_round"], [137, 2, 1, "", "get_current_component_id"], [137, 2, 1, "", "get_model"], [137, 2, 1, "", "get_number_of_components_in_round"], [137, 2, 1, "", "get_partial_cipher"], [137, 2, 1, "", "get_round_from_component_id"], [137, 2, 1, "", "get_sizes_of_components_by_type"], [137, 3, 1, "", "id"], [137, 2, 1, "", "impossible_differential_search"], [137, 3, 1, "", "inputs"], [137, 3, 1, "", "inputs_bit_size"], [137, 2, 1, "", "inputs_size_to_dict"], [137, 2, 1, "", "is_algebraically_secure"], [137, 2, 1, "", "is_andrx"], [137, 2, 1, "", "is_arx"], [137, 2, 1, "", "is_power_of_2_word_based"], [137, 2, 1, "", "is_shift_arx"], [137, 2, 1, "", "is_spn"], [137, 2, 1, "", "make_cipher_id"], [137, 2, 1, "", "make_file_name"], [137, 3, 1, "", "number_of_rounds"], [137, 3, 1, "", "output_bit_size"], [137, 2, 1, "", "polynomial_system"], [137, 2, 1, "", "polynomial_system_at_round"], [137, 2, 1, "", "print"], [137, 2, 1, "", "print_as_python_dictionary"], [137, 2, 1, "", "print_as_python_dictionary_to_file"], [137, 2, 1, "", "print_evaluation_python_code"], [137, 2, 1, "", "print_evaluation_python_code_to_file"], [137, 2, 1, "", "print_input_information"], [137, 3, 1, "", "reference_code"], [137, 2, 1, "", "remove_key_schedule"], [137, 2, 1, "", "remove_round_component"], [137, 2, 1, "", "remove_round_component_from_id"], [137, 2, 1, "", "round_constant"], [137, 2, 1, "", "round_function"], [137, 3, 1, "", "rounds"], [137, 3, 1, "", "rounds_as_list"], [137, 2, 1, "", "set_file_name"], [137, 2, 1, "", "set_id"], [137, 2, 1, "", "set_inputs"], [137, 2, 1, "", "sort_cipher"], [137, 2, 1, "", "sp_box"], [137, 2, 1, "", "test_against_reference_code"], [137, 2, 1, "", "test_vector_check"], [137, 3, 1, "", "type"], [137, 2, 1, "", "update_input_id_links_from_component_id"], [137, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.grain_core_permutation": [[138, 1, 1, "", "GrainCorePermutation"]], "ciphers.permutations.grain_core_permutation.GrainCorePermutation": [[138, 2, 1, "", "add_AND_component"], [138, 2, 1, "", "add_FSR_component"], [138, 2, 1, "", "add_MODADD_component"], [138, 2, 1, "", "add_MODSUB_component"], [138, 2, 1, "", "add_NOT_component"], [138, 2, 1, "", "add_OR_component"], [138, 2, 1, "", "add_SBOX_component"], [138, 2, 1, "", "add_SHIFT_component"], [138, 2, 1, "", "add_XOR_component"], [138, 2, 1, "", "add_cipher_output_component"], [138, 2, 1, "", "add_concatenate_component"], [138, 2, 1, "", "add_constant_component"], [138, 2, 1, "", "add_intermediate_output_component"], [138, 2, 1, "", "add_linear_layer_component"], [138, 2, 1, "", "add_mix_column_component"], [138, 2, 1, "", "add_permutation_component"], [138, 2, 1, "", "add_reverse_component"], [138, 2, 1, "", "add_rotate_component"], [138, 2, 1, "", "add_round"], [138, 2, 1, "", "add_round_key_output_component"], [138, 2, 1, "", "add_round_output_component"], [138, 2, 1, "", "add_shift_rows_component"], [138, 2, 1, "", "add_sigma_component"], [138, 2, 1, "", "add_suffix_to_components"], [138, 2, 1, "", "add_theta_keccak_component"], [138, 2, 1, "", "add_theta_xoodoo_component"], [138, 2, 1, "", "add_variable_rotate_component"], [138, 2, 1, "", "add_variable_shift_component"], [138, 2, 1, "", "add_word_permutation_component"], [138, 2, 1, "", "as_python_dictionary"], [138, 2, 1, "", "cipher_inverse"], [138, 2, 1, "", "cipher_partial_inverse"], [138, 2, 1, "", "component_from"], [138, 2, 1, "", "convert_to_compound_xor_cipher"], [138, 2, 1, "", "create_networx_graph_from_input_ids"], [138, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [138, 3, 1, "", "current_round"], [138, 3, 1, "", "current_round_number"], [138, 3, 1, "", "current_round_number_of_components"], [138, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [138, 2, 1, "", "evaluate"], [138, 2, 1, "", "evaluate_using_c"], [138, 2, 1, "", "evaluate_vectorized"], [138, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [138, 3, 1, "", "family_name"], [138, 3, 1, "", "file_name"], [138, 2, 1, "", "find_impossible_property"], [138, 2, 1, "", "generate_bit_based_c_code"], [138, 2, 1, "", "generate_evaluate_c_code_shared_library"], [138, 2, 1, "", "generate_word_based_c_code"], [138, 2, 1, "", "get_all_components"], [138, 2, 1, "", "get_all_components_ids"], [138, 2, 1, "", "get_all_inputs_bit_positions"], [138, 2, 1, "", "get_component_from_id"], [138, 2, 1, "", "get_components_in_round"], [138, 2, 1, "", "get_current_component_id"], [138, 2, 1, "", "get_model"], [138, 2, 1, "", "get_number_of_components_in_round"], [138, 2, 1, "", "get_partial_cipher"], [138, 2, 1, "", "get_round_from_component_id"], [138, 2, 1, "", "get_sizes_of_components_by_type"], [138, 3, 1, "", "id"], [138, 2, 1, "", "impossible_differential_search"], [138, 3, 1, "", "inputs"], [138, 3, 1, "", "inputs_bit_size"], [138, 2, 1, "", "inputs_size_to_dict"], [138, 2, 1, "", "is_algebraically_secure"], [138, 2, 1, "", "is_andrx"], [138, 2, 1, "", "is_arx"], [138, 2, 1, "", "is_power_of_2_word_based"], [138, 2, 1, "", "is_shift_arx"], [138, 2, 1, "", "is_spn"], [138, 2, 1, "", "make_cipher_id"], [138, 2, 1, "", "make_file_name"], [138, 3, 1, "", "number_of_rounds"], [138, 3, 1, "", "output_bit_size"], [138, 2, 1, "", "polynomial_system"], [138, 2, 1, "", "polynomial_system_at_round"], [138, 2, 1, "", "print"], [138, 2, 1, "", "print_as_python_dictionary"], [138, 2, 1, "", "print_as_python_dictionary_to_file"], [138, 2, 1, "", "print_evaluation_python_code"], [138, 2, 1, "", "print_evaluation_python_code_to_file"], [138, 2, 1, "", "print_input_information"], [138, 3, 1, "", "reference_code"], [138, 2, 1, "", "remove_key_schedule"], [138, 2, 1, "", "remove_round_component"], [138, 2, 1, "", "remove_round_component_from_id"], [138, 3, 1, "", "rounds"], [138, 3, 1, "", "rounds_as_list"], [138, 2, 1, "", "set_file_name"], [138, 2, 1, "", "set_id"], [138, 2, 1, "", "set_inputs"], [138, 2, 1, "", "sort_cipher"], [138, 2, 1, "", "test_against_reference_code"], [138, 2, 1, "", "test_vector_check"], [138, 3, 1, "", "type"], [138, 2, 1, "", "update_input_id_links_from_component_id"], [138, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.keccak_invertible_permutation": [[139, 1, 1, "", "KeccakInvertiblePermutation"]], "ciphers.permutations.keccak_invertible_permutation.KeccakInvertiblePermutation": [[139, 2, 1, "", "add_AND_component"], [139, 2, 1, "", "add_FSR_component"], [139, 2, 1, "", "add_MODADD_component"], [139, 2, 1, "", "add_MODSUB_component"], [139, 2, 1, "", "add_NOT_component"], [139, 2, 1, "", "add_OR_component"], [139, 2, 1, "", "add_SBOX_component"], [139, 2, 1, "", "add_SHIFT_component"], [139, 2, 1, "", "add_XOR_component"], [139, 2, 1, "", "add_cipher_output_component"], [139, 2, 1, "", "add_concatenate_component"], [139, 2, 1, "", "add_constant_component"], [139, 2, 1, "", "add_intermediate_output_component"], [139, 2, 1, "", "add_linear_layer_component"], [139, 2, 1, "", "add_mix_column_component"], [139, 2, 1, "", "add_output_component"], [139, 2, 1, "", "add_permutation_component"], [139, 2, 1, "", "add_reverse_component"], [139, 2, 1, "", "add_rotate_component"], [139, 2, 1, "", "add_round"], [139, 2, 1, "", "add_round_key_output_component"], [139, 2, 1, "", "add_round_output_component"], [139, 2, 1, "", "add_shift_rows_component"], [139, 2, 1, "", "add_sigma_component"], [139, 2, 1, "", "add_suffix_to_components"], [139, 2, 1, "", "add_theta_keccak_component"], [139, 2, 1, "", "add_theta_xoodoo_component"], [139, 2, 1, "", "add_variable_rotate_component"], [139, 2, 1, "", "add_variable_shift_component"], [139, 2, 1, "", "add_word_permutation_component"], [139, 2, 1, "", "as_python_dictionary"], [139, 2, 1, "", "chi_definition"], [139, 2, 1, "", "cipher_inverse"], [139, 2, 1, "", "cipher_partial_inverse"], [139, 2, 1, "", "component_from"], [139, 2, 1, "", "convert_to_compound_xor_cipher"], [139, 2, 1, "", "create_networx_graph_from_input_ids"], [139, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [139, 3, 1, "", "current_round"], [139, 3, 1, "", "current_round_number"], [139, 3, 1, "", "current_round_number_of_components"], [139, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [139, 2, 1, "", "evaluate"], [139, 2, 1, "", "evaluate_using_c"], [139, 2, 1, "", "evaluate_vectorized"], [139, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [139, 3, 1, "", "family_name"], [139, 3, 1, "", "file_name"], [139, 2, 1, "", "find_impossible_property"], [139, 2, 1, "", "generate_bit_based_c_code"], [139, 2, 1, "", "generate_evaluate_c_code_shared_library"], [139, 2, 1, "", "generate_word_based_c_code"], [139, 2, 1, "", "get_all_components"], [139, 2, 1, "", "get_all_components_ids"], [139, 2, 1, "", "get_all_inputs_bit_positions"], [139, 2, 1, "", "get_ci"], [139, 2, 1, "", "get_component_from_id"], [139, 2, 1, "", "get_components_in_round"], [139, 2, 1, "", "get_current_component_id"], [139, 2, 1, "", "get_model"], [139, 2, 1, "", "get_number_of_components_in_round"], [139, 2, 1, "", "get_partial_cipher"], [139, 2, 1, "", "get_round_from_component_id"], [139, 2, 1, "", "get_sizes_of_components_by_type"], [139, 3, 1, "", "id"], [139, 2, 1, "", "impossible_differential_search"], [139, 3, 1, "", "inputs"], [139, 3, 1, "", "inputs_bit_size"], [139, 2, 1, "", "inputs_size_to_dict"], [139, 2, 1, "", "iota_definition"], [139, 2, 1, "", "is_algebraically_secure"], [139, 2, 1, "", "is_andrx"], [139, 2, 1, "", "is_arx"], [139, 2, 1, "", "is_power_of_2_word_based"], [139, 2, 1, "", "is_shift_arx"], [139, 2, 1, "", "is_spn"], [139, 2, 1, "", "make_cipher_id"], [139, 2, 1, "", "make_file_name"], [139, 3, 1, "", "number_of_rounds"], [139, 3, 1, "", "output_bit_size"], [139, 2, 1, "", "polynomial_system"], [139, 2, 1, "", "polynomial_system_at_round"], [139, 2, 1, "", "print"], [139, 2, 1, "", "print_as_python_dictionary"], [139, 2, 1, "", "print_as_python_dictionary_to_file"], [139, 2, 1, "", "print_evaluation_python_code"], [139, 2, 1, "", "print_evaluation_python_code_to_file"], [139, 2, 1, "", "print_input_information"], [139, 3, 1, "", "reference_code"], [139, 2, 1, "", "remove_key_schedule"], [139, 2, 1, "", "remove_round_component"], [139, 2, 1, "", "remove_round_component_from_id"], [139, 2, 1, "", "rho_and_pi_definition"], [139, 2, 1, "", "round_function"], [139, 3, 1, "", "rounds"], [139, 3, 1, "", "rounds_as_list"], [139, 2, 1, "", "set_file_name"], [139, 2, 1, "", "set_id"], [139, 2, 1, "", "set_inputs"], [139, 2, 1, "", "sort_cipher"], [139, 2, 1, "", "state_initialization"], [139, 2, 1, "", "test_against_reference_code"], [139, 2, 1, "", "test_vector_check"], [139, 2, 1, "", "theta_definition"], [139, 3, 1, "", "type"], [139, 2, 1, "", "update_input_id_links_from_component_id"], [139, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.keccak_permutation": [[140, 1, 1, "", "KeccakPermutation"]], "ciphers.permutations.keccak_permutation.KeccakPermutation": [[140, 2, 1, "", "add_AND_component"], [140, 2, 1, "", "add_FSR_component"], [140, 2, 1, "", "add_MODADD_component"], [140, 2, 1, "", "add_MODSUB_component"], [140, 2, 1, "", "add_NOT_component"], [140, 2, 1, "", "add_OR_component"], [140, 2, 1, "", "add_SBOX_component"], [140, 2, 1, "", "add_SHIFT_component"], [140, 2, 1, "", "add_XOR_component"], [140, 2, 1, "", "add_cipher_output_component"], [140, 2, 1, "", "add_concatenate_component"], [140, 2, 1, "", "add_constant_component"], [140, 2, 1, "", "add_intermediate_output_component"], [140, 2, 1, "", "add_linear_layer_component"], [140, 2, 1, "", "add_mix_column_component"], [140, 2, 1, "", "add_output_component"], [140, 2, 1, "", "add_permutation_component"], [140, 2, 1, "", "add_reverse_component"], [140, 2, 1, "", "add_rotate_component"], [140, 2, 1, "", "add_round"], [140, 2, 1, "", "add_round_key_output_component"], [140, 2, 1, "", "add_round_output_component"], [140, 2, 1, "", "add_round_output_linear"], [140, 2, 1, "", "add_round_output_nonlinear"], [140, 2, 1, "", "add_shift_rows_component"], [140, 2, 1, "", "add_sigma_component"], [140, 2, 1, "", "add_suffix_to_components"], [140, 2, 1, "", "add_theta_keccak_component"], [140, 2, 1, "", "add_theta_xoodoo_component"], [140, 2, 1, "", "add_variable_rotate_component"], [140, 2, 1, "", "add_variable_shift_component"], [140, 2, 1, "", "add_word_permutation_component"], [140, 2, 1, "", "as_python_dictionary"], [140, 2, 1, "", "chi_definition"], [140, 2, 1, "", "cipher_inverse"], [140, 2, 1, "", "cipher_partial_inverse"], [140, 2, 1, "", "component_from"], [140, 2, 1, "", "convert_to_compound_xor_cipher"], [140, 2, 1, "", "create_networx_graph_from_input_ids"], [140, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [140, 3, 1, "", "current_round"], [140, 3, 1, "", "current_round_number"], [140, 3, 1, "", "current_round_number_of_components"], [140, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [140, 2, 1, "", "evaluate"], [140, 2, 1, "", "evaluate_using_c"], [140, 2, 1, "", "evaluate_vectorized"], [140, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [140, 3, 1, "", "family_name"], [140, 3, 1, "", "file_name"], [140, 2, 1, "", "find_impossible_property"], [140, 2, 1, "", "generate_bit_based_c_code"], [140, 2, 1, "", "generate_evaluate_c_code_shared_library"], [140, 2, 1, "", "generate_word_based_c_code"], [140, 2, 1, "", "get_all_components"], [140, 2, 1, "", "get_all_components_ids"], [140, 2, 1, "", "get_all_inputs_bit_positions"], [140, 2, 1, "", "get_ci"], [140, 2, 1, "", "get_component_from_id"], [140, 2, 1, "", "get_components_in_round"], [140, 2, 1, "", "get_current_component_id"], [140, 2, 1, "", "get_model"], [140, 2, 1, "", "get_number_of_components_in_round"], [140, 2, 1, "", "get_partial_cipher"], [140, 2, 1, "", "get_round_from_component_id"], [140, 2, 1, "", "get_sizes_of_components_by_type"], [140, 3, 1, "", "id"], [140, 2, 1, "", "impossible_differential_search"], [140, 3, 1, "", "inputs"], [140, 3, 1, "", "inputs_bit_size"], [140, 2, 1, "", "inputs_size_to_dict"], [140, 2, 1, "", "iota_definition"], [140, 2, 1, "", "is_algebraically_secure"], [140, 2, 1, "", "is_andrx"], [140, 2, 1, "", "is_arx"], [140, 2, 1, "", "is_power_of_2_word_based"], [140, 2, 1, "", "is_shift_arx"], [140, 2, 1, "", "is_spn"], [140, 2, 1, "", "make_cipher_id"], [140, 2, 1, "", "make_file_name"], [140, 3, 1, "", "number_of_rounds"], [140, 3, 1, "", "output_bit_size"], [140, 2, 1, "", "polynomial_system"], [140, 2, 1, "", "polynomial_system_at_round"], [140, 2, 1, "", "print"], [140, 2, 1, "", "print_as_python_dictionary"], [140, 2, 1, "", "print_as_python_dictionary_to_file"], [140, 2, 1, "", "print_evaluation_python_code"], [140, 2, 1, "", "print_evaluation_python_code_to_file"], [140, 2, 1, "", "print_input_information"], [140, 3, 1, "", "reference_code"], [140, 2, 1, "", "remove_key_schedule"], [140, 2, 1, "", "remove_round_component"], [140, 2, 1, "", "remove_round_component_from_id"], [140, 2, 1, "", "rho_and_pi_definition"], [140, 2, 1, "", "round_function"], [140, 3, 1, "", "rounds"], [140, 3, 1, "", "rounds_as_list"], [140, 2, 1, "", "set_file_name"], [140, 2, 1, "", "set_id"], [140, 2, 1, "", "set_inputs"], [140, 2, 1, "", "sort_cipher"], [140, 2, 1, "", "state_initialization"], [140, 2, 1, "", "test_against_reference_code"], [140, 2, 1, "", "test_vector_check"], [140, 2, 1, "", "theta_definition"], [140, 3, 1, "", "type"], [140, 2, 1, "", "update_input_id_links_from_component_id"], [140, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.keccak_sbox_permutation": [[141, 1, 1, "", "KeccakSboxPermutation"]], "ciphers.permutations.keccak_sbox_permutation.KeccakSboxPermutation": [[141, 2, 1, "", "add_AND_component"], [141, 2, 1, "", "add_FSR_component"], [141, 2, 1, "", "add_MODADD_component"], [141, 2, 1, "", "add_MODSUB_component"], [141, 2, 1, "", "add_NOT_component"], [141, 2, 1, "", "add_OR_component"], [141, 2, 1, "", "add_SBOX_component"], [141, 2, 1, "", "add_SHIFT_component"], [141, 2, 1, "", "add_XOR_component"], [141, 2, 1, "", "add_cipher_output_component"], [141, 2, 1, "", "add_concatenate_component"], [141, 2, 1, "", "add_constant_component"], [141, 2, 1, "", "add_intermediate_output_component"], [141, 2, 1, "", "add_linear_layer_component"], [141, 2, 1, "", "add_mix_column_component"], [141, 2, 1, "", "add_output_component"], [141, 2, 1, "", "add_permutation_component"], [141, 2, 1, "", "add_reverse_component"], [141, 2, 1, "", "add_rotate_component"], [141, 2, 1, "", "add_round"], [141, 2, 1, "", "add_round_key_output_component"], [141, 2, 1, "", "add_round_output_component"], [141, 2, 1, "", "add_shift_rows_component"], [141, 2, 1, "", "add_sigma_component"], [141, 2, 1, "", "add_suffix_to_components"], [141, 2, 1, "", "add_theta_keccak_component"], [141, 2, 1, "", "add_theta_xoodoo_component"], [141, 2, 1, "", "add_variable_rotate_component"], [141, 2, 1, "", "add_variable_shift_component"], [141, 2, 1, "", "add_word_permutation_component"], [141, 2, 1, "", "as_python_dictionary"], [141, 2, 1, "", "chi_definition"], [141, 2, 1, "", "cipher_inverse"], [141, 2, 1, "", "cipher_partial_inverse"], [141, 2, 1, "", "component_from"], [141, 2, 1, "", "convert_to_compound_xor_cipher"], [141, 2, 1, "", "create_networx_graph_from_input_ids"], [141, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [141, 3, 1, "", "current_round"], [141, 3, 1, "", "current_round_number"], [141, 3, 1, "", "current_round_number_of_components"], [141, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [141, 2, 1, "", "evaluate"], [141, 2, 1, "", "evaluate_using_c"], [141, 2, 1, "", "evaluate_vectorized"], [141, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [141, 3, 1, "", "family_name"], [141, 3, 1, "", "file_name"], [141, 2, 1, "", "find_impossible_property"], [141, 2, 1, "", "generate_bit_based_c_code"], [141, 2, 1, "", "generate_evaluate_c_code_shared_library"], [141, 2, 1, "", "generate_word_based_c_code"], [141, 2, 1, "", "get_all_components"], [141, 2, 1, "", "get_all_components_ids"], [141, 2, 1, "", "get_all_inputs_bit_positions"], [141, 2, 1, "", "get_ci"], [141, 2, 1, "", "get_component_from_id"], [141, 2, 1, "", "get_components_in_round"], [141, 2, 1, "", "get_current_component_id"], [141, 2, 1, "", "get_model"], [141, 2, 1, "", "get_number_of_components_in_round"], [141, 2, 1, "", "get_partial_cipher"], [141, 2, 1, "", "get_round_from_component_id"], [141, 2, 1, "", "get_sizes_of_components_by_type"], [141, 3, 1, "", "id"], [141, 2, 1, "", "impossible_differential_search"], [141, 3, 1, "", "inputs"], [141, 3, 1, "", "inputs_bit_size"], [141, 2, 1, "", "inputs_size_to_dict"], [141, 2, 1, "", "iota_definition"], [141, 2, 1, "", "is_algebraically_secure"], [141, 2, 1, "", "is_andrx"], [141, 2, 1, "", "is_arx"], [141, 2, 1, "", "is_power_of_2_word_based"], [141, 2, 1, "", "is_shift_arx"], [141, 2, 1, "", "is_spn"], [141, 2, 1, "", "make_cipher_id"], [141, 2, 1, "", "make_file_name"], [141, 3, 1, "", "number_of_rounds"], [141, 3, 1, "", "output_bit_size"], [141, 2, 1, "", "polynomial_system"], [141, 2, 1, "", "polynomial_system_at_round"], [141, 2, 1, "", "print"], [141, 2, 1, "", "print_as_python_dictionary"], [141, 2, 1, "", "print_as_python_dictionary_to_file"], [141, 2, 1, "", "print_evaluation_python_code"], [141, 2, 1, "", "print_evaluation_python_code_to_file"], [141, 2, 1, "", "print_input_information"], [141, 3, 1, "", "reference_code"], [141, 2, 1, "", "remove_key_schedule"], [141, 2, 1, "", "remove_round_component"], [141, 2, 1, "", "remove_round_component_from_id"], [141, 2, 1, "", "rho_and_pi_definition"], [141, 2, 1, "", "round_function"], [141, 3, 1, "", "rounds"], [141, 3, 1, "", "rounds_as_list"], [141, 2, 1, "", "set_file_name"], [141, 2, 1, "", "set_id"], [141, 2, 1, "", "set_inputs"], [141, 2, 1, "", "sort_cipher"], [141, 2, 1, "", "state_initialization"], [141, 2, 1, "", "test_against_reference_code"], [141, 2, 1, "", "test_vector_check"], [141, 2, 1, "", "theta_definition"], [141, 3, 1, "", "type"], [141, 2, 1, "", "update_input_id_links_from_component_id"], [141, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.photon_permutation": [[142, 1, 1, "", "PhotonPermutation"]], "ciphers.permutations.photon_permutation.PhotonPermutation": [[142, 2, 1, "", "add_AND_component"], [142, 2, 1, "", "add_FSR_component"], [142, 2, 1, "", "add_MODADD_component"], [142, 2, 1, "", "add_MODSUB_component"], [142, 2, 1, "", "add_NOT_component"], [142, 2, 1, "", "add_OR_component"], [142, 2, 1, "", "add_SBOX_component"], [142, 2, 1, "", "add_SHIFT_component"], [142, 2, 1, "", "add_XOR_component"], [142, 2, 1, "", "add_cipher_output_component"], [142, 2, 1, "", "add_concatenate_component"], [142, 2, 1, "", "add_constant_component"], [142, 2, 1, "", "add_intermediate_output_component"], [142, 2, 1, "", "add_linear_layer_component"], [142, 2, 1, "", "add_mix_column_component"], [142, 2, 1, "", "add_permutation_component"], [142, 2, 1, "", "add_reverse_component"], [142, 2, 1, "", "add_rotate_component"], [142, 2, 1, "", "add_round"], [142, 2, 1, "", "add_round_key_output_component"], [142, 2, 1, "", "add_round_output_component"], [142, 2, 1, "", "add_shift_rows_component"], [142, 2, 1, "", "add_sigma_component"], [142, 2, 1, "", "add_suffix_to_components"], [142, 2, 1, "", "add_theta_keccak_component"], [142, 2, 1, "", "add_theta_xoodoo_component"], [142, 2, 1, "", "add_variable_rotate_component"], [142, 2, 1, "", "add_variable_shift_component"], [142, 2, 1, "", "add_word_permutation_component"], [142, 2, 1, "", "as_python_dictionary"], [142, 2, 1, "", "cipher_inverse"], [142, 2, 1, "", "cipher_partial_inverse"], [142, 2, 1, "", "component_from"], [142, 2, 1, "", "convert_to_compound_xor_cipher"], [142, 2, 1, "", "create_networx_graph_from_input_ids"], [142, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [142, 3, 1, "", "current_round"], [142, 3, 1, "", "current_round_number"], [142, 3, 1, "", "current_round_number_of_components"], [142, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [142, 2, 1, "", "evaluate"], [142, 2, 1, "", "evaluate_using_c"], [142, 2, 1, "", "evaluate_vectorized"], [142, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [142, 3, 1, "", "family_name"], [142, 3, 1, "", "file_name"], [142, 2, 1, "", "find_impossible_property"], [142, 2, 1, "", "generate_bit_based_c_code"], [142, 2, 1, "", "generate_evaluate_c_code_shared_library"], [142, 2, 1, "", "generate_word_based_c_code"], [142, 2, 1, "", "get_all_components"], [142, 2, 1, "", "get_all_components_ids"], [142, 2, 1, "", "get_all_inputs_bit_positions"], [142, 2, 1, "", "get_component_from_id"], [142, 2, 1, "", "get_components_in_round"], [142, 2, 1, "", "get_current_component_id"], [142, 2, 1, "", "get_model"], [142, 2, 1, "", "get_number_of_components_in_round"], [142, 2, 1, "", "get_partial_cipher"], [142, 2, 1, "", "get_round_from_component_id"], [142, 2, 1, "", "get_sizes_of_components_by_type"], [142, 3, 1, "", "id"], [142, 2, 1, "", "impossible_differential_search"], [142, 3, 1, "", "inputs"], [142, 3, 1, "", "inputs_bit_size"], [142, 2, 1, "", "inputs_size_to_dict"], [142, 2, 1, "", "is_algebraically_secure"], [142, 2, 1, "", "is_andrx"], [142, 2, 1, "", "is_arx"], [142, 2, 1, "", "is_power_of_2_word_based"], [142, 2, 1, "", "is_shift_arx"], [142, 2, 1, "", "is_spn"], [142, 2, 1, "", "make_cipher_id"], [142, 2, 1, "", "make_file_name"], [142, 3, 1, "", "number_of_rounds"], [142, 3, 1, "", "output_bit_size"], [142, 2, 1, "", "polynomial_system"], [142, 2, 1, "", "polynomial_system_at_round"], [142, 2, 1, "", "print"], [142, 2, 1, "", "print_as_python_dictionary"], [142, 2, 1, "", "print_as_python_dictionary_to_file"], [142, 2, 1, "", "print_evaluation_python_code"], [142, 2, 1, "", "print_evaluation_python_code_to_file"], [142, 2, 1, "", "print_input_information"], [142, 3, 1, "", "reference_code"], [142, 2, 1, "", "remove_key_schedule"], [142, 2, 1, "", "remove_round_component"], [142, 2, 1, "", "remove_round_component_from_id"], [142, 2, 1, "", "round_function"], [142, 3, 1, "", "rounds"], [142, 3, 1, "", "rounds_as_list"], [142, 2, 1, "", "set_file_name"], [142, 2, 1, "", "set_id"], [142, 2, 1, "", "set_inputs"], [142, 2, 1, "", "sort_cipher"], [142, 2, 1, "", "test_against_reference_code"], [142, 2, 1, "", "test_vector_check"], [142, 3, 1, "", "type"], [142, 2, 1, "", "update_input_id_links_from_component_id"], [142, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.salsa_permutation": [[143, 1, 1, "", "SalsaPermutation"]], "ciphers.permutations.salsa_permutation.SalsaPermutation": [[143, 2, 1, "", "add_AND_component"], [143, 2, 1, "", "add_FSR_component"], [143, 2, 1, "", "add_MODADD_component"], [143, 2, 1, "", "add_MODSUB_component"], [143, 2, 1, "", "add_NOT_component"], [143, 2, 1, "", "add_OR_component"], [143, 2, 1, "", "add_SBOX_component"], [143, 2, 1, "", "add_SHIFT_component"], [143, 2, 1, "", "add_XOR_component"], [143, 2, 1, "", "add_cipher_output_component"], [143, 2, 1, "", "add_concatenate_component"], [143, 2, 1, "", "add_constant_component"], [143, 2, 1, "", "add_intermediate_output_component"], [143, 2, 1, "", "add_linear_layer_component"], [143, 2, 1, "", "add_mix_column_component"], [143, 2, 1, "", "add_permutation_component"], [143, 2, 1, "", "add_reverse_component"], [143, 2, 1, "", "add_rotate_component"], [143, 2, 1, "", "add_round"], [143, 2, 1, "", "add_round_key_output_component"], [143, 2, 1, "", "add_round_output_component"], [143, 2, 1, "", "add_shift_rows_component"], [143, 2, 1, "", "add_sigma_component"], [143, 2, 1, "", "add_suffix_to_components"], [143, 2, 1, "", "add_theta_keccak_component"], [143, 2, 1, "", "add_theta_xoodoo_component"], [143, 2, 1, "", "add_variable_rotate_component"], [143, 2, 1, "", "add_variable_shift_component"], [143, 2, 1, "", "add_word_permutation_component"], [143, 2, 1, "", "as_python_dictionary"], [143, 2, 1, "", "bottom_half_quarter_round"], [143, 2, 1, "", "cipher_inverse"], [143, 2, 1, "", "cipher_partial_inverse"], [143, 2, 1, "", "component_from"], [143, 2, 1, "", "convert_to_compound_xor_cipher"], [143, 2, 1, "", "create_networx_graph_from_input_ids"], [143, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [143, 3, 1, "", "current_round"], [143, 3, 1, "", "current_round_number"], [143, 3, 1, "", "current_round_number_of_components"], [143, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [143, 2, 1, "", "evaluate"], [143, 2, 1, "", "evaluate_using_c"], [143, 2, 1, "", "evaluate_vectorized"], [143, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [143, 3, 1, "", "family_name"], [143, 3, 1, "", "file_name"], [143, 2, 1, "", "find_impossible_property"], [143, 2, 1, "", "generate_bit_based_c_code"], [143, 2, 1, "", "generate_evaluate_c_code_shared_library"], [143, 2, 1, "", "generate_word_based_c_code"], [143, 2, 1, "", "get_all_components"], [143, 2, 1, "", "get_all_components_ids"], [143, 2, 1, "", "get_all_inputs_bit_positions"], [143, 2, 1, "", "get_component_from_id"], [143, 2, 1, "", "get_components_in_round"], [143, 2, 1, "", "get_current_component_id"], [143, 2, 1, "", "get_model"], [143, 2, 1, "", "get_number_of_components_in_round"], [143, 2, 1, "", "get_partial_cipher"], [143, 2, 1, "", "get_round_from_component_id"], [143, 2, 1, "", "get_sizes_of_components_by_type"], [143, 3, 1, "", "id"], [143, 2, 1, "", "impossible_differential_search"], [143, 3, 1, "", "inputs"], [143, 3, 1, "", "inputs_bit_size"], [143, 2, 1, "", "inputs_size_to_dict"], [143, 2, 1, "", "is_algebraically_secure"], [143, 2, 1, "", "is_andrx"], [143, 2, 1, "", "is_arx"], [143, 2, 1, "", "is_power_of_2_word_based"], [143, 2, 1, "", "is_shift_arx"], [143, 2, 1, "", "is_spn"], [143, 2, 1, "", "make_cipher_id"], [143, 2, 1, "", "make_file_name"], [143, 3, 1, "", "number_of_rounds"], [143, 3, 1, "", "output_bit_size"], [143, 2, 1, "", "polynomial_system"], [143, 2, 1, "", "polynomial_system_at_round"], [143, 2, 1, "", "print"], [143, 2, 1, "", "print_as_python_dictionary"], [143, 2, 1, "", "print_as_python_dictionary_to_file"], [143, 2, 1, "", "print_evaluation_python_code"], [143, 2, 1, "", "print_evaluation_python_code_to_file"], [143, 2, 1, "", "print_input_information"], [143, 3, 1, "", "reference_code"], [143, 2, 1, "", "remove_key_schedule"], [143, 2, 1, "", "remove_round_component"], [143, 2, 1, "", "remove_round_component_from_id"], [143, 3, 1, "", "rounds"], [143, 3, 1, "", "rounds_as_list"], [143, 2, 1, "", "set_file_name"], [143, 2, 1, "", "set_id"], [143, 2, 1, "", "set_inputs"], [143, 2, 1, "", "sort_cipher"], [143, 2, 1, "", "test_against_reference_code"], [143, 2, 1, "", "test_vector_check"], [143, 2, 1, "", "top_half_quarter_round"], [143, 3, 1, "", "type"], [143, 2, 1, "", "update_input_id_links_from_component_id"], [143, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.sparkle_permutation": [[144, 1, 1, "", "SparklePermutation"]], "ciphers.permutations.sparkle_permutation.SparklePermutation": [[144, 2, 1, "", "add_AND_component"], [144, 2, 1, "", "add_FSR_component"], [144, 2, 1, "", "add_MODADD_component"], [144, 2, 1, "", "add_MODSUB_component"], [144, 2, 1, "", "add_NOT_component"], [144, 2, 1, "", "add_OR_component"], [144, 2, 1, "", "add_SBOX_component"], [144, 2, 1, "", "add_SHIFT_component"], [144, 2, 1, "", "add_XOR_component"], [144, 2, 1, "", "add_cipher_output_component"], [144, 2, 1, "", "add_concatenate_component"], [144, 2, 1, "", "add_constant_component"], [144, 2, 1, "", "add_intermediate_output_component"], [144, 2, 1, "", "add_linear_layer_component"], [144, 2, 1, "", "add_mix_column_component"], [144, 2, 1, "", "add_permutation_component"], [144, 2, 1, "", "add_reverse_component"], [144, 2, 1, "", "add_rotate_component"], [144, 2, 1, "", "add_round"], [144, 2, 1, "", "add_round_key_output_component"], [144, 2, 1, "", "add_round_output_component"], [144, 2, 1, "", "add_shift_rows_component"], [144, 2, 1, "", "add_sigma_component"], [144, 2, 1, "", "add_suffix_to_components"], [144, 2, 1, "", "add_theta_keccak_component"], [144, 2, 1, "", "add_theta_xoodoo_component"], [144, 2, 1, "", "add_variable_rotate_component"], [144, 2, 1, "", "add_variable_shift_component"], [144, 2, 1, "", "add_word_permutation_component"], [144, 2, 1, "", "alzette"], [144, 2, 1, "", "alzette_round"], [144, 2, 1, "", "as_python_dictionary"], [144, 2, 1, "", "cipher_inverse"], [144, 2, 1, "", "cipher_partial_inverse"], [144, 2, 1, "", "component_from"], [144, 2, 1, "", "convert_to_compound_xor_cipher"], [144, 2, 1, "", "create_networx_graph_from_input_ids"], [144, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [144, 3, 1, "", "current_round"], [144, 3, 1, "", "current_round_number"], [144, 3, 1, "", "current_round_number_of_components"], [144, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [144, 2, 1, "", "ell_function"], [144, 2, 1, "", "evaluate"], [144, 2, 1, "", "evaluate_using_c"], [144, 2, 1, "", "evaluate_vectorized"], [144, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [144, 3, 1, "", "family_name"], [144, 3, 1, "", "file_name"], [144, 2, 1, "", "find_impossible_property"], [144, 2, 1, "", "generate_bit_based_c_code"], [144, 2, 1, "", "generate_evaluate_c_code_shared_library"], [144, 2, 1, "", "generate_word_based_c_code"], [144, 2, 1, "", "get_all_components"], [144, 2, 1, "", "get_all_components_ids"], [144, 2, 1, "", "get_all_inputs_bit_positions"], [144, 2, 1, "", "get_component_from_id"], [144, 2, 1, "", "get_components_in_round"], [144, 2, 1, "", "get_current_component_id"], [144, 2, 1, "", "get_model"], [144, 2, 1, "", "get_number_of_components_in_round"], [144, 2, 1, "", "get_partial_cipher"], [144, 2, 1, "", "get_round_from_component_id"], [144, 2, 1, "", "get_sizes_of_components_by_type"], [144, 3, 1, "", "id"], [144, 2, 1, "", "impossible_differential_search"], [144, 3, 1, "", "inputs"], [144, 3, 1, "", "inputs_bit_size"], [144, 2, 1, "", "inputs_size_to_dict"], [144, 2, 1, "", "is_algebraically_secure"], [144, 2, 1, "", "is_andrx"], [144, 2, 1, "", "is_arx"], [144, 2, 1, "", "is_power_of_2_word_based"], [144, 2, 1, "", "is_shift_arx"], [144, 2, 1, "", "is_spn"], [144, 2, 1, "", "linear_layer"], [144, 2, 1, "", "make_cipher_id"], [144, 2, 1, "", "make_file_name"], [144, 3, 1, "", "number_of_rounds"], [144, 3, 1, "", "output_bit_size"], [144, 2, 1, "", "polynomial_system"], [144, 2, 1, "", "polynomial_system_at_round"], [144, 2, 1, "", "print"], [144, 2, 1, "", "print_as_python_dictionary"], [144, 2, 1, "", "print_as_python_dictionary_to_file"], [144, 2, 1, "", "print_evaluation_python_code"], [144, 2, 1, "", "print_evaluation_python_code_to_file"], [144, 2, 1, "", "print_input_information"], [144, 3, 1, "", "reference_code"], [144, 2, 1, "", "remove_key_schedule"], [144, 2, 1, "", "remove_round_component"], [144, 2, 1, "", "remove_round_component_from_id"], [144, 2, 1, "", "round_function"], [144, 3, 1, "", "rounds"], [144, 3, 1, "", "rounds_as_list"], [144, 2, 1, "", "set_file_name"], [144, 2, 1, "", "set_id"], [144, 2, 1, "", "set_inputs"], [144, 2, 1, "", "sort_cipher"], [144, 2, 1, "", "test_against_reference_code"], [144, 2, 1, "", "test_vector_check"], [144, 3, 1, "", "type"], [144, 2, 1, "", "update_input_id_links_from_component_id"], [144, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.spongent_pi_fsr_permutation": [[145, 1, 1, "", "SpongentPiFSRPermutation"]], "ciphers.permutations.spongent_pi_fsr_permutation.SpongentPiFSRPermutation": [[145, 2, 1, "", "add_AND_component"], [145, 2, 1, "", "add_FSR_component"], [145, 2, 1, "", "add_MODADD_component"], [145, 2, 1, "", "add_MODSUB_component"], [145, 2, 1, "", "add_NOT_component"], [145, 2, 1, "", "add_OR_component"], [145, 2, 1, "", "add_SBOX_component"], [145, 2, 1, "", "add_SHIFT_component"], [145, 2, 1, "", "add_XOR_component"], [145, 2, 1, "", "add_cipher_output_component"], [145, 2, 1, "", "add_concatenate_component"], [145, 2, 1, "", "add_constant_component"], [145, 2, 1, "", "add_intermediate_output_component"], [145, 2, 1, "", "add_linear_layer_component"], [145, 2, 1, "", "add_mix_column_component"], [145, 2, 1, "", "add_permutation_component"], [145, 2, 1, "", "add_reverse_component"], [145, 2, 1, "", "add_rotate_component"], [145, 2, 1, "", "add_round"], [145, 2, 1, "", "add_round_key_output_component"], [145, 2, 1, "", "add_round_output_component"], [145, 2, 1, "", "add_shift_rows_component"], [145, 2, 1, "", "add_sigma_component"], [145, 2, 1, "", "add_suffix_to_components"], [145, 2, 1, "", "add_theta_keccak_component"], [145, 2, 1, "", "add_theta_xoodoo_component"], [145, 2, 1, "", "add_variable_rotate_component"], [145, 2, 1, "", "add_variable_shift_component"], [145, 2, 1, "", "add_word_permutation_component"], [145, 2, 1, "", "as_python_dictionary"], [145, 2, 1, "", "cipher_inverse"], [145, 2, 1, "", "cipher_partial_inverse"], [145, 2, 1, "", "component_from"], [145, 2, 1, "", "convert_to_compound_xor_cipher"], [145, 2, 1, "", "create_networx_graph_from_input_ids"], [145, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [145, 3, 1, "", "current_round"], [145, 3, 1, "", "current_round_number"], [145, 3, 1, "", "current_round_number_of_components"], [145, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [145, 2, 1, "", "evaluate"], [145, 2, 1, "", "evaluate_using_c"], [145, 2, 1, "", "evaluate_vectorized"], [145, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [145, 3, 1, "", "family_name"], [145, 3, 1, "", "file_name"], [145, 2, 1, "", "find_impossible_property"], [145, 2, 1, "", "generate_bit_based_c_code"], [145, 2, 1, "", "generate_evaluate_c_code_shared_library"], [145, 2, 1, "", "generate_word_based_c_code"], [145, 2, 1, "", "get_all_components"], [145, 2, 1, "", "get_all_components_ids"], [145, 2, 1, "", "get_all_inputs_bit_positions"], [145, 2, 1, "", "get_component_from_id"], [145, 2, 1, "", "get_components_in_round"], [145, 2, 1, "", "get_current_component_id"], [145, 2, 1, "", "get_model"], [145, 2, 1, "", "get_number_of_components_in_round"], [145, 2, 1, "", "get_partial_cipher"], [145, 2, 1, "", "get_round_from_component_id"], [145, 2, 1, "", "get_sizes_of_components_by_type"], [145, 2, 1, "", "icounter_update"], [145, 3, 1, "", "id"], [145, 2, 1, "", "impossible_differential_search"], [145, 3, 1, "", "inputs"], [145, 3, 1, "", "inputs_bit_size"], [145, 2, 1, "", "inputs_size_to_dict"], [145, 2, 1, "", "is_algebraically_secure"], [145, 2, 1, "", "is_andrx"], [145, 2, 1, "", "is_arx"], [145, 2, 1, "", "is_power_of_2_word_based"], [145, 2, 1, "", "is_shift_arx"], [145, 2, 1, "", "is_spn"], [145, 2, 1, "", "make_cipher_id"], [145, 2, 1, "", "make_file_name"], [145, 3, 1, "", "number_of_rounds"], [145, 3, 1, "", "output_bit_size"], [145, 2, 1, "", "polynomial_system"], [145, 2, 1, "", "polynomial_system_at_round"], [145, 2, 1, "", "print"], [145, 2, 1, "", "print_as_python_dictionary"], [145, 2, 1, "", "print_as_python_dictionary_to_file"], [145, 2, 1, "", "print_evaluation_python_code"], [145, 2, 1, "", "print_evaluation_python_code_to_file"], [145, 2, 1, "", "print_input_information"], [145, 3, 1, "", "reference_code"], [145, 2, 1, "", "remove_key_schedule"], [145, 2, 1, "", "remove_round_component"], [145, 2, 1, "", "remove_round_component_from_id"], [145, 2, 1, "", "round_function"], [145, 3, 1, "", "rounds"], [145, 3, 1, "", "rounds_as_list"], [145, 2, 1, "", "set_file_name"], [145, 2, 1, "", "set_id"], [145, 2, 1, "", "set_inputs"], [145, 2, 1, "", "sort_cipher"], [145, 2, 1, "", "test_against_reference_code"], [145, 2, 1, "", "test_vector_check"], [145, 3, 1, "", "type"], [145, 2, 1, "", "update_input_id_links_from_component_id"], [145, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.spongent_pi_permutation": [[146, 1, 1, "", "SpongentPiPermutation"]], "ciphers.permutations.spongent_pi_permutation.SpongentPiPermutation": [[146, 2, 1, "", "add_AND_component"], [146, 2, 1, "", "add_FSR_component"], [146, 2, 1, "", "add_MODADD_component"], [146, 2, 1, "", "add_MODSUB_component"], [146, 2, 1, "", "add_NOT_component"], [146, 2, 1, "", "add_OR_component"], [146, 2, 1, "", "add_SBOX_component"], [146, 2, 1, "", "add_SHIFT_component"], [146, 2, 1, "", "add_XOR_component"], [146, 2, 1, "", "add_cipher_output_component"], [146, 2, 1, "", "add_concatenate_component"], [146, 2, 1, "", "add_constant_component"], [146, 2, 1, "", "add_intermediate_output_component"], [146, 2, 1, "", "add_linear_layer_component"], [146, 2, 1, "", "add_mix_column_component"], [146, 2, 1, "", "add_permutation_component"], [146, 2, 1, "", "add_reverse_component"], [146, 2, 1, "", "add_rotate_component"], [146, 2, 1, "", "add_round"], [146, 2, 1, "", "add_round_key_output_component"], [146, 2, 1, "", "add_round_output_component"], [146, 2, 1, "", "add_shift_rows_component"], [146, 2, 1, "", "add_sigma_component"], [146, 2, 1, "", "add_suffix_to_components"], [146, 2, 1, "", "add_theta_keccak_component"], [146, 2, 1, "", "add_theta_xoodoo_component"], [146, 2, 1, "", "add_variable_rotate_component"], [146, 2, 1, "", "add_variable_shift_component"], [146, 2, 1, "", "add_word_permutation_component"], [146, 2, 1, "", "as_python_dictionary"], [146, 2, 1, "", "cipher_inverse"], [146, 2, 1, "", "cipher_partial_inverse"], [146, 2, 1, "", "component_from"], [146, 2, 1, "", "convert_to_compound_xor_cipher"], [146, 2, 1, "", "create_networx_graph_from_input_ids"], [146, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [146, 3, 1, "", "current_round"], [146, 3, 1, "", "current_round_number"], [146, 3, 1, "", "current_round_number_of_components"], [146, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [146, 2, 1, "", "evaluate"], [146, 2, 1, "", "evaluate_using_c"], [146, 2, 1, "", "evaluate_vectorized"], [146, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [146, 3, 1, "", "family_name"], [146, 3, 1, "", "file_name"], [146, 2, 1, "", "find_impossible_property"], [146, 2, 1, "", "generate_bit_based_c_code"], [146, 2, 1, "", "generate_evaluate_c_code_shared_library"], [146, 2, 1, "", "generate_word_based_c_code"], [146, 2, 1, "", "get_all_components"], [146, 2, 1, "", "get_all_components_ids"], [146, 2, 1, "", "get_all_inputs_bit_positions"], [146, 2, 1, "", "get_component_from_id"], [146, 2, 1, "", "get_components_in_round"], [146, 2, 1, "", "get_current_component_id"], [146, 2, 1, "", "get_model"], [146, 2, 1, "", "get_number_of_components_in_round"], [146, 2, 1, "", "get_partial_cipher"], [146, 2, 1, "", "get_round_from_component_id"], [146, 2, 1, "", "get_sizes_of_components_by_type"], [146, 2, 1, "", "icounter_update"], [146, 3, 1, "", "id"], [146, 2, 1, "", "impossible_differential_search"], [146, 3, 1, "", "inputs"], [146, 3, 1, "", "inputs_bit_size"], [146, 2, 1, "", "inputs_size_to_dict"], [146, 2, 1, "", "is_algebraically_secure"], [146, 2, 1, "", "is_andrx"], [146, 2, 1, "", "is_arx"], [146, 2, 1, "", "is_power_of_2_word_based"], [146, 2, 1, "", "is_shift_arx"], [146, 2, 1, "", "is_spn"], [146, 2, 1, "", "make_cipher_id"], [146, 2, 1, "", "make_file_name"], [146, 3, 1, "", "number_of_rounds"], [146, 3, 1, "", "output_bit_size"], [146, 2, 1, "", "polynomial_system"], [146, 2, 1, "", "polynomial_system_at_round"], [146, 2, 1, "", "print"], [146, 2, 1, "", "print_as_python_dictionary"], [146, 2, 1, "", "print_as_python_dictionary_to_file"], [146, 2, 1, "", "print_evaluation_python_code"], [146, 2, 1, "", "print_evaluation_python_code_to_file"], [146, 2, 1, "", "print_input_information"], [146, 3, 1, "", "reference_code"], [146, 2, 1, "", "remove_key_schedule"], [146, 2, 1, "", "remove_round_component"], [146, 2, 1, "", "remove_round_component_from_id"], [146, 2, 1, "", "round_function"], [146, 3, 1, "", "rounds"], [146, 3, 1, "", "rounds_as_list"], [146, 2, 1, "", "set_file_name"], [146, 2, 1, "", "set_id"], [146, 2, 1, "", "set_inputs"], [146, 2, 1, "", "sort_cipher"], [146, 2, 1, "", "test_against_reference_code"], [146, 2, 1, "", "test_vector_check"], [146, 3, 1, "", "type"], [146, 2, 1, "", "update_input_id_links_from_component_id"], [146, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.spongent_pi_precomputation_permutation": [[147, 1, 1, "", "SpongentPiPrecomputationPermutation"]], "ciphers.permutations.spongent_pi_precomputation_permutation.SpongentPiPrecomputationPermutation": [[147, 2, 1, "", "add_AND_component"], [147, 2, 1, "", "add_FSR_component"], [147, 2, 1, "", "add_MODADD_component"], [147, 2, 1, "", "add_MODSUB_component"], [147, 2, 1, "", "add_NOT_component"], [147, 2, 1, "", "add_OR_component"], [147, 2, 1, "", "add_SBOX_component"], [147, 2, 1, "", "add_SHIFT_component"], [147, 2, 1, "", "add_XOR_component"], [147, 2, 1, "", "add_cipher_output_component"], [147, 2, 1, "", "add_concatenate_component"], [147, 2, 1, "", "add_constant_component"], [147, 2, 1, "", "add_intermediate_output_component"], [147, 2, 1, "", "add_linear_layer_component"], [147, 2, 1, "", "add_mix_column_component"], [147, 2, 1, "", "add_permutation_component"], [147, 2, 1, "", "add_reverse_component"], [147, 2, 1, "", "add_rotate_component"], [147, 2, 1, "", "add_round"], [147, 2, 1, "", "add_round_key_output_component"], [147, 2, 1, "", "add_round_output_component"], [147, 2, 1, "", "add_shift_rows_component"], [147, 2, 1, "", "add_sigma_component"], [147, 2, 1, "", "add_suffix_to_components"], [147, 2, 1, "", "add_theta_keccak_component"], [147, 2, 1, "", "add_theta_xoodoo_component"], [147, 2, 1, "", "add_variable_rotate_component"], [147, 2, 1, "", "add_variable_shift_component"], [147, 2, 1, "", "add_word_permutation_component"], [147, 2, 1, "", "as_python_dictionary"], [147, 2, 1, "", "cipher_inverse"], [147, 2, 1, "", "cipher_partial_inverse"], [147, 2, 1, "", "component_from"], [147, 2, 1, "", "convert_to_compound_xor_cipher"], [147, 2, 1, "", "create_networx_graph_from_input_ids"], [147, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [147, 3, 1, "", "current_round"], [147, 3, 1, "", "current_round_number"], [147, 3, 1, "", "current_round_number_of_components"], [147, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [147, 2, 1, "", "evaluate"], [147, 2, 1, "", "evaluate_using_c"], [147, 2, 1, "", "evaluate_vectorized"], [147, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [147, 3, 1, "", "family_name"], [147, 3, 1, "", "file_name"], [147, 2, 1, "", "find_impossible_property"], [147, 2, 1, "", "generate_bit_based_c_code"], [147, 2, 1, "", "generate_evaluate_c_code_shared_library"], [147, 2, 1, "", "generate_word_based_c_code"], [147, 2, 1, "", "get_all_components"], [147, 2, 1, "", "get_all_components_ids"], [147, 2, 1, "", "get_all_inputs_bit_positions"], [147, 2, 1, "", "get_component_from_id"], [147, 2, 1, "", "get_components_in_round"], [147, 2, 1, "", "get_current_component_id"], [147, 2, 1, "", "get_model"], [147, 2, 1, "", "get_number_of_components_in_round"], [147, 2, 1, "", "get_partial_cipher"], [147, 2, 1, "", "get_round_from_component_id"], [147, 2, 1, "", "get_sizes_of_components_by_type"], [147, 3, 1, "", "id"], [147, 2, 1, "", "impossible_differential_search"], [147, 3, 1, "", "inputs"], [147, 3, 1, "", "inputs_bit_size"], [147, 2, 1, "", "inputs_size_to_dict"], [147, 2, 1, "", "is_algebraically_secure"], [147, 2, 1, "", "is_andrx"], [147, 2, 1, "", "is_arx"], [147, 2, 1, "", "is_power_of_2_word_based"], [147, 2, 1, "", "is_shift_arx"], [147, 2, 1, "", "is_spn"], [147, 2, 1, "", "make_cipher_id"], [147, 2, 1, "", "make_file_name"], [147, 3, 1, "", "number_of_rounds"], [147, 3, 1, "", "output_bit_size"], [147, 2, 1, "", "polynomial_system"], [147, 2, 1, "", "polynomial_system_at_round"], [147, 2, 1, "", "print"], [147, 2, 1, "", "print_as_python_dictionary"], [147, 2, 1, "", "print_as_python_dictionary_to_file"], [147, 2, 1, "", "print_evaluation_python_code"], [147, 2, 1, "", "print_evaluation_python_code_to_file"], [147, 2, 1, "", "print_input_information"], [147, 3, 1, "", "reference_code"], [147, 2, 1, "", "remove_key_schedule"], [147, 2, 1, "", "remove_round_component"], [147, 2, 1, "", "remove_round_component_from_id"], [147, 2, 1, "", "round_function"], [147, 3, 1, "", "rounds"], [147, 3, 1, "", "rounds_as_list"], [147, 2, 1, "", "set_file_name"], [147, 2, 1, "", "set_id"], [147, 2, 1, "", "set_inputs"], [147, 2, 1, "", "sort_cipher"], [147, 2, 1, "", "test_against_reference_code"], [147, 2, 1, "", "test_vector_check"], [147, 3, 1, "", "type"], [147, 2, 1, "", "update_input_id_links_from_component_id"], [147, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.tinyjambu_32bits_word_permutation": [[148, 1, 1, "", "TinyJambuWordBasedPermutation"]], "ciphers.permutations.tinyjambu_32bits_word_permutation.TinyJambuWordBasedPermutation": [[148, 2, 1, "", "add_AND_component"], [148, 2, 1, "", "add_FSR_component"], [148, 2, 1, "", "add_MODADD_component"], [148, 2, 1, "", "add_MODSUB_component"], [148, 2, 1, "", "add_NOT_component"], [148, 2, 1, "", "add_OR_component"], [148, 2, 1, "", "add_SBOX_component"], [148, 2, 1, "", "add_SHIFT_component"], [148, 2, 1, "", "add_XOR_component"], [148, 2, 1, "", "add_cipher_output_component"], [148, 2, 1, "", "add_concatenate_component"], [148, 2, 1, "", "add_constant_component"], [148, 2, 1, "", "add_intermediate_output_component"], [148, 2, 1, "", "add_linear_layer_component"], [148, 2, 1, "", "add_mix_column_component"], [148, 2, 1, "", "add_permutation_component"], [148, 2, 1, "", "add_reverse_component"], [148, 2, 1, "", "add_rotate_component"], [148, 2, 1, "", "add_round"], [148, 2, 1, "", "add_round_key_output_component"], [148, 2, 1, "", "add_round_output_component"], [148, 2, 1, "", "add_shift_rows_component"], [148, 2, 1, "", "add_sigma_component"], [148, 2, 1, "", "add_suffix_to_components"], [148, 2, 1, "", "add_theta_keccak_component"], [148, 2, 1, "", "add_theta_xoodoo_component"], [148, 2, 1, "", "add_variable_rotate_component"], [148, 2, 1, "", "add_variable_shift_component"], [148, 2, 1, "", "add_word_permutation_component"], [148, 2, 1, "", "as_python_dictionary"], [148, 2, 1, "", "cipher_inverse"], [148, 2, 1, "", "cipher_partial_inverse"], [148, 2, 1, "", "component_from"], [148, 2, 1, "", "convert_to_compound_xor_cipher"], [148, 2, 1, "", "create_networx_graph_from_input_ids"], [148, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [148, 3, 1, "", "current_round"], [148, 3, 1, "", "current_round_number"], [148, 3, 1, "", "current_round_number_of_components"], [148, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [148, 2, 1, "", "evaluate"], [148, 2, 1, "", "evaluate_using_c"], [148, 2, 1, "", "evaluate_vectorized"], [148, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [148, 3, 1, "", "family_name"], [148, 3, 1, "", "file_name"], [148, 2, 1, "", "find_impossible_property"], [148, 2, 1, "", "generate_bit_based_c_code"], [148, 2, 1, "", "generate_evaluate_c_code_shared_library"], [148, 2, 1, "", "generate_word_based_c_code"], [148, 2, 1, "", "get_all_components"], [148, 2, 1, "", "get_all_components_ids"], [148, 2, 1, "", "get_all_inputs_bit_positions"], [148, 2, 1, "", "get_component_from_id"], [148, 2, 1, "", "get_components_in_round"], [148, 2, 1, "", "get_current_component_id"], [148, 2, 1, "", "get_model"], [148, 2, 1, "", "get_number_of_components_in_round"], [148, 2, 1, "", "get_partial_cipher"], [148, 2, 1, "", "get_round_from_component_id"], [148, 2, 1, "", "get_sizes_of_components_by_type"], [148, 3, 1, "", "id"], [148, 2, 1, "", "impossible_differential_search"], [148, 3, 1, "", "inputs"], [148, 3, 1, "", "inputs_bit_size"], [148, 2, 1, "", "inputs_size_to_dict"], [148, 2, 1, "", "is_algebraically_secure"], [148, 2, 1, "", "is_andrx"], [148, 2, 1, "", "is_arx"], [148, 2, 1, "", "is_power_of_2_word_based"], [148, 2, 1, "", "is_shift_arx"], [148, 2, 1, "", "is_spn"], [148, 2, 1, "", "make_cipher_id"], [148, 2, 1, "", "make_file_name"], [148, 3, 1, "", "number_of_rounds"], [148, 3, 1, "", "output_bit_size"], [148, 2, 1, "", "polynomial_system"], [148, 2, 1, "", "polynomial_system_at_round"], [148, 2, 1, "", "print"], [148, 2, 1, "", "print_as_python_dictionary"], [148, 2, 1, "", "print_as_python_dictionary_to_file"], [148, 2, 1, "", "print_evaluation_python_code"], [148, 2, 1, "", "print_evaluation_python_code_to_file"], [148, 2, 1, "", "print_input_information"], [148, 3, 1, "", "reference_code"], [148, 2, 1, "", "remove_key_schedule"], [148, 2, 1, "", "remove_round_component"], [148, 2, 1, "", "remove_round_component_from_id"], [148, 2, 1, "", "round_function"], [148, 3, 1, "", "rounds"], [148, 3, 1, "", "rounds_as_list"], [148, 2, 1, "", "set_file_name"], [148, 2, 1, "", "set_id"], [148, 2, 1, "", "set_inputs"], [148, 2, 1, "", "sort_cipher"], [148, 2, 1, "", "test_against_reference_code"], [148, 2, 1, "", "test_vector_check"], [148, 3, 1, "", "type"], [148, 2, 1, "", "update_input_id_links_from_component_id"], [148, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.tinyjambu_fsr_32bits_word_permutation": [[149, 1, 1, "", "TinyJambuFSRWordBasedPermutation"]], "ciphers.permutations.tinyjambu_fsr_32bits_word_permutation.TinyJambuFSRWordBasedPermutation": [[149, 2, 1, "", "add_AND_component"], [149, 2, 1, "", "add_FSR_component"], [149, 2, 1, "", "add_MODADD_component"], [149, 2, 1, "", "add_MODSUB_component"], [149, 2, 1, "", "add_NOT_component"], [149, 2, 1, "", "add_OR_component"], [149, 2, 1, "", "add_SBOX_component"], [149, 2, 1, "", "add_SHIFT_component"], [149, 2, 1, "", "add_XOR_component"], [149, 2, 1, "", "add_cipher_output_component"], [149, 2, 1, "", "add_concatenate_component"], [149, 2, 1, "", "add_constant_component"], [149, 2, 1, "", "add_intermediate_output_component"], [149, 2, 1, "", "add_linear_layer_component"], [149, 2, 1, "", "add_mix_column_component"], [149, 2, 1, "", "add_permutation_component"], [149, 2, 1, "", "add_reverse_component"], [149, 2, 1, "", "add_rotate_component"], [149, 2, 1, "", "add_round"], [149, 2, 1, "", "add_round_key_output_component"], [149, 2, 1, "", "add_round_output_component"], [149, 2, 1, "", "add_shift_rows_component"], [149, 2, 1, "", "add_sigma_component"], [149, 2, 1, "", "add_suffix_to_components"], [149, 2, 1, "", "add_theta_keccak_component"], [149, 2, 1, "", "add_theta_xoodoo_component"], [149, 2, 1, "", "add_variable_rotate_component"], [149, 2, 1, "", "add_variable_shift_component"], [149, 2, 1, "", "add_word_permutation_component"], [149, 2, 1, "", "as_python_dictionary"], [149, 2, 1, "", "cipher_inverse"], [149, 2, 1, "", "cipher_partial_inverse"], [149, 2, 1, "", "component_from"], [149, 2, 1, "", "convert_to_compound_xor_cipher"], [149, 2, 1, "", "create_networx_graph_from_input_ids"], [149, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [149, 3, 1, "", "current_round"], [149, 3, 1, "", "current_round_number"], [149, 3, 1, "", "current_round_number_of_components"], [149, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [149, 2, 1, "", "evaluate"], [149, 2, 1, "", "evaluate_using_c"], [149, 2, 1, "", "evaluate_vectorized"], [149, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [149, 3, 1, "", "family_name"], [149, 3, 1, "", "file_name"], [149, 2, 1, "", "find_impossible_property"], [149, 2, 1, "", "generate_bit_based_c_code"], [149, 2, 1, "", "generate_evaluate_c_code_shared_library"], [149, 2, 1, "", "generate_word_based_c_code"], [149, 2, 1, "", "get_all_components"], [149, 2, 1, "", "get_all_components_ids"], [149, 2, 1, "", "get_all_inputs_bit_positions"], [149, 2, 1, "", "get_component_from_id"], [149, 2, 1, "", "get_components_in_round"], [149, 2, 1, "", "get_current_component_id"], [149, 2, 1, "", "get_model"], [149, 2, 1, "", "get_number_of_components_in_round"], [149, 2, 1, "", "get_partial_cipher"], [149, 2, 1, "", "get_round_from_component_id"], [149, 2, 1, "", "get_sizes_of_components_by_type"], [149, 3, 1, "", "id"], [149, 2, 1, "", "impossible_differential_search"], [149, 3, 1, "", "inputs"], [149, 3, 1, "", "inputs_bit_size"], [149, 2, 1, "", "inputs_size_to_dict"], [149, 2, 1, "", "is_algebraically_secure"], [149, 2, 1, "", "is_andrx"], [149, 2, 1, "", "is_arx"], [149, 2, 1, "", "is_power_of_2_word_based"], [149, 2, 1, "", "is_shift_arx"], [149, 2, 1, "", "is_spn"], [149, 2, 1, "", "make_cipher_id"], [149, 2, 1, "", "make_file_name"], [149, 3, 1, "", "number_of_rounds"], [149, 3, 1, "", "output_bit_size"], [149, 2, 1, "", "polynomial_system"], [149, 2, 1, "", "polynomial_system_at_round"], [149, 2, 1, "", "print"], [149, 2, 1, "", "print_as_python_dictionary"], [149, 2, 1, "", "print_as_python_dictionary_to_file"], [149, 2, 1, "", "print_evaluation_python_code"], [149, 2, 1, "", "print_evaluation_python_code_to_file"], [149, 2, 1, "", "print_input_information"], [149, 3, 1, "", "reference_code"], [149, 2, 1, "", "remove_key_schedule"], [149, 2, 1, "", "remove_round_component"], [149, 2, 1, "", "remove_round_component_from_id"], [149, 2, 1, "", "round_function"], [149, 3, 1, "", "rounds"], [149, 3, 1, "", "rounds_as_list"], [149, 2, 1, "", "set_file_name"], [149, 2, 1, "", "set_id"], [149, 2, 1, "", "set_inputs"], [149, 2, 1, "", "sort_cipher"], [149, 2, 1, "", "test_against_reference_code"], [149, 2, 1, "", "test_vector_check"], [149, 3, 1, "", "type"], [149, 2, 1, "", "update_input_id_links_from_component_id"], [149, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.tinyjambu_permutation": [[150, 1, 1, "", "TinyJambuPermutation"]], "ciphers.permutations.tinyjambu_permutation.TinyJambuPermutation": [[150, 2, 1, "", "add_AND_component"], [150, 2, 1, "", "add_FSR_component"], [150, 2, 1, "", "add_MODADD_component"], [150, 2, 1, "", "add_MODSUB_component"], [150, 2, 1, "", "add_NOT_component"], [150, 2, 1, "", "add_OR_component"], [150, 2, 1, "", "add_SBOX_component"], [150, 2, 1, "", "add_SHIFT_component"], [150, 2, 1, "", "add_XOR_component"], [150, 2, 1, "", "add_cipher_output_component"], [150, 2, 1, "", "add_concatenate_component"], [150, 2, 1, "", "add_constant_component"], [150, 2, 1, "", "add_intermediate_output_component"], [150, 2, 1, "", "add_linear_layer_component"], [150, 2, 1, "", "add_mix_column_component"], [150, 2, 1, "", "add_permutation_component"], [150, 2, 1, "", "add_reverse_component"], [150, 2, 1, "", "add_rotate_component"], [150, 2, 1, "", "add_round"], [150, 2, 1, "", "add_round_key_output_component"], [150, 2, 1, "", "add_round_output_component"], [150, 2, 1, "", "add_shift_rows_component"], [150, 2, 1, "", "add_sigma_component"], [150, 2, 1, "", "add_suffix_to_components"], [150, 2, 1, "", "add_theta_keccak_component"], [150, 2, 1, "", "add_theta_xoodoo_component"], [150, 2, 1, "", "add_variable_rotate_component"], [150, 2, 1, "", "add_variable_shift_component"], [150, 2, 1, "", "add_word_permutation_component"], [150, 2, 1, "", "as_python_dictionary"], [150, 2, 1, "", "cipher_inverse"], [150, 2, 1, "", "cipher_partial_inverse"], [150, 2, 1, "", "component_from"], [150, 2, 1, "", "convert_to_compound_xor_cipher"], [150, 2, 1, "", "create_networx_graph_from_input_ids"], [150, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [150, 3, 1, "", "current_round"], [150, 3, 1, "", "current_round_number"], [150, 3, 1, "", "current_round_number_of_components"], [150, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [150, 2, 1, "", "evaluate"], [150, 2, 1, "", "evaluate_using_c"], [150, 2, 1, "", "evaluate_vectorized"], [150, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [150, 3, 1, "", "family_name"], [150, 3, 1, "", "file_name"], [150, 2, 1, "", "find_impossible_property"], [150, 2, 1, "", "generate_bit_based_c_code"], [150, 2, 1, "", "generate_evaluate_c_code_shared_library"], [150, 2, 1, "", "generate_word_based_c_code"], [150, 2, 1, "", "get_all_components"], [150, 2, 1, "", "get_all_components_ids"], [150, 2, 1, "", "get_all_inputs_bit_positions"], [150, 2, 1, "", "get_component_from_id"], [150, 2, 1, "", "get_components_in_round"], [150, 2, 1, "", "get_current_component_id"], [150, 2, 1, "", "get_model"], [150, 2, 1, "", "get_number_of_components_in_round"], [150, 2, 1, "", "get_partial_cipher"], [150, 2, 1, "", "get_round_from_component_id"], [150, 2, 1, "", "get_sizes_of_components_by_type"], [150, 3, 1, "", "id"], [150, 2, 1, "", "impossible_differential_search"], [150, 3, 1, "", "inputs"], [150, 3, 1, "", "inputs_bit_size"], [150, 2, 1, "", "inputs_size_to_dict"], [150, 2, 1, "", "is_algebraically_secure"], [150, 2, 1, "", "is_andrx"], [150, 2, 1, "", "is_arx"], [150, 2, 1, "", "is_power_of_2_word_based"], [150, 2, 1, "", "is_shift_arx"], [150, 2, 1, "", "is_spn"], [150, 2, 1, "", "make_cipher_id"], [150, 2, 1, "", "make_file_name"], [150, 3, 1, "", "number_of_rounds"], [150, 3, 1, "", "output_bit_size"], [150, 2, 1, "", "polynomial_system"], [150, 2, 1, "", "polynomial_system_at_round"], [150, 2, 1, "", "print"], [150, 2, 1, "", "print_as_python_dictionary"], [150, 2, 1, "", "print_as_python_dictionary_to_file"], [150, 2, 1, "", "print_evaluation_python_code"], [150, 2, 1, "", "print_evaluation_python_code_to_file"], [150, 2, 1, "", "print_input_information"], [150, 3, 1, "", "reference_code"], [150, 2, 1, "", "remove_key_schedule"], [150, 2, 1, "", "remove_round_component"], [150, 2, 1, "", "remove_round_component_from_id"], [150, 2, 1, "", "round_function"], [150, 3, 1, "", "rounds"], [150, 3, 1, "", "rounds_as_list"], [150, 2, 1, "", "set_file_name"], [150, 2, 1, "", "set_id"], [150, 2, 1, "", "set_inputs"], [150, 2, 1, "", "sort_cipher"], [150, 2, 1, "", "test_against_reference_code"], [150, 2, 1, "", "test_vector_check"], [150, 3, 1, "", "type"], [150, 2, 1, "", "update_input_id_links_from_component_id"], [150, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.util": [[151, 4, 1, "", "add_intermediate_output_component_latin_dances_permutations"], [151, 4, 1, "", "get_input_bit_positions_latin_dances"], [151, 4, 1, "", "half_like_round_function_latin_dances"], [151, 4, 1, "", "init_latin_dances_cipher"], [151, 4, 1, "", "init_state_latin_dances"], [151, 4, 1, "", "print_state_ids"], [151, 4, 1, "", "sub_quarter_round_latin_dances"]], "ciphers.permutations.xoodoo_invertible_permutation": [[152, 1, 1, "", "XoodooInvertiblePermutation"]], "ciphers.permutations.xoodoo_invertible_permutation.XoodooInvertiblePermutation": [[152, 2, 1, "", "add_AND_component"], [152, 2, 1, "", "add_FSR_component"], [152, 2, 1, "", "add_MODADD_component"], [152, 2, 1, "", "add_MODSUB_component"], [152, 2, 1, "", "add_NOT_component"], [152, 2, 1, "", "add_OR_component"], [152, 2, 1, "", "add_SBOX_component"], [152, 2, 1, "", "add_SHIFT_component"], [152, 2, 1, "", "add_XOR_component"], [152, 2, 1, "", "add_cipher_output_component"], [152, 2, 1, "", "add_concatenate_component"], [152, 2, 1, "", "add_constant_component"], [152, 2, 1, "", "add_intermediate_output_component"], [152, 2, 1, "", "add_linear_layer_component"], [152, 2, 1, "", "add_mix_column_component"], [152, 2, 1, "", "add_output_component"], [152, 2, 1, "", "add_permutation_component"], [152, 2, 1, "", "add_reverse_component"], [152, 2, 1, "", "add_rotate_component"], [152, 2, 1, "", "add_round"], [152, 2, 1, "", "add_round_key_output_component"], [152, 2, 1, "", "add_round_output_component"], [152, 2, 1, "", "add_shift_rows_component"], [152, 2, 1, "", "add_sigma_component"], [152, 2, 1, "", "add_suffix_to_components"], [152, 2, 1, "", "add_theta_keccak_component"], [152, 2, 1, "", "add_theta_xoodoo_component"], [152, 2, 1, "", "add_variable_rotate_component"], [152, 2, 1, "", "add_variable_shift_component"], [152, 2, 1, "", "add_word_permutation_component"], [152, 2, 1, "", "apply_sbox_to_each_3bit_column"], [152, 2, 1, "", "as_python_dictionary"], [152, 2, 1, "", "chi_definition"], [152, 2, 1, "", "cipher_inverse"], [152, 2, 1, "", "cipher_partial_inverse"], [152, 2, 1, "", "component_from"], [152, 2, 1, "", "convert_to_compound_xor_cipher"], [152, 2, 1, "", "create_networx_graph_from_input_ids"], [152, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [152, 3, 1, "", "current_round"], [152, 3, 1, "", "current_round_number"], [152, 3, 1, "", "current_round_number_of_components"], [152, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [152, 2, 1, "", "evaluate"], [152, 2, 1, "", "evaluate_using_c"], [152, 2, 1, "", "evaluate_vectorized"], [152, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [152, 3, 1, "", "family_name"], [152, 3, 1, "", "file_name"], [152, 2, 1, "", "find_impossible_property"], [152, 2, 1, "", "generate_bit_based_c_code"], [152, 2, 1, "", "generate_evaluate_c_code_shared_library"], [152, 2, 1, "", "generate_word_based_c_code"], [152, 2, 1, "", "get_all_components"], [152, 2, 1, "", "get_all_components_ids"], [152, 2, 1, "", "get_all_inputs_bit_positions"], [152, 2, 1, "", "get_component_from_id"], [152, 2, 1, "", "get_components_in_round"], [152, 2, 1, "", "get_current_component_id"], [152, 2, 1, "", "get_model"], [152, 2, 1, "", "get_number_of_components_in_round"], [152, 2, 1, "", "get_partial_cipher"], [152, 2, 1, "", "get_round_from_component_id"], [152, 2, 1, "", "get_sizes_of_components_by_type"], [152, 3, 1, "", "id"], [152, 2, 1, "", "impossible_differential_search"], [152, 3, 1, "", "inputs"], [152, 3, 1, "", "inputs_bit_size"], [152, 2, 1, "", "inputs_size_to_dict"], [152, 2, 1, "", "iota_definition"], [152, 2, 1, "", "is_algebraically_secure"], [152, 2, 1, "", "is_andrx"], [152, 2, 1, "", "is_arx"], [152, 2, 1, "", "is_power_of_2_word_based"], [152, 2, 1, "", "is_shift_arx"], [152, 2, 1, "", "is_spn"], [152, 2, 1, "", "make_cipher_id"], [152, 2, 1, "", "make_file_name"], [152, 3, 1, "", "number_of_rounds"], [152, 3, 1, "", "output_bit_size"], [152, 2, 1, "", "polynomial_system"], [152, 2, 1, "", "polynomial_system_at_round"], [152, 2, 1, "", "print"], [152, 2, 1, "", "print_as_python_dictionary"], [152, 2, 1, "", "print_as_python_dictionary_to_file"], [152, 2, 1, "", "print_evaluation_python_code"], [152, 2, 1, "", "print_evaluation_python_code_to_file"], [152, 2, 1, "", "print_input_information"], [152, 3, 1, "", "reference_code"], [152, 2, 1, "", "remove_key_schedule"], [152, 2, 1, "", "remove_round_component"], [152, 2, 1, "", "remove_round_component_from_id"], [152, 2, 1, "", "rhoeast_definition"], [152, 2, 1, "", "rhowest_definition"], [152, 2, 1, "", "rotate_x_z"], [152, 2, 1, "", "round_function"], [152, 3, 1, "", "rounds"], [152, 3, 1, "", "rounds_as_list"], [152, 2, 1, "", "set_file_name"], [152, 2, 1, "", "set_id"], [152, 2, 1, "", "set_inputs"], [152, 2, 1, "", "sort_cipher"], [152, 2, 1, "", "test_against_reference_code"], [152, 2, 1, "", "test_vector_check"], [152, 2, 1, "", "theta_definition"], [152, 3, 1, "", "type"], [152, 2, 1, "", "update_input_id_links_from_component_id"], [152, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.xoodoo_permutation": [[153, 1, 1, "", "XoodooPermutation"]], "ciphers.permutations.xoodoo_permutation.XoodooPermutation": [[153, 2, 1, "", "add_AND_component"], [153, 2, 1, "", "add_FSR_component"], [153, 2, 1, "", "add_MODADD_component"], [153, 2, 1, "", "add_MODSUB_component"], [153, 2, 1, "", "add_NOT_component"], [153, 2, 1, "", "add_OR_component"], [153, 2, 1, "", "add_SBOX_component"], [153, 2, 1, "", "add_SHIFT_component"], [153, 2, 1, "", "add_XOR_component"], [153, 2, 1, "", "add_cipher_output_component"], [153, 2, 1, "", "add_concatenate_component"], [153, 2, 1, "", "add_constant_component"], [153, 2, 1, "", "add_intermediate_output_component"], [153, 2, 1, "", "add_linear_layer_component"], [153, 2, 1, "", "add_mix_column_component"], [153, 2, 1, "", "add_output_component"], [153, 2, 1, "", "add_permutation_component"], [153, 2, 1, "", "add_reverse_component"], [153, 2, 1, "", "add_rotate_component"], [153, 2, 1, "", "add_round"], [153, 2, 1, "", "add_round_key_output_component"], [153, 2, 1, "", "add_round_output_component"], [153, 2, 1, "", "add_round_output_linear"], [153, 2, 1, "", "add_round_output_nonlinear"], [153, 2, 1, "", "add_shift_rows_component"], [153, 2, 1, "", "add_sigma_component"], [153, 2, 1, "", "add_suffix_to_components"], [153, 2, 1, "", "add_theta_keccak_component"], [153, 2, 1, "", "add_theta_xoodoo_component"], [153, 2, 1, "", "add_variable_rotate_component"], [153, 2, 1, "", "add_variable_shift_component"], [153, 2, 1, "", "add_word_permutation_component"], [153, 2, 1, "", "as_python_dictionary"], [153, 2, 1, "", "chi_definition"], [153, 2, 1, "", "cipher_inverse"], [153, 2, 1, "", "cipher_partial_inverse"], [153, 2, 1, "", "component_from"], [153, 2, 1, "", "convert_to_compound_xor_cipher"], [153, 2, 1, "", "create_networx_graph_from_input_ids"], [153, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [153, 3, 1, "", "current_round"], [153, 3, 1, "", "current_round_number"], [153, 3, 1, "", "current_round_number_of_components"], [153, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [153, 2, 1, "", "evaluate"], [153, 2, 1, "", "evaluate_using_c"], [153, 2, 1, "", "evaluate_vectorized"], [153, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [153, 3, 1, "", "family_name"], [153, 3, 1, "", "file_name"], [153, 2, 1, "", "find_impossible_property"], [153, 2, 1, "", "generate_bit_based_c_code"], [153, 2, 1, "", "generate_evaluate_c_code_shared_library"], [153, 2, 1, "", "generate_word_based_c_code"], [153, 2, 1, "", "get_all_components"], [153, 2, 1, "", "get_all_components_ids"], [153, 2, 1, "", "get_all_inputs_bit_positions"], [153, 2, 1, "", "get_component_from_id"], [153, 2, 1, "", "get_components_in_round"], [153, 2, 1, "", "get_current_component_id"], [153, 2, 1, "", "get_model"], [153, 2, 1, "", "get_number_of_components_in_round"], [153, 2, 1, "", "get_partial_cipher"], [153, 2, 1, "", "get_round_from_component_id"], [153, 2, 1, "", "get_sizes_of_components_by_type"], [153, 3, 1, "", "id"], [153, 2, 1, "", "impossible_differential_search"], [153, 3, 1, "", "inputs"], [153, 3, 1, "", "inputs_bit_size"], [153, 2, 1, "", "inputs_size_to_dict"], [153, 2, 1, "", "iota_definition"], [153, 2, 1, "", "is_algebraically_secure"], [153, 2, 1, "", "is_andrx"], [153, 2, 1, "", "is_arx"], [153, 2, 1, "", "is_power_of_2_word_based"], [153, 2, 1, "", "is_shift_arx"], [153, 2, 1, "", "is_spn"], [153, 2, 1, "", "make_cipher_id"], [153, 2, 1, "", "make_file_name"], [153, 3, 1, "", "number_of_rounds"], [153, 3, 1, "", "output_bit_size"], [153, 2, 1, "", "polynomial_system"], [153, 2, 1, "", "polynomial_system_at_round"], [153, 2, 1, "", "print"], [153, 2, 1, "", "print_as_python_dictionary"], [153, 2, 1, "", "print_as_python_dictionary_to_file"], [153, 2, 1, "", "print_evaluation_python_code"], [153, 2, 1, "", "print_evaluation_python_code_to_file"], [153, 2, 1, "", "print_input_information"], [153, 3, 1, "", "reference_code"], [153, 2, 1, "", "remove_key_schedule"], [153, 2, 1, "", "remove_round_component"], [153, 2, 1, "", "remove_round_component_from_id"], [153, 2, 1, "", "rhoeast_definition"], [153, 2, 1, "", "rhowest_definition"], [153, 2, 1, "", "rotate_x_z"], [153, 2, 1, "", "round_function"], [153, 3, 1, "", "rounds"], [153, 3, 1, "", "rounds_as_list"], [153, 2, 1, "", "set_file_name"], [153, 2, 1, "", "set_id"], [153, 2, 1, "", "set_inputs"], [153, 2, 1, "", "sort_cipher"], [153, 2, 1, "", "test_against_reference_code"], [153, 2, 1, "", "test_vector_check"], [153, 2, 1, "", "theta_definition"], [153, 3, 1, "", "type"], [153, 2, 1, "", "update_input_id_links_from_component_id"], [153, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.xoodoo_sbox_permutation": [[154, 1, 1, "", "XoodooSboxPermutation"]], "ciphers.permutations.xoodoo_sbox_permutation.XoodooSboxPermutation": [[154, 2, 1, "", "add_AND_component"], [154, 2, 1, "", "add_FSR_component"], [154, 2, 1, "", "add_MODADD_component"], [154, 2, 1, "", "add_MODSUB_component"], [154, 2, 1, "", "add_NOT_component"], [154, 2, 1, "", "add_OR_component"], [154, 2, 1, "", "add_SBOX_component"], [154, 2, 1, "", "add_SHIFT_component"], [154, 2, 1, "", "add_XOR_component"], [154, 2, 1, "", "add_cipher_output_component"], [154, 2, 1, "", "add_concatenate_component"], [154, 2, 1, "", "add_constant_component"], [154, 2, 1, "", "add_intermediate_output_component"], [154, 2, 1, "", "add_linear_layer_component"], [154, 2, 1, "", "add_mix_column_component"], [154, 2, 1, "", "add_output_component"], [154, 2, 1, "", "add_permutation_component"], [154, 2, 1, "", "add_reverse_component"], [154, 2, 1, "", "add_rotate_component"], [154, 2, 1, "", "add_round"], [154, 2, 1, "", "add_round_key_output_component"], [154, 2, 1, "", "add_round_output_component"], [154, 2, 1, "", "add_shift_rows_component"], [154, 2, 1, "", "add_sigma_component"], [154, 2, 1, "", "add_suffix_to_components"], [154, 2, 1, "", "add_theta_keccak_component"], [154, 2, 1, "", "add_theta_xoodoo_component"], [154, 2, 1, "", "add_variable_rotate_component"], [154, 2, 1, "", "add_variable_shift_component"], [154, 2, 1, "", "add_word_permutation_component"], [154, 2, 1, "", "apply_sbox_to_each_3bit_column"], [154, 2, 1, "", "as_python_dictionary"], [154, 2, 1, "", "chi_definition"], [154, 2, 1, "", "cipher_inverse"], [154, 2, 1, "", "cipher_partial_inverse"], [154, 2, 1, "", "component_from"], [154, 2, 1, "", "convert_to_compound_xor_cipher"], [154, 2, 1, "", "create_networx_graph_from_input_ids"], [154, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [154, 3, 1, "", "current_round"], [154, 3, 1, "", "current_round_number"], [154, 3, 1, "", "current_round_number_of_components"], [154, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [154, 2, 1, "", "evaluate"], [154, 2, 1, "", "evaluate_using_c"], [154, 2, 1, "", "evaluate_vectorized"], [154, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [154, 3, 1, "", "family_name"], [154, 3, 1, "", "file_name"], [154, 2, 1, "", "find_impossible_property"], [154, 2, 1, "", "generate_bit_based_c_code"], [154, 2, 1, "", "generate_evaluate_c_code_shared_library"], [154, 2, 1, "", "generate_word_based_c_code"], [154, 2, 1, "", "get_all_components"], [154, 2, 1, "", "get_all_components_ids"], [154, 2, 1, "", "get_all_inputs_bit_positions"], [154, 2, 1, "", "get_component_from_id"], [154, 2, 1, "", "get_components_in_round"], [154, 2, 1, "", "get_current_component_id"], [154, 2, 1, "", "get_model"], [154, 2, 1, "", "get_number_of_components_in_round"], [154, 2, 1, "", "get_partial_cipher"], [154, 2, 1, "", "get_round_from_component_id"], [154, 2, 1, "", "get_sizes_of_components_by_type"], [154, 3, 1, "", "id"], [154, 2, 1, "", "impossible_differential_search"], [154, 3, 1, "", "inputs"], [154, 3, 1, "", "inputs_bit_size"], [154, 2, 1, "", "inputs_size_to_dict"], [154, 2, 1, "", "iota_definition"], [154, 2, 1, "", "is_algebraically_secure"], [154, 2, 1, "", "is_andrx"], [154, 2, 1, "", "is_arx"], [154, 2, 1, "", "is_power_of_2_word_based"], [154, 2, 1, "", "is_shift_arx"], [154, 2, 1, "", "is_spn"], [154, 2, 1, "", "make_cipher_id"], [154, 2, 1, "", "make_file_name"], [154, 3, 1, "", "number_of_rounds"], [154, 3, 1, "", "output_bit_size"], [154, 2, 1, "", "polynomial_system"], [154, 2, 1, "", "polynomial_system_at_round"], [154, 2, 1, "", "print"], [154, 2, 1, "", "print_as_python_dictionary"], [154, 2, 1, "", "print_as_python_dictionary_to_file"], [154, 2, 1, "", "print_evaluation_python_code"], [154, 2, 1, "", "print_evaluation_python_code_to_file"], [154, 2, 1, "", "print_input_information"], [154, 3, 1, "", "reference_code"], [154, 2, 1, "", "remove_key_schedule"], [154, 2, 1, "", "remove_round_component"], [154, 2, 1, "", "remove_round_component_from_id"], [154, 2, 1, "", "rhoeast_definition"], [154, 2, 1, "", "rhowest_definition"], [154, 2, 1, "", "rotate_x_z"], [154, 2, 1, "", "round_function"], [154, 3, 1, "", "rounds"], [154, 3, 1, "", "rounds_as_list"], [154, 2, 1, "", "set_file_name"], [154, 2, 1, "", "set_id"], [154, 2, 1, "", "set_inputs"], [154, 2, 1, "", "sort_cipher"], [154, 2, 1, "", "test_against_reference_code"], [154, 2, 1, "", "test_vector_check"], [154, 2, 1, "", "theta_definition"], [154, 3, 1, "", "type"], [154, 2, 1, "", "update_input_id_links_from_component_id"], [154, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers": [[155, 0, 0, "-", "a5_1_stream_cipher"], [156, 0, 0, "-", "a5_2_stream_cipher"], [157, 0, 0, "-", "bivium_stream_cipher"], [158, 0, 0, "-", "bluetooth_stream_cipher_e0"], [159, 0, 0, "-", "chacha_stream_cipher"], [160, 0, 0, "-", "snow3g_stream_cipher"], [161, 0, 0, "-", "trivium_stream_cipher"], [162, 0, 0, "-", "zuc_stream_cipher"]], "ciphers.stream_ciphers.a5_1_stream_cipher": [[155, 1, 1, "", "A51StreamCipher"]], "ciphers.stream_ciphers.a5_1_stream_cipher.A51StreamCipher": [[155, 2, 1, "", "add_AND_component"], [155, 2, 1, "", "add_FSR_component"], [155, 2, 1, "", "add_MODADD_component"], [155, 2, 1, "", "add_MODSUB_component"], [155, 2, 1, "", "add_NOT_component"], [155, 2, 1, "", "add_OR_component"], [155, 2, 1, "", "add_SBOX_component"], [155, 2, 1, "", "add_SHIFT_component"], [155, 2, 1, "", "add_XOR_component"], [155, 2, 1, "", "add_cipher_output_component"], [155, 2, 1, "", "add_concatenate_component"], [155, 2, 1, "", "add_constant_component"], [155, 2, 1, "", "add_intermediate_output_component"], [155, 2, 1, "", "add_linear_layer_component"], [155, 2, 1, "", "add_mix_column_component"], [155, 2, 1, "", "add_permutation_component"], [155, 2, 1, "", "add_reverse_component"], [155, 2, 1, "", "add_rotate_component"], [155, 2, 1, "", "add_round"], [155, 2, 1, "", "add_round_key_output_component"], [155, 2, 1, "", "add_round_output_component"], [155, 2, 1, "", "add_shift_rows_component"], [155, 2, 1, "", "add_sigma_component"], [155, 2, 1, "", "add_suffix_to_components"], [155, 2, 1, "", "add_theta_keccak_component"], [155, 2, 1, "", "add_theta_xoodoo_component"], [155, 2, 1, "", "add_variable_rotate_component"], [155, 2, 1, "", "add_variable_shift_component"], [155, 2, 1, "", "add_word_permutation_component"], [155, 2, 1, "", "as_python_dictionary"], [155, 2, 1, "", "cipher_inverse"], [155, 2, 1, "", "cipher_partial_inverse"], [155, 2, 1, "", "component_from"], [155, 2, 1, "", "convert_to_compound_xor_cipher"], [155, 2, 1, "", "create_networx_graph_from_input_ids"], [155, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [155, 3, 1, "", "current_round"], [155, 3, 1, "", "current_round_number"], [155, 3, 1, "", "current_round_number_of_components"], [155, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [155, 2, 1, "", "evaluate"], [155, 2, 1, "", "evaluate_using_c"], [155, 2, 1, "", "evaluate_vectorized"], [155, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [155, 3, 1, "", "family_name"], [155, 3, 1, "", "file_name"], [155, 2, 1, "", "find_impossible_property"], [155, 2, 1, "", "generate_bit_based_c_code"], [155, 2, 1, "", "generate_evaluate_c_code_shared_library"], [155, 2, 1, "", "generate_word_based_c_code"], [155, 2, 1, "", "get_all_components"], [155, 2, 1, "", "get_all_components_ids"], [155, 2, 1, "", "get_all_inputs_bit_positions"], [155, 2, 1, "", "get_component_from_id"], [155, 2, 1, "", "get_components_in_round"], [155, 2, 1, "", "get_current_component_id"], [155, 2, 1, "", "get_model"], [155, 2, 1, "", "get_number_of_components_in_round"], [155, 2, 1, "", "get_partial_cipher"], [155, 2, 1, "", "get_round_from_component_id"], [155, 2, 1, "", "get_sizes_of_components_by_type"], [155, 3, 1, "", "id"], [155, 2, 1, "", "impossible_differential_search"], [155, 3, 1, "", "inputs"], [155, 3, 1, "", "inputs_bit_size"], [155, 2, 1, "", "inputs_size_to_dict"], [155, 2, 1, "", "is_algebraically_secure"], [155, 2, 1, "", "is_andrx"], [155, 2, 1, "", "is_arx"], [155, 2, 1, "", "is_power_of_2_word_based"], [155, 2, 1, "", "is_shift_arx"], [155, 2, 1, "", "is_spn"], [155, 2, 1, "", "make_cipher_id"], [155, 2, 1, "", "make_file_name"], [155, 3, 1, "", "number_of_rounds"], [155, 3, 1, "", "output_bit_size"], [155, 2, 1, "", "polynomial_system"], [155, 2, 1, "", "polynomial_system_at_round"], [155, 2, 1, "", "print"], [155, 2, 1, "", "print_as_python_dictionary"], [155, 2, 1, "", "print_as_python_dictionary_to_file"], [155, 2, 1, "", "print_evaluation_python_code"], [155, 2, 1, "", "print_evaluation_python_code_to_file"], [155, 2, 1, "", "print_input_information"], [155, 3, 1, "", "reference_code"], [155, 2, 1, "", "regs_initialization"], [155, 2, 1, "", "remove_key_schedule"], [155, 2, 1, "", "remove_round_component"], [155, 2, 1, "", "remove_round_component_from_id"], [155, 2, 1, "", "round_function"], [155, 3, 1, "", "rounds"], [155, 3, 1, "", "rounds_as_list"], [155, 2, 1, "", "set_file_name"], [155, 2, 1, "", "set_id"], [155, 2, 1, "", "set_inputs"], [155, 2, 1, "", "sort_cipher"], [155, 2, 1, "", "test_against_reference_code"], [155, 2, 1, "", "test_vector_check"], [155, 3, 1, "", "type"], [155, 2, 1, "", "update_input_id_links_from_component_id"], [155, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.a5_2_stream_cipher": [[156, 1, 1, "", "A52StreamCipher"]], "ciphers.stream_ciphers.a5_2_stream_cipher.A52StreamCipher": [[156, 2, 1, "", "add_AND_component"], [156, 2, 1, "", "add_FSR_component"], [156, 2, 1, "", "add_MODADD_component"], [156, 2, 1, "", "add_MODSUB_component"], [156, 2, 1, "", "add_NOT_component"], [156, 2, 1, "", "add_OR_component"], [156, 2, 1, "", "add_SBOX_component"], [156, 2, 1, "", "add_SHIFT_component"], [156, 2, 1, "", "add_XOR_component"], [156, 2, 1, "", "add_cipher_output_component"], [156, 2, 1, "", "add_concatenate_component"], [156, 2, 1, "", "add_constant_component"], [156, 2, 1, "", "add_intermediate_output_component"], [156, 2, 1, "", "add_linear_layer_component"], [156, 2, 1, "", "add_mix_column_component"], [156, 2, 1, "", "add_permutation_component"], [156, 2, 1, "", "add_reverse_component"], [156, 2, 1, "", "add_rotate_component"], [156, 2, 1, "", "add_round"], [156, 2, 1, "", "add_round_key_output_component"], [156, 2, 1, "", "add_round_output_component"], [156, 2, 1, "", "add_shift_rows_component"], [156, 2, 1, "", "add_sigma_component"], [156, 2, 1, "", "add_suffix_to_components"], [156, 2, 1, "", "add_theta_keccak_component"], [156, 2, 1, "", "add_theta_xoodoo_component"], [156, 2, 1, "", "add_variable_rotate_component"], [156, 2, 1, "", "add_variable_shift_component"], [156, 2, 1, "", "add_word_permutation_component"], [156, 2, 1, "", "as_python_dictionary"], [156, 2, 1, "", "cipher_inverse"], [156, 2, 1, "", "cipher_partial_inverse"], [156, 2, 1, "", "component_from"], [156, 2, 1, "", "convert_to_compound_xor_cipher"], [156, 2, 1, "", "create_networx_graph_from_input_ids"], [156, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [156, 3, 1, "", "current_round"], [156, 3, 1, "", "current_round_number"], [156, 3, 1, "", "current_round_number_of_components"], [156, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [156, 2, 1, "", "evaluate"], [156, 2, 1, "", "evaluate_using_c"], [156, 2, 1, "", "evaluate_vectorized"], [156, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [156, 3, 1, "", "family_name"], [156, 3, 1, "", "file_name"], [156, 2, 1, "", "find_impossible_property"], [156, 2, 1, "", "generate_bit_based_c_code"], [156, 2, 1, "", "generate_evaluate_c_code_shared_library"], [156, 2, 1, "", "generate_word_based_c_code"], [156, 2, 1, "", "get_all_components"], [156, 2, 1, "", "get_all_components_ids"], [156, 2, 1, "", "get_all_inputs_bit_positions"], [156, 2, 1, "", "get_component_from_id"], [156, 2, 1, "", "get_components_in_round"], [156, 2, 1, "", "get_current_component_id"], [156, 2, 1, "", "get_model"], [156, 2, 1, "", "get_number_of_components_in_round"], [156, 2, 1, "", "get_partial_cipher"], [156, 2, 1, "", "get_round_from_component_id"], [156, 2, 1, "", "get_sizes_of_components_by_type"], [156, 3, 1, "", "id"], [156, 2, 1, "", "impossible_differential_search"], [156, 3, 1, "", "inputs"], [156, 3, 1, "", "inputs_bit_size"], [156, 2, 1, "", "inputs_size_to_dict"], [156, 2, 1, "", "is_algebraically_secure"], [156, 2, 1, "", "is_andrx"], [156, 2, 1, "", "is_arx"], [156, 2, 1, "", "is_power_of_2_word_based"], [156, 2, 1, "", "is_shift_arx"], [156, 2, 1, "", "is_spn"], [156, 2, 1, "", "make_cipher_id"], [156, 2, 1, "", "make_file_name"], [156, 3, 1, "", "number_of_rounds"], [156, 3, 1, "", "output_bit_size"], [156, 2, 1, "", "polynomial_system"], [156, 2, 1, "", "polynomial_system_at_round"], [156, 2, 1, "", "print"], [156, 2, 1, "", "print_as_python_dictionary"], [156, 2, 1, "", "print_as_python_dictionary_to_file"], [156, 2, 1, "", "print_evaluation_python_code"], [156, 2, 1, "", "print_evaluation_python_code_to_file"], [156, 2, 1, "", "print_input_information"], [156, 3, 1, "", "reference_code"], [156, 2, 1, "", "remove_key_schedule"], [156, 2, 1, "", "remove_round_component"], [156, 2, 1, "", "remove_round_component_from_id"], [156, 3, 1, "", "rounds"], [156, 3, 1, "", "rounds_as_list"], [156, 2, 1, "", "set_file_name"], [156, 2, 1, "", "set_id"], [156, 2, 1, "", "set_inputs"], [156, 2, 1, "", "sort_cipher"], [156, 2, 1, "", "test_against_reference_code"], [156, 2, 1, "", "test_vector_check"], [156, 3, 1, "", "type"], [156, 2, 1, "", "update_input_id_links_from_component_id"], [156, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.bivium_stream_cipher": [[157, 1, 1, "", "BiviumStreamCipher"]], "ciphers.stream_ciphers.bivium_stream_cipher.BiviumStreamCipher": [[157, 2, 1, "", "add_AND_component"], [157, 2, 1, "", "add_FSR_component"], [157, 2, 1, "", "add_MODADD_component"], [157, 2, 1, "", "add_MODSUB_component"], [157, 2, 1, "", "add_NOT_component"], [157, 2, 1, "", "add_OR_component"], [157, 2, 1, "", "add_SBOX_component"], [157, 2, 1, "", "add_SHIFT_component"], [157, 2, 1, "", "add_XOR_component"], [157, 2, 1, "", "add_cipher_output_component"], [157, 2, 1, "", "add_concatenate_component"], [157, 2, 1, "", "add_constant_component"], [157, 2, 1, "", "add_intermediate_output_component"], [157, 2, 1, "", "add_linear_layer_component"], [157, 2, 1, "", "add_mix_column_component"], [157, 2, 1, "", "add_permutation_component"], [157, 2, 1, "", "add_reverse_component"], [157, 2, 1, "", "add_rotate_component"], [157, 2, 1, "", "add_round"], [157, 2, 1, "", "add_round_key_output_component"], [157, 2, 1, "", "add_round_output_component"], [157, 2, 1, "", "add_shift_rows_component"], [157, 2, 1, "", "add_sigma_component"], [157, 2, 1, "", "add_suffix_to_components"], [157, 2, 1, "", "add_theta_keccak_component"], [157, 2, 1, "", "add_theta_xoodoo_component"], [157, 2, 1, "", "add_variable_rotate_component"], [157, 2, 1, "", "add_variable_shift_component"], [157, 2, 1, "", "add_word_permutation_component"], [157, 2, 1, "", "as_python_dictionary"], [157, 2, 1, "", "bivium_key_stream"], [157, 2, 1, "", "bivium_state_initialization"], [157, 2, 1, "", "cipher_inverse"], [157, 2, 1, "", "cipher_partial_inverse"], [157, 2, 1, "", "component_from"], [157, 2, 1, "", "convert_to_compound_xor_cipher"], [157, 2, 1, "", "create_networx_graph_from_input_ids"], [157, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [157, 3, 1, "", "current_round"], [157, 3, 1, "", "current_round_number"], [157, 3, 1, "", "current_round_number_of_components"], [157, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [157, 2, 1, "", "evaluate"], [157, 2, 1, "", "evaluate_using_c"], [157, 2, 1, "", "evaluate_vectorized"], [157, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [157, 3, 1, "", "family_name"], [157, 3, 1, "", "file_name"], [157, 2, 1, "", "find_impossible_property"], [157, 2, 1, "", "generate_bit_based_c_code"], [157, 2, 1, "", "generate_evaluate_c_code_shared_library"], [157, 2, 1, "", "generate_word_based_c_code"], [157, 2, 1, "", "get_all_components"], [157, 2, 1, "", "get_all_components_ids"], [157, 2, 1, "", "get_all_inputs_bit_positions"], [157, 2, 1, "", "get_component_from_id"], [157, 2, 1, "", "get_components_in_round"], [157, 2, 1, "", "get_current_component_id"], [157, 2, 1, "", "get_model"], [157, 2, 1, "", "get_number_of_components_in_round"], [157, 2, 1, "", "get_partial_cipher"], [157, 2, 1, "", "get_round_from_component_id"], [157, 2, 1, "", "get_sizes_of_components_by_type"], [157, 3, 1, "", "id"], [157, 2, 1, "", "impossible_differential_search"], [157, 3, 1, "", "inputs"], [157, 3, 1, "", "inputs_bit_size"], [157, 2, 1, "", "inputs_size_to_dict"], [157, 2, 1, "", "is_algebraically_secure"], [157, 2, 1, "", "is_andrx"], [157, 2, 1, "", "is_arx"], [157, 2, 1, "", "is_power_of_2_word_based"], [157, 2, 1, "", "is_shift_arx"], [157, 2, 1, "", "is_spn"], [157, 2, 1, "", "make_cipher_id"], [157, 2, 1, "", "make_file_name"], [157, 3, 1, "", "number_of_rounds"], [157, 3, 1, "", "output_bit_size"], [157, 2, 1, "", "polynomial_system"], [157, 2, 1, "", "polynomial_system_at_round"], [157, 2, 1, "", "print"], [157, 2, 1, "", "print_as_python_dictionary"], [157, 2, 1, "", "print_as_python_dictionary_to_file"], [157, 2, 1, "", "print_evaluation_python_code"], [157, 2, 1, "", "print_evaluation_python_code_to_file"], [157, 2, 1, "", "print_input_information"], [157, 3, 1, "", "reference_code"], [157, 2, 1, "", "remove_key_schedule"], [157, 2, 1, "", "remove_round_component"], [157, 2, 1, "", "remove_round_component_from_id"], [157, 3, 1, "", "rounds"], [157, 3, 1, "", "rounds_as_list"], [157, 2, 1, "", "set_file_name"], [157, 2, 1, "", "set_id"], [157, 2, 1, "", "set_inputs"], [157, 2, 1, "", "sort_cipher"], [157, 2, 1, "", "test_against_reference_code"], [157, 2, 1, "", "test_vector_check"], [157, 3, 1, "", "type"], [157, 2, 1, "", "update_input_id_links_from_component_id"], [157, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.bluetooth_stream_cipher_e0": [[158, 1, 1, "", "BluetoothStreamCipherE0"]], "ciphers.stream_ciphers.bluetooth_stream_cipher_e0.BluetoothStreamCipherE0": [[158, 2, 1, "", "add_AND_component"], [158, 2, 1, "", "add_FSR_component"], [158, 2, 1, "", "add_MODADD_component"], [158, 2, 1, "", "add_MODSUB_component"], [158, 2, 1, "", "add_NOT_component"], [158, 2, 1, "", "add_OR_component"], [158, 2, 1, "", "add_SBOX_component"], [158, 2, 1, "", "add_SHIFT_component"], [158, 2, 1, "", "add_XOR_component"], [158, 2, 1, "", "add_cipher_output_component"], [158, 2, 1, "", "add_concatenate_component"], [158, 2, 1, "", "add_constant_component"], [158, 2, 1, "", "add_intermediate_output_component"], [158, 2, 1, "", "add_linear_layer_component"], [158, 2, 1, "", "add_mix_column_component"], [158, 2, 1, "", "add_permutation_component"], [158, 2, 1, "", "add_reverse_component"], [158, 2, 1, "", "add_rotate_component"], [158, 2, 1, "", "add_round"], [158, 2, 1, "", "add_round_key_output_component"], [158, 2, 1, "", "add_round_output_component"], [158, 2, 1, "", "add_shift_rows_component"], [158, 2, 1, "", "add_sigma_component"], [158, 2, 1, "", "add_suffix_to_components"], [158, 2, 1, "", "add_theta_keccak_component"], [158, 2, 1, "", "add_theta_xoodoo_component"], [158, 2, 1, "", "add_variable_rotate_component"], [158, 2, 1, "", "add_variable_shift_component"], [158, 2, 1, "", "add_word_permutation_component"], [158, 2, 1, "", "as_python_dictionary"], [158, 2, 1, "", "cipher_inverse"], [158, 2, 1, "", "cipher_partial_inverse"], [158, 2, 1, "", "component_from"], [158, 2, 1, "", "convert_to_compound_xor_cipher"], [158, 2, 1, "", "create_networx_graph_from_input_ids"], [158, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [158, 3, 1, "", "current_round"], [158, 3, 1, "", "current_round_number"], [158, 3, 1, "", "current_round_number_of_components"], [158, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [158, 2, 1, "", "e0_keystream"], [158, 2, 1, "", "e0_nonlinear_function"], [158, 2, 1, "", "evaluate"], [158, 2, 1, "", "evaluate_using_c"], [158, 2, 1, "", "evaluate_vectorized"], [158, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [158, 3, 1, "", "family_name"], [158, 3, 1, "", "file_name"], [158, 2, 1, "", "find_impossible_property"], [158, 2, 1, "", "generate_bit_based_c_code"], [158, 2, 1, "", "generate_evaluate_c_code_shared_library"], [158, 2, 1, "", "generate_word_based_c_code"], [158, 2, 1, "", "get_all_components"], [158, 2, 1, "", "get_all_components_ids"], [158, 2, 1, "", "get_all_inputs_bit_positions"], [158, 2, 1, "", "get_component_from_id"], [158, 2, 1, "", "get_components_in_round"], [158, 2, 1, "", "get_current_component_id"], [158, 2, 1, "", "get_model"], [158, 2, 1, "", "get_number_of_components_in_round"], [158, 2, 1, "", "get_partial_cipher"], [158, 2, 1, "", "get_round_from_component_id"], [158, 2, 1, "", "get_sizes_of_components_by_type"], [158, 3, 1, "", "id"], [158, 2, 1, "", "impossible_differential_search"], [158, 3, 1, "", "inputs"], [158, 3, 1, "", "inputs_bit_size"], [158, 2, 1, "", "inputs_size_to_dict"], [158, 2, 1, "", "is_algebraically_secure"], [158, 2, 1, "", "is_andrx"], [158, 2, 1, "", "is_arx"], [158, 2, 1, "", "is_power_of_2_word_based"], [158, 2, 1, "", "is_shift_arx"], [158, 2, 1, "", "is_spn"], [158, 2, 1, "", "make_cipher_id"], [158, 2, 1, "", "make_file_name"], [158, 3, 1, "", "number_of_rounds"], [158, 3, 1, "", "output_bit_size"], [158, 2, 1, "", "polynomial_system"], [158, 2, 1, "", "polynomial_system_at_round"], [158, 2, 1, "", "print"], [158, 2, 1, "", "print_as_python_dictionary"], [158, 2, 1, "", "print_as_python_dictionary_to_file"], [158, 2, 1, "", "print_evaluation_python_code"], [158, 2, 1, "", "print_evaluation_python_code_to_file"], [158, 2, 1, "", "print_input_information"], [158, 3, 1, "", "reference_code"], [158, 2, 1, "", "remove_key_schedule"], [158, 2, 1, "", "remove_round_component"], [158, 2, 1, "", "remove_round_component_from_id"], [158, 3, 1, "", "rounds"], [158, 3, 1, "", "rounds_as_list"], [158, 2, 1, "", "set_file_name"], [158, 2, 1, "", "set_id"], [158, 2, 1, "", "set_inputs"], [158, 2, 1, "", "sort_cipher"], [158, 2, 1, "", "test_against_reference_code"], [158, 2, 1, "", "test_vector_check"], [158, 3, 1, "", "type"], [158, 2, 1, "", "update_input_id_links_from_component_id"], [158, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.chacha_stream_cipher": [[159, 1, 1, "", "ChachaStreamCipher"], [159, 4, 1, "", "init_state_plaintext"]], "ciphers.stream_ciphers.chacha_stream_cipher.ChachaStreamCipher": [[159, 2, 1, "", "add_AND_component"], [159, 2, 1, "", "add_FSR_component"], [159, 2, 1, "", "add_MODADD_component"], [159, 2, 1, "", "add_MODSUB_component"], [159, 2, 1, "", "add_NOT_component"], [159, 2, 1, "", "add_OR_component"], [159, 2, 1, "", "add_SBOX_component"], [159, 2, 1, "", "add_SHIFT_component"], [159, 2, 1, "", "add_XOR_component"], [159, 2, 1, "", "add_cipher_output_component"], [159, 2, 1, "", "add_concatenate_component"], [159, 2, 1, "", "add_constant_component"], [159, 2, 1, "", "add_intermediate_output_component"], [159, 2, 1, "", "add_linear_layer_component"], [159, 2, 1, "", "add_mix_column_component"], [159, 2, 1, "", "add_permutation_component"], [159, 2, 1, "", "add_reverse_component"], [159, 2, 1, "", "add_rotate_component"], [159, 2, 1, "", "add_round"], [159, 2, 1, "", "add_round_key_output_component"], [159, 2, 1, "", "add_round_output_component"], [159, 2, 1, "", "add_shift_rows_component"], [159, 2, 1, "", "add_sigma_component"], [159, 2, 1, "", "add_suffix_to_components"], [159, 2, 1, "", "add_theta_keccak_component"], [159, 2, 1, "", "add_theta_xoodoo_component"], [159, 2, 1, "", "add_variable_rotate_component"], [159, 2, 1, "", "add_variable_shift_component"], [159, 2, 1, "", "add_word_permutation_component"], [159, 2, 1, "", "as_python_dictionary"], [159, 2, 1, "", "bottom_half_quarter_round"], [159, 2, 1, "", "cipher_inverse"], [159, 2, 1, "", "cipher_partial_inverse"], [159, 2, 1, "", "component_from"], [159, 2, 1, "", "convert_to_compound_xor_cipher"], [159, 2, 1, "", "create_networx_graph_from_input_ids"], [159, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [159, 3, 1, "", "current_round"], [159, 3, 1, "", "current_round_number"], [159, 3, 1, "", "current_round_number_of_components"], [159, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [159, 2, 1, "", "evaluate"], [159, 2, 1, "", "evaluate_using_c"], [159, 2, 1, "", "evaluate_vectorized"], [159, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [159, 3, 1, "", "family_name"], [159, 3, 1, "", "file_name"], [159, 2, 1, "", "find_impossible_property"], [159, 2, 1, "", "generate_bit_based_c_code"], [159, 2, 1, "", "generate_evaluate_c_code_shared_library"], [159, 2, 1, "", "generate_word_based_c_code"], [159, 2, 1, "", "get_all_components"], [159, 2, 1, "", "get_all_components_ids"], [159, 2, 1, "", "get_all_inputs_bit_positions"], [159, 2, 1, "", "get_component_from_id"], [159, 2, 1, "", "get_components_in_round"], [159, 2, 1, "", "get_current_component_id"], [159, 2, 1, "", "get_model"], [159, 2, 1, "", "get_number_of_components_in_round"], [159, 2, 1, "", "get_partial_cipher"], [159, 2, 1, "", "get_round_from_component_id"], [159, 2, 1, "", "get_sizes_of_components_by_type"], [159, 3, 1, "", "id"], [159, 2, 1, "", "impossible_differential_search"], [159, 3, 1, "", "inputs"], [159, 3, 1, "", "inputs_bit_size"], [159, 2, 1, "", "inputs_size_to_dict"], [159, 2, 1, "", "is_algebraically_secure"], [159, 2, 1, "", "is_andrx"], [159, 2, 1, "", "is_arx"], [159, 2, 1, "", "is_power_of_2_word_based"], [159, 2, 1, "", "is_shift_arx"], [159, 2, 1, "", "is_spn"], [159, 2, 1, "", "make_cipher_id"], [159, 2, 1, "", "make_file_name"], [159, 3, 1, "", "number_of_rounds"], [159, 3, 1, "", "output_bit_size"], [159, 2, 1, "", "polynomial_system"], [159, 2, 1, "", "polynomial_system_at_round"], [159, 2, 1, "", "print"], [159, 2, 1, "", "print_as_python_dictionary"], [159, 2, 1, "", "print_as_python_dictionary_to_file"], [159, 2, 1, "", "print_evaluation_python_code"], [159, 2, 1, "", "print_evaluation_python_code_to_file"], [159, 2, 1, "", "print_input_information"], [159, 3, 1, "", "reference_code"], [159, 2, 1, "", "remove_key_schedule"], [159, 2, 1, "", "remove_round_component"], [159, 2, 1, "", "remove_round_component_from_id"], [159, 3, 1, "", "rounds"], [159, 3, 1, "", "rounds_as_list"], [159, 2, 1, "", "set_file_name"], [159, 2, 1, "", "set_id"], [159, 2, 1, "", "set_inputs"], [159, 2, 1, "", "sort_cipher"], [159, 2, 1, "", "test_against_reference_code"], [159, 2, 1, "", "test_vector_check"], [159, 2, 1, "", "top_half_quarter_round"], [159, 3, 1, "", "type"], [159, 2, 1, "", "update_input_id_links_from_component_id"], [159, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.snow3g_stream_cipher": [[160, 1, 1, "", "Snow3GStreamCipher"]], "ciphers.stream_ciphers.snow3g_stream_cipher.Snow3GStreamCipher": [[160, 2, 1, "", "DIValpha"], [160, 2, 1, "", "MULalpha"], [160, 2, 1, "", "MULx"], [160, 2, 1, "", "MULxPOW"], [160, 2, 1, "", "S1"], [160, 2, 1, "", "S2"], [160, 2, 1, "", "add_AND_component"], [160, 2, 1, "", "add_FSR_component"], [160, 2, 1, "", "add_MODADD_component"], [160, 2, 1, "", "add_MODSUB_component"], [160, 2, 1, "", "add_NOT_component"], [160, 2, 1, "", "add_OR_component"], [160, 2, 1, "", "add_SBOX_component"], [160, 2, 1, "", "add_SHIFT_component"], [160, 2, 1, "", "add_XOR_component"], [160, 2, 1, "", "add_cipher_output_component"], [160, 2, 1, "", "add_concatenate_component"], [160, 2, 1, "", "add_constant_component"], [160, 2, 1, "", "add_intermediate_output_component"], [160, 2, 1, "", "add_linear_layer_component"], [160, 2, 1, "", "add_mix_column_component"], [160, 2, 1, "", "add_permutation_component"], [160, 2, 1, "", "add_reverse_component"], [160, 2, 1, "", "add_rotate_component"], [160, 2, 1, "", "add_round"], [160, 2, 1, "", "add_round_key_output_component"], [160, 2, 1, "", "add_round_output_component"], [160, 2, 1, "", "add_shift_rows_component"], [160, 2, 1, "", "add_sigma_component"], [160, 2, 1, "", "add_suffix_to_components"], [160, 2, 1, "", "add_theta_keccak_component"], [160, 2, 1, "", "add_theta_xoodoo_component"], [160, 2, 1, "", "add_variable_rotate_component"], [160, 2, 1, "", "add_variable_shift_component"], [160, 2, 1, "", "add_word_permutation_component"], [160, 2, 1, "", "as_python_dictionary"], [160, 2, 1, "", "cipher_inverse"], [160, 2, 1, "", "cipher_partial_inverse"], [160, 2, 1, "", "clock_fsm"], [160, 2, 1, "", "clock_lfsr"], [160, 2, 1, "", "clock_lfsr_initialization_mode"], [160, 2, 1, "", "component_from"], [160, 2, 1, "", "convert_to_compound_xor_cipher"], [160, 2, 1, "", "create_alpha_state"], [160, 2, 1, "", "create_networx_graph_from_input_ids"], [160, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [160, 3, 1, "", "current_round"], [160, 3, 1, "", "current_round_number"], [160, 3, 1, "", "current_round_number_of_components"], [160, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [160, 2, 1, "", "evaluate"], [160, 2, 1, "", "evaluate_using_c"], [160, 2, 1, "", "evaluate_vectorized"], [160, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [160, 3, 1, "", "family_name"], [160, 3, 1, "", "file_name"], [160, 2, 1, "", "find_impossible_property"], [160, 2, 1, "", "generate_bit_based_c_code"], [160, 2, 1, "", "generate_evaluate_c_code_shared_library"], [160, 2, 1, "", "generate_word_based_c_code"], [160, 2, 1, "", "get_all_components"], [160, 2, 1, "", "get_all_components_ids"], [160, 2, 1, "", "get_all_inputs_bit_positions"], [160, 2, 1, "", "get_component_from_id"], [160, 2, 1, "", "get_components_in_round"], [160, 2, 1, "", "get_current_component_id"], [160, 2, 1, "", "get_model"], [160, 2, 1, "", "get_number_of_components_in_round"], [160, 2, 1, "", "get_partial_cipher"], [160, 2, 1, "", "get_round_from_component_id"], [160, 2, 1, "", "get_sizes_of_components_by_type"], [160, 3, 1, "", "id"], [160, 2, 1, "", "impossible_differential_search"], [160, 2, 1, "", "initial_filling_lfsr_fsm"], [160, 3, 1, "", "inputs"], [160, 3, 1, "", "inputs_bit_size"], [160, 2, 1, "", "inputs_size_to_dict"], [160, 2, 1, "", "is_algebraically_secure"], [160, 2, 1, "", "is_andrx"], [160, 2, 1, "", "is_arx"], [160, 2, 1, "", "is_power_of_2_word_based"], [160, 2, 1, "", "is_shift_arx"], [160, 2, 1, "", "is_spn"], [160, 2, 1, "", "make_cipher_id"], [160, 2, 1, "", "make_file_name"], [160, 3, 1, "", "number_of_rounds"], [160, 3, 1, "", "output_bit_size"], [160, 2, 1, "", "polynomial_system"], [160, 2, 1, "", "polynomial_system_at_round"], [160, 2, 1, "", "print"], [160, 2, 1, "", "print_as_python_dictionary"], [160, 2, 1, "", "print_as_python_dictionary_to_file"], [160, 2, 1, "", "print_evaluation_python_code"], [160, 2, 1, "", "print_evaluation_python_code_to_file"], [160, 2, 1, "", "print_input_information"], [160, 3, 1, "", "reference_code"], [160, 2, 1, "", "remove_key_schedule"], [160, 2, 1, "", "remove_round_component"], [160, 2, 1, "", "remove_round_component_from_id"], [160, 3, 1, "", "rounds"], [160, 3, 1, "", "rounds_as_list"], [160, 2, 1, "", "set_file_name"], [160, 2, 1, "", "set_id"], [160, 2, 1, "", "set_inputs"], [160, 2, 1, "", "snow3g_key_stream"], [160, 2, 1, "", "snow3g_state_initialization"], [160, 2, 1, "", "sort_cipher"], [160, 2, 1, "", "test_against_reference_code"], [160, 2, 1, "", "test_vector_check"], [160, 3, 1, "", "type"], [160, 2, 1, "", "update_input_id_links_from_component_id"], [160, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.trivium_stream_cipher": [[161, 1, 1, "", "TriviumStreamCipher"]], "ciphers.stream_ciphers.trivium_stream_cipher.TriviumStreamCipher": [[161, 2, 1, "", "add_AND_component"], [161, 2, 1, "", "add_FSR_component"], [161, 2, 1, "", "add_MODADD_component"], [161, 2, 1, "", "add_MODSUB_component"], [161, 2, 1, "", "add_NOT_component"], [161, 2, 1, "", "add_OR_component"], [161, 2, 1, "", "add_SBOX_component"], [161, 2, 1, "", "add_SHIFT_component"], [161, 2, 1, "", "add_XOR_component"], [161, 2, 1, "", "add_cipher_output_component"], [161, 2, 1, "", "add_concatenate_component"], [161, 2, 1, "", "add_constant_component"], [161, 2, 1, "", "add_intermediate_output_component"], [161, 2, 1, "", "add_linear_layer_component"], [161, 2, 1, "", "add_mix_column_component"], [161, 2, 1, "", "add_permutation_component"], [161, 2, 1, "", "add_reverse_component"], [161, 2, 1, "", "add_rotate_component"], [161, 2, 1, "", "add_round"], [161, 2, 1, "", "add_round_key_output_component"], [161, 2, 1, "", "add_round_output_component"], [161, 2, 1, "", "add_shift_rows_component"], [161, 2, 1, "", "add_sigma_component"], [161, 2, 1, "", "add_suffix_to_components"], [161, 2, 1, "", "add_theta_keccak_component"], [161, 2, 1, "", "add_theta_xoodoo_component"], [161, 2, 1, "", "add_variable_rotate_component"], [161, 2, 1, "", "add_variable_shift_component"], [161, 2, 1, "", "add_word_permutation_component"], [161, 2, 1, "", "as_python_dictionary"], [161, 2, 1, "", "cipher_inverse"], [161, 2, 1, "", "cipher_partial_inverse"], [161, 2, 1, "", "component_from"], [161, 2, 1, "", "convert_to_compound_xor_cipher"], [161, 2, 1, "", "create_networx_graph_from_input_ids"], [161, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [161, 3, 1, "", "current_round"], [161, 3, 1, "", "current_round_number"], [161, 3, 1, "", "current_round_number_of_components"], [161, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [161, 2, 1, "", "evaluate"], [161, 2, 1, "", "evaluate_using_c"], [161, 2, 1, "", "evaluate_vectorized"], [161, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [161, 3, 1, "", "family_name"], [161, 3, 1, "", "file_name"], [161, 2, 1, "", "find_impossible_property"], [161, 2, 1, "", "generate_bit_based_c_code"], [161, 2, 1, "", "generate_evaluate_c_code_shared_library"], [161, 2, 1, "", "generate_word_based_c_code"], [161, 2, 1, "", "get_all_components"], [161, 2, 1, "", "get_all_components_ids"], [161, 2, 1, "", "get_all_inputs_bit_positions"], [161, 2, 1, "", "get_component_from_id"], [161, 2, 1, "", "get_components_in_round"], [161, 2, 1, "", "get_current_component_id"], [161, 2, 1, "", "get_keystream_bit_len"], [161, 2, 1, "", "get_model"], [161, 2, 1, "", "get_number_of_components_in_round"], [161, 2, 1, "", "get_partial_cipher"], [161, 2, 1, "", "get_round_from_component_id"], [161, 2, 1, "", "get_sizes_of_components_by_type"], [161, 3, 1, "", "id"], [161, 2, 1, "", "impossible_differential_search"], [161, 3, 1, "", "inputs"], [161, 3, 1, "", "inputs_bit_size"], [161, 2, 1, "", "inputs_size_to_dict"], [161, 2, 1, "", "is_algebraically_secure"], [161, 2, 1, "", "is_andrx"], [161, 2, 1, "", "is_arx"], [161, 2, 1, "", "is_power_of_2_word_based"], [161, 2, 1, "", "is_shift_arx"], [161, 2, 1, "", "is_spn"], [161, 2, 1, "", "make_cipher_id"], [161, 2, 1, "", "make_file_name"], [161, 3, 1, "", "number_of_rounds"], [161, 3, 1, "", "output_bit_size"], [161, 2, 1, "", "polynomial_system"], [161, 2, 1, "", "polynomial_system_at_round"], [161, 2, 1, "", "print"], [161, 2, 1, "", "print_as_python_dictionary"], [161, 2, 1, "", "print_as_python_dictionary_to_file"], [161, 2, 1, "", "print_evaluation_python_code"], [161, 2, 1, "", "print_evaluation_python_code_to_file"], [161, 2, 1, "", "print_input_information"], [161, 3, 1, "", "reference_code"], [161, 2, 1, "", "remove_key_schedule"], [161, 2, 1, "", "remove_round_component"], [161, 2, 1, "", "remove_round_component_from_id"], [161, 3, 1, "", "rounds"], [161, 3, 1, "", "rounds_as_list"], [161, 2, 1, "", "set_file_name"], [161, 2, 1, "", "set_id"], [161, 2, 1, "", "set_inputs"], [161, 2, 1, "", "sort_cipher"], [161, 2, 1, "", "test_against_reference_code"], [161, 2, 1, "", "test_vector_check"], [161, 2, 1, "", "trivium_key_stream"], [161, 2, 1, "", "trivium_state_initialization"], [161, 3, 1, "", "type"], [161, 2, 1, "", "update_input_id_links_from_component_id"], [161, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.zuc_stream_cipher": [[162, 1, 1, "", "ZucStreamCipher"]], "ciphers.stream_ciphers.zuc_stream_cipher.ZucStreamCipher": [[162, 2, 1, "", "add_AND_component"], [162, 2, 1, "", "add_FSR_component"], [162, 2, 1, "", "add_MODADD_component"], [162, 2, 1, "", "add_MODSUB_component"], [162, 2, 1, "", "add_NOT_component"], [162, 2, 1, "", "add_OR_component"], [162, 2, 1, "", "add_SBOX_component"], [162, 2, 1, "", "add_SHIFT_component"], [162, 2, 1, "", "add_XOR_component"], [162, 2, 1, "", "add_cipher_output_component"], [162, 2, 1, "", "add_concatenate_component"], [162, 2, 1, "", "add_constant_component"], [162, 2, 1, "", "add_intermediate_output_component"], [162, 2, 1, "", "add_linear_layer_component"], [162, 2, 1, "", "add_mix_column_component"], [162, 2, 1, "", "add_permutation_component"], [162, 2, 1, "", "add_reverse_component"], [162, 2, 1, "", "add_rotate_component"], [162, 2, 1, "", "add_round"], [162, 2, 1, "", "add_round_key_output_component"], [162, 2, 1, "", "add_round_output_component"], [162, 2, 1, "", "add_shift_rows_component"], [162, 2, 1, "", "add_sigma_component"], [162, 2, 1, "", "add_suffix_to_components"], [162, 2, 1, "", "add_theta_keccak_component"], [162, 2, 1, "", "add_theta_xoodoo_component"], [162, 2, 1, "", "add_variable_rotate_component"], [162, 2, 1, "", "add_variable_shift_component"], [162, 2, 1, "", "add_word_permutation_component"], [162, 2, 1, "", "as_python_dictionary"], [162, 2, 1, "", "cipher_inverse"], [162, 2, 1, "", "cipher_partial_inverse"], [162, 2, 1, "", "clocking_lfsr"], [162, 2, 1, "", "component_from"], [162, 2, 1, "", "convert_to_compound_xor_cipher"], [162, 2, 1, "", "create_networx_graph_from_input_ids"], [162, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [162, 3, 1, "", "current_round"], [162, 3, 1, "", "current_round_number"], [162, 3, 1, "", "current_round_number_of_components"], [162, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [162, 2, 1, "", "evaluate"], [162, 2, 1, "", "evaluate_using_c"], [162, 2, 1, "", "evaluate_vectorized"], [162, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [162, 3, 1, "", "family_name"], [162, 3, 1, "", "file_name"], [162, 2, 1, "", "find_impossible_property"], [162, 2, 1, "", "generate_bit_based_c_code"], [162, 2, 1, "", "generate_evaluate_c_code_shared_library"], [162, 2, 1, "", "generate_word_based_c_code"], [162, 2, 1, "", "get_all_components"], [162, 2, 1, "", "get_all_components_ids"], [162, 2, 1, "", "get_all_inputs_bit_positions"], [162, 2, 1, "", "get_component_from_id"], [162, 2, 1, "", "get_components_in_round"], [162, 2, 1, "", "get_current_component_id"], [162, 2, 1, "", "get_model"], [162, 2, 1, "", "get_number_of_components_in_round"], [162, 2, 1, "", "get_partial_cipher"], [162, 2, 1, "", "get_round_from_component_id"], [162, 2, 1, "", "get_sizes_of_components_by_type"], [162, 3, 1, "", "id"], [162, 2, 1, "", "impossible_differential_search"], [162, 3, 1, "", "inputs"], [162, 3, 1, "", "inputs_bit_size"], [162, 2, 1, "", "inputs_size_to_dict"], [162, 2, 1, "", "is_algebraically_secure"], [162, 2, 1, "", "is_andrx"], [162, 2, 1, "", "is_arx"], [162, 2, 1, "", "is_power_of_2_word_based"], [162, 2, 1, "", "is_shift_arx"], [162, 2, 1, "", "is_spn"], [162, 2, 1, "", "key_loading_to_lfsr"], [162, 2, 1, "", "key_stream"], [162, 2, 1, "", "lfsr_S_high_16bits"], [162, 2, 1, "", "lfsr_S_low_16bits"], [162, 2, 1, "", "lfsr_with_initialization_mode"], [162, 2, 1, "", "linear_layer_rotation"], [162, 2, 1, "", "linear_transform_L1"], [162, 2, 1, "", "linear_transform_L2"], [162, 2, 1, "", "make_cipher_id"], [162, 2, 1, "", "make_file_name"], [162, 3, 1, "", "number_of_rounds"], [162, 3, 1, "", "output_bit_size"], [162, 2, 1, "", "polynomial_system"], [162, 2, 1, "", "polynomial_system_at_round"], [162, 2, 1, "", "print"], [162, 2, 1, "", "print_as_python_dictionary"], [162, 2, 1, "", "print_as_python_dictionary_to_file"], [162, 2, 1, "", "print_evaluation_python_code"], [162, 2, 1, "", "print_evaluation_python_code_to_file"], [162, 2, 1, "", "print_input_information"], [162, 3, 1, "", "reference_code"], [162, 2, 1, "", "remove_key_schedule"], [162, 2, 1, "", "remove_round_component"], [162, 2, 1, "", "remove_round_component_from_id"], [162, 3, 1, "", "rounds"], [162, 3, 1, "", "rounds_as_list"], [162, 2, 1, "", "s_box_layer"], [162, 2, 1, "", "set_file_name"], [162, 2, 1, "", "set_id"], [162, 2, 1, "", "set_inputs"], [162, 2, 1, "", "sort_cipher"], [162, 2, 1, "", "state_initialization"], [162, 2, 1, "", "test_against_reference_code"], [162, 2, 1, "", "test_vector_check"], [162, 3, 1, "", "type"], [162, 2, 1, "", "update_input_id_links_from_component_id"], [162, 2, 1, "", "zero_correlation_linear_search"], [162, 2, 1, "", "zuc_nonlinear_F"]], "ciphers.toys": [[163, 0, 0, "-", "toyspn1"], [164, 0, 0, "-", "toyspn2"]], "ciphers.toys.toyspn1": [[163, 1, 1, "", "ToySPN1"]], "ciphers.toys.toyspn1.ToySPN1": [[163, 2, 1, "", "add_AND_component"], [163, 2, 1, "", "add_FSR_component"], [163, 2, 1, "", "add_MODADD_component"], [163, 2, 1, "", "add_MODSUB_component"], [163, 2, 1, "", "add_NOT_component"], [163, 2, 1, "", "add_OR_component"], [163, 2, 1, "", "add_SBOX_component"], [163, 2, 1, "", "add_SHIFT_component"], [163, 2, 1, "", "add_XOR_component"], [163, 2, 1, "", "add_cipher_output_component"], [163, 2, 1, "", "add_concatenate_component"], [163, 2, 1, "", "add_constant_component"], [163, 2, 1, "", "add_intermediate_output_component"], [163, 2, 1, "", "add_linear_layer_component"], [163, 2, 1, "", "add_mix_column_component"], [163, 2, 1, "", "add_permutation_component"], [163, 2, 1, "", "add_reverse_component"], [163, 2, 1, "", "add_rotate_component"], [163, 2, 1, "", "add_round"], [163, 2, 1, "", "add_round_key_output_component"], [163, 2, 1, "", "add_round_output_component"], [163, 2, 1, "", "add_shift_rows_component"], [163, 2, 1, "", "add_sigma_component"], [163, 2, 1, "", "add_suffix_to_components"], [163, 2, 1, "", "add_theta_keccak_component"], [163, 2, 1, "", "add_theta_xoodoo_component"], [163, 2, 1, "", "add_variable_rotate_component"], [163, 2, 1, "", "add_variable_shift_component"], [163, 2, 1, "", "add_word_permutation_component"], [163, 2, 1, "", "as_python_dictionary"], [163, 2, 1, "", "cipher_inverse"], [163, 2, 1, "", "cipher_partial_inverse"], [163, 2, 1, "", "component_from"], [163, 2, 1, "", "convert_to_compound_xor_cipher"], [163, 2, 1, "", "create_networx_graph_from_input_ids"], [163, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [163, 3, 1, "", "current_round"], [163, 3, 1, "", "current_round_number"], [163, 3, 1, "", "current_round_number_of_components"], [163, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [163, 2, 1, "", "evaluate"], [163, 2, 1, "", "evaluate_using_c"], [163, 2, 1, "", "evaluate_vectorized"], [163, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [163, 3, 1, "", "family_name"], [163, 3, 1, "", "file_name"], [163, 2, 1, "", "find_impossible_property"], [163, 2, 1, "", "generate_bit_based_c_code"], [163, 2, 1, "", "generate_evaluate_c_code_shared_library"], [163, 2, 1, "", "generate_word_based_c_code"], [163, 2, 1, "", "get_all_components"], [163, 2, 1, "", "get_all_components_ids"], [163, 2, 1, "", "get_all_inputs_bit_positions"], [163, 2, 1, "", "get_component_from_id"], [163, 2, 1, "", "get_components_in_round"], [163, 2, 1, "", "get_current_component_id"], [163, 2, 1, "", "get_model"], [163, 2, 1, "", "get_number_of_components_in_round"], [163, 2, 1, "", "get_partial_cipher"], [163, 2, 1, "", "get_round_from_component_id"], [163, 2, 1, "", "get_sizes_of_components_by_type"], [163, 3, 1, "", "id"], [163, 2, 1, "", "impossible_differential_search"], [163, 3, 1, "", "inputs"], [163, 3, 1, "", "inputs_bit_size"], [163, 2, 1, "", "inputs_size_to_dict"], [163, 2, 1, "", "is_algebraically_secure"], [163, 2, 1, "", "is_andrx"], [163, 2, 1, "", "is_arx"], [163, 2, 1, "", "is_power_of_2_word_based"], [163, 2, 1, "", "is_shift_arx"], [163, 2, 1, "", "is_spn"], [163, 2, 1, "", "make_cipher_id"], [163, 2, 1, "", "make_file_name"], [163, 3, 1, "", "number_of_rounds"], [163, 3, 1, "", "output_bit_size"], [163, 2, 1, "", "polynomial_system"], [163, 2, 1, "", "polynomial_system_at_round"], [163, 2, 1, "", "print"], [163, 2, 1, "", "print_as_python_dictionary"], [163, 2, 1, "", "print_as_python_dictionary_to_file"], [163, 2, 1, "", "print_evaluation_python_code"], [163, 2, 1, "", "print_evaluation_python_code_to_file"], [163, 2, 1, "", "print_input_information"], [163, 3, 1, "", "reference_code"], [163, 2, 1, "", "remove_key_schedule"], [163, 2, 1, "", "remove_round_component"], [163, 2, 1, "", "remove_round_component_from_id"], [163, 3, 1, "", "rounds"], [163, 3, 1, "", "rounds_as_list"], [163, 2, 1, "", "set_file_name"], [163, 2, 1, "", "set_id"], [163, 2, 1, "", "set_inputs"], [163, 2, 1, "", "sort_cipher"], [163, 2, 1, "", "test_against_reference_code"], [163, 2, 1, "", "test_vector_check"], [163, 3, 1, "", "type"], [163, 2, 1, "", "update_input_id_links_from_component_id"], [163, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.toys.toyspn2": [[164, 1, 1, "", "ToySPN2"]], "ciphers.toys.toyspn2.ToySPN2": [[164, 2, 1, "", "add_AND_component"], [164, 2, 1, "", "add_FSR_component"], [164, 2, 1, "", "add_MODADD_component"], [164, 2, 1, "", "add_MODSUB_component"], [164, 2, 1, "", "add_NOT_component"], [164, 2, 1, "", "add_OR_component"], [164, 2, 1, "", "add_SBOX_component"], [164, 2, 1, "", "add_SHIFT_component"], [164, 2, 1, "", "add_XOR_component"], [164, 2, 1, "", "add_cipher_output_component"], [164, 2, 1, "", "add_concatenate_component"], [164, 2, 1, "", "add_constant_component"], [164, 2, 1, "", "add_intermediate_output_component"], [164, 2, 1, "", "add_linear_layer_component"], [164, 2, 1, "", "add_mix_column_component"], [164, 2, 1, "", "add_permutation_component"], [164, 2, 1, "", "add_reverse_component"], [164, 2, 1, "", "add_rotate_component"], [164, 2, 1, "", "add_round"], [164, 2, 1, "", "add_round_key_output_component"], [164, 2, 1, "", "add_round_output_component"], [164, 2, 1, "", "add_shift_rows_component"], [164, 2, 1, "", "add_sigma_component"], [164, 2, 1, "", "add_suffix_to_components"], [164, 2, 1, "", "add_theta_keccak_component"], [164, 2, 1, "", "add_theta_xoodoo_component"], [164, 2, 1, "", "add_variable_rotate_component"], [164, 2, 1, "", "add_variable_shift_component"], [164, 2, 1, "", "add_word_permutation_component"], [164, 2, 1, "", "as_python_dictionary"], [164, 2, 1, "", "cipher_inverse"], [164, 2, 1, "", "cipher_partial_inverse"], [164, 2, 1, "", "component_from"], [164, 2, 1, "", "convert_to_compound_xor_cipher"], [164, 2, 1, "", "create_networx_graph_from_input_ids"], [164, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [164, 3, 1, "", "current_round"], [164, 3, 1, "", "current_round_number"], [164, 3, 1, "", "current_round_number_of_components"], [164, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [164, 2, 1, "", "evaluate"], [164, 2, 1, "", "evaluate_using_c"], [164, 2, 1, "", "evaluate_vectorized"], [164, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [164, 3, 1, "", "family_name"], [164, 3, 1, "", "file_name"], [164, 2, 1, "", "find_impossible_property"], [164, 2, 1, "", "generate_bit_based_c_code"], [164, 2, 1, "", "generate_evaluate_c_code_shared_library"], [164, 2, 1, "", "generate_word_based_c_code"], [164, 2, 1, "", "get_all_components"], [164, 2, 1, "", "get_all_components_ids"], [164, 2, 1, "", "get_all_inputs_bit_positions"], [164, 2, 1, "", "get_component_from_id"], [164, 2, 1, "", "get_components_in_round"], [164, 2, 1, "", "get_current_component_id"], [164, 2, 1, "", "get_model"], [164, 2, 1, "", "get_number_of_components_in_round"], [164, 2, 1, "", "get_partial_cipher"], [164, 2, 1, "", "get_round_from_component_id"], [164, 2, 1, "", "get_sizes_of_components_by_type"], [164, 3, 1, "", "id"], [164, 2, 1, "", "impossible_differential_search"], [164, 3, 1, "", "inputs"], [164, 3, 1, "", "inputs_bit_size"], [164, 2, 1, "", "inputs_size_to_dict"], [164, 2, 1, "", "is_algebraically_secure"], [164, 2, 1, "", "is_andrx"], [164, 2, 1, "", "is_arx"], [164, 2, 1, "", "is_power_of_2_word_based"], [164, 2, 1, "", "is_shift_arx"], [164, 2, 1, "", "is_spn"], [164, 2, 1, "", "make_cipher_id"], [164, 2, 1, "", "make_file_name"], [164, 3, 1, "", "number_of_rounds"], [164, 3, 1, "", "output_bit_size"], [164, 2, 1, "", "polynomial_system"], [164, 2, 1, "", "polynomial_system_at_round"], [164, 2, 1, "", "print"], [164, 2, 1, "", "print_as_python_dictionary"], [164, 2, 1, "", "print_as_python_dictionary_to_file"], [164, 2, 1, "", "print_evaluation_python_code"], [164, 2, 1, "", "print_evaluation_python_code_to_file"], [164, 2, 1, "", "print_input_information"], [164, 3, 1, "", "reference_code"], [164, 2, 1, "", "remove_key_schedule"], [164, 2, 1, "", "remove_round_component"], [164, 2, 1, "", "remove_round_component_from_id"], [164, 3, 1, "", "rounds"], [164, 3, 1, "", "rounds_as_list"], [164, 2, 1, "", "set_file_name"], [164, 2, 1, "", "set_id"], [164, 2, 1, "", "set_inputs"], [164, 2, 1, "", "sort_cipher"], [164, 2, 1, "", "test_against_reference_code"], [164, 2, 1, "", "test_vector_check"], [164, 3, 1, "", "type"], [164, 2, 1, "", "update_input_id_links_from_component_id"], [164, 2, 1, "", "zero_correlation_linear_search"]], "component": [[165, 1, 1, "", "Component"], [165, 4, 1, "", "check_size"], [165, 4, 1, "", "free_input"], [165, 4, 1, "", "linear_layer_to_binary_matrix"]], "component.Component": [[165, 2, 1, "", "as_python_dictionary"], [165, 2, 1, "", "check_output_size"], [165, 3, 1, "", "description"], [165, 2, 1, "", "get_graph_representation"], [165, 3, 1, "", "id"], [165, 3, 1, "", "input_bit_positions"], [165, 3, 1, "", "input_bit_size"], [165, 3, 1, "", "input_id_links"], [165, 2, 1, "", "is_forbidden"], [165, 2, 1, "", "is_id_equal_to"], [165, 2, 1, "", "is_power_of_2_word_based"], [165, 3, 1, "", "output_bit_size"], [165, 2, 1, "", "output_size_for_concatenate"], [165, 2, 1, "", "print"], [165, 2, 1, "", "print_as_python_dictionary"], [165, 2, 1, "", "print_values"], [165, 2, 1, "", "print_word_values"], [165, 2, 1, "", "select_bits"], [165, 2, 1, "", "select_words"], [165, 2, 1, "", "set_description"], [165, 2, 1, "", "set_id"], [165, 2, 1, "", "set_input_bit_positions"], [165, 2, 1, "", "set_input_id_links"], [165, 3, 1, "", "suffixes"], [165, 3, 1, "", "type"]], "components": [[166, 0, 0, "-", "and_component"], [167, 0, 0, "-", "cipher_output_component"], [168, 0, 0, "-", "concatenate_component"], [169, 0, 0, "-", "constant_component"], [170, 0, 0, "-", "fsr_component"], [171, 0, 0, "-", "intermediate_output_component"], [172, 0, 0, "-", "linear_layer_component"], [173, 0, 0, "-", "mix_column_component"], [174, 0, 0, "-", "modadd_component"], [175, 0, 0, "-", "modsub_component"], [176, 0, 0, "-", "modular_component"], [177, 0, 0, "-", "multi_input_non_linear_logical_operator_component"], [178, 0, 0, "-", "not_component"], [179, 0, 0, "-", "or_component"], [180, 0, 0, "-", "permutation_component"], [181, 0, 0, "-", "reverse_component"], [182, 0, 0, "-", "rotate_component"], [183, 0, 0, "-", "sbox_component"], [184, 0, 0, "-", "shift_component"], [185, 0, 0, "-", "shift_rows_component"], [186, 0, 0, "-", "sigma_component"], [187, 0, 0, "-", "theta_keccak_component"], [188, 0, 0, "-", "theta_xoodoo_component"], [189, 0, 0, "-", "variable_rotate_component"], [190, 0, 0, "-", "variable_shift_component"], [191, 0, 0, "-", "word_permutation_component"], [192, 0, 0, "-", "xor_component"]], "components.and_component": [[166, 1, 1, "", "AND"], [166, 4, 1, "", "cp_twoterms"], [166, 4, 1, "", "cp_xor_differential_probability_ddt"], [166, 4, 1, "", "cp_xor_linear_probability_lat"]], "components.and_component.AND": [[166, 2, 1, "", "algebraic_polynomials"], [166, 2, 1, "", "as_python_dictionary"], [166, 2, 1, "", "check_output_size"], [166, 2, 1, "", "cms_constraints"], [166, 2, 1, "", "cms_xor_differential_propagation_constraints"], [166, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [166, 2, 1, "", "cp_constraints"], [166, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [166, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [166, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [166, 2, 1, "", "cp_xor_differential_propagation_constraints"], [166, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [166, 3, 1, "", "description"], [166, 2, 1, "", "generic_sign_linear_constraints"], [166, 2, 1, "", "get_bit_based_vectorized_python_code"], [166, 2, 1, "", "get_byte_based_vectorized_python_code"], [166, 2, 1, "", "get_graph_representation"], [166, 2, 1, "", "get_word_operation_sign"], [166, 3, 1, "", "id"], [166, 3, 1, "", "input_bit_positions"], [166, 3, 1, "", "input_bit_size"], [166, 3, 1, "", "input_id_links"], [166, 2, 1, "", "is_forbidden"], [166, 2, 1, "", "is_id_equal_to"], [166, 2, 1, "", "is_power_of_2_word_based"], [166, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [166, 2, 1, "", "milp_twoterms_xor_linear_probability_constraints"], [166, 2, 1, "", "milp_xor_differential_propagation_constraints"], [166, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [166, 3, 1, "", "output_bit_size"], [166, 2, 1, "", "output_size_for_concatenate"], [166, 2, 1, "", "print"], [166, 2, 1, "", "print_as_python_dictionary"], [166, 2, 1, "", "print_values"], [166, 2, 1, "", "print_word_values"], [166, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [166, 2, 1, "", "sat_constraints"], [166, 2, 1, "", "sat_xor_differential_propagation_constraints"], [166, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [166, 2, 1, "", "select_bits"], [166, 2, 1, "", "select_words"], [166, 2, 1, "", "set_description"], [166, 2, 1, "", "set_id"], [166, 2, 1, "", "set_input_bit_positions"], [166, 2, 1, "", "set_input_id_links"], [166, 2, 1, "", "smt_constraints"], [166, 2, 1, "", "smt_xor_differential_propagation_constraints"], [166, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [166, 3, 1, "", "suffixes"], [166, 3, 1, "", "type"]], "components.cipher_output_component": [[167, 1, 1, "", "CipherOutput"]], "components.cipher_output_component.CipherOutput": [[167, 2, 1, "", "as_python_dictionary"], [167, 2, 1, "", "check_output_size"], [167, 2, 1, "", "cms_constraints"], [167, 2, 1, "", "cms_xor_differential_propagation_constraints"], [167, 2, 1, "", "cp_constraints"], [167, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [167, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [167, 2, 1, "", "cp_xor_differential_propagation_constraints"], [167, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [167, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [167, 3, 1, "", "description"], [167, 2, 1, "", "get_bit_based_vectorized_python_code"], [167, 2, 1, "", "get_byte_based_vectorized_python_code"], [167, 2, 1, "", "get_graph_representation"], [167, 3, 1, "", "id"], [167, 3, 1, "", "input_bit_positions"], [167, 3, 1, "", "input_bit_size"], [167, 3, 1, "", "input_id_links"], [167, 2, 1, "", "is_forbidden"], [167, 2, 1, "", "is_id_equal_to"], [167, 2, 1, "", "is_power_of_2_word_based"], [167, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [167, 2, 1, "", "milp_constraints"], [167, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [167, 2, 1, "", "milp_xor_differential_propagation_constraints"], [167, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [167, 2, 1, "", "minizinc_constraints"], [167, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [167, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [167, 3, 1, "", "output_bit_size"], [167, 2, 1, "", "output_size_for_concatenate"], [167, 2, 1, "", "print"], [167, 2, 1, "", "print_as_python_dictionary"], [167, 2, 1, "", "print_values"], [167, 2, 1, "", "print_word_values"], [167, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [167, 2, 1, "", "sat_constraints"], [167, 2, 1, "", "sat_xor_differential_propagation_constraints"], [167, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [167, 2, 1, "", "select_bits"], [167, 2, 1, "", "select_words"], [167, 2, 1, "", "set_description"], [167, 2, 1, "", "set_id"], [167, 2, 1, "", "set_input_bit_positions"], [167, 2, 1, "", "set_input_id_links"], [167, 2, 1, "", "smt_constraints"], [167, 2, 1, "", "smt_xor_differential_propagation_constraints"], [167, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [167, 3, 1, "", "suffixes"], [167, 3, 1, "", "type"]], "components.concatenate_component": [[168, 1, 1, "", "Concatenate"]], "components.concatenate_component.Concatenate": [[168, 2, 1, "", "as_python_dictionary"], [168, 2, 1, "", "check_output_size"], [168, 3, 1, "", "description"], [168, 2, 1, "", "get_bit_based_c_code"], [168, 2, 1, "", "get_bit_based_vectorized_python_code"], [168, 2, 1, "", "get_byte_based_vectorized_python_code"], [168, 2, 1, "", "get_graph_representation"], [168, 2, 1, "", "get_word_based_c_code"], [168, 3, 1, "", "id"], [168, 3, 1, "", "input_bit_positions"], [168, 3, 1, "", "input_bit_size"], [168, 3, 1, "", "input_id_links"], [168, 2, 1, "", "is_forbidden"], [168, 2, 1, "", "is_id_equal_to"], [168, 2, 1, "", "is_power_of_2_word_based"], [168, 3, 1, "", "output_bit_size"], [168, 2, 1, "", "output_size_for_concatenate"], [168, 2, 1, "", "print"], [168, 2, 1, "", "print_as_python_dictionary"], [168, 2, 1, "", "print_values"], [168, 2, 1, "", "print_word_values"], [168, 2, 1, "", "select_bits"], [168, 2, 1, "", "select_words"], [168, 2, 1, "", "set_description"], [168, 2, 1, "", "set_id"], [168, 2, 1, "", "set_input_bit_positions"], [168, 2, 1, "", "set_input_id_links"], [168, 3, 1, "", "suffixes"], [168, 3, 1, "", "type"]], "components.constant_component": [[169, 1, 1, "", "Constant"], [169, 4, 1, "", "constant_to_repr"]], "components.constant_component.Constant": [[169, 2, 1, "", "algebraic_polynomials"], [169, 2, 1, "", "as_python_dictionary"], [169, 2, 1, "", "check_output_size"], [169, 2, 1, "", "cms_constraints"], [169, 2, 1, "", "cms_xor_differential_propagation_constraints"], [169, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [169, 2, 1, "", "cp_constraints"], [169, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [169, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [169, 2, 1, "", "cp_xor_differential_propagation_constraints"], [169, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [169, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [169, 3, 1, "", "description"], [169, 2, 1, "", "get_bit_based_c_code"], [169, 2, 1, "", "get_bit_based_vectorized_python_code"], [169, 2, 1, "", "get_byte_based_vectorized_python_code"], [169, 2, 1, "", "get_graph_representation"], [169, 2, 1, "", "get_word_based_c_code"], [169, 3, 1, "", "id"], [169, 3, 1, "", "input_bit_positions"], [169, 3, 1, "", "input_bit_size"], [169, 3, 1, "", "input_id_links"], [169, 2, 1, "", "is_forbidden"], [169, 2, 1, "", "is_id_equal_to"], [169, 2, 1, "", "is_power_of_2_word_based"], [169, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [169, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [169, 2, 1, "", "milp_xor_differential_propagation_constraints"], [169, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [169, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [169, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [169, 3, 1, "", "output_bit_size"], [169, 2, 1, "", "output_size_for_concatenate"], [169, 2, 1, "", "print"], [169, 2, 1, "", "print_as_python_dictionary"], [169, 2, 1, "", "print_values"], [169, 2, 1, "", "print_word_values"], [169, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [169, 2, 1, "", "sat_constraints"], [169, 2, 1, "", "sat_xor_differential_propagation_constraints"], [169, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [169, 2, 1, "", "select_bits"], [169, 2, 1, "", "select_words"], [169, 2, 1, "", "set_description"], [169, 2, 1, "", "set_id"], [169, 2, 1, "", "set_input_bit_positions"], [169, 2, 1, "", "set_input_id_links"], [169, 2, 1, "", "smt_constraints"], [169, 2, 1, "", "smt_xor_differential_propagation_constraints"], [169, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [169, 3, 1, "", "suffixes"], [169, 3, 1, "", "type"]], "components.fsr_component": [[170, 1, 1, "", "FSR"]], "components.fsr_component.FSR": [[170, 2, 1, "", "as_python_dictionary"], [170, 2, 1, "", "check_output_size"], [170, 3, 1, "", "description"], [170, 2, 1, "", "get_graph_representation"], [170, 3, 1, "", "id"], [170, 3, 1, "", "input_bit_positions"], [170, 3, 1, "", "input_bit_size"], [170, 3, 1, "", "input_id_links"], [170, 2, 1, "", "is_forbidden"], [170, 2, 1, "", "is_id_equal_to"], [170, 2, 1, "", "is_power_of_2_word_based"], [170, 3, 1, "", "output_bit_size"], [170, 2, 1, "", "output_size_for_concatenate"], [170, 2, 1, "", "print"], [170, 2, 1, "", "print_as_python_dictionary"], [170, 2, 1, "", "print_values"], [170, 2, 1, "", "print_word_values"], [170, 2, 1, "", "select_bits"], [170, 2, 1, "", "select_words"], [170, 2, 1, "", "set_description"], [170, 2, 1, "", "set_id"], [170, 2, 1, "", "set_input_bit_positions"], [170, 2, 1, "", "set_input_id_links"], [170, 3, 1, "", "suffixes"], [170, 3, 1, "", "type"]], "components.intermediate_output_component": [[171, 1, 1, "", "IntermediateOutput"], [171, 4, 1, "", "update_xor_linear_constraints_for_more_than_one_bit"]], "components.intermediate_output_component.IntermediateOutput": [[171, 2, 1, "", "as_python_dictionary"], [171, 2, 1, "", "check_output_size"], [171, 2, 1, "", "cms_constraints"], [171, 2, 1, "", "cms_xor_differential_propagation_constraints"], [171, 2, 1, "", "cp_constraints"], [171, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [171, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [171, 2, 1, "", "cp_xor_differential_propagation_constraints"], [171, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [171, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [171, 3, 1, "", "description"], [171, 2, 1, "", "get_bit_based_vectorized_python_code"], [171, 2, 1, "", "get_byte_based_vectorized_python_code"], [171, 2, 1, "", "get_graph_representation"], [171, 3, 1, "", "id"], [171, 3, 1, "", "input_bit_positions"], [171, 3, 1, "", "input_bit_size"], [171, 3, 1, "", "input_id_links"], [171, 2, 1, "", "is_forbidden"], [171, 2, 1, "", "is_id_equal_to"], [171, 2, 1, "", "is_power_of_2_word_based"], [171, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [171, 2, 1, "", "milp_constraints"], [171, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [171, 2, 1, "", "milp_xor_differential_propagation_constraints"], [171, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [171, 2, 1, "", "minizinc_constraints"], [171, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [171, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [171, 3, 1, "", "output_bit_size"], [171, 2, 1, "", "output_size_for_concatenate"], [171, 2, 1, "", "print"], [171, 2, 1, "", "print_as_python_dictionary"], [171, 2, 1, "", "print_values"], [171, 2, 1, "", "print_word_values"], [171, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [171, 2, 1, "", "sat_constraints"], [171, 2, 1, "", "sat_xor_differential_propagation_constraints"], [171, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [171, 2, 1, "", "select_bits"], [171, 2, 1, "", "select_words"], [171, 2, 1, "", "set_description"], [171, 2, 1, "", "set_id"], [171, 2, 1, "", "set_input_bit_positions"], [171, 2, 1, "", "set_input_id_links"], [171, 2, 1, "", "smt_constraints"], [171, 2, 1, "", "smt_xor_differential_propagation_constraints"], [171, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [171, 3, 1, "", "suffixes"], [171, 3, 1, "", "type"]], "components.linear_layer_component": [[172, 1, 1, "", "LinearLayer"], [172, 4, 1, "", "update_constraints_for_more_than_one_bit"]], "components.linear_layer_component.LinearLayer": [[172, 2, 1, "", "algebraic_polynomials"], [172, 2, 1, "", "as_python_dictionary"], [172, 2, 1, "", "check_output_size"], [172, 2, 1, "", "cms_constraints"], [172, 2, 1, "", "cms_xor_differential_propagation_constraints"], [172, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [172, 2, 1, "", "cp_constraints"], [172, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [172, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [172, 2, 1, "", "cp_xor_differential_propagation_constraints"], [172, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [172, 3, 1, "", "description"], [172, 2, 1, "", "get_bit_based_c_code"], [172, 2, 1, "", "get_bit_based_vectorized_python_code"], [172, 2, 1, "", "get_byte_based_vectorized_python_code"], [172, 2, 1, "", "get_graph_representation"], [172, 3, 1, "", "id"], [172, 3, 1, "", "input_bit_positions"], [172, 3, 1, "", "input_bit_size"], [172, 3, 1, "", "input_id_links"], [172, 2, 1, "", "is_forbidden"], [172, 2, 1, "", "is_id_equal_to"], [172, 2, 1, "", "is_power_of_2_word_based"], [172, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [172, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [172, 2, 1, "", "milp_constraints"], [172, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [172, 2, 1, "", "milp_xor_differential_propagation_constraints"], [172, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [172, 3, 1, "", "output_bit_size"], [172, 2, 1, "", "output_size_for_concatenate"], [172, 2, 1, "", "print"], [172, 2, 1, "", "print_as_python_dictionary"], [172, 2, 1, "", "print_values"], [172, 2, 1, "", "print_word_values"], [172, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [172, 2, 1, "", "sat_constraints"], [172, 2, 1, "", "sat_xor_differential_propagation_constraints"], [172, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [172, 2, 1, "", "select_bits"], [172, 2, 1, "", "select_words"], [172, 2, 1, "", "set_description"], [172, 2, 1, "", "set_id"], [172, 2, 1, "", "set_input_bit_positions"], [172, 2, 1, "", "set_input_id_links"], [172, 2, 1, "", "smt_constraints"], [172, 2, 1, "", "smt_xor_differential_propagation_constraints"], [172, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [172, 3, 1, "", "suffixes"], [172, 3, 1, "", "type"]], "components.mix_column_component": [[173, 1, 1, "", "MixColumn"], [173, 4, 1, "", "add_xor_components"], [173, 4, 1, "", "calculate_input_bit_positions"], [173, 4, 1, "", "cp_get_all_inputs"]], "components.mix_column_component.MixColumn": [[173, 2, 1, "", "algebraic_polynomials"], [173, 2, 1, "", "as_python_dictionary"], [173, 2, 1, "", "check_output_size"], [173, 2, 1, "", "cms_constraints"], [173, 2, 1, "", "cms_xor_differential_propagation_constraints"], [173, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [173, 2, 1, "", "cp_constraints"], [173, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [173, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [173, 2, 1, "", "cp_xor_differential_propagation_constraints"], [173, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [173, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [173, 3, 1, "", "description"], [173, 2, 1, "", "get_bit_based_c_code"], [173, 2, 1, "", "get_bit_based_vectorized_python_code"], [173, 2, 1, "", "get_byte_based_vectorized_python_code"], [173, 2, 1, "", "get_graph_representation"], [173, 3, 1, "", "id"], [173, 3, 1, "", "input_bit_positions"], [173, 3, 1, "", "input_bit_size"], [173, 3, 1, "", "input_id_links"], [173, 2, 1, "", "is_forbidden"], [173, 2, 1, "", "is_id_equal_to"], [173, 2, 1, "", "is_power_of_2_word_based"], [173, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [173, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [173, 2, 1, "", "milp_constraints"], [173, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [173, 2, 1, "", "milp_xor_differential_propagation_constraints"], [173, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [173, 3, 1, "", "output_bit_size"], [173, 2, 1, "", "output_size_for_concatenate"], [173, 2, 1, "", "print"], [173, 2, 1, "", "print_as_python_dictionary"], [173, 2, 1, "", "print_values"], [173, 2, 1, "", "print_word_values"], [173, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [173, 2, 1, "", "sat_constraints"], [173, 2, 1, "", "sat_xor_differential_propagation_constraints"], [173, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [173, 2, 1, "", "select_bits"], [173, 2, 1, "", "select_words"], [173, 2, 1, "", "set_description"], [173, 2, 1, "", "set_id"], [173, 2, 1, "", "set_input_bit_positions"], [173, 2, 1, "", "set_input_id_links"], [173, 2, 1, "", "smt_constraints"], [173, 2, 1, "", "smt_xor_differential_propagation_constraints"], [173, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [173, 3, 1, "", "suffixes"], [173, 3, 1, "", "type"]], "components.modadd_component": [[174, 1, 1, "", "MODADD"], [174, 4, 1, "", "cms_modadd"], [174, 4, 1, "", "cms_modadd_seq"], [174, 4, 1, "", "cp_twoterms"], [174, 4, 1, "", "sat_modadd"], [174, 4, 1, "", "sat_modadd_seq"], [174, 4, 1, "", "smt_modadd"], [174, 4, 1, "", "smt_modadd_seq"]], "components.modadd_component.MODADD": [[174, 2, 1, "", "algebraic_polynomials"], [174, 2, 1, "", "as_python_dictionary"], [174, 2, 1, "", "check_output_size"], [174, 2, 1, "", "cms_constraints"], [174, 2, 1, "", "cms_xor_differential_propagation_constraints"], [174, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [174, 2, 1, "", "cp_constraints"], [174, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [174, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [174, 2, 1, "", "cp_twoterms_xor_differential_probability"], [174, 2, 1, "", "cp_xor_differential_propagation_constraints"], [174, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [174, 2, 1, "", "create_bct_mzn_constraint_from_component_ids"], [174, 3, 1, "", "description"], [174, 2, 1, "", "get_bit_based_vectorized_python_code"], [174, 2, 1, "", "get_byte_based_vectorized_python_code"], [174, 2, 1, "", "get_graph_representation"], [174, 2, 1, "", "get_word_operation_sign"], [174, 3, 1, "", "id"], [174, 3, 1, "", "input_bit_positions"], [174, 3, 1, "", "input_bit_size"], [174, 3, 1, "", "input_id_links"], [174, 2, 1, "", "is_forbidden"], [174, 2, 1, "", "is_id_equal_to"], [174, 2, 1, "", "is_power_of_2_word_based"], [174, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [174, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [174, 2, 1, "", "milp_xor_differential_propagation_constraints"], [174, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [174, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [174, 3, 1, "", "output_bit_size"], [174, 2, 1, "", "output_size_for_concatenate"], [174, 2, 1, "", "print"], [174, 2, 1, "", "print_as_python_dictionary"], [174, 2, 1, "", "print_values"], [174, 2, 1, "", "print_word_values"], [174, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [174, 2, 1, "", "sat_constraints"], [174, 2, 1, "", "sat_xor_differential_propagation_constraints"], [174, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [174, 2, 1, "", "select_bits"], [174, 2, 1, "", "select_words"], [174, 2, 1, "", "set_description"], [174, 2, 1, "", "set_id"], [174, 2, 1, "", "set_input_bit_positions"], [174, 2, 1, "", "set_input_id_links"], [174, 2, 1, "", "smt_constraints"], [174, 2, 1, "", "smt_xor_differential_propagation_constraints"], [174, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [174, 3, 1, "", "suffixes"], [174, 2, 1, "", "twoterms_milp_probability_xor_linear_constraints"], [174, 3, 1, "", "type"]], "components.modsub_component": [[175, 1, 1, "", "MODSUB"], [175, 4, 1, "", "cp_twoterms"]], "components.modsub_component.MODSUB": [[175, 2, 1, "", "algebraic_polynomials"], [175, 2, 1, "", "as_python_dictionary"], [175, 2, 1, "", "check_output_size"], [175, 2, 1, "", "cms_constraints"], [175, 2, 1, "", "cms_xor_differential_propagation_constraints"], [175, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [175, 2, 1, "", "cp_constraints"], [175, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [175, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [175, 2, 1, "", "cp_twoterms_xor_differential_probability"], [175, 2, 1, "", "cp_xor_differential_propagation_constraints"], [175, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [175, 2, 1, "", "create_bct_mzn_constraint_from_component_ids"], [175, 3, 1, "", "description"], [175, 2, 1, "", "get_bit_based_vectorized_python_code"], [175, 2, 1, "", "get_byte_based_vectorized_python_code"], [175, 2, 1, "", "get_graph_representation"], [175, 2, 1, "", "get_word_operation_sign"], [175, 3, 1, "", "id"], [175, 3, 1, "", "input_bit_positions"], [175, 3, 1, "", "input_bit_size"], [175, 3, 1, "", "input_id_links"], [175, 2, 1, "", "is_forbidden"], [175, 2, 1, "", "is_id_equal_to"], [175, 2, 1, "", "is_power_of_2_word_based"], [175, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [175, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [175, 2, 1, "", "milp_xor_differential_propagation_constraints"], [175, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [175, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [175, 3, 1, "", "output_bit_size"], [175, 2, 1, "", "output_size_for_concatenate"], [175, 2, 1, "", "print"], [175, 2, 1, "", "print_as_python_dictionary"], [175, 2, 1, "", "print_values"], [175, 2, 1, "", "print_word_values"], [175, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [175, 2, 1, "", "sat_constraints"], [175, 2, 1, "", "sat_xor_differential_propagation_constraints"], [175, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [175, 2, 1, "", "select_bits"], [175, 2, 1, "", "select_words"], [175, 2, 1, "", "set_description"], [175, 2, 1, "", "set_id"], [175, 2, 1, "", "set_input_bit_positions"], [175, 2, 1, "", "set_input_id_links"], [175, 2, 1, "", "smt_constraints"], [175, 2, 1, "", "smt_xor_differential_propagation_constraints"], [175, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [175, 3, 1, "", "suffixes"], [175, 2, 1, "", "twoterms_milp_probability_xor_linear_constraints"], [175, 3, 1, "", "type"]], "components.modular_component": [[176, 1, 1, "", "Modular"], [176, 4, 1, "", "generate_constraints_for_window_size_with_full_windows"], [176, 4, 1, "", "generic_sign_linear_constraints"], [176, 4, 1, "", "milp_n_window_heuristic"], [176, 4, 1, "", "sat_n_window_heuristc_bit_level"]], "components.modular_component.Modular": [[176, 2, 1, "", "as_python_dictionary"], [176, 2, 1, "", "check_output_size"], [176, 2, 1, "", "cms_xor_differential_propagation_constraints"], [176, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [176, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [176, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [176, 2, 1, "", "cp_twoterms_xor_differential_probability"], [176, 2, 1, "", "cp_xor_differential_propagation_constraints"], [176, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [176, 2, 1, "", "create_bct_mzn_constraint_from_component_ids"], [176, 3, 1, "", "description"], [176, 2, 1, "", "get_graph_representation"], [176, 2, 1, "", "get_word_operation_sign"], [176, 3, 1, "", "id"], [176, 3, 1, "", "input_bit_positions"], [176, 3, 1, "", "input_bit_size"], [176, 3, 1, "", "input_id_links"], [176, 2, 1, "", "is_forbidden"], [176, 2, 1, "", "is_id_equal_to"], [176, 2, 1, "", "is_power_of_2_word_based"], [176, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [176, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [176, 2, 1, "", "milp_xor_differential_propagation_constraints"], [176, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [176, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [176, 3, 1, "", "output_bit_size"], [176, 2, 1, "", "output_size_for_concatenate"], [176, 2, 1, "", "print"], [176, 2, 1, "", "print_as_python_dictionary"], [176, 2, 1, "", "print_values"], [176, 2, 1, "", "print_word_values"], [176, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [176, 2, 1, "", "sat_xor_differential_propagation_constraints"], [176, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [176, 2, 1, "", "select_bits"], [176, 2, 1, "", "select_words"], [176, 2, 1, "", "set_description"], [176, 2, 1, "", "set_id"], [176, 2, 1, "", "set_input_bit_positions"], [176, 2, 1, "", "set_input_id_links"], [176, 2, 1, "", "smt_xor_differential_propagation_constraints"], [176, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [176, 3, 1, "", "suffixes"], [176, 2, 1, "", "twoterms_milp_probability_xor_linear_constraints"], [176, 3, 1, "", "type"]], "components.multi_input_non_linear_logical_operator_component": [[177, 1, 1, "", "MultiInputNonlinearLogicalOperator"]], "components.multi_input_non_linear_logical_operator_component.MultiInputNonlinearLogicalOperator": [[177, 2, 1, "", "as_python_dictionary"], [177, 2, 1, "", "check_output_size"], [177, 2, 1, "", "cms_constraints"], [177, 2, 1, "", "cms_xor_differential_propagation_constraints"], [177, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [177, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [177, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [177, 2, 1, "", "cp_xor_differential_propagation_constraints"], [177, 3, 1, "", "description"], [177, 2, 1, "", "generic_sign_linear_constraints"], [177, 2, 1, "", "get_graph_representation"], [177, 2, 1, "", "get_word_operation_sign"], [177, 3, 1, "", "id"], [177, 3, 1, "", "input_bit_positions"], [177, 3, 1, "", "input_bit_size"], [177, 3, 1, "", "input_id_links"], [177, 2, 1, "", "is_forbidden"], [177, 2, 1, "", "is_id_equal_to"], [177, 2, 1, "", "is_power_of_2_word_based"], [177, 2, 1, "", "milp_twoterms_xor_linear_probability_constraints"], [177, 2, 1, "", "milp_xor_differential_propagation_constraints"], [177, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [177, 3, 1, "", "output_bit_size"], [177, 2, 1, "", "output_size_for_concatenate"], [177, 2, 1, "", "print"], [177, 2, 1, "", "print_as_python_dictionary"], [177, 2, 1, "", "print_values"], [177, 2, 1, "", "print_word_values"], [177, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [177, 2, 1, "", "sat_constraints"], [177, 2, 1, "", "sat_xor_differential_propagation_constraints"], [177, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [177, 2, 1, "", "select_bits"], [177, 2, 1, "", "select_words"], [177, 2, 1, "", "set_description"], [177, 2, 1, "", "set_id"], [177, 2, 1, "", "set_input_bit_positions"], [177, 2, 1, "", "set_input_id_links"], [177, 2, 1, "", "smt_xor_differential_propagation_constraints"], [177, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [177, 3, 1, "", "suffixes"], [177, 3, 1, "", "type"]], "components.not_component": [[178, 1, 1, "", "NOT"]], "components.not_component.NOT": [[178, 2, 1, "", "algebraic_polynomials"], [178, 2, 1, "", "as_python_dictionary"], [178, 2, 1, "", "check_output_size"], [178, 2, 1, "", "cms_constraints"], [178, 2, 1, "", "cms_xor_differential_propagation_constraints"], [178, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [178, 2, 1, "", "cp_constraints"], [178, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [178, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [178, 2, 1, "", "cp_xor_differential_first_step_constraints"], [178, 2, 1, "", "cp_xor_differential_propagation_constraints"], [178, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [178, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [178, 3, 1, "", "description"], [178, 2, 1, "", "generic_sign_linear_constraints"], [178, 2, 1, "", "get_bit_based_vectorized_python_code"], [178, 2, 1, "", "get_byte_based_vectorized_python_code"], [178, 2, 1, "", "get_graph_representation"], [178, 2, 1, "", "get_word_operation_sign"], [178, 3, 1, "", "id"], [178, 3, 1, "", "input_bit_positions"], [178, 3, 1, "", "input_bit_size"], [178, 3, 1, "", "input_id_links"], [178, 2, 1, "", "is_forbidden"], [178, 2, 1, "", "is_id_equal_to"], [178, 2, 1, "", "is_power_of_2_word_based"], [178, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [178, 2, 1, "", "milp_constraints"], [178, 2, 1, "", "milp_xor_differential_propagation_constraints"], [178, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [178, 3, 1, "", "output_bit_size"], [178, 2, 1, "", "output_size_for_concatenate"], [178, 2, 1, "", "print"], [178, 2, 1, "", "print_as_python_dictionary"], [178, 2, 1, "", "print_values"], [178, 2, 1, "", "print_word_values"], [178, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [178, 2, 1, "", "sat_constraints"], [178, 2, 1, "", "sat_xor_differential_propagation_constraints"], [178, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [178, 2, 1, "", "select_bits"], [178, 2, 1, "", "select_words"], [178, 2, 1, "", "set_description"], [178, 2, 1, "", "set_id"], [178, 2, 1, "", "set_input_bit_positions"], [178, 2, 1, "", "set_input_id_links"], [178, 2, 1, "", "smt_constraints"], [178, 2, 1, "", "smt_xor_differential_propagation_constraints"], [178, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [178, 3, 1, "", "suffixes"], [178, 3, 1, "", "type"]], "components.or_component": [[179, 1, 1, "", "OR"]], "components.or_component.OR": [[179, 2, 1, "", "algebraic_polynomials"], [179, 2, 1, "", "as_python_dictionary"], [179, 2, 1, "", "check_output_size"], [179, 2, 1, "", "cms_constraints"], [179, 2, 1, "", "cms_xor_differential_propagation_constraints"], [179, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [179, 2, 1, "", "cp_constraints"], [179, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [179, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [179, 2, 1, "", "cp_xor_differential_propagation_constraints"], [179, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [179, 3, 1, "", "description"], [179, 2, 1, "", "generic_sign_linear_constraints"], [179, 2, 1, "", "get_bit_based_vectorized_python_code"], [179, 2, 1, "", "get_byte_based_vectorized_python_code"], [179, 2, 1, "", "get_graph_representation"], [179, 2, 1, "", "get_word_operation_sign"], [179, 3, 1, "", "id"], [179, 3, 1, "", "input_bit_positions"], [179, 3, 1, "", "input_bit_size"], [179, 3, 1, "", "input_id_links"], [179, 2, 1, "", "is_forbidden"], [179, 2, 1, "", "is_id_equal_to"], [179, 2, 1, "", "is_power_of_2_word_based"], [179, 2, 1, "", "milp_twoterms_xor_linear_probability_constraints"], [179, 2, 1, "", "milp_xor_differential_propagation_constraints"], [179, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [179, 3, 1, "", "output_bit_size"], [179, 2, 1, "", "output_size_for_concatenate"], [179, 2, 1, "", "print"], [179, 2, 1, "", "print_as_python_dictionary"], [179, 2, 1, "", "print_values"], [179, 2, 1, "", "print_word_values"], [179, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [179, 2, 1, "", "sat_constraints"], [179, 2, 1, "", "sat_xor_differential_propagation_constraints"], [179, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [179, 2, 1, "", "select_bits"], [179, 2, 1, "", "select_words"], [179, 2, 1, "", "set_description"], [179, 2, 1, "", "set_id"], [179, 2, 1, "", "set_input_bit_positions"], [179, 2, 1, "", "set_input_id_links"], [179, 2, 1, "", "smt_constraints"], [179, 2, 1, "", "smt_xor_differential_propagation_constraints"], [179, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [179, 3, 1, "", "suffixes"], [179, 3, 1, "", "type"]], "components.permutation_component": [[180, 1, 1, "", "Permutation"]], "components.permutation_component.Permutation": [[180, 2, 1, "", "algebraic_polynomials"], [180, 2, 1, "", "as_python_dictionary"], [180, 2, 1, "", "check_output_size"], [180, 2, 1, "", "cms_constraints"], [180, 2, 1, "", "cms_xor_differential_propagation_constraints"], [180, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [180, 2, 1, "", "cp_constraints"], [180, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [180, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [180, 2, 1, "", "cp_xor_differential_propagation_constraints"], [180, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [180, 3, 1, "", "description"], [180, 2, 1, "", "get_bit_based_c_code"], [180, 2, 1, "", "get_bit_based_vectorized_python_code"], [180, 2, 1, "", "get_byte_based_vectorized_python_code"], [180, 2, 1, "", "get_graph_representation"], [180, 3, 1, "", "id"], [180, 3, 1, "", "input_bit_positions"], [180, 3, 1, "", "input_bit_size"], [180, 3, 1, "", "input_id_links"], [180, 2, 1, "", "is_forbidden"], [180, 2, 1, "", "is_id_equal_to"], [180, 2, 1, "", "is_power_of_2_word_based"], [180, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [180, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [180, 2, 1, "", "milp_constraints"], [180, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [180, 2, 1, "", "milp_xor_differential_propagation_constraints"], [180, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [180, 3, 1, "", "output_bit_size"], [180, 2, 1, "", "output_size_for_concatenate"], [180, 2, 1, "", "print"], [180, 2, 1, "", "print_as_python_dictionary"], [180, 2, 1, "", "print_values"], [180, 2, 1, "", "print_word_values"], [180, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [180, 2, 1, "", "sat_constraints"], [180, 2, 1, "", "sat_xor_differential_propagation_constraints"], [180, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [180, 2, 1, "", "select_bits"], [180, 2, 1, "", "select_words"], [180, 2, 1, "", "set_description"], [180, 2, 1, "", "set_id"], [180, 2, 1, "", "set_input_bit_positions"], [180, 2, 1, "", "set_input_id_links"], [180, 2, 1, "", "smt_constraints"], [180, 2, 1, "", "smt_xor_differential_propagation_constraints"], [180, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [180, 3, 1, "", "suffixes"], [180, 3, 1, "", "type"]], "components.reverse_component": [[181, 1, 1, "", "Reverse"]], "components.reverse_component.Reverse": [[181, 2, 1, "", "algebraic_polynomials"], [181, 2, 1, "", "as_python_dictionary"], [181, 2, 1, "", "check_output_size"], [181, 2, 1, "", "cms_constraints"], [181, 2, 1, "", "cms_xor_differential_propagation_constraints"], [181, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [181, 2, 1, "", "cp_constraints"], [181, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [181, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [181, 2, 1, "", "cp_xor_differential_propagation_constraints"], [181, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [181, 3, 1, "", "description"], [181, 2, 1, "", "get_bit_based_c_code"], [181, 2, 1, "", "get_bit_based_vectorized_python_code"], [181, 2, 1, "", "get_byte_based_vectorized_python_code"], [181, 2, 1, "", "get_graph_representation"], [181, 3, 1, "", "id"], [181, 3, 1, "", "input_bit_positions"], [181, 3, 1, "", "input_bit_size"], [181, 3, 1, "", "input_id_links"], [181, 2, 1, "", "is_forbidden"], [181, 2, 1, "", "is_id_equal_to"], [181, 2, 1, "", "is_power_of_2_word_based"], [181, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [181, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [181, 2, 1, "", "milp_constraints"], [181, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [181, 2, 1, "", "milp_xor_differential_propagation_constraints"], [181, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [181, 3, 1, "", "output_bit_size"], [181, 2, 1, "", "output_size_for_concatenate"], [181, 2, 1, "", "print"], [181, 2, 1, "", "print_as_python_dictionary"], [181, 2, 1, "", "print_values"], [181, 2, 1, "", "print_word_values"], [181, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [181, 2, 1, "", "sat_constraints"], [181, 2, 1, "", "sat_xor_differential_propagation_constraints"], [181, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [181, 2, 1, "", "select_bits"], [181, 2, 1, "", "select_words"], [181, 2, 1, "", "set_description"], [181, 2, 1, "", "set_id"], [181, 2, 1, "", "set_input_bit_positions"], [181, 2, 1, "", "set_input_id_links"], [181, 2, 1, "", "smt_constraints"], [181, 2, 1, "", "smt_xor_differential_propagation_constraints"], [181, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [181, 3, 1, "", "suffixes"], [181, 3, 1, "", "type"]], "components.rotate_component": [[182, 1, 1, "", "Rotate"]], "components.rotate_component.Rotate": [[182, 2, 1, "", "algebraic_polynomials"], [182, 2, 1, "", "as_python_dictionary"], [182, 2, 1, "", "check_output_size"], [182, 2, 1, "", "cms_constraints"], [182, 2, 1, "", "cms_xor_differential_propagation_constraints"], [182, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [182, 2, 1, "", "cp_constraints"], [182, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [182, 2, 1, "", "cp_inverse_constraints"], [182, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [182, 2, 1, "", "cp_xor_differential_first_step_constraints"], [182, 2, 1, "", "cp_xor_differential_propagation_constraints"], [182, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [182, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [182, 3, 1, "", "description"], [182, 2, 1, "", "get_bit_based_vectorized_python_code"], [182, 2, 1, "", "get_byte_based_vectorized_python_code"], [182, 2, 1, "", "get_graph_representation"], [182, 2, 1, "", "get_word_based_c_code"], [182, 2, 1, "", "get_word_operation_sign"], [182, 3, 1, "", "id"], [182, 3, 1, "", "input_bit_positions"], [182, 3, 1, "", "input_bit_size"], [182, 3, 1, "", "input_id_links"], [182, 2, 1, "", "is_forbidden"], [182, 2, 1, "", "is_id_equal_to"], [182, 2, 1, "", "is_power_of_2_word_based"], [182, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [182, 2, 1, "", "milp_constraints"], [182, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [182, 2, 1, "", "milp_xor_differential_propagation_constraints"], [182, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [182, 2, 1, "", "minizinc_constraints"], [182, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [182, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [182, 3, 1, "", "output_bit_size"], [182, 2, 1, "", "output_size_for_concatenate"], [182, 2, 1, "", "print"], [182, 2, 1, "", "print_as_python_dictionary"], [182, 2, 1, "", "print_values"], [182, 2, 1, "", "print_word_values"], [182, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [182, 2, 1, "", "sat_constraints"], [182, 2, 1, "", "sat_xor_differential_propagation_constraints"], [182, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [182, 2, 1, "", "select_bits"], [182, 2, 1, "", "select_words"], [182, 2, 1, "", "set_description"], [182, 2, 1, "", "set_id"], [182, 2, 1, "", "set_input_bit_positions"], [182, 2, 1, "", "set_input_id_links"], [182, 2, 1, "", "smt_constraints"], [182, 2, 1, "", "smt_xor_differential_propagation_constraints"], [182, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [182, 3, 1, "", "suffixes"], [182, 3, 1, "", "type"]], "components.sbox_component": [[183, 1, 1, "", "SBOX"], [183, 4, 1, "", "check_table_feasibility"], [183, 4, 1, "", "cp_update_ddt_valid_probabilities"], [183, 4, 1, "", "cp_update_lat_valid_probabilities"], [183, 4, 1, "", "milp_large_xor_probability_constraint_for_inequality"], [183, 4, 1, "", "milp_set_constraints_from_dictionnary_for_large_sbox"], [183, 4, 1, "", "sat_build_table_template"], [183, 4, 1, "", "smt_build_table_template"], [183, 4, 1, "", "smt_get_sbox_probability_constraints"]], "components.sbox_component.SBOX": [[183, 2, 1, "", "algebraic_polynomials"], [183, 2, 1, "", "as_python_dictionary"], [183, 2, 1, "", "check_output_size"], [183, 2, 1, "", "cms_constraints"], [183, 2, 1, "", "cms_xor_differential_propagation_constraints"], [183, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [183, 2, 1, "", "cp_constraints"], [183, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [183, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [183, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [183, 2, 1, "", "cp_xor_differential_first_step_constraints"], [183, 2, 1, "", "cp_xor_differential_propagation_constraints"], [183, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [183, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [183, 3, 1, "", "description"], [183, 2, 1, "", "generate_sbox_sign_lat"], [183, 2, 1, "", "get_bit_based_c_code"], [183, 2, 1, "", "get_bit_based_vectorized_python_code"], [183, 2, 1, "", "get_byte_based_vectorized_python_code"], [183, 2, 1, "", "get_ddt_with_undisturbed_transitions"], [183, 2, 1, "", "get_graph_representation"], [183, 2, 1, "", "get_word_based_c_code"], [183, 3, 1, "", "id"], [183, 3, 1, "", "input_bit_positions"], [183, 3, 1, "", "input_bit_size"], [183, 3, 1, "", "input_id_links"], [183, 2, 1, "", "is_forbidden"], [183, 2, 1, "", "is_id_equal_to"], [183, 2, 1, "", "is_power_of_2_word_based"], [183, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [183, 2, 1, "", "milp_large_xor_differential_probability_constraints"], [183, 2, 1, "", "milp_large_xor_linear_probability_constraints"], [183, 2, 1, "", "milp_small_xor_differential_probability_constraints"], [183, 2, 1, "", "milp_small_xor_linear_probability_constraints"], [183, 2, 1, "", "milp_undisturbed_bits_bitwise_deterministic_truncated_xor_differential_constraints"], [183, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [183, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_simple_constraints"], [183, 2, 1, "", "milp_xor_differential_propagation_constraints"], [183, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [183, 3, 1, "", "output_bit_size"], [183, 2, 1, "", "output_size_for_concatenate"], [183, 2, 1, "", "print"], [183, 2, 1, "", "print_as_python_dictionary"], [183, 2, 1, "", "print_values"], [183, 2, 1, "", "print_word_values"], [183, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [183, 2, 1, "", "sat_constraints"], [183, 2, 1, "", "sat_xor_differential_propagation_constraints"], [183, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [183, 2, 1, "", "select_bits"], [183, 2, 1, "", "select_words"], [183, 2, 1, "", "set_description"], [183, 2, 1, "", "set_id"], [183, 2, 1, "", "set_input_bit_positions"], [183, 2, 1, "", "set_input_id_links"], [183, 2, 1, "", "smt_constraints"], [183, 2, 1, "", "smt_xor_differential_propagation_constraints"], [183, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [183, 3, 1, "", "suffixes"], [183, 3, 1, "", "type"]], "components.shift_component": [[184, 1, 1, "", "SHIFT"]], "components.shift_component.SHIFT": [[184, 2, 1, "", "algebraic_polynomials"], [184, 2, 1, "", "as_python_dictionary"], [184, 2, 1, "", "check_output_size"], [184, 2, 1, "", "cms_constraints"], [184, 2, 1, "", "cms_xor_differential_propagation_constraints"], [184, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [184, 2, 1, "", "cp_constraints"], [184, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [184, 2, 1, "", "cp_inverse_constraints"], [184, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [184, 2, 1, "", "cp_xor_differential_first_step_constraints"], [184, 2, 1, "", "cp_xor_differential_propagation_constraints"], [184, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [184, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [184, 3, 1, "", "description"], [184, 2, 1, "", "get_bit_based_vectorized_python_code"], [184, 2, 1, "", "get_byte_based_vectorized_python_code"], [184, 2, 1, "", "get_graph_representation"], [184, 2, 1, "", "get_word_based_c_code"], [184, 2, 1, "", "get_word_operation_sign"], [184, 3, 1, "", "id"], [184, 3, 1, "", "input_bit_positions"], [184, 3, 1, "", "input_bit_size"], [184, 3, 1, "", "input_id_links"], [184, 2, 1, "", "is_forbidden"], [184, 2, 1, "", "is_id_equal_to"], [184, 2, 1, "", "is_power_of_2_word_based"], [184, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [184, 2, 1, "", "milp_constraints"], [184, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [184, 2, 1, "", "milp_xor_differential_propagation_constraints"], [184, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [184, 2, 1, "", "minizinc_constraints"], [184, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [184, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [184, 3, 1, "", "output_bit_size"], [184, 2, 1, "", "output_size_for_concatenate"], [184, 2, 1, "", "print"], [184, 2, 1, "", "print_as_python_dictionary"], [184, 2, 1, "", "print_values"], [184, 2, 1, "", "print_word_values"], [184, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [184, 2, 1, "", "sat_constraints"], [184, 2, 1, "", "sat_xor_differential_propagation_constraints"], [184, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [184, 2, 1, "", "select_bits"], [184, 2, 1, "", "select_words"], [184, 2, 1, "", "set_description"], [184, 2, 1, "", "set_id"], [184, 2, 1, "", "set_input_bit_positions"], [184, 2, 1, "", "set_input_id_links"], [184, 2, 1, "", "smt_constraints"], [184, 2, 1, "", "smt_xor_differential_propagation_constraints"], [184, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [184, 3, 1, "", "suffixes"], [184, 3, 1, "", "type"]], "components.shift_rows_component": [[185, 1, 1, "", "ShiftRows"]], "components.shift_rows_component.ShiftRows": [[185, 2, 1, "", "algebraic_polynomials"], [185, 2, 1, "", "as_python_dictionary"], [185, 2, 1, "", "check_output_size"], [185, 2, 1, "", "cms_constraints"], [185, 2, 1, "", "cms_xor_differential_propagation_constraints"], [185, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [185, 2, 1, "", "cp_constraints"], [185, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [185, 2, 1, "", "cp_inverse_constraints"], [185, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [185, 2, 1, "", "cp_xor_differential_first_step_constraints"], [185, 2, 1, "", "cp_xor_differential_propagation_constraints"], [185, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [185, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [185, 3, 1, "", "description"], [185, 2, 1, "", "get_bit_based_vectorized_python_code"], [185, 2, 1, "", "get_byte_based_vectorized_python_code"], [185, 2, 1, "", "get_graph_representation"], [185, 2, 1, "", "get_word_based_c_code"], [185, 2, 1, "", "get_word_operation_sign"], [185, 3, 1, "", "id"], [185, 3, 1, "", "input_bit_positions"], [185, 3, 1, "", "input_bit_size"], [185, 3, 1, "", "input_id_links"], [185, 2, 1, "", "is_forbidden"], [185, 2, 1, "", "is_id_equal_to"], [185, 2, 1, "", "is_power_of_2_word_based"], [185, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [185, 2, 1, "", "milp_constraints"], [185, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [185, 2, 1, "", "milp_xor_differential_propagation_constraints"], [185, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [185, 2, 1, "", "minizinc_constraints"], [185, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [185, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [185, 3, 1, "", "output_bit_size"], [185, 2, 1, "", "output_size_for_concatenate"], [185, 2, 1, "", "print"], [185, 2, 1, "", "print_as_python_dictionary"], [185, 2, 1, "", "print_values"], [185, 2, 1, "", "print_word_values"], [185, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [185, 2, 1, "", "sat_constraints"], [185, 2, 1, "", "sat_xor_differential_propagation_constraints"], [185, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [185, 2, 1, "", "select_bits"], [185, 2, 1, "", "select_words"], [185, 2, 1, "", "set_description"], [185, 2, 1, "", "set_id"], [185, 2, 1, "", "set_input_bit_positions"], [185, 2, 1, "", "set_input_id_links"], [185, 2, 1, "", "smt_constraints"], [185, 2, 1, "", "smt_xor_differential_propagation_constraints"], [185, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [185, 3, 1, "", "suffixes"], [185, 3, 1, "", "type"]], "components.sigma_component": [[186, 1, 1, "", "Sigma"]], "components.sigma_component.Sigma": [[186, 2, 1, "", "algebraic_polynomials"], [186, 2, 1, "", "as_python_dictionary"], [186, 2, 1, "", "check_output_size"], [186, 2, 1, "", "cms_constraints"], [186, 2, 1, "", "cms_xor_differential_propagation_constraints"], [186, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [186, 2, 1, "", "cp_constraints"], [186, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [186, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [186, 2, 1, "", "cp_xor_differential_propagation_constraints"], [186, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [186, 3, 1, "", "description"], [186, 2, 1, "", "get_bit_based_c_code"], [186, 2, 1, "", "get_bit_based_vectorized_python_code"], [186, 2, 1, "", "get_byte_based_vectorized_python_code"], [186, 2, 1, "", "get_graph_representation"], [186, 3, 1, "", "id"], [186, 3, 1, "", "input_bit_positions"], [186, 3, 1, "", "input_bit_size"], [186, 3, 1, "", "input_id_links"], [186, 2, 1, "", "is_forbidden"], [186, 2, 1, "", "is_id_equal_to"], [186, 2, 1, "", "is_power_of_2_word_based"], [186, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [186, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [186, 2, 1, "", "milp_constraints"], [186, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [186, 2, 1, "", "milp_xor_differential_propagation_constraints"], [186, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [186, 3, 1, "", "output_bit_size"], [186, 2, 1, "", "output_size_for_concatenate"], [186, 2, 1, "", "print"], [186, 2, 1, "", "print_as_python_dictionary"], [186, 2, 1, "", "print_values"], [186, 2, 1, "", "print_word_values"], [186, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [186, 2, 1, "", "sat_constraints"], [186, 2, 1, "", "sat_xor_differential_propagation_constraints"], [186, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [186, 2, 1, "", "select_bits"], [186, 2, 1, "", "select_words"], [186, 2, 1, "", "set_description"], [186, 2, 1, "", "set_id"], [186, 2, 1, "", "set_input_bit_positions"], [186, 2, 1, "", "set_input_id_links"], [186, 2, 1, "", "smt_constraints"], [186, 2, 1, "", "smt_xor_differential_propagation_constraints"], [186, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [186, 3, 1, "", "suffixes"], [186, 3, 1, "", "type"]], "components.theta_keccak_component": [[187, 1, 1, "", "ThetaKeccak"]], "components.theta_keccak_component.ThetaKeccak": [[187, 2, 1, "", "algebraic_polynomials"], [187, 2, 1, "", "as_python_dictionary"], [187, 2, 1, "", "check_output_size"], [187, 2, 1, "", "cms_constraints"], [187, 2, 1, "", "cms_xor_differential_propagation_constraints"], [187, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [187, 2, 1, "", "cp_constraints"], [187, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [187, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [187, 2, 1, "", "cp_xor_differential_propagation_constraints"], [187, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [187, 3, 1, "", "description"], [187, 2, 1, "", "get_bit_based_c_code"], [187, 2, 1, "", "get_bit_based_vectorized_python_code"], [187, 2, 1, "", "get_byte_based_vectorized_python_code"], [187, 2, 1, "", "get_graph_representation"], [187, 3, 1, "", "id"], [187, 3, 1, "", "input_bit_positions"], [187, 3, 1, "", "input_bit_size"], [187, 3, 1, "", "input_id_links"], [187, 2, 1, "", "is_forbidden"], [187, 2, 1, "", "is_id_equal_to"], [187, 2, 1, "", "is_power_of_2_word_based"], [187, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [187, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [187, 2, 1, "", "milp_constraints"], [187, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [187, 2, 1, "", "milp_xor_differential_propagation_constraints"], [187, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [187, 3, 1, "", "output_bit_size"], [187, 2, 1, "", "output_size_for_concatenate"], [187, 2, 1, "", "print"], [187, 2, 1, "", "print_as_python_dictionary"], [187, 2, 1, "", "print_values"], [187, 2, 1, "", "print_word_values"], [187, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [187, 2, 1, "", "sat_constraints"], [187, 2, 1, "", "sat_xor_differential_propagation_constraints"], [187, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [187, 2, 1, "", "select_bits"], [187, 2, 1, "", "select_words"], [187, 2, 1, "", "set_description"], [187, 2, 1, "", "set_id"], [187, 2, 1, "", "set_input_bit_positions"], [187, 2, 1, "", "set_input_id_links"], [187, 2, 1, "", "smt_constraints"], [187, 2, 1, "", "smt_xor_differential_propagation_constraints"], [187, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [187, 3, 1, "", "suffixes"], [187, 3, 1, "", "type"]], "components.theta_xoodoo_component": [[188, 1, 1, "", "ThetaXoodoo"]], "components.theta_xoodoo_component.ThetaXoodoo": [[188, 2, 1, "", "algebraic_polynomials"], [188, 2, 1, "", "as_python_dictionary"], [188, 2, 1, "", "check_output_size"], [188, 2, 1, "", "cms_constraints"], [188, 2, 1, "", "cms_xor_differential_propagation_constraints"], [188, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [188, 2, 1, "", "cp_constraints"], [188, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [188, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [188, 2, 1, "", "cp_xor_differential_propagation_constraints"], [188, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [188, 3, 1, "", "description"], [188, 2, 1, "", "get_bit_based_c_code"], [188, 2, 1, "", "get_bit_based_vectorized_python_code"], [188, 2, 1, "", "get_byte_based_vectorized_python_code"], [188, 2, 1, "", "get_graph_representation"], [188, 3, 1, "", "id"], [188, 3, 1, "", "input_bit_positions"], [188, 3, 1, "", "input_bit_size"], [188, 3, 1, "", "input_id_links"], [188, 2, 1, "", "is_forbidden"], [188, 2, 1, "", "is_id_equal_to"], [188, 2, 1, "", "is_power_of_2_word_based"], [188, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [188, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [188, 2, 1, "", "milp_constraints"], [188, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [188, 2, 1, "", "milp_xor_differential_propagation_constraints"], [188, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [188, 3, 1, "", "output_bit_size"], [188, 2, 1, "", "output_size_for_concatenate"], [188, 2, 1, "", "print"], [188, 2, 1, "", "print_as_python_dictionary"], [188, 2, 1, "", "print_values"], [188, 2, 1, "", "print_word_values"], [188, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [188, 2, 1, "", "sat_constraints"], [188, 2, 1, "", "sat_xor_differential_propagation_constraints"], [188, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [188, 2, 1, "", "select_bits"], [188, 2, 1, "", "select_words"], [188, 2, 1, "", "set_description"], [188, 2, 1, "", "set_id"], [188, 2, 1, "", "set_input_bit_positions"], [188, 2, 1, "", "set_input_id_links"], [188, 2, 1, "", "smt_constraints"], [188, 2, 1, "", "smt_xor_differential_propagation_constraints"], [188, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [188, 3, 1, "", "suffixes"], [188, 3, 1, "", "type"]], "components.variable_rotate_component": [[189, 1, 1, "", "VariableRotate"]], "components.variable_rotate_component.VariableRotate": [[189, 2, 1, "", "as_python_dictionary"], [189, 2, 1, "", "check_output_size"], [189, 3, 1, "", "description"], [189, 2, 1, "", "get_graph_representation"], [189, 2, 1, "", "get_word_based_c_code"], [189, 2, 1, "", "get_word_operation_sign"], [189, 3, 1, "", "id"], [189, 3, 1, "", "input_bit_positions"], [189, 3, 1, "", "input_bit_size"], [189, 3, 1, "", "input_id_links"], [189, 2, 1, "", "is_forbidden"], [189, 2, 1, "", "is_id_equal_to"], [189, 2, 1, "", "is_power_of_2_word_based"], [189, 3, 1, "", "output_bit_size"], [189, 2, 1, "", "output_size_for_concatenate"], [189, 2, 1, "", "print"], [189, 2, 1, "", "print_as_python_dictionary"], [189, 2, 1, "", "print_values"], [189, 2, 1, "", "print_word_values"], [189, 2, 1, "", "select_bits"], [189, 2, 1, "", "select_words"], [189, 2, 1, "", "set_description"], [189, 2, 1, "", "set_id"], [189, 2, 1, "", "set_input_bit_positions"], [189, 2, 1, "", "set_input_id_links"], [189, 3, 1, "", "suffixes"], [189, 3, 1, "", "type"]], "components.variable_shift_component": [[190, 1, 1, "", "VariableShift"]], "components.variable_shift_component.VariableShift": [[190, 2, 1, "", "as_python_dictionary"], [190, 2, 1, "", "check_output_size"], [190, 2, 1, "", "cms_constraints"], [190, 2, 1, "", "cp_constraints"], [190, 3, 1, "", "description"], [190, 2, 1, "", "get_bit_based_vectorized_python_code"], [190, 2, 1, "", "get_byte_based_vectorized_python_code"], [190, 2, 1, "", "get_graph_representation"], [190, 2, 1, "", "get_word_based_c_code"], [190, 2, 1, "", "get_word_operation_sign"], [190, 3, 1, "", "id"], [190, 3, 1, "", "input_bit_positions"], [190, 3, 1, "", "input_bit_size"], [190, 3, 1, "", "input_id_links"], [190, 2, 1, "", "is_forbidden"], [190, 2, 1, "", "is_id_equal_to"], [190, 2, 1, "", "is_power_of_2_word_based"], [190, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [190, 3, 1, "", "output_bit_size"], [190, 2, 1, "", "output_size_for_concatenate"], [190, 2, 1, "", "print"], [190, 2, 1, "", "print_as_python_dictionary"], [190, 2, 1, "", "print_values"], [190, 2, 1, "", "print_word_values"], [190, 2, 1, "", "sat_constraints"], [190, 2, 1, "", "select_bits"], [190, 2, 1, "", "select_words"], [190, 2, 1, "", "set_description"], [190, 2, 1, "", "set_id"], [190, 2, 1, "", "set_input_bit_positions"], [190, 2, 1, "", "set_input_id_links"], [190, 2, 1, "", "smt_constraints"], [190, 3, 1, "", "suffixes"], [190, 3, 1, "", "type"]], "components.word_permutation_component": [[191, 1, 1, "", "WordPermutation"]], "components.word_permutation_component.WordPermutation": [[191, 2, 1, "", "algebraic_polynomials"], [191, 2, 1, "", "as_python_dictionary"], [191, 2, 1, "", "check_output_size"], [191, 2, 1, "", "cms_constraints"], [191, 2, 1, "", "cms_xor_differential_propagation_constraints"], [191, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [191, 2, 1, "", "cp_constraints"], [191, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [191, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [191, 2, 1, "", "cp_xor_differential_propagation_constraints"], [191, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [191, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [191, 3, 1, "", "description"], [191, 2, 1, "", "get_bit_based_c_code"], [191, 2, 1, "", "get_bit_based_vectorized_python_code"], [191, 2, 1, "", "get_byte_based_vectorized_python_code"], [191, 2, 1, "", "get_graph_representation"], [191, 3, 1, "", "id"], [191, 3, 1, "", "input_bit_positions"], [191, 3, 1, "", "input_bit_size"], [191, 3, 1, "", "input_id_links"], [191, 2, 1, "", "is_forbidden"], [191, 2, 1, "", "is_id_equal_to"], [191, 2, 1, "", "is_power_of_2_word_based"], [191, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [191, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [191, 2, 1, "", "milp_constraints"], [191, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [191, 2, 1, "", "milp_xor_differential_propagation_constraints"], [191, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [191, 3, 1, "", "output_bit_size"], [191, 2, 1, "", "output_size_for_concatenate"], [191, 2, 1, "", "print"], [191, 2, 1, "", "print_as_python_dictionary"], [191, 2, 1, "", "print_values"], [191, 2, 1, "", "print_word_values"], [191, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [191, 2, 1, "", "sat_constraints"], [191, 2, 1, "", "sat_xor_differential_propagation_constraints"], [191, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [191, 2, 1, "", "select_bits"], [191, 2, 1, "", "select_words"], [191, 2, 1, "", "set_description"], [191, 2, 1, "", "set_id"], [191, 2, 1, "", "set_input_bit_positions"], [191, 2, 1, "", "set_input_id_links"], [191, 2, 1, "", "smt_constraints"], [191, 2, 1, "", "smt_xor_differential_propagation_constraints"], [191, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [191, 3, 1, "", "suffixes"], [191, 3, 1, "", "type"]], "components.xor_component": [[192, 1, 1, "", "XOR"], [192, 4, 1, "", "cp_build_truncated_table"], [192, 4, 1, "", "generic_with_constant_sign_linear_constraints"], [192, 4, 1, "", "get_milp_constraints_from_inequalities"], [192, 4, 1, "", "get_transformed_xor_input_links_and_positions"]], "components.xor_component.XOR": [[192, 2, 1, "", "algebraic_polynomials"], [192, 2, 1, "", "as_python_dictionary"], [192, 2, 1, "", "check_output_size"], [192, 2, 1, "", "cms_constraints"], [192, 2, 1, "", "cms_xor_differential_propagation_constraints"], [192, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [192, 2, 1, "", "cp_constraints"], [192, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [192, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [192, 2, 1, "", "cp_transform_xor_components_for_first_step"], [192, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [192, 2, 1, "", "cp_xor_differential_propagation_constraints"], [192, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [192, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [192, 3, 1, "", "description"], [192, 2, 1, "", "get_bit_based_vectorized_python_code"], [192, 2, 1, "", "get_byte_based_vectorized_python_code"], [192, 2, 1, "", "get_graph_representation"], [192, 2, 1, "", "get_word_operation_sign"], [192, 3, 1, "", "id"], [192, 3, 1, "", "input_bit_positions"], [192, 3, 1, "", "input_bit_size"], [192, 3, 1, "", "input_id_links"], [192, 2, 1, "", "is_forbidden"], [192, 2, 1, "", "is_id_equal_to"], [192, 2, 1, "", "is_power_of_2_word_based"], [192, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [192, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [192, 2, 1, "", "milp_constraints"], [192, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [192, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_sequential_constraints"], [192, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_simple_constraints"], [192, 2, 1, "", "milp_xor_differential_propagation_constraints"], [192, 2, 1, "", "milp_xor_linear_constraints"], [192, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [192, 2, 1, "", "minizinc_constraints"], [192, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [192, 3, 1, "", "output_bit_size"], [192, 2, 1, "", "output_size_for_concatenate"], [192, 2, 1, "", "print"], [192, 2, 1, "", "print_as_python_dictionary"], [192, 2, 1, "", "print_values"], [192, 2, 1, "", "print_word_values"], [192, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [192, 2, 1, "", "sat_constraints"], [192, 2, 1, "", "sat_xor_differential_propagation_constraints"], [192, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [192, 2, 1, "", "select_bits"], [192, 2, 1, "", "select_words"], [192, 2, 1, "", "set_description"], [192, 2, 1, "", "set_id"], [192, 2, 1, "", "set_input_bit_positions"], [192, 2, 1, "", "set_input_id_links"], [192, 2, 1, "", "smt_constraints"], [192, 2, 1, "", "smt_xor_differential_propagation_constraints"], [192, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [192, 3, 1, "", "suffixes"], [192, 3, 1, "", "type"]], "compound_xor_differential_cipher": [[193, 4, 1, "", "convert_to_compound_xor_cipher"], [193, 4, 1, "", "create_xor_component"], [193, 4, 1, "", "create_xor_component_inputs"], [193, 4, 1, "", "get_component_pair"], [193, 4, 1, "", "update_cipher_inputs"], [193, 4, 1, "", "update_input_id_links"]], "editor": [[194, 4, 1, "", "add_AND_component"], [194, 4, 1, "", "add_FSR_component"], [194, 4, 1, "", "add_MODADD_component"], [194, 4, 1, "", "add_MODSUB_component"], [194, 4, 1, "", "add_NOT_component"], [194, 4, 1, "", "add_OR_component"], [194, 4, 1, "", "add_SBOX_component"], [194, 4, 1, "", "add_SHIFT_component"], [194, 4, 1, "", "add_XOR_component"], [194, 4, 1, "", "add_cipher_output_component"], [194, 4, 1, "", "add_component"], [194, 4, 1, "", "add_concatenate_component"], [194, 4, 1, "", "add_constant_component"], [194, 4, 1, "", "add_intermediate_output_component"], [194, 4, 1, "", "add_linear_layer_component"], [194, 4, 1, "", "add_mix_column_component"], [194, 4, 1, "", "add_permutation_component"], [194, 4, 1, "", "add_reverse_component"], [194, 4, 1, "", "add_rotate_component"], [194, 4, 1, "", "add_round"], [194, 4, 1, "", "add_round_key_output_component"], [194, 4, 1, "", "add_round_output_component"], [194, 4, 1, "", "add_shift_rows_component"], [194, 4, 1, "", "add_sigma_component"], [194, 4, 1, "", "add_theta_keccak_component"], [194, 4, 1, "", "add_theta_xoodoo_component"], [194, 4, 1, "", "add_variable_rotate_component"], [194, 4, 1, "", "add_variable_shift_component"], [194, 4, 1, "", "add_word_permutation_component"], [194, 4, 1, "", "generate_expanded_links"], [194, 4, 1, "", "get_final_input_positions"], [194, 4, 1, "", "get_output_bit_size_from_id"], [194, 4, 1, "", "get_unique_links_information"], [194, 4, 1, "", "is_linear_layer_permutation"], [194, 4, 1, "", "make_cipher_id"], [194, 4, 1, "", "make_file_name"], [194, 4, 1, "", "next_component_index_from"], [194, 4, 1, "", "propagate_equivalences"], [194, 4, 1, "", "propagate_permutations"], [194, 4, 1, "", "propagate_rotations"], [194, 4, 1, "", "remove_cipher_input_keys"], [194, 4, 1, "", "remove_forbidden_parents"], [194, 4, 1, "", "remove_key_schedule"], [194, 4, 1, "", "remove_orphan_components"], [194, 4, 1, "", "remove_permutations"], [194, 4, 1, "", "remove_rotations"], [194, 4, 1, "", "remove_round_component"], [194, 4, 1, "", "remove_round_component_from_id"], [194, 4, 1, "", "sort_cipher"], [194, 4, 1, "", "update_cipher_inputs"], [194, 4, 1, "", "update_component_inputs"], [194, 4, 1, "", "update_inputs"]], "input": [[196, 1, 1, "", "Input"]], "input.Input": [[196, 3, 1, "", "bit_positions"], [196, 3, 1, "", "bit_size"], [196, 3, 1, "", "id_links"], [196, 2, 1, "", "set_input_bit_positions"], [196, 2, 1, "", "set_input_id_links"]], "round": [[198, 1, 1, "", "Round"]], "round.Round": [[198, 2, 1, "", "add_component"], [198, 2, 1, "", "are_there_forbidden_components"], [198, 2, 1, "", "component_from"], [198, 3, 1, "", "components"], [198, 2, 1, "", "get_component_from_id"], [198, 2, 1, "", "get_components_ids"], [198, 2, 1, "", "get_number_of_components"], [198, 2, 1, "", "get_round_from_component_id"], [198, 3, 1, "", "id"], [198, 2, 1, "", "is_component_input"], [198, 2, 1, "", "is_power_of_2_word_based"], [198, 3, 1, "", "number_of_components"], [198, 2, 1, "", "print_round"], [198, 2, 1, "", "print_round_as_python_dictionary"], [198, 2, 1, "", "remove_component"], [198, 2, 1, "", "remove_component_from_id"], [198, 2, 1, "", "round_as_python_dictionary"], [198, 2, 1, "", "swap_components"], [198, 2, 1, "", "update_input_id_links_from_component_id"]], "rounds": [[199, 1, 1, "", "Rounds"]], "rounds.Rounds": [[199, 2, 1, "", "add_component"], [199, 2, 1, "", "add_round"], [199, 2, 1, "", "are_there_not_forbidden_components"], [199, 2, 1, "", "component_from"], [199, 2, 1, "", "components_in_round"], [199, 3, 1, "", "current_round"], [199, 3, 1, "", "current_round_number"], [199, 3, 1, "", "current_round_number_of_components"], [199, 2, 1, "", "get_all_components"], [199, 2, 1, "", "get_all_components_ids"], [199, 2, 1, "", "get_component_from_id"], [199, 2, 1, "", "get_round_from_component_id"], [199, 2, 1, "", "is_power_of_2_word_based"], [199, 2, 1, "", "number_of_components"], [199, 3, 1, "", "number_of_rounds"], [199, 2, 1, "", "print_rounds"], [199, 2, 1, "", "print_rounds_as_python_dictionary"], [199, 2, 1, "", "remove_round_component"], [199, 2, 1, "", "remove_round_component_from_id"], [199, 2, 1, "", "round_at"], [199, 3, 1, "", "rounds"], [199, 2, 1, "", "rounds_as_python_dictionary"]], "utils": [[200, 0, 0, "-", "integer"], [201, 0, 0, "-", "integer_functions"], [202, 0, 0, "-", "sage_scripts"], [203, 0, 0, "-", "sequence_operations"], [204, 0, 0, "-", "templates"], [205, 0, 0, "-", "utils"]], "utils.integer": [[200, 4, 1, "", "generate_bitmask"], [200, 4, 1, "", "to_binary"]], "utils.integer_functions": [[201, 4, 1, "", "bytearray_to_int"], [201, 4, 1, "", "bytearray_to_wordlist"], [201, 4, 1, "", "int_to_bytearray"], [201, 4, 1, "", "int_to_wordlist"], [201, 4, 1, "", "lor"], [201, 4, 1, "", "ror"], [201, 4, 1, "", "wordlist_to_bytearray"], [201, 4, 1, "", "wordlist_to_int"]], "utils.sage_scripts": [[202, 4, 1, "", "create_scenario_string"], [202, 4, 1, "", "get_cipher"], [202, 4, 1, "", "get_cipher_type"], [202, 4, 1, "", "get_ciphers"], [202, 4, 1, "", "load_parameters"], [202, 4, 1, "", "make_cipher_id"]], "utils.sequence_operations": [[203, 4, 1, "", "rotate_left"], [203, 4, 1, "", "rotate_right"], [203, 4, 1, "", "shift_left"], [203, 4, 1, "", "shift_right"]], "utils.templates": [[204, 1, 1, "", "Body"], [204, 1, 1, "", "Builder"], [204, 1, 1, "", "CSVBuilder"], [204, 1, 1, "", "Footer"], [204, 1, 1, "", "Header"], [204, 1, 1, "", "LatexBuilder"], [204, 1, 1, "", "Template"], [204, 1, 1, "", "TemplateManager"]], "utils.templates.Body": [[204, 5, 1, "", "content"]], "utils.templates.Builder": [[204, 2, 1, "", "get_body"], [204, 2, 1, "", "get_footer"], [204, 2, 1, "", "get_header"]], "utils.templates.CSVBuilder": [[204, 2, 1, "", "get_body"], [204, 2, 1, "", "get_footer"], [204, 2, 1, "", "get_header"]], "utils.templates.Footer": [[204, 5, 1, "", "content"]], "utils.templates.Header": [[204, 5, 1, "", "content"], [204, 5, 1, "", "logo"]], "utils.templates.LatexBuilder": [[204, 2, 1, "", "get_body"], [204, 2, 1, "", "get_footer"], [204, 2, 1, "", "get_header"]], "utils.templates.Template": [[204, 2, 1, "", "render_template"], [204, 2, 1, "", "set_body"], [204, 2, 1, "", "set_footer"], [204, 2, 1, "", "set_header"]], "utils.templates.TemplateManager": [[204, 2, 1, "", "get_template"], [204, 2, 1, "", "set_builder"]], "utils.utils": [[205, 4, 1, "", "aggregate_list_of_dictionary"], [205, 4, 1, "", "bytes_positions_to_little_endian_for_32_bits"], [205, 4, 1, "", "bytes_positions_to_little_endian_for_multiple_of_32"], [205, 4, 1, "", "calculate_inputs"], [205, 4, 1, "", "convert_2d_index_to_1d_index"], [205, 4, 1, "", "create_new_state_for_calculation"], [205, 4, 1, "", "extract_inputs"], [205, 4, 1, "", "generate_sample_from_gf_2_n"], [205, 4, 1, "", "get_2d_array_element_from_1d_array_index"], [205, 4, 1, "", "get_ci"], [205, 4, 1, "", "get_inputs_parameter"], [205, 4, 1, "", "get_ith_word"], [205, 4, 1, "", "get_k_th_bit"], [205, 4, 1, "", "get_number_of_rounds_from"], [205, 4, 1, "", "group_list_by_key"], [205, 4, 1, "", "int_to_poly"], [205, 4, 1, "", "layer_and_lane_initialization"], [205, 4, 1, "", "merging_list_of_lists"], [205, 4, 1, "", "point_pair"], [205, 4, 1, "", "poly_to_int"], [205, 4, 1, "", "pprint_dictionary"], [205, 4, 1, "", "pprint_dictionary_to_file"], [205, 4, 1, "", "set_2d_array_element_from_1d_array_index"], [205, 4, 1, "", "sgn_function"], [205, 4, 1, "", "signed_distance"], [205, 4, 1, "", "simplify_inputs"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"cipher": [0, 14, 19, 31, 37, 60, 65, 66, 67, 68, 69, 71, 78, 79, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 155, 156, 157, 158, 159, 160, 161, 162, 167, 193, 195], "algebra": [1, 15, 195], "test": [1, 2, 4, 86, 89, 91, 195], "avalanch": 2, "code": 3, "gener": [3, 7, 8, 9, 10, 11, 12, 13, 47, 48, 49, 50, 51, 52, 53, 77, 88, 105, 195], "compon": [4, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195], "analysi": [4, 5, 9, 195], "continu": [5, 9], "diffus": [5, 9], "evalu": 6, "bit": [7, 10, 40, 41, 44, 47, 50, 51, 53], "base": [7, 12], "c": [7, 12], "function": [7, 8, 9, 10, 11, 12, 122, 123, 124, 125, 126, 127, 195, 201], "vector": [10, 11], "byte": 11, "word": [12, 148, 149, 191], "graph": 13, "invers": 14, "model": [15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 37, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 195], "boolean": [16, 77], "polynomi": 16, "ring": 16, "constraint": 17, "cp": [18, 19, 20, 21, 22, 23, 24, 25, 195], "determinist": [20, 29, 32, 61, 65, 70, 80], "truncat": [20, 29, 32, 38, 39, 40, 49, 50, 55, 61, 65, 70, 80], "xor": [20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 40, 41, 43, 46, 50, 51, 61, 62, 65, 67, 68, 70, 72, 73, 80, 81, 82, 192, 193], "differenti": [20, 21, 22, 23, 24, 29, 30, 32, 33, 34, 61, 62, 65, 67, 70, 72, 80, 81, 193], "imposs": [21, 30, 33], "number": [23, 24], "activ": [23, 24], "sbox": [23, 24, 42, 43, 44, 45, 46, 48, 52, 53, 129, 130, 133, 135, 137, 141, 154, 183], "trail": [24, 52], "search": [24, 52], "fix": 24, "linear": [25, 35, 43, 46, 68, 73, 82, 172, 177], "usefulfunct": 26, "solver": [27, 36, 69, 74, 77, 83], "milp": [28, 29, 30, 31, 32, 33, 34, 35, 54, 55, 195], "bitwis": [29, 30, 65, 70], "wordwis": [32, 33, 49, 50], "tea": [37, 118], "xordiff": 37, "dictionari": [38, 39, 40, 41, 42, 43, 44, 45, 46], "contain": [38, 39, 40, 41, 42, 43, 44, 45, 46], "input": [38, 40, 41, 47, 50, 51, 90, 177, 196], "pattern": 38, "inequ": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "md": [39, 49], "between": [40, 41], "n": [40, 41, 50, 51, 76], "larg": [42, 43, 48], "undisturb": [44, 53], "small": [45, 46], "oper": [47, 177, 203], "2": [47, 156], "matric": [49, 105], "name": 54, "map": 54, "util": [55, 57, 64, 77, 84, 85, 151, 195, 205], "mzn": [56, 63, 75], "predic": [56, 63, 75], "minizinc": [58, 59, 60, 61, 62, 195], "boomerang": 59, "bct": 63, "cm": [65, 66, 67, 68, 195], "sat": [69, 70, 71, 72, 73, 74, 77, 195], "standard": [69, 78], "avail": [74, 83], "window": 76, "heurist": 76, "helper": 76, "direct": 77, "build": 77, "cnf": 77, "repres": 77, "equal": 77, "run": 77, "smt": [78, 79, 80, 81, 82, 83, 195], "neural": 86, "network": 86, "report": 87, "dataset": 88, "diehard": 89, "statist": [89, 91, 195], "data": 90, "exampl": 90, "nist": 91, "tester": 92, "ae": 93, "block": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 195], "bea1": 94, "constant": [95, 169], "de": [96, 97], "exact": 97, "kei": 97, "length": 97, "fanci": 98, "hight": 99, "ident": 100, "kasumi": 101, "lblock": 102, "lea": 103, "lowmc": [104, 105], "midori": 106, "present": 107, "qarmav2": [108, 109], "mixcolumn": 109, "raiden": 110, "rc5": 111, "scarf": 112, "simon": 113, "skinni": 114, "sparx": 115, "speck": 116, "speedi": 117, "threefish": 119, "twofish": 120, "xtea": 121, "blake2": 122, "hash": [122, 123, 124, 125, 126, 127, 195], "blake": 123, "md5": 124, "sha1": 125, "sha2": 126, "whirlpool": 127, "ascon": [128, 129, 130], "permut": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 180, 191, 195], "sigma": [129, 130, 186], "matrix": 129, "chacha": [131, 159], "gaston": [132, 133], "gift": [134, 135], "gimli": [136, 137], "grain": 138, "core": 138, "keccak": [139, 140, 141, 187], "invert": [139, 152], "photon": 142, "salsa": 143, "sparkl": 144, "spongent": [145, 146, 147], "pi": [145, 146, 147], "fsr": [145, 149, 170], "precomput": 147, "tinyjambu": [148, 149, 150], "32bit": [148, 149], "xoodoo": [152, 153, 154, 188], "a5": [155, 156], "1": 155, "stream": [155, 156, 157, 158, 159, 160, 161, 162, 195], "bivium": 157, "bluetooth": 158, "e0": 158, "snow3g": 160, "trivium": 161, "zuc": 162, "toyspn1": 163, "toyspn2": 164, "And": 166, "output": [167, 171], "concaten": 168, "intermedi": 171, "layer": 172, "mix": 173, "column": 173, "modadd": 174, "modsub": 175, "modular": 176, "multi": 177, "non": 177, "logic": 177, "Not": 178, "Or": 179, "revers": 181, "rotat": [182, 189], "shift": [184, 185, 190], "row": 185, "theta": [187, 188], "variabl": [189, 190], "compound": 193, "editor": 194, "claasp": 195, "cryptograph": 195, "librari": 195, "autom": 195, "symmetr": 195, "primit": 195, "modul": 195, "tmp": 195, "toi": 195, "inform": 195, "indic": 195, "tabl": 195, "refer": 197, "round": [198, 199], "integ": [200, 201], "sage": 202, "script": 202, "sequenc": 203, "templat": 204}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinxcontrib.bibtex": 9, "sphinx": 56}})
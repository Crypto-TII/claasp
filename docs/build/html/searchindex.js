Search.setIndex({"docnames": ["cipher", "cipher_modules/algebraic_tests", "cipher_modules/avalanche_tests", "cipher_modules/code_generator", "cipher_modules/component_analysis_tests", "cipher_modules/continuous_diffusion_analysis", "cipher_modules/division_trail_search", "cipher_modules/evaluator", "cipher_modules/generic_bit_based_c_functions", "cipher_modules/generic_functions", "cipher_modules/generic_functions_continuous_diffusion_analysis", "cipher_modules/generic_functions_vectorized_bit", "cipher_modules/generic_functions_vectorized_byte", "cipher_modules/generic_word_based_c_functions", "cipher_modules/graph_generator", "cipher_modules/inverse_cipher", "cipher_modules/models/algebraic/algebraic_model", "cipher_modules/models/algebraic/boolean_polynomial_ring", "cipher_modules/models/algebraic/constraints", "cipher_modules/models/cp/minizinc_utils/mzn_bct_predicates", "cipher_modules/models/cp/minizinc_utils/usefulfunctions", "cipher_modules/models/cp/minizinc_utils/utils", "cipher_modules/models/cp/mzn_model", "cipher_modules/models/cp/mzn_models/mzn_boomerang_model_arx_optimized", "cipher_modules/models/cp/mzn_models/mzn_cipher_model", "cipher_modules/models/cp/mzn_models/mzn_cipher_model_arx_optimized", "cipher_modules/models/cp/mzn_models/mzn_deterministic_truncated_xor_differential_model", "cipher_modules/models/cp/mzn_models/mzn_deterministic_truncated_xor_differential_model_arx_optimized", "cipher_modules/models/cp/mzn_models/mzn_hybrid_impossible_xor_differential_model", "cipher_modules/models/cp/mzn_models/mzn_impossible_xor_differential_model", "cipher_modules/models/cp/mzn_models/mzn_wordwise_deterministic_truncated_xor_differential_model", "cipher_modules/models/cp/mzn_models/mzn_xor_differential_model", "cipher_modules/models/cp/mzn_models/mzn_xor_differential_model_arx_optimized", "cipher_modules/models/cp/mzn_models/mzn_xor_differential_number_of_active_sboxes_model", "cipher_modules/models/cp/mzn_models/mzn_xor_differential_trail_search_fixing_number_of_active_sboxes_model", "cipher_modules/models/cp/mzn_models/mzn_xor_linear_model", "cipher_modules/models/cp/solvers", "cipher_modules/models/milp/milp_model", "cipher_modules/models/milp/milp_models/milp_bitwise_deterministic_truncated_xor_differential_model", "cipher_modules/models/milp/milp_models/milp_bitwise_impossible_xor_differential_model", "cipher_modules/models/milp/milp_models/milp_cipher_model", "cipher_modules/models/milp/milp_models/milp_wordwise_deterministic_truncated_xor_differential_model", "cipher_modules/models/milp/milp_models/milp_wordwise_impossible_xor_differential_model", "cipher_modules/models/milp/milp_models/milp_xor_differential_model", "cipher_modules/models/milp/milp_models/milp_xor_linear_model", "cipher_modules/models/milp/solvers", "cipher_modules/models/milp/tmp/tea_cipher_xordiff_model", "cipher_modules/models/milp/utils/dictionary_containing_truncated_input_pattern_inequalities", "cipher_modules/models/milp/utils/dictionary_containing_truncated_mds_inequalities", "cipher_modules/models/milp/utils/dictionary_containing_truncated_xor_inequalities_between_n_input_bits", "cipher_modules/models/milp/utils/dictionary_containing_xor_inequalities_between_n_input_bits", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_large_sboxes", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_large_sboxes_xor_linear", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bits", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_small_sboxes", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_small_sboxes_xor_linear", "cipher_modules/models/milp/utils/generate_inequalities_for_and_operation_2_input_bits", "cipher_modules/models/milp/utils/generate_inequalities_for_large_sboxes", "cipher_modules/models/milp/utils/generate_inequalities_for_wordwise_truncated_mds_matrices", "cipher_modules/models/milp/utils/generate_inequalities_for_wordwise_truncated_xor_with_n_input_bits", "cipher_modules/models/milp/utils/generate_inequalities_for_xor_with_n_input_bits", "cipher_modules/models/milp/utils/generate_sbox_inequalities_for_trail_search", "cipher_modules/models/milp/utils/generate_undisturbed_bits_inequalities_for_sboxes", "cipher_modules/models/milp/utils/milp_name_mappings", "cipher_modules/models/milp/utils/milp_truncated_utils", "cipher_modules/models/milp/utils/mzn_predicates", "cipher_modules/models/milp/utils/utils", "cipher_modules/models/sat/cms_models/cms_bitwise_deterministic_truncated_xor_differential_model", "cipher_modules/models/sat/cms_models/cms_cipher_model", "cipher_modules/models/sat/cms_models/cms_xor_differential_model", "cipher_modules/models/sat/cms_models/cms_xor_linear_model", "cipher_modules/models/sat/sat_model", "cipher_modules/models/sat/sat_models/sat_bitwise_deterministic_truncated_xor_differential_model", "cipher_modules/models/sat/sat_models/sat_cipher_model", "cipher_modules/models/sat/sat_models/sat_differential_linear_model", "cipher_modules/models/sat/sat_models/sat_probabilistic_xor_truncated_differential_model", "cipher_modules/models/sat/sat_models/sat_semi_deterministic_truncated_xor_differential_model", "cipher_modules/models/sat/sat_models/sat_shared_difference_paired_input_differential_linear_model", "cipher_modules/models/sat/sat_models/sat_shared_difference_paired_input_differential_model", "cipher_modules/models/sat/sat_models/sat_truncated_xor_differential_model", "cipher_modules/models/sat/sat_models/sat_xor_differential_model", "cipher_modules/models/sat/sat_models/sat_xor_linear_model", "cipher_modules/models/sat/solvers", "cipher_modules/models/sat/utils/mzn_predicates", "cipher_modules/models/sat/utils/n_window_heuristic_helper", "cipher_modules/models/sat/utils/utils", "cipher_modules/models/smt/smt_model", "cipher_modules/models/smt/smt_models/smt_cipher_model", "cipher_modules/models/smt/smt_models/smt_deterministic_truncated_xor_differential_model", "cipher_modules/models/smt/smt_models/smt_xor_differential_model", "cipher_modules/models/smt/smt_models/smt_xor_linear_model", "cipher_modules/models/smt/solvers", "cipher_modules/models/smt/utils/utils", "cipher_modules/models/utils", "cipher_modules/neural_network_tests", "cipher_modules/report", "cipher_modules/statistical_tests/dataset_generator", "cipher_modules/statistical_tests/dieharder_statistical_tests", "cipher_modules/statistical_tests/input_data_example", "cipher_modules/statistical_tests/nist_statistical_tests", "cipher_modules/tester", "ciphers/block_ciphers/aes_block_cipher", "ciphers/block_ciphers/aradi_block_cipher", "ciphers/block_ciphers/aradi_block_cipher_sbox", "ciphers/block_ciphers/aradi_block_cipher_sbox_and_compact_linear_map", "ciphers/block_ciphers/baksheesh_block_cipher", "ciphers/block_ciphers/ballet_block_cipher", "ciphers/block_ciphers/bea1_block_cipher", "ciphers/block_ciphers/des_block_cipher", "ciphers/block_ciphers/des_exact_key_length_block_cipher", "ciphers/block_ciphers/hight_block_cipher", "ciphers/block_ciphers/kasumi_block_cipher", "ciphers/block_ciphers/lblock_block_cipher", "ciphers/block_ciphers/lea_block_cipher", "ciphers/block_ciphers/lowmc_block_cipher", "ciphers/block_ciphers/lowmc_generate_matrices", "ciphers/block_ciphers/midori_block_cipher", "ciphers/block_ciphers/present_block_cipher", "ciphers/block_ciphers/prince_block_cipher", "ciphers/block_ciphers/prince_v2_block_cipher", "ciphers/block_ciphers/qarmav2_block_cipher", "ciphers/block_ciphers/qarmav2_with_mixcolumn_block_cipher", "ciphers/block_ciphers/raiden_block_cipher", "ciphers/block_ciphers/rc5_block_cipher", "ciphers/block_ciphers/scarf_block_cipher", "ciphers/block_ciphers/simeck_block_cipher", "ciphers/block_ciphers/simeck_sbox_block_cipher", "ciphers/block_ciphers/simon_block_cipher", "ciphers/block_ciphers/simon_sbox_block_cipher", "ciphers/block_ciphers/skinny_block_cipher", "ciphers/block_ciphers/sparx_block_cipher", "ciphers/block_ciphers/speck_block_cipher", "ciphers/block_ciphers/speedy_block_cipher", "ciphers/block_ciphers/tea_block_cipher", "ciphers/block_ciphers/threefish_block_cipher", "ciphers/block_ciphers/twine_block_cipher", "ciphers/block_ciphers/twofish_block_cipher", "ciphers/block_ciphers/ublock_block_cipher", "ciphers/block_ciphers/xtea_block_cipher", "ciphers/hash_functions/blake2_hash_function", "ciphers/hash_functions/blake_hash_function", "ciphers/hash_functions/md5_hash_function", "ciphers/hash_functions/sha1_hash_function", "ciphers/hash_functions/sha2_hash_function", "ciphers/hash_functions/whirlpool_hash_function", "ciphers/permutations/ascon_permutation", "ciphers/permutations/ascon_sbox_sigma_no_matrix_permutation", "ciphers/permutations/ascon_sbox_sigma_permutation", "ciphers/permutations/chacha_permutation", "ciphers/permutations/gaston_permutation", "ciphers/permutations/gaston_sbox_permutation", "ciphers/permutations/gaston_sbox_theta_permutation", "ciphers/permutations/gift_permutation", "ciphers/permutations/gift_sbox_permutation", "ciphers/permutations/gimli_permutation", "ciphers/permutations/gimli_sbox_permutation", "ciphers/permutations/grain_core_permutation", "ciphers/permutations/keccak_invertible_permutation", "ciphers/permutations/keccak_permutation", "ciphers/permutations/keccak_sbox_permutation", "ciphers/permutations/photon_permutation", "ciphers/permutations/salsa_permutation", "ciphers/permutations/sparkle_permutation", "ciphers/permutations/spongent_pi_fsr_permutation", "ciphers/permutations/spongent_pi_permutation", "ciphers/permutations/spongent_pi_precomputation_permutation", "ciphers/permutations/tinyjambu_32bits_word_permutation", "ciphers/permutations/tinyjambu_fsr_32bits_word_permutation", "ciphers/permutations/tinyjambu_permutation", "ciphers/permutations/util", "ciphers/permutations/xoodoo_invertible_permutation", "ciphers/permutations/xoodoo_permutation", "ciphers/permutations/xoodoo_sbox_permutation", "ciphers/stream_ciphers/a5_1_stream_cipher", "ciphers/stream_ciphers/a5_2_stream_cipher", "ciphers/stream_ciphers/bivium_stream_cipher", "ciphers/stream_ciphers/bluetooth_stream_cipher_e0", "ciphers/stream_ciphers/chacha_stream_cipher", "ciphers/stream_ciphers/snow3g_stream_cipher", "ciphers/stream_ciphers/trivium_stream_cipher", "ciphers/stream_ciphers/zuc_stream_cipher", "ciphers/toys/constant_block_cipher", "ciphers/toys/fancy_block_cipher", "ciphers/toys/identity_block_cipher", "ciphers/toys/toy_cipherfour", "ciphers/toys/toyfeistel", "ciphers/toys/toyspn1", "ciphers/toys/toyspn2", "component", "components/and_component", "components/cipher_output_component", "components/concatenate_component", "components/constant_component", "components/fsr_component", "components/intermediate_output_component", "components/linear_layer_component", "components/mix_column_component", "components/modadd_component", "components/modsub_component", "components/modular_component", "components/multi_input_non_linear_logical_operator_component", "components/not_component", "components/or_component", "components/permutation_component", "components/reverse_component", "components/rotate_component", "components/sbox_component", "components/shift_component", "components/shift_rows_component", "components/sigma_component", "components/theta_gaston_component", "components/theta_keccak_component", "components/theta_xoodoo_component", "components/variable_rotate_component", "components/variable_shift_component", "components/word_permutation_component", "components/xor_component", "compound_xor_differential_cipher", "editor", "index", "input", "references", "round", "rounds", "utils/integer", "utils/integer_functions", "utils/sage_scripts", "utils/sequence_operations", "utils/templates", "utils/utils"], "filenames": ["cipher.rst", "cipher_modules/algebraic_tests.rst", "cipher_modules/avalanche_tests.rst", "cipher_modules/code_generator.rst", "cipher_modules/component_analysis_tests.rst", "cipher_modules/continuous_diffusion_analysis.rst", "cipher_modules/division_trail_search.rst", "cipher_modules/evaluator.rst", "cipher_modules/generic_bit_based_c_functions.rst", "cipher_modules/generic_functions.rst", "cipher_modules/generic_functions_continuous_diffusion_analysis.rst", "cipher_modules/generic_functions_vectorized_bit.rst", "cipher_modules/generic_functions_vectorized_byte.rst", "cipher_modules/generic_word_based_c_functions.rst", "cipher_modules/graph_generator.rst", "cipher_modules/inverse_cipher.rst", "cipher_modules/models/algebraic/algebraic_model.rst", "cipher_modules/models/algebraic/boolean_polynomial_ring.rst", "cipher_modules/models/algebraic/constraints.rst", "cipher_modules/models/cp/minizinc_utils/mzn_bct_predicates.rst", "cipher_modules/models/cp/minizinc_utils/usefulfunctions.rst", "cipher_modules/models/cp/minizinc_utils/utils.rst", "cipher_modules/models/cp/mzn_model.rst", "cipher_modules/models/cp/mzn_models/mzn_boomerang_model_arx_optimized.rst", "cipher_modules/models/cp/mzn_models/mzn_cipher_model.rst", "cipher_modules/models/cp/mzn_models/mzn_cipher_model_arx_optimized.rst", "cipher_modules/models/cp/mzn_models/mzn_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/cp/mzn_models/mzn_deterministic_truncated_xor_differential_model_arx_optimized.rst", "cipher_modules/models/cp/mzn_models/mzn_hybrid_impossible_xor_differential_model.rst", "cipher_modules/models/cp/mzn_models/mzn_impossible_xor_differential_model.rst", "cipher_modules/models/cp/mzn_models/mzn_wordwise_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/cp/mzn_models/mzn_xor_differential_model.rst", "cipher_modules/models/cp/mzn_models/mzn_xor_differential_model_arx_optimized.rst", "cipher_modules/models/cp/mzn_models/mzn_xor_differential_number_of_active_sboxes_model.rst", "cipher_modules/models/cp/mzn_models/mzn_xor_differential_trail_search_fixing_number_of_active_sboxes_model.rst", "cipher_modules/models/cp/mzn_models/mzn_xor_linear_model.rst", "cipher_modules/models/cp/solvers.rst", "cipher_modules/models/milp/milp_model.rst", "cipher_modules/models/milp/milp_models/milp_bitwise_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/milp/milp_models/milp_bitwise_impossible_xor_differential_model.rst", "cipher_modules/models/milp/milp_models/milp_cipher_model.rst", "cipher_modules/models/milp/milp_models/milp_wordwise_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/milp/milp_models/milp_wordwise_impossible_xor_differential_model.rst", "cipher_modules/models/milp/milp_models/milp_xor_differential_model.rst", "cipher_modules/models/milp/milp_models/milp_xor_linear_model.rst", "cipher_modules/models/milp/solvers.rst", "cipher_modules/models/milp/tmp/tea_cipher_xordiff_model.rst", "cipher_modules/models/milp/utils/dictionary_containing_truncated_input_pattern_inequalities.rst", "cipher_modules/models/milp/utils/dictionary_containing_truncated_mds_inequalities.rst", "cipher_modules/models/milp/utils/dictionary_containing_truncated_xor_inequalities_between_n_input_bits.rst", "cipher_modules/models/milp/utils/dictionary_containing_xor_inequalities_between_n_input_bits.rst", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_large_sboxes.rst", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_large_sboxes_xor_linear.rst", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bits.rst", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_small_sboxes.rst", "cipher_modules/models/milp/utils/dictionary_that_contains_inequalities_for_small_sboxes_xor_linear.rst", "cipher_modules/models/milp/utils/generate_inequalities_for_and_operation_2_input_bits.rst", "cipher_modules/models/milp/utils/generate_inequalities_for_large_sboxes.rst", "cipher_modules/models/milp/utils/generate_inequalities_for_wordwise_truncated_mds_matrices.rst", "cipher_modules/models/milp/utils/generate_inequalities_for_wordwise_truncated_xor_with_n_input_bits.rst", "cipher_modules/models/milp/utils/generate_inequalities_for_xor_with_n_input_bits.rst", "cipher_modules/models/milp/utils/generate_sbox_inequalities_for_trail_search.rst", "cipher_modules/models/milp/utils/generate_undisturbed_bits_inequalities_for_sboxes.rst", "cipher_modules/models/milp/utils/milp_name_mappings.rst", "cipher_modules/models/milp/utils/milp_truncated_utils.rst", "cipher_modules/models/milp/utils/mzn_predicates.rst", "cipher_modules/models/milp/utils/utils.rst", "cipher_modules/models/sat/cms_models/cms_bitwise_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/sat/cms_models/cms_cipher_model.rst", "cipher_modules/models/sat/cms_models/cms_xor_differential_model.rst", "cipher_modules/models/sat/cms_models/cms_xor_linear_model.rst", "cipher_modules/models/sat/sat_model.rst", "cipher_modules/models/sat/sat_models/sat_bitwise_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/sat/sat_models/sat_cipher_model.rst", "cipher_modules/models/sat/sat_models/sat_differential_linear_model.rst", "cipher_modules/models/sat/sat_models/sat_probabilistic_xor_truncated_differential_model.rst", "cipher_modules/models/sat/sat_models/sat_semi_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/sat/sat_models/sat_shared_difference_paired_input_differential_linear_model.rst", "cipher_modules/models/sat/sat_models/sat_shared_difference_paired_input_differential_model.rst", "cipher_modules/models/sat/sat_models/sat_truncated_xor_differential_model.rst", "cipher_modules/models/sat/sat_models/sat_xor_differential_model.rst", "cipher_modules/models/sat/sat_models/sat_xor_linear_model.rst", "cipher_modules/models/sat/solvers.rst", "cipher_modules/models/sat/utils/mzn_predicates.rst", "cipher_modules/models/sat/utils/n_window_heuristic_helper.rst", "cipher_modules/models/sat/utils/utils.rst", "cipher_modules/models/smt/smt_model.rst", "cipher_modules/models/smt/smt_models/smt_cipher_model.rst", "cipher_modules/models/smt/smt_models/smt_deterministic_truncated_xor_differential_model.rst", "cipher_modules/models/smt/smt_models/smt_xor_differential_model.rst", "cipher_modules/models/smt/smt_models/smt_xor_linear_model.rst", "cipher_modules/models/smt/solvers.rst", "cipher_modules/models/smt/utils/utils.rst", "cipher_modules/models/utils.rst", "cipher_modules/neural_network_tests.rst", "cipher_modules/report.rst", "cipher_modules/statistical_tests/dataset_generator.rst", "cipher_modules/statistical_tests/dieharder_statistical_tests.rst", "cipher_modules/statistical_tests/input_data_example.rst", "cipher_modules/statistical_tests/nist_statistical_tests.rst", "cipher_modules/tester.rst", "ciphers/block_ciphers/aes_block_cipher.rst", "ciphers/block_ciphers/aradi_block_cipher.rst", "ciphers/block_ciphers/aradi_block_cipher_sbox.rst", "ciphers/block_ciphers/aradi_block_cipher_sbox_and_compact_linear_map.rst", "ciphers/block_ciphers/baksheesh_block_cipher.rst", "ciphers/block_ciphers/ballet_block_cipher.rst", "ciphers/block_ciphers/bea1_block_cipher.rst", "ciphers/block_ciphers/des_block_cipher.rst", "ciphers/block_ciphers/des_exact_key_length_block_cipher.rst", "ciphers/block_ciphers/hight_block_cipher.rst", "ciphers/block_ciphers/kasumi_block_cipher.rst", "ciphers/block_ciphers/lblock_block_cipher.rst", "ciphers/block_ciphers/lea_block_cipher.rst", "ciphers/block_ciphers/lowmc_block_cipher.rst", "ciphers/block_ciphers/lowmc_generate_matrices.rst", "ciphers/block_ciphers/midori_block_cipher.rst", "ciphers/block_ciphers/present_block_cipher.rst", "ciphers/block_ciphers/prince_block_cipher.rst", "ciphers/block_ciphers/prince_v2_block_cipher.rst", "ciphers/block_ciphers/qarmav2_block_cipher.rst", "ciphers/block_ciphers/qarmav2_with_mixcolumn_block_cipher.rst", "ciphers/block_ciphers/raiden_block_cipher.rst", "ciphers/block_ciphers/rc5_block_cipher.rst", "ciphers/block_ciphers/scarf_block_cipher.rst", "ciphers/block_ciphers/simeck_block_cipher.rst", "ciphers/block_ciphers/simeck_sbox_block_cipher.rst", "ciphers/block_ciphers/simon_block_cipher.rst", "ciphers/block_ciphers/simon_sbox_block_cipher.rst", "ciphers/block_ciphers/skinny_block_cipher.rst", "ciphers/block_ciphers/sparx_block_cipher.rst", "ciphers/block_ciphers/speck_block_cipher.rst", "ciphers/block_ciphers/speedy_block_cipher.rst", "ciphers/block_ciphers/tea_block_cipher.rst", "ciphers/block_ciphers/threefish_block_cipher.rst", "ciphers/block_ciphers/twine_block_cipher.rst", "ciphers/block_ciphers/twofish_block_cipher.rst", "ciphers/block_ciphers/ublock_block_cipher.rst", "ciphers/block_ciphers/xtea_block_cipher.rst", "ciphers/hash_functions/blake2_hash_function.rst", "ciphers/hash_functions/blake_hash_function.rst", "ciphers/hash_functions/md5_hash_function.rst", "ciphers/hash_functions/sha1_hash_function.rst", "ciphers/hash_functions/sha2_hash_function.rst", "ciphers/hash_functions/whirlpool_hash_function.rst", "ciphers/permutations/ascon_permutation.rst", "ciphers/permutations/ascon_sbox_sigma_no_matrix_permutation.rst", "ciphers/permutations/ascon_sbox_sigma_permutation.rst", "ciphers/permutations/chacha_permutation.rst", "ciphers/permutations/gaston_permutation.rst", "ciphers/permutations/gaston_sbox_permutation.rst", "ciphers/permutations/gaston_sbox_theta_permutation.rst", "ciphers/permutations/gift_permutation.rst", "ciphers/permutations/gift_sbox_permutation.rst", "ciphers/permutations/gimli_permutation.rst", "ciphers/permutations/gimli_sbox_permutation.rst", "ciphers/permutations/grain_core_permutation.rst", "ciphers/permutations/keccak_invertible_permutation.rst", "ciphers/permutations/keccak_permutation.rst", "ciphers/permutations/keccak_sbox_permutation.rst", "ciphers/permutations/photon_permutation.rst", "ciphers/permutations/salsa_permutation.rst", "ciphers/permutations/sparkle_permutation.rst", "ciphers/permutations/spongent_pi_fsr_permutation.rst", "ciphers/permutations/spongent_pi_permutation.rst", "ciphers/permutations/spongent_pi_precomputation_permutation.rst", "ciphers/permutations/tinyjambu_32bits_word_permutation.rst", "ciphers/permutations/tinyjambu_fsr_32bits_word_permutation.rst", "ciphers/permutations/tinyjambu_permutation.rst", "ciphers/permutations/util.rst", "ciphers/permutations/xoodoo_invertible_permutation.rst", "ciphers/permutations/xoodoo_permutation.rst", "ciphers/permutations/xoodoo_sbox_permutation.rst", "ciphers/stream_ciphers/a5_1_stream_cipher.rst", "ciphers/stream_ciphers/a5_2_stream_cipher.rst", "ciphers/stream_ciphers/bivium_stream_cipher.rst", "ciphers/stream_ciphers/bluetooth_stream_cipher_e0.rst", "ciphers/stream_ciphers/chacha_stream_cipher.rst", "ciphers/stream_ciphers/snow3g_stream_cipher.rst", "ciphers/stream_ciphers/trivium_stream_cipher.rst", "ciphers/stream_ciphers/zuc_stream_cipher.rst", "ciphers/toys/constant_block_cipher.rst", "ciphers/toys/fancy_block_cipher.rst", "ciphers/toys/identity_block_cipher.rst", "ciphers/toys/toy_cipherfour.rst", "ciphers/toys/toyfeistel.rst", "ciphers/toys/toyspn1.rst", "ciphers/toys/toyspn2.rst", "component.rst", "components/and_component.rst", "components/cipher_output_component.rst", "components/concatenate_component.rst", "components/constant_component.rst", "components/fsr_component.rst", "components/intermediate_output_component.rst", "components/linear_layer_component.rst", "components/mix_column_component.rst", "components/modadd_component.rst", "components/modsub_component.rst", "components/modular_component.rst", "components/multi_input_non_linear_logical_operator_component.rst", "components/not_component.rst", "components/or_component.rst", "components/permutation_component.rst", "components/reverse_component.rst", "components/rotate_component.rst", "components/sbox_component.rst", "components/shift_component.rst", "components/shift_rows_component.rst", "components/sigma_component.rst", "components/theta_gaston_component.rst", "components/theta_keccak_component.rst", "components/theta_xoodoo_component.rst", "components/variable_rotate_component.rst", "components/variable_shift_component.rst", "components/word_permutation_component.rst", "components/xor_component.rst", "compound_xor_differential_cipher.rst", "editor.rst", "index.rst", "input.rst", "references.rst", "round.rst", "rounds.rst", "utils/integer.rst", "utils/integer_functions.rst", "utils/sage_scripts.rst", "utils/sequence_operations.rst", "utils/templates.rst", "utils/utils.rst"], "titles": ["Cipher", "Algebraic tests", "Avalanche tests", "Code generator", "Component analysis tests", "Continuous diffusion analysis", "Division trail search", "Evaluator", "Generic bit based c functions", "Generic functions", "Generic functions continuous diffusion analysis", "Generic functions vectorized bit", "Generic functions vectorized byte", "Generic word based c functions", "Graph generator", "Inverse cipher", "Algebraic model", "Boolean polynomial ring", "Constraints", "Mzn bct predicates", "Usefulfunctions", "Utils", "Mzn model", "Mzn boomerang model arx optimized", "Mzn cipher model", "Mzn cipher model arx optimized", "Mzn deterministic truncated xor differential model", "Mzn deterministic truncated xor differential model arx optimized", "Mzn hybrid impossible xor differential model", "Mzn impossible xor differential model", "Mzn wordwise deterministic truncated xor differential model", "Mzn xor differential model", "Mzn xor differential model arx optimized", "Mzn xor differential number of active sboxes model", "Mzn xor differential trail search fixing number of active sboxes model", "Mzn xor linear model", "Solvers", "Milp model", "Milp bitwise deterministic truncated xor differential model", "Milp bitwise impossible xor differential model", "Milp cipher model", "Milp wordwise deterministic truncated xor differential model", "Milp wordwise impossible xor differential model", "Milp xor differential model", "Milp xor linear model", "Solvers", "Tea cipher xordiff model", "Dictionary containing truncated input pattern inequalities", "Dictionary containing truncated mds inequalities", "Dictionary containing truncated xor inequalities between n input bits", "Dictionary containing xor inequalities between n input bits", "Dictionary that contains inequalities for large sboxes", "Dictionary that contains inequalities for large sboxes xor linear", "Dictionary that contains inequalities for sboxes with undisturbed bits", "Dictionary that contains inequalities for small sboxes", "Dictionary that contains inequalities for small sboxes xor linear", "Generate inequalities for and operation 2 input bits", "Generate inequalities for large sboxes", "Generate inequalities for wordwise truncated mds matrices", "Generate inequalities for wordwise truncated xor with n input bits", "Generate inequalities for xor with n input bits", "Generate sbox inequalities for trail search", "Generate undisturbed bits inequalities for sboxes", "Milp name mappings", "Milp truncated utils", "Mzn predicates", "Utils", "Cms bitwise deterministic truncated xor differential model", "Cms cipher model", "Cms xor differential model", "Cms xor linear model", "Sat model", "Sat bitwise deterministic truncated xor differential model", "Sat cipher model", "Sat differential linear model", "Sat probabilistic xor truncated differential model", "Sat semi deterministic truncated xor differential model", "Sat shared difference paired input differential linear model", "Sat shared difference paired input differential model", "Sat truncated xor differential model", "Sat xor differential model", "Sat xor linear model", "Solvers", "Mzn predicates", "N window heuristic helper", "Utils", "Smt model", "Smt cipher model", "Smt deterministic truncated xor differential model", "Smt xor differential model", "Smt xor linear model", "Solvers", "Utils", "Utils", "Neural network tests", "Report", "Dataset generator", "Dieharder statistical tests", "Input data example", "Nist statistical tests", "Tester", "Aes block cipher", "Aradi block cipher", "Aradi block cipher sbox", "Aradi block cipher sbox and compact linear map", "Baksheesh block cipher", "Ballet block cipher", "Bea1 block cipher", "Des block cipher", "Des exact key length block cipher", "Hight block cipher", "Kasumi block cipher", "Lblock block cipher", "Lea block cipher", "Lowmc block cipher", "Lowmc generate matrices", "Midori block cipher", "Present block cipher", "Prince block cipher", "Prince v2 block cipher", "Qarmav2 block cipher", "Qarmav2 with mixcolumn block cipher", "Raiden block cipher", "Rc5 block cipher", "Scarf block cipher", "Simeck block cipher", "Simeck sbox block cipher", "Simon block cipher", "Simon sbox block cipher", "Skinny block cipher", "Sparx block cipher", "Speck block cipher", "Speedy block cipher", "Tea block cipher", "Threefish block cipher", "Twine block cipher", "Twofish block cipher", "Ublock block cipher", "Xtea block cipher", "Blake2 hash function", "Blake hash function", "Md5 hash function", "Sha1 hash function", "Sha2 hash function", "Whirlpool hash function", "Ascon permutation", "Ascon sbox sigma no matrix permutation", "Ascon sbox sigma permutation", "Chacha permutation", "Gaston permutation", "Gaston sbox permutation", "Gaston sbox theta permutation", "Gift permutation", "Gift sbox permutation", "Gimli permutation", "Gimli sbox permutation", "Grain core permutation", "Keccak invertible permutation", "Keccak permutation", "Keccak sbox permutation", "Photon permutation", "Salsa permutation", "Sparkle permutation", "Spongent pi fsr permutation", "Spongent pi permutation", "Spongent pi precomputation permutation", "Tinyjambu 32bits word permutation", "Tinyjambu fsr 32bits word permutation", "Tinyjambu permutation", "Util", "Xoodoo invertible permutation", "Xoodoo permutation", "Xoodoo sbox permutation", "A5 1 stream cipher", "A5 2 stream cipher", "Bivium stream cipher", "Bluetooth stream cipher e0", "Chacha stream cipher", "Snow3g stream cipher", "Trivium stream cipher", "Zuc stream cipher", "Constant block cipher", "Fancy block cipher", "Identity block cipher", "Toy cipherfour", "Toyfeistel", "Toyspn1", "Toyspn2", "Component", "And component", "Cipher output component", "Concatenate component", "Constant component", "Fsr component", "Intermediate output component", "Linear layer component", "Mix column component", "Modadd component", "Modsub component", "Modular component", "Multi input non linear logical operator component", "Not component", "Or component", "Permutation component", "Reverse component", "Rotate component", "Sbox component", "Shift component", "Shift rows component", "Sigma component", "Theta gaston component", "Theta keccak component", "Theta xoodoo component", "Variable rotate component", "Variable shift component", "Word permutation component", "Xor component", "Compound xor differential cipher", "Editor", "CLAASP: Cryptographic Library for Automated Analysis of Symmetric Primitives", "Input", "References", "Round", "Rounds", "Integer", "Integer functions", "Sage scripts", "Sequence operations", "Templates", "Utils"], "terms": {"class": [0, 1, 2, 4, 5, 6, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 222, 223, 228, 229], "family_nam": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "cipher_typ": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "cipher_input": [0, 7, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "cipher_inputs_bit_s": [0, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "cipher_output_bit_s": [0, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "cipher_reference_cod": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "none": [0, 4, 5, 6, 11, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 56, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 93, 95, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 225, 228, 229], "base": [0, 1, 2, 3, 4, 5, 6, 9, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 228], "object": [0, 1, 2, 3, 4, 5, 6, 9, 14, 16, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 71, 74, 75, 77, 86, 95, 96, 97, 99, 101, 107, 108, 109, 111, 118, 119, 120, 121, 123, 141, 142, 143, 144, 175, 176, 178, 179, 180, 182, 183, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 220, 222, 223, 228, 229], "add_and_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "input_id_link": [0, 15, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 223], "input_bit_posit": [0, 6, 15, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 223], "output_bit_s": [0, 3, 4, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 223, 226], "add_fsr_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "descript": [0, 4, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 223], "add_modadd_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "modulu": [0, 9, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 197, 198, 199, 218], "add_modsub_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 198, 218], "add_not_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_or_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_sbox_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_shift_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "paramet": [0, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 205, 207, 208, 213, 214, 218, 221], "add_xor_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 218], "add_cipher_output_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_concatenate_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_constant_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "valu": [0, 5, 9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 206, 216, 218, 225, 229], "add_intermediate_output_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "output_tag": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 194, 218], "add_linear_layer_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_mix_column_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "mix_column_descript": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_permutation_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "permutation_descript": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 203, 215, 218], "add_reverse_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_rotate_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_round": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 198, 218, 223], "add_round_key_output_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_round_output_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_shift_rows_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_sigma_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "rotation_amounts_paramet": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 209, 210, 218], "add_suffix_to_compon": [0, 39, 42, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "suffix": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "component_id_list": [0, 39, 42, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "add_theta_gaston_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_theta_keccak_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_theta_xoodoo_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_variable_rotate_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_variable_shift_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "add_word_permutation_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "word_siz": [0, 3, 4, 9, 10, 12, 16, 41, 42, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 225, 229], "as_python_dictionari": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "cipher_invers": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "return": [0, 2, 3, 4, 5, 9, 11, 12, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 57, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 224, 227, 229], "graph": [0, 2, 4, 15, 23, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 197, 198, 199, 201, 205, 206, 208, 219, 221], "represent": [0, 4, 10, 12, 15, 56, 57, 61, 93, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 197, 198, 199, 201, 205, 206, 208], "inversunder": [0, 2, 4, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "analysi": [0, 2, 57, 61, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 201, 206, 221], "exampl": [0, 1, 2, 3, 4, 5, 9, 10, 12, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 223, 224, 227, 229], "sage": [0, 1, 2, 3, 4, 5, 9, 10, 12, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 223, 224, 227, 229], "from": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 56, 58, 59, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 221, 223, 224, 227, 229], "claasp": [0, 1, 2, 3, 4, 5, 9, 10, 12, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 223, 224, 227, 229], "block_ciph": [0, 1, 2, 3, 4, 5, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 229], "speck_block_ciph": [0, 1, 2, 3, 4, 5, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 194, 197, 198, 199, 205, 208, 216, 218, 229], "import": [0, 1, 2, 3, 4, 5, 9, 10, 12, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 223, 224, 227, 229], "speckblockciph": [0, 1, 2, 3, 4, 5, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 194, 197, 198, 199, 205, 208, 216, 218, 229], "kei": [0, 2, 4, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 200, 202, 214, 216, 218, 219, 221, 229], "0xabcdef01abcdef01": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "plaintext": [0, 2, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 197, 198, 199, 205, 207, 208, 218, 229], "0x01234567": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "number_of_round": [0, 1, 2, 3, 4, 5, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 223, 229], "2": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 59, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 89, 90, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 221, 223, 227, 229], "ciphertext": [0, 28, 29, 39, 67, 68, 69, 70, 71, 72, 73, 76, 78, 79, 80, 81, 87, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "evalu": [0, 3, 9, 10, 12, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219], "cipher_inv": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "true": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 42, 43, 67, 69, 70, 72, 74, 75, 76, 79, 80, 81, 84, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 229], "cipher_partial_invers": [0, 39, 42, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "start_round": [0, 15, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "end_round": [0, 15, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "keep_key_schedul": [0, 15, 39, 42, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "fals": [0, 1, 3, 4, 7, 9, 11, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 62, 67, 68, 69, 70, 71, 72, 73, 76, 79, 80, 81, 85, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 215, 216, 218], "invert": [0, 15, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219], "portion": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "input": [0, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 223, 224, 226, 227, 229], "integ": [0, 2, 4, 5, 9, 10, 11, 12, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 56, 61, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 86, 87, 88, 89, 90, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 197, 198, 199, 200, 202, 206, 216, 218, 219, 223, 227, 229], "initi": [0, 28, 29, 37, 38, 39, 40, 41, 42, 43, 44, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "round": [0, 2, 3, 6, 15, 16, 26, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 74, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 218, 219, 221], "number": [0, 2, 4, 5, 6, 9, 10, 11, 12, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 56, 61, 66, 67, 72, 74, 75, 76, 77, 84, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 197, 198, 199, 206, 216, 218, 219, 221, 223, 229], "partial": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "final": [0, 28, 29, 85, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "speck": [0, 1, 2, 3, 4, 5, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 93, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 194, 197, 198, 199, 205, 208, 216, 218, 219, 221, 229], "3": [0, 2, 3, 4, 9, 10, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 61, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 221, 223, 227, 229], "result": [0, 2, 4, 5, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 59, 66, 69, 75, 80, 85, 92, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 200, 202, 206, 207, 216], "intermediate_output": [0, 3, 7, 15, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 194, 218], "partial_speck": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "1": [0, 1, 2, 3, 4, 5, 9, 10, 12, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 59, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 89, 90, 93, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 221, 223, 224, 227, 229], "0": [0, 2, 3, 4, 5, 9, 10, 11, 12, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 59, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 93, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 221, 223, 224, 227, 229], "intermediate_output_0_6": [0, 29, 30, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 194], "component_from": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 222, 223], "round_numb": [0, 3, 15, 23, 74, 77, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 217, 223], "index": [0, 3, 9, 11, 12, 15, 16, 41, 42, 57, 58, 59, 71, 93, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 215, 218, 219, 221, 222, 229], "convert_to_compound_xor_ciph": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 217], "create_networx_graph_from_input_id": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "create_top_and_bottom_subgraphs_from_components_graph": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "e0_bottom_id": [0, 14, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "e1_top_id": [0, 14, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "properti": [0, 2, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223], "current_round": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 223], "current_round_numb": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 223], "current_round_number_of_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 223], "delete_generated_evaluate_c_shared_librari": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "delet": [0, 15, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "file": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 91, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "name": [0, 11, 12, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219], "id_ciph": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "_evalu": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "c": [0, 17, 18, 66, 84, 85, 92, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 197, 198, 199, 216, 219, 221], "correspond": [0, 2, 4, 5, 12, 37, 41, 42, 44, 70, 71, 76, 81, 86, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 196, 201, 202, 205, 207, 208, 215, 216, 218], "execut": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "ds": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "toi": [0, 1, 3, 4, 15, 16, 38, 39, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 192, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "fancy_block_ciph": [0, 3, 4, 16, 38, 39, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "fancyblockciph": [0, 3, 4, 16, 38, 39, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "fanci": [0, 3, 4, 16, 38, 39, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 192, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 219], "doctest": [0, 3, 5, 28, 29, 34, 38, 39, 41, 42, 43, 44, 67, 72, 84, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "skip": [0, 3, 5, 18, 28, 29, 34, 38, 39, 41, 42, 43, 44, 67, 72, 84, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 216], "verbos": [0, 3, 7, 9, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 62, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 195, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "output": [0, 2, 3, 5, 6, 9, 10, 11, 12, 15, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 42, 43, 44, 59, 66, 67, 69, 72, 74, 75, 76, 77, 80, 85, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 216, 218, 219], "list": [0, 3, 4, 5, 9, 10, 11, 12, 14, 15, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 221, 227, 229], "block": [0, 93, 96, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 221], "boolean": [0, 2, 3, 5, 9, 10, 11, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 42, 57, 61, 92, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 215, 216, 219, 221], "default": [0, 2, 3, 5, 9, 11, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 56, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 91, 93, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 218, 229], "set": [0, 3, 9, 11, 12, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 42, 43, 56, 57, 61, 66, 67, 69, 72, 74, 75, 76, 77, 78, 79, 80, 84, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 216, 221, 224], "thi": [0, 2, 3, 5, 6, 9, 10, 11, 12, 15, 28, 37, 43, 44, 56, 57, 61, 62, 66, 67, 68, 69, 70, 71, 74, 75, 77, 82, 85, 86, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 194, 196, 197, 198, 199, 200, 202, 206, 207, 215, 216, 218, 219, 223, 228], "flag": [0, 3, 5, 9, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "dictionari": [0, 2, 4, 5, 10, 11, 12, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 57, 61, 74, 75, 77, 87, 89, 90, 93, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 219, 229], "each": [0, 2, 3, 5, 9, 11, 12, 15, 16, 18, 23, 28, 32, 37, 43, 44, 57, 66, 74, 75, 76, 77, 93, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 201, 205, 207, 208, 216, 218], "intermedi": [0, 3, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 69, 75, 80, 85, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 216, 218, 219], "print": [0, 3, 9, 11, 12, 23, 32, 93, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 223, 229], "compon": [0, 2, 3, 6, 9, 10, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 92, 93, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 222, 223], "identity_block_ciph": [0, 3, 15, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "identityblockciph": [0, 3, 15, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "ident": [0, 3, 15, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 219], "0x89abcdef": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "19088743": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "evaluate_using_c": [0, 7, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "order": [0, 3, 12, 31, 34, 35, 69, 70, 71, 75, 77, 78, 80, 81, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 224, 229], "0x012345": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "0x89abcd": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "random": [0, 2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 196, 203, 204, 209, 210, 211, 212, 215, 221, 229], "round_key_output": [0, 3, 5, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 229], "3502917": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "73728": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "round_output": [0, 2, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 229], "9834215": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "cipher_output": [0, 3, 5, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 194, 218, 229], "7457252": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "evaluate_vector": [0, 7, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "evaluate_api": [0, 7, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "bit_bas": [0, 7, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "multipl": [0, 9, 11, 12, 15, 57, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 216, 221], "The": [0, 2, 4, 9, 11, 12, 14, 23, 28, 31, 32, 34, 37, 43, 44, 56, 57, 61, 62, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 80, 81, 84, 86, 89, 90, 92, 93, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 215, 218, 221, 229], "ar": [0, 2, 4, 9, 12, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41, 42, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 218, 229], "given": [0, 2, 4, 6, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 56, 61, 67, 68, 69, 70, 76, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 216], "contain": [0, 2, 3, 4, 5, 10, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 57, 69, 70, 75, 80, 81, 82, 87, 89, 90, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 218, 219], "first": [0, 9, 12, 26, 28, 29, 30, 31, 33, 34, 35, 57, 84, 85, 92, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 194, 196, 201, 205, 206, 207, 208, 215, 216, 218], "second": [0, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 56, 61, 85, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 218], "numpi": [0, 11, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "ndarrai": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "np": [0, 11, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "uint8": [0, 11, 12, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "shape": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "n": [0, 3, 9, 11, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 61, 66, 85, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 197, 198, 199, 205, 207, 208, 214, 216, 219, 221, 224, 227, 229], "m": [0, 4, 11, 38, 39, 41, 42, 66, 67, 72, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 218, 221], "where": [0, 2, 9, 11, 12, 18, 39, 42, 66, 76, 77, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 201, 205, 207, 208, 216, 218, 224, 229], "size": [0, 2, 9, 10, 11, 12, 15, 43, 44, 76, 84, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 206, 218, 225], "byte": [0, 3, 9, 66, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 216, 219, 229], "sampl": [0, 5, 11, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219], "format": [0, 3, 4, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "transpos": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "compar": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "otherwis": [0, 9, 39, 42, 43, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "function": [0, 15, 18, 57, 76, 85, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 221, 223, 229], "determin": [0, 66, 85, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "automat": [0, 85, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "bit": [0, 2, 3, 4, 5, 6, 9, 12, 15, 23, 28, 29, 32, 37, 38, 39, 41, 42, 43, 44, 61, 66, 71, 84, 85, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 216, 218, 219, 221, 224, 229], "requir": [0, 57, 62, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 201, 205, 207, 208], "doe": [0, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 216], "transform": [0, 9, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 216], "transpar": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "similar": [0, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206], "evaluate_vectorized_byt": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "repres": [0, 9, 10, 11, 12, 18, 26, 28, 29, 30, 31, 34, 35, 38, 39, 41, 42, 56, 57, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 84, 86, 87, 88, 89, 90, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 229], "one": [0, 11, 12, 28, 29, 31, 34, 35, 37, 38, 39, 41, 42, 43, 44, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 216, 218, 229], "row": [0, 9, 11, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 219], "column": [0, 9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 215, 218, 219], "take": [0, 12, 14, 38, 39, 41, 42, 43, 44, 61, 67, 68, 69, 70, 85, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 229], "expect": [0, 2, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "x": [0, 11, 12, 17, 18, 41, 42, 44, 61, 64, 66, 67, 68, 69, 70, 76, 77, 78, 85, 92, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 221, 224, 227, 229], "block_bit_s": [0, 2, 4, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 67, 70, 72, 81, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 197, 198, 199, 200, 202, 205, 207, 208, 216, 229], "32": [0, 2, 3, 4, 9, 10, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 197, 198, 199, 200, 201, 202, 205, 207, 208, 214, 216, 218, 224, 229], "key_bit_s": [0, 2, 4, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 67, 70, 72, 81, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 197, 198, 199, 200, 202, 205, 206, 207, 208, 216, 229], "64": [0, 1, 9, 11, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 67, 69, 70, 72, 74, 75, 77, 78, 80, 81, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 197, 198, 199, 200, 202, 205, 208, 214, 216, 218, 221], "22": [0, 3, 23, 25, 27, 32, 38, 39, 40, 43, 44, 68, 69, 70, 73, 75, 80, 81, 87, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 195, 197, 198, 199, 202, 203, 204, 209, 210, 211, 212, 216, 218, 229], "k": [0, 10, 44, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 200, 202, 216, 221, 229], "randint": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "256": [0, 16, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 214], "8": [0, 3, 9, 10, 12, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43, 44, 58, 61, 70, 81, 84, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 221, 229], "dtype": [0, 11, 12, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "4": [0, 3, 10, 12, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 86, 87, 88, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 218, 221, 223, 224, 227, 229], "k0lib": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "int": [0, 4, 9, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 67, 72, 74, 75, 76, 77, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 206, 214, 215, 216, 218, 221], "from_byt": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "tobyt": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "byteord": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "big": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 44, 68, 73, 74, 77, 78, 86, 87, 88, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 225], "k1lib": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "x0lib": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "x1lib": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "c0lib": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "c1lib": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "evaluate_with_intermediate_outputs_continuous_diffusion_analysi": [0, 7, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "sbox_precomput": [0, 7, 10, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "sbox_precomputations_mix_column": [0, 7, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "continu": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219, 221], "gener": [0, 5, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 92, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 215, 216, 221], "decim": [0, 10, 37, 38, 39, 40, 41, 42, 43, 44, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206], "messag": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "plaintext_input": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "i": [0, 2, 3, 10, 12, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 43, 44, 59, 66, 77, 84, 85, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 206, 214, 216, 218, 221, 229], "rang": [0, 2, 9, 10, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 84, 86, 87, 88, 89, 90, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 227, 229], "10": [0, 1, 3, 5, 9, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 62, 66, 69, 74, 75, 80, 84, 89, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 196, 202, 215, 216, 218, 221, 229], "802999073954890452142763024312444031238555908203125": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "key_input": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "000000000": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "file_nam": [0, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "find_impossible_properti": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "type": [0, 2, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 223, 227], "techniqu": [0, 37, 41, 42, 77, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "sat": [0, 22, 23, 25, 27, 32, 38, 39, 67, 68, 69, 70, 84, 86, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "solver": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 56, 61, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 219], "kissat": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "scenario": [0, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "singl": [0, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43, 69, 75, 78, 80, 89, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "sglytqh2017": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "find": [0, 6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 69, 70, 74, 75, 77, 80, 81, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 199, 201, 202, 216, 221], "imposs": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 219, 221], "differenti": [0, 4, 23, 37, 56, 57, 61, 62, 66, 71, 85, 86, 87, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 219, 221], "zero": [0, 12, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 207], "correl": [0, 31, 34, 35, 44, 70, 74, 81, 90, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 221], "linear": [0, 4, 10, 11, 12, 28, 40, 56, 61, 66, 85, 93, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 218, 219, 221], "approxim": [0, 5, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "fix": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219], "iter": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "all": [0, 2, 4, 10, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43, 44, 66, 69, 70, 75, 80, 81, 82, 89, 90, 91, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 216, 228, 229], "possibl": [0, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 70, 81, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 216], "ham": [0, 2, 85, 92, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "weight": [0, 2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 92, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 221], "ask": [0, 37, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "solut": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 197, 198, 199, 200, 201, 202, 205, 207, 208, 213, 214, 216, 221], "found": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43, 44, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 197, 198, 199, 200, 202, 227], "propag": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 77, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "zero_correl": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "ani": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 44, 67, 68, 69, 70, 71, 81, 82, 86, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 197, 198, 199], "an": [0, 1, 2, 9, 10, 11, 12, 17, 33, 34, 61, 66, 85, 86, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 201, 202, 206, 207, 216, 218, 221, 224, 227], "empti": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 218], "string": [0, 3, 4, 9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 218, 229], "search": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 41, 42, 43, 44, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 85, 86, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 200, 202, 207, 219, 221], "smt": [0, 71, 92, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "milp": [0, 23, 32, 56, 61, 66, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 221], "cp": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "us": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 56, 57, 58, 61, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 194, 196, 197, 198, 199, 200, 202, 206, 207, 215, 216, 218, 219, 221, 223, 229], "generate_bit_based_c_cod": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "code": [0, 61, 71, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221], "defin": [0, 2, 3, 9, 14, 15, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "self": [0, 3, 15, 38, 39, 41, 42, 43, 44, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "method": [0, 2, 3, 5, 10, 26, 28, 29, 30, 31, 34, 35, 43, 44, 57, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 80, 81, 85, 87, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 194, 196, 197, 198, 199, 200, 202, 206, 215, 216, 221], "make": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "s": [0, 9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 56, 61, 66, 67, 72, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 193, 198, 200, 202, 206, 221], "includ": [0, 14, 28, 35, 38, 39, 41, 42, 44, 70, 74, 75, 81, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "generate_evaluate_c_code_shared_librari": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "store": [0, 84, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 216], "build": [0, 2, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 80, 81, 86, 87, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 219, 228], "generate_word_based_c_cod": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "optim": [0, 56, 61, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219, 221], "word": [0, 4, 9, 10, 11, 12, 41, 42, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 219], "word_based_c_cod": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "20": [0, 3, 5, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 195, 196, 202, 203, 204, 209, 210, 211, 212, 215, 218, 221, 229], "get_all_compon": [0, 75, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 223], "get_all_components_id": [0, 39, 42, 68, 73, 87, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 223], "get_all_inputs_bit_posit": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "get_component_from_id": [0, 4, 15, 28, 29, 37, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 215, 216, 222, 223], "component_id": [0, 3, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 222, 223], "accord": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206], "id": [0, 4, 14, 38, 39, 42, 74, 75, 77, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 222, 223, 229], "id_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "sbox_0_0": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 196, 203, 204, 209, 210, 211, 212, 215, 218], "6": [0, 3, 10, 28, 29, 31, 34, 35, 38, 39, 44, 59, 61, 66, 74, 84, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 218, 221, 229], "12": [0, 3, 35, 39, 41, 42, 44, 61, 84, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 200, 202, 203, 204, 209, 210, 211, 212, 218, 229], "14": [0, 3, 4, 5, 35, 38, 39, 44, 61, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 194, 195, 197, 202, 203, 204, 209, 210, 211, 212, 218, 229], "5": [0, 2, 3, 4, 5, 9, 10, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 43, 58, 61, 66, 69, 75, 77, 78, 80, 84, 86, 87, 88, 89, 90, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 196, 197, 198, 199, 200, 201, 202, 206, 207, 215, 216, 218, 221, 227, 229], "7": [0, 3, 10, 12, 23, 28, 29, 32, 39, 61, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 195, 196, 198, 200, 201, 202, 203, 204, 206, 207, 209, 210, 211, 212, 215, 216, 218, 229], "9": [0, 3, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 43, 44, 61, 69, 75, 80, 84, 89, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 195, 196, 197, 198, 199, 202, 203, 204, 205, 208, 209, 210, 211, 212, 215, 216, 218, 221, 229], "11": [0, 3, 4, 9, 39, 61, 77, 78, 84, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 195, 196, 200, 202, 203, 204, 209, 210, 211, 212, 215, 218, 229], "13": [0, 3, 4, 35, 44, 61, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 194, 195, 202, 203, 204, 209, 210, 211, 212, 218, 221, 229], "15": [0, 3, 5, 26, 28, 29, 30, 33, 34, 35, 61, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 208, 209, 210, 211, 212, 215, 216, 218, 229], "get_components_in_round": [0, 74, 77, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "get_current_component_id": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "get": [0, 37, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 223], "current": [0, 15, 85, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "name_map": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 198, 218], "permut": [0, 2, 16, 39, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 196, 198, 201, 202, 204, 206, 209, 210, 211, 212, 218], "cipher_nam": [0, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 198, 218], "constant_0_0": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "0xf": [0, 9, 10, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "constant_0_1": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "constant_1_0": [0, 30, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 218], "get_model": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "problem": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "model": [0, 6, 14, 17, 18, 58, 59, 61, 62, 64, 66, 84, 85, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 221], "xor_differenti": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "xor_linear": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "cipher_model": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "more": [0, 10, 31, 34, 35, 44, 69, 70, 75, 80, 81, 84, 85, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 194, 200, 202, 216, 218, 227], "ad": [0, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206], "librari": [0, 37, 38, 39, 40, 41, 42, 43, 44, 71, 82, 91, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 227], "get_number_of_components_in_round": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "get_partial_ciph": [0, 39, 42, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "get_round_from_component_id": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 222, 223], "xor_1_14": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "get_sizes_of_components_by_typ": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "impossible_differential_search": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "relat": [0, 31, 34, 43, 69, 75, 80, 85, 89, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "inputs_bit_s": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 226], "inputs_size_to_dict": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "is_algebraically_secur": [0, 16, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "timeout": [0, 16, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "resist": [0, 16, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "against": [0, 16, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "algebra": [0, 17, 18, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 193, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 221], "attack": [0, 16, 71, 86, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "grobner": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "basi": [0, 14, 16, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "comput": [0, 2, 4, 5, 9, 10, 11, 12, 16, 56, 57, 61, 77, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 200, 202, 206, 221], "is_andrx": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "andrx": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "midori_block_ciph": [0, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 196, 203, 204, 206, 209, 210, 211, 212, 215], "midoriblockciph": [0, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 196, 203, 204, 206, 209, 210, 211, 212, 215], "midori": [0, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 206, 215, 219], "is_arx": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "arx": [0, 85, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219, 221], "is_power_of_2_word_bas": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 222, 223], "16": [0, 2, 3, 4, 5, 28, 35, 39, 41, 42, 43, 44, 70, 81, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 209, 210, 211, 212, 214, 215, 216, 218, 229], "xtea_block_ciph": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "xteablockciph": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "is_shift_arx": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "shift": [0, 4, 9, 10, 11, 12, 85, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 218, 219, 227], "xtea": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219], "is_spn": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "spn": [0, 33, 34, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 221], "aes_block_ciph": [0, 4, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 215, 216], "aesblockciph": [0, 4, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 215, 216], "ae": [0, 4, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 215, 216, 219, 221], "make_cipher_id": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 226], "make_file_nam": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "polynomial_system": [0, 16, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "polynomi": [0, 9, 11, 16, 18, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 193, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 218, 219, 221], "system": [0, 16, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 203, 204, 209, 210, 211, 212, 221], "sequenc": [0, 16, 18, 84, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219, 221], "112": [0, 1, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "variabl": [0, 4, 6, 11, 12, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 218, 219, 221, 229], "polynomial_system_at_round": [0, 16, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "r": [0, 9, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 76, 85, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 221], "structur": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "termin": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "0xab01": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 218], "cipher_id": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "cipher_name_i32_o32_r1": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "cipher_number_of_round": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "constant": [0, 9, 10, 66, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 216, 218, 219], "input_bit_s": [0, 4, 12, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 223], "print_as_python_dictionari": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218], "python": [0, 2, 3, 5, 15, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 227], "input_kei": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "input_plaintext": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "cipher_name_k32_p32_o32_r1": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "cipher_round": [0, 15, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "print_as_python_dictionary_to_fil": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "valid": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 207, 216], "dictionary_exampl": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "py": [0, 61, 71, 86, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 197, 198, 199], "os": [0, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 229], "remov": [0, 35, 44, 61, 70, 81, 90, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 229], "print_evaluation_python_cod": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "implement": [0, 3, 5, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 206, 215, 216, 228, 229], "copi": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "bitstr": [0, 3, 9, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "bitarrai": [0, 3, 9, 10, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "cipher_modul": [0, 1, 2, 3, 4, 5, 9, 10, 12, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 226, 229], "generic_funct": [0, 3, 9, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "def": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "plaintext_output": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "uint": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "length": [0, 3, 9, 93, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 219, 229], "key_output": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "components_io": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "component_input": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 223], "concatenate_0_0": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "select_bit": [0, 3, 9, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "17": [0, 3, 44, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 196, 197, 198, 199, 202, 203, 204, 209, 210, 211, 212, 215, 218, 221, 229], "18": [0, 3, 9, 28, 31, 44, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 215, 218, 229], "19": [0, 3, 34, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 195, 196, 197, 198, 199, 202, 203, 204, 209, 210, 211, 212, 215, 218, 229], "21": [0, 3, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 195, 196, 202, 203, 204, 209, 210, 211, 212, 215, 218, 221, 229], "23": [0, 3, 9, 39, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 195, 196, 200, 202, 203, 204, 209, 210, 211, 212, 215, 218, 229], "24": [0, 1, 3, 16, 23, 32, 39, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193, 196, 215, 218, 229], "25": [0, 3, 9, 33, 34, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 215, 218, 221, 229], "26": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 215, 218, 221, 229], "27": [0, 3, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 196, 207, 215, 218, 229], "28": [0, 3, 31, 34, 43, 69, 75, 80, 89, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 207, 218, 229], "29": [0, 3, 35, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 194, 207, 218, 229], "30": [0, 1, 3, 16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 194, 207, 218, 229], "31": [0, 3, 24, 31, 33, 34, 35, 39, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 194, 196, 197, 198, 199, 201, 202, 207, 214, 215, 216, 218, 221, 229], "concatenate_0_0_output": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "intermediate_output_0_1": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "intermediate_output_0_1_output": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "append": [0, 3, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 74, 75, 77, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "concatenate_0_2": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "concatenate_0_2_output": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "cipher_output_0_3": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "cipher_output_0_3_output": [0, 3, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "print_evaluation_python_code_to_fil": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "identity_block_cipher_p32_k32_o32_r1": [0, 15, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "print_input_inform": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "tweak": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "vector": [0, 2, 3, 5, 61, 85, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 219], "nonc": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "etc": [0, 2, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "reference_cod": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "remove_key_schedul": [0, 35, 44, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 194, 218], "keep_round_key_inject": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "remove_round_compon": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 223], "round_id": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 222], "remove_round_component_from_id": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218, 223], "rounds_as_list": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "set_file_nam": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "set_id": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "set_input": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "inputs_ids_list": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "inputs_bit_size_list": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "sort_ciph": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 218], "test_against_reference_cod": [0, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "number_of_test": [0, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "test": [0, 3, 5, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 229], "its": [0, 4, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 218, 221], "refer": [0, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219], "avail": [0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 219, 221], "test_vector_check": [0, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "list_of_test_vectors_input": [0, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "list_of_test_vectors_output": [0, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "That": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "test_result": [0, 1, 2, 4, 5, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 229], "everi": [0, 39, 42, 67, 68, 69, 70, 71, 85, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 206, 224], "key1": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "0x1918111009080100": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "plaintext1": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "0x6574694c": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "ciphertext1": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "0xa86842f2": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "key2": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "plaintext2": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "0x6574694d": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "ciphertext2": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "0x2b5f25d6": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "input_list": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "output_list": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "0x11111111": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "0x1111111111111111": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "0xffffffff": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 224], "fail": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "286331153": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "1229782938247303441": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "4294967295": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "update_input_id_links_from_component_id": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 222], "new_input_id_link": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 222], "zero_correlation_linear_search": [0, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "algebraictest": 1, "cipher": [1, 2, 3, 4, 5, 6, 7, 9, 12, 14, 16, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 66, 72, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89, 90, 93, 95, 96, 97, 99, 100, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 184, 185, 186, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 221, 229], "construct": [1, 74, 75, 77, 102, 103, 105, 106, 110, 112, 113, 114, 116, 117, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 184, 185, 186, 187, 221, 228], "instanc": [1, 3, 4, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 74, 75, 77, 102, 103, 105, 106, 110, 112, 113, 114, 115, 116, 117, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 181, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 221], "algebraic_test": 1, "toyspn1": [1, 16, 219], "toyspn": [1, 16], "alg_test": 1, "timeout_in_second": 1, "input_paramet": [1, 229], "toyspn1_p6_k6_o6_r2": 1, "test_nam": [1, 31, 95], "max_degree_of_equ": 1, "number_of_equ": 1, "34": [1, 218], "74": [1, 16, 218], "number_of_monomi": 1, "54": [1, 218], "102": 1, "number_of_vari": [1, 43, 44, 85], "42": [1, 16, 218], "test_pass": 1, "speck_p32_k64_o32_r1": [1, 26, 28, 29, 30], "157": 1, "60": [1, 9, 28, 218], "avalanchetest": [2, 95, 229], "avalanche_probability_vector": 2, "nb_sampl": 2, "probabl": [2, 23, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 57, 69, 70, 74, 75, 77, 80, 81, 85, 89, 90, 93, 189, 197, 198, 199, 200, 202, 206, 221], "differ": [2, 5, 28, 29, 37, 71, 84, 85, 86, 93, 192, 201, 205, 206, 207, 208, 219, 221], "consid": [2, 33, 34, 39, 42, 97, 99, 108, 109, 140, 155], "th": [2, 229], "flip": [2, 192], "due": [2, 3], "apv": 2, "j": [2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 102, 103, 104, 106, 137, 184, 197, 198, 199, 216, 221], "after": [2, 43, 44, 84], "when": [2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 85, 92, 95, 106, 110, 112, 113, 114, 116, 117, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 140, 148, 161, 201, 206], "inject": [2, 218], "posit": [2, 5, 9, 10, 11, 12, 37, 93, 111, 197, 198, 199, 205, 207, 208, 216, 218, 223, 224, 229], "estim": 2, "avalanche_test": [2, 95, 229], "100": [2, 5, 23, 31, 32, 35, 173, 174, 189, 197, 198, 199, 200, 202, 206, 221, 229], "number_of_sampl": [2, 5, 93, 96, 229], "avalanche_dependence_uniform_bia": 2, "05": [2, 10, 89], "avalanche_dependence_criterion_threshold": 2, "avalanche_dependence_uniform_criterion_threshold": 2, "avalanche_weight_criterion_threshold": 2, "01": [2, 10, 26, 28, 29, 30, 70, 81], "avalanche_entropy_criterion_threshold": 2, "run_avalanche_depend": 2, "run_avalanche_dependence_uniform": 2, "run_avalanche_weight": 2, "run_avalanche_entropi": 2, "criterion": 2, "float": [2, 5, 10, 93, 229], "should": [2, 9, 11, 43, 44, 56, 61, 74, 75, 77, 82, 93, 96, 216], "It": [2, 44, 57, 62, 77, 85, 92, 202, 216], "bia": [2, 93], "satisfi": [2, 24, 26, 28, 29, 30, 31, 41, 42, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85], "depend": [2, 18], "d": [2, 18, 66, 92, 134, 141, 142, 143, 148, 161, 177, 216, 221, 229], "uniform": 2, "entropi": 2, "add": [2, 33, 34, 38, 39, 41, 42, 43, 44, 85, 218], "avalanche_entropi": 2, "command": 2, "ha": [2, 9, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 61, 76, 93, 141, 142, 143, 185, 186, 187, 206, 207, 218, 228], "been": [2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 61, 93, 141, 142, 143, 207], "avalanche_dependence_vector": [2, 229], "compute_criterion_from_avalanche_probability_vector": 2, "all_avalanche_probability_vector": 2, "algorithm": [2, 61, 85, 92, 176, 189, 197, 198, 199, 200, 202, 216, 221], "respect": 2, "If": [2, 9, 12, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 91, 93, 96, 120, 121, 140, 218], "worst": 2, "certain": [2, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 87, 89, 90, 223], "close": 2, "threshold": [2, 5], "we": [2, 4, 5, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 140, 201, 206, 216, 229], "sai": 2, "left": [2, 9, 10, 11, 12, 85, 104, 122, 125, 126, 133, 138, 197, 198, 199, 218, 227], "frac": 2, "text": 2, "right": [2, 9, 10, 11, 12, 85, 122, 125, 126, 133, 138, 197, 198, 199, 218, 227], "half": [2, 96], "uncertainti": 2, "about": 2, "whether": [2, 17, 18, 66], "strict": 2, "index_occurr": 2, "avalanche_depend": 2, "diff": 2, "all_apv": 2, "generate_3d_plot": 2, "avalanche_weight_vector": [2, 95], "can": [2, 4, 6, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 42, 56, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 87, 89, 90, 93, 119, 123, 141, 142, 143, 148, 176, 189, 200, 202, 206, 216, 227], "plot": [2, 4], "visual": [2, 4, 95], "3d": 2, "show": [2, 28, 29, 30, 33, 34, 37, 93, 95, 219], "modul": [2, 6, 37, 57, 61, 62, 71, 85, 86, 141, 142, 143, 221], "chacha_permut": [2, 148], "chachapermut": [2, 148, 177], "build_code_for_compon": 3, "cipher_code_str": 3, "build_code_for_continuous_diffusion_analysis_compon": 3, "add_verbos": 3, "build_continuous_diffusion_analysis_function_cal": 3, "build_function_cal": 3, "constant_to_bitstr": 3, "val": [3, 12, 66, 192], "output_s": [3, 57, 192, 196], "generate_bit_based_vectorized_python_code_str": 3, "store_intermediate_output": 3, "convert_output_to_byt": [3, 189, 190, 191, 192, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "need": [3, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 87, 89, 90, 91, 93, 114, 140, 192, 201, 206, 219, 229], "orient": [3, 221], "code_gener": 3, "string_python_cod": 3, "split": [3, 9, 10, 139, 140, 184, 216], "generic_functions_vectorized_bit": 3, "generate_byte_based_vectorized_python_code_str": 3, "integers_inputs_and_output": 3, "generic_functions_vectorized_byt": [3, 12], "generate_python_code_str": 3, "chang": 3, "sometim": 3, "nround_0": 3, "concatenate_0_0_input": 3, "cipher_output_0_3_input": 3, "generate_python_code_string_for_continuous_diffusion_analysi": 3, "evaluate_continuous_diffusion_analysi": 3, "get_cipher_output_component_bit_based_c_cod": 3, "list_siz": 3, "string_dictionari": 3, "c_variabl": 3, "get_cipher_output_word_based_c_cod": 3, "intermediate_output_cod": 3, "wordstring_vari": [3, 191, 192, 205, 206, 207, 208, 213, 214], "get_intermediate_output_component_bit_based_c_cod": 3, "get_intermediate_output_word_based_c_cod": 3, "get_number_of_input": 3, "get_padding_component_bit_based_c_cod": 3, "get_rounds_bit_based_c_cod": 3, "get_rounds_word_based_c_cod": 3, "get_word_operation_component_bit_based_c_cod": 3, "get_word_operation_word_based_c_cod": 3, "prepare_input_bit_based_vectorized_python_code_str": 3, "prepare_input_byte_based_vectorized_python_code_str": 3, "bit_siz": [3, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 87, 89, 90, 220], "update_intermediate_structur": 3, "ciphercomponentsanalysi": 4, "component_analysis_test": 4, "oper": [4, 9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 67, 68, 69, 70, 93, 104, 139, 140, 189, 190, 194, 196, 198, 199, 201, 202, 205, 207, 208, 215, 216, 219], "components_analysi": 4, "len": [4, 9, 10, 11, 18, 28, 31, 33, 34, 35, 43, 44, 69, 70, 75, 80, 81, 89, 90, 93, 197, 198, 199, 206, 227], "get_all_oper": 4, "which": [4, 14, 31, 33, 34, 35, 39, 42, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 92, 93, 95, 97, 99, 176, 181, 185, 186, 187, 218], "attribut": 4, "studi": 4, "occurr": 4, "same": [4, 57, 132, 186, 206], "underli": [4, 206], "cipher_oper": 4, "sbox": [4, 9, 10, 11, 12, 108, 109, 114, 120, 184, 185, 186, 187, 218, 219], "linear_lay": [4, 9, 10, 114, 162, 218], "xor": [4, 9, 10, 11, 12, 22, 23, 24, 25, 37, 62, 66, 68, 71, 74, 77, 78, 84, 85, 86, 87, 92, 104, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 223], "AND": [4, 9, 11, 12, 92, 189, 200, 202, 218], "modadd": [4, 9, 12, 198, 199, 218, 219], "rotat": [4, 9, 10, 11, 12, 125, 126, 127, 128, 139, 140, 148, 161, 169, 187, 208, 218, 219, 225, 227], "print_component_analysis_as_radar_chart": 4, "spider": 4, "binary_matrix_of_linear_compon": 4, "binari": [4, 9, 10, 11, 38, 39, 66, 84, 93, 104, 115, 192, 206, 216, 218, 221, 224], "matrix": [4, 9, 10, 11, 12, 56, 101, 115, 144, 151, 218, 219], "rot_compon": [4, 124], "rot_1_11": [4, 205, 208], "branch_numb": 4, "branch": [4, 35, 44, 70, 81, 85, 90], "look": [4, 221], "specifi": [4, 6, 9, 10, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 93, 218], "mix_column_compon": [4, 10, 101, 196, 215], "mix_column_1_20": 4, "calculate_weights_for_linear_lay": 4, "calculate_weights_for_mix_column": 4, "field_element_matrix_to_integer_matrix": 4, "convert": [4, 9, 11, 12, 93, 196, 215], "field": [4, 9, 10, 218, 221], "element": [4, 9, 10, 12, 15, 229], "whose": [4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43, 44, 69, 70, 75, 80, 81, 85, 89, 90, 93, 141, 142, 143], "entri": [4, 9, 57, 74, 75, 77, 218], "instantiate_matrix_over_correct_field": 4, "mc_matrix": 4, "_": [4, 37, 66, 93, 192, 197, 198, 199, 205, 207, 208, 214, 216], "get_inverse_matrix_in_integer_represent": 4, "mix_column_0_20": [4, 196, 215], "dimens": [4, 58], "has_maximal_branch_numb": 4, "twofish_block_ciph": [4, 136], "twofishblockciph": [4, 136], "twofish": [4, 219], "mix_column_0_1": 4, "mix_column_0_19": 4, "polynomial_as_int": 4, "mix_column_0_21": [4, 42, 196, 215], "int_to_poli": [4, 229], "integer_valu": [4, 9, 229], "continuousdiffusionanalysi": 5, "continuous_avalanche_factor": 5, "lambda_valu": 5, "seed": [5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 93], "number_of_processor": 5, "metric": 5, "avalanch": [5, 96, 97, 99, 219], "factor": 5, "definit": [5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 182, 229], "mur2020": [5, 10, 221, 229], "express": [5, 9, 84], "rng": 5, "process": [5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 206, 228], "parallel": [5, 155, 189, 200, 202], "continuous_diffusion_analysi": 5, "speck_ciph": 5, "cda": 5, "001": [5, 229], "continuous_diffusion_factor": 5, "beta_number_of_sampl": 5, "gf_number_sampl": 5, "measur": [5, 93], "gf_2": 5, "long": [5, 28, 31, 34, 35, 43, 44, 61, 70, 81, 82, 90, 91, 93, 114, 195, 203, 204, 206, 209, 210, 211, 212, 221], "time": [5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 74, 75, 85, 93, 114, 218], "diffusion_factor": 5, "continuous_diffusion_test": 5, "continuous_avalanche_factor_number_of_sampl": 5, "threshold_for_avalanche_factor": 5, "continuous_neutral_measure_beta_number_of_sampl": 5, "continuous_neutral_measure_gf_number_sampl": 5, "continuous_diffusion_factor_beta_number_of_sampl": 5, "continuous_diffusion_factor_gf_number_sampl": 5, "is_continuous_avalanche_factor": 5, "is_continuous_neutrality_measur": 5, "is_diffusion_factor": 5, "obtain": [5, 6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 66, 84, 93, 216], "indic": [5, 9, 10, 24, 26, 28, 29, 30, 31, 33, 34, 35], "want": [5, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 91], "continuous_neutrality_measur": 5, "A": [5, 11, 12, 74, 75, 77, 84, 93, 123, 141, 142, 193, 195, 203, 204, 206, 209, 210, 211, 212, 216, 218, 221], "e": [5, 9, 37, 38, 39, 43, 44, 59, 71, 77, 84, 85, 86, 92, 93, 142, 143, 183, 186, 189, 193, 202, 206, 216, 218, 221], "g": [5, 37, 71, 86, 93, 141, 143, 189, 202, 216, 221], "continuous_neutrality_measure_for_bit_j": 5, "input_bit": [5, 10, 218], "output_bit": [5, 66], "neutral": 5, "analyz": 5, "50": [5, 218, 221], "200": [5, 31, 33, 34, 35, 206], "milpdivisiontrailmodel": 6, "chosen": [6, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 139, 140, 141, 142, 143, 229], "produc": [6, 12, 176], "either": [6, 18, 56, 61, 93, 120, 121, 206], "anf": 6, "degre": [6, 10], "check": [6, 28, 29, 69, 75, 80, 189, 200, 202], "presenc": 6, "absenc": 6, "monomi": [6, 218], "onli": [6, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 42, 57, 59, 67, 68, 69, 70, 71, 91, 176, 206, 216], "user": [6, 37, 84], "possess": 6, "gurobi": [6, 37], "licens": [6, 37], "add_and_constraint": 6, "add_constraint": [6, 66], "predecessor": [6, 14], "input_id_link_need": 6, "block_need": 6, "add_linear_layer_constraint": 6, "add_modadd_constraint": 6, "add_not_constraint": 6, "add_sbox_constraint": 6, "add_xor_constraint": 6, "build_generic_model_for_specific_output_bit": 6, "output_bit_index_ciphertext": 6, "fixed_degre": 6, "chosen_cipher_output": 6, "build_gurobi_model": 6, "check_presence_of_particular_monomial_in_all_anf": 6, "check_presence_of_particular_monomial_in_specific_anf": 6, "output_bit_index": 6, "create_copi": 6, "nb_copi": 6, "var_to_copi": 6, "create_copies_for_linear_lay": 6, "binary_matrix": 6, "input_vars_concat": 6, "create_gurobi_vars_from_all_compon": 6, "create_gurobi_vars_sbox": 6, "find_anf_of_specific_output_bit": 6, "find_copy_index": 6, "find_degree_of_all_output_bit": 6, "find_degree_of_specific_output_bit": 6, "cube_index": 6, "find_index_second_input": 6, "get_all_variables_as_list": 6, "get_anfs_from_sbox": 6, "get_cipher_output_component_id": 6, "get_input_var": 6, "get_monomial_occur": 6, "get_output_bit_index_previous_compon": 6, "get_output_var": 6, "get_solut": 6, "get_unused_vari": 6, "get_where_component_is_us": 6, "optimize_model": 6, "order_predecessor": 6, "used_predecessor": 6, "re_init": 6, "set_as_used_vari": 6, "set_unused_variables_to_zero": 6, "number_of_input": [9, 10, 11, 12, 44, 59], "how": [9, 10, 96, 218, 221], "mani": [9, 10, 71, 85, 86, 96, 218], "part": [9, 10, 31, 34, 35, 61, 74, 75, 176, 189, 202, 216, 228], "must": [9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 74, 85, 92, 101, 108, 109, 111, 118, 119, 120, 121, 136, 143], "w": [9, 142, 143, 180, 221], "floor": [9, 197, 198, 199, 216], "input_length": [9, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 197, 198, 199], "modsub": [9, 12, 197, 199, 218, 219], "NOT": [9, 11, 12, 33, 34, 201, 218], "OR": [9, 11, 12, 92, 189, 200, 202, 218], "rotation_amount": [9, 10, 11, 12, 125, 126, 127, 128], "neg": [9, 10, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 69, 70, 74, 75, 77, 78, 80, 81, 89, 90, 218, 227], "happen": 9, "amount": [9, 10, 11, 12, 85, 106, 110, 112, 113, 114, 116, 117, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 148, 156, 161, 214], "b": [9, 10, 17, 66, 84, 85, 92, 123, 141, 142, 143, 148, 157, 158, 159, 161, 177, 184, 193, 216, 221], "0x8": [9, 10], "bin": [9, 224], "1000": [9, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44], "0100": 9, "0010": [9, 218], "rotate_by_variable_amount": [9, 218], "input_s": [9, 10, 11, 12, 57], "rotation_direct": [9, 10], "direct": [9, 10, 14, 218, 219], "rotate_boolean_funct": 9, "boolpolyr": 9, "ring": [9, 16, 219, 221], "shift_amount": [9, 10, 11, 12], "1111": [9, 218], "0111": 9, "1100": [9, 31, 35], "shift_by_variable_amount": [9, 218], "shift_direct": [9, 10, 11, 12], "sigma": [9, 218, 219], "1101": 9, "theta_gaston": 9, "52": [9, 218, 221], "63": [9, 26, 28, 29, 30, 31, 35, 39, 201, 202, 207, 216, 218], "perform": [9, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 71, 84, 85, 92, 104, 187, 189, 197, 198, 199, 200, 201, 202, 216, 218, 221, 227], "twin": 9, "pariti": [9, 77, 221], "mixer": 9, "mix": [9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 134, 151, 215, 218, 219], "layer": [9, 11, 12, 104, 114, 120, 121, 151, 196, 203, 204, 209, 210, 211, 212, 215, 218, 219], "gaston": [9, 218, 219], "320": [9, 39, 218], "640": [9, 16, 166, 167, 168], "interpret": 9, "tupl": [9, 18, 38, 39, 66, 85, 125, 126, 128, 148, 161, 206, 216, 227], "three": [9, 76, 77, 85], "u": [9, 59, 85, 221, 229], "p": [9, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 76, 178, 180, 189, 197, 198, 199, 200, 202, 206, 221], "q": [9, 76, 92, 221], "remain": [9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "five": 9, "t0": 9, "through": [9, 37, 205, 207, 208], "t4": 9, "specif": [9, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 89, 90, 93, 95, 119, 132, 135, 140], "40": [9, 34, 129, 152, 153, 218], "70": [9, 218, 221], "0011010110100010000110000010011000101100101110110000000100111111001111": 9, "theta_keccak": 9, "keccak": [9, 218, 219], "0xf1258f7940e1dde784d5ccf933c0478ad598261ea65aa9eebd1547306f80494d8b284e056253d057ff97a42d7f8e6fd490fee5a0a44647c48c5bda0cd6192e76ad30a6f71b19059c30935ab7d08ffc64eb5aa93f2317d635a9a6e6260d71210381a57c16dbcf555f43b831cd0347c82601f22f1a11a5569f05e5635a21d9ae6164befef28cc970f2613670957bc46611b87c5a554fd00ecb8c3ee88a1ccf32c8940c7922ae3a26141841f924a2c509e416f53526e70465c275f644e97f30a13beaf1ff7b5ceca249": 9, "hex": [9, 11, 12, 176, 184, 185, 186, 187, 224], "09b84e4804496b9b7c480dc87768f1f62d05e72fe2f21f92458886012b28ff3173b58f3426fb662b6be4933769b0bcec048dd2bab27894fc1828ed16c027fd4e394391ed0d27d6a4a4e06dadc6b12f5cfd95713beec720a9bf693e22c0a1d79f976aa412161fa3c35577e9c9ce973eba173df71edc75a0038f8853e756dc0031eed3ce4ffbccdea2eb5b40280cc1c84132116ae838d5a09b0653d8376bca9c988c89ff979aa0f7a600c47f91965fd8560e70b393d39eb4706d73c25c4baa7089f27479ce687673fb": 9, "theta_xoodoo": 9, "xoodoo": [9, 186, 187, 218, 219], "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef": 9, "0101100100": 9, "xor_boolean_funct": 9, "add_pad": 9, "number_of_row": 9, "res_vector": 9, "compute_indexed_sum": 9, "index_list": 9, "sum": [9, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 57, 74, 197, 198, 199, 202, 206, 216, 218], "product": [9, 57, 66, 77, 206], "compute_word_indexed_sum": 9, "word_arrai": 9, "word_gf": 9, "gf": [9, 17, 18, 195, 203, 204, 209, 210, 211, 212, 221], "coeffici": [9, 218], "concatenate_bool_func": 9, "constant_bool_func": 9, "convert_polynomial_to_binary_matrix_given_polynomial_modulu": 9, "calcul": [9, 206], "quotientr": 9, "irreduc": 9, "input_matrix": 9, "input_vector": 9, "quotient": 9, "convert_x_to_binary_matrix_given_polynomial_modulu": 9, "fsr_binari": 9, "registers_info": [9, 218], "number_of_clock": 9, "register_bit_length": 9, "update_express": 9, "clock_condit": 9, "option": [9, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85], "regist": [9, 193, 218], "group": [9, 76, 229], "For": [9, 59, 67, 68, 69, 70, 71, 82, 86, 96, 176, 196, 215, 216, 218], "x0": [9, 18, 206, 218], "x1": [9, 18, 206, 216, 218], "x2": [9, 18, 206, 218], "x3": [9, 18, 206, 216, 218], "loop": [9, 34], "fsr": [9, 218, 219], "would": [9, 216, 218], "fsr_word": 9, "bits_inside_word": 9, "index_list_to_expression_str": 9, "readabl": 9, "index_list_to_expression_str_word": 9, "level": [9, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 69, 75, 80, 221], "field_coeffici": 9, "x11": 9, "int_to_byte_arrai": 9, "bit_length": [9, 96], "0s": [9, 11, 12], "1s": [9, 11, 12], "equal": [9, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 92, 93, 101, 108, 109, 111, 118, 119, 120, 121, 136, 140, 143, 195, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 219, 229], "merge_bit": 9, "mix_column_gener": 9, "dimension": 9, "mix_column_generalized_bool_func": 9, "pad": [9, 12, 93], "lookup_t": [9, 10], "output_len": 9, "sbox_bool_func": 9, "bit_posit": [9, 10, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 120, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220], "set_from_hex_str": 9, "hex_str": 9, "transform_gf2nmatrix_to_binmatrix": 9, "gf2nmatrix": 9, "equival": [9, 56, 61, 84, 85, 92], "and_continuous_diffusion_analysi": 10, "input_lst": 10, "real": [10, 229], "constant_continuous_diffusion_analysi": 10, "number_of_output": 10, "linear_layer_continuous_diffusion_analysi": 10, "linear_matrix": 10, "mix_column_generalized_continuous_diffusion_analysi": 10, "mix_column_matrix": 10, "sbox_dictionari": 10, "mix_column": [10, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 116, 196, 215, 218], "precomput": [10, 114, 219], "generic_functions_continuous_diffusion_analysi": 10, "lookup_table_2": 10, "0x00": 10, "0x02": 10, "0x04": 10, "0x06": 10, "0x08": 10, "0x0a": 10, "0x0c": 10, "0x0e": 10, "0x10": 10, "0x12": 10, "0x14": 10, "0x16": 10, "0x18": 10, "0x1a": 10, "0x1c": 10, "0x1e": 10, "0x20": 10, "0x22": 10, "0x24": 10, "0x26": 10, "0x28": 10, "0x2a": 10, "0x2c": 10, "0x2e": 10, "0x30": 10, "0x32": 10, "0x34": 10, "0x36": 10, "0x38": 10, "0x3a": 10, "0x3c": 10, "0x3e": [10, 186], "0x40": 10, "0x42": 10, "0x44": 10, "0x46": 10, "0x48": 10, "0x4a": 10, "0x4c": 10, "0x4e": 10, "0x50": 10, "0x52": 10, "0x54": 10, "0x56": 10, "0x58": 10, "0x5a": 10, "0x5c": 10, "0x5e": 10, "0x60": 10, "0x62": 10, "0x64": 10, "0x66": 10, "0x68": 10, "0x6a": 10, "0x6c": [10, 186], "0x6e": 10, "0x70": 10, "0x72": 10, "0x74": 10, "0x76": 10, "0x78": 10, "0x7a": 10, "0x7c": 10, "0x7e": 10, "0x80": 10, "0x82": 10, "0x84": 10, "0x86": 10, "0x88": 10, "0x8a": 10, "0x8c": 10, "0x8e": [10, 185], "0x90": 10, "0x92": 10, "0x94": 10, "0x96": 10, "0x98": 10, "0x9a": 10, "0x9c": 10, "0x9e": 10, "0xa0": 10, "0xa2": 10, "0xa4": 10, "0xa6": 10, "0xa8": 10, "0xaa": 10, "0xac": 10, "0xae": 10, "0xb0": 10, "0xb2": 10, "0xb4": 10, "0xb6": 10, "0xb8": 10, "0xba": 10, "0xbc": 10, "0xbe": 10, "0xc0": 10, "0xc2": 10, "0xc4": 10, "0xc6": 10, "0xc8": 10, "0xca": 10, "0xcc": 10, "0xce": 10, "0xd0": 10, "0xd2": 10, "0xd4": 10, "0xd6": 10, "0xd8": 10, "0xda": 10, "0xdc": 10, "0xde": 10, "0xe0": 10, "0xe2": 10, "0xe4": 10, "0xe6": 10, "0xe8": 10, "0xea": 10, "0xec": 10, "0xee": 10, "0xf0": 10, "0xf2": 10, "0xf4": 10, "0xf6": 10, "0xf8": 10, "0xfa": 10, "0xfc": 10, "0xfe": [10, 186], "0x1b": 10, "0x19": 10, "0x1f": 10, "0x1d": [10, 187], "0x13": 10, "0x11": 10, "0x17": 10, "0x15": 10, "0x0b": 10, "0x09": 10, "0x0f": 10, "0x0d": 10, "0x03": 10, "0x01": [10, 187], "0x07": 10, "0x05": 10, "0x3b": 10, "0x39": 10, "0x3f": [10, 185, 186, 187], "0x3d": 10, "0x33": 10, "0x31": 10, "0x37": 10, "0x35": 10, "0x2b": 10, "0x29": 10, "0x2f": 10, "0x2d": 10, "0x23": 10, "0x21": 10, "0x27": 10, "0x25": 10, "0x5b": 10, "0x59": 10, "0x5f": 10, "0x5d": 10, "0x53": 10, "0x51": 10, "0x57": 10, "0x55": 10, "0x4b": 10, "0x49": 10, "0x4f": 10, "0x4d": 10, "0x43": 10, "0x41": 10, "0x47": 10, "0x45": 10, "0x7b": 10, "0x79": 10, "0x7f": 10, "0x7d": 10, "0x73": 10, "0x71": 10, "0x77": 10, "0x75": 10, "0x6b": 10, "0x69": 10, "0x6f": 10, "0x6d": 10, "0x63": 10, "0x61": 10, "0x67": 10, "0x65": 10, "0x9b": 10, "0x99": 10, "0x9f": 10, "0x9d": 10, "0x93": 10, "0x91": 10, "0x97": 10, "0x95": 10, "0x8b": 10, "0x89": 10, "0x8f": 10, "0x8d": 10, "0x83": 10, "0x81": 10, "0x87": 10, "0x85": 10, "0xbb": 10, "0xb9": 10, "0xbf": 10, "0xbd": 10, "0xb3": 10, "0xb1": 10, "0xb7": 10, "0xb5": 10, "0xab": 10, "0xa9": 10, "0xaf": 10, "0xad": 10, "0xa3": 10, "0xa1": 10, "0xa7": 10, "0xa5": 10, "0xdb": 10, "0xd9": 10, "0xdf": 10, "0xdd": 10, "0xd3": 10, "0xd1": 10, "0xd7": 10, "0xd5": 10, "0xcb": 10, "0xc9": 10, "0xcf": 10, "0xcd": 10, "0xc3": 10, "0xc1": 10, "0xc7": 10, "0xc5": 10, "0xfb": 10, "0xf9": 10, "0xff": [10, 186], "0xfd": 10, "0xf3": 10, "0xf1": 10, "0xf7": 10, "0xf5": 10, "0xeb": 10, "0xe9": 10, "0xef": 10, "0xed": 10, "0xe3": 10, "0xe1": 10, "0xe7": 10, "0xe5": 10, "lookup_table_3": 10, "0x0": [10, 77, 78, 93, 149, 150, 151], "0x3": 10, "0x6": 10, "0x5": 10, "0xc": 10, "0xa": 10, "0x9": 10, "0xb": [10, 176, 186], "0xd": [10, 176], "0xe": 10, "0x7": 10, "0x4": 10, "0x1": 10, "0x2": 10, "evaluated_y_list_2": 10, "minus1_power_x_s_2": 10, "compute_sbox_precomput": 10, "evaluated_y_list_3": 10, "minus1_power_x_s_3": 10, "evaluated_boolean_funct": 10, "minus1_power_x_t": 10, "2256000000000004e": 10, "modadd_continuous_diffusion_analysi": 10, "modular": [10, 11, 85, 92, 197, 198, 219], "addit": [10, 11, 18, 33, 34, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 92, 192, 195, 197, 198, 199, 203, 204, 209, 210, 211, 212, 221], "modadd_continuous_diffusion_analysis_two_word": 10, "modsub_continuous_diffusion_analysi": 10, "substract": [10, 197, 198, 199], "not_continuous_diffusion_analysi": 10, "or_continuous_diffusion_analysi": 10, "rotate_by_variable_amount_continuous_diffusion_analysi": 10, "rotate_continuous_diffusion_analysi": 10, "sbox_continuous_diffusion_analysi": 10, "evaluated_y_list": 10, "minus1_power_x_": 10, "output_lst": [10, 229], "0100000000000000011102230245": 10, "3949999999999999938937733645": 10, "595000000000000004996003611": 10, "shift_by_variable_amount_continuous_diffusion_analysi": 10, "_input": 10, "02": [10, 26, 28, 29, 30], "004": 10, "44658816949": 10, "shift_continuous_diffusion_analysi": 10, "shit": 10, "sigma_continuous_diffusion_analysi": 10, "xor_continuous_diffusion_analysi": 10, "xor_continuous_diffusion_analysis_two_word": 10, "sbox_lookup_t": 10, "extend": [10, 28, 221], "y": [10, 17, 18, 44, 76, 77, 78, 85, 92, 128, 141, 143, 189, 202, 206, 216, 221, 229], "f": [10, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 77, 78, 92, 127, 128, 141, 143, 178, 206, 221, 229], "theorem": 10, "also": [10, 37, 38, 39, 40, 41, 42, 43, 44, 85, 189, 200, 202, 218, 229], "y_i": 10, "create_lookup_table_by_matrix": 10, "irreducible_polynomial_int_repr": 10, "create_lookup_table_for_finite_field_el": 10, "creat": [10, 14, 26, 28, 29, 30, 31, 33, 34, 35, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 89, 90, 93, 104, 115, 181, 182, 218, 228], "lookup": [10, 184, 185, 186, 187], "tabl": [10, 11, 12, 33, 34, 39, 44, 57, 59, 66, 85, 135, 184, 185, 186, 187, 189, 196, 200, 202, 206, 215, 216, 221], "finit": [10, 221], "extended_and_bit": 10, "extended_left_rotation_by_variable_amount": 10, "rotation_amount_lst": 10, "extended_left_shift_by_variable_amount": 10, "shift_amount_lst": 10, "extended_not_bit": 10, "extended_one_left_rotation_iter": 10, "rotation_stag": 10, "extended_one_left_shift_iter": 10, "shift_stag": 10, "extended_one_right_rotation_iter": 10, "extended_one_right_shift_iter": 10, "extended_right_rotation_by_variable_amount": 10, "extended_right_shift_by_variable_amount": 10, "extended_two_bit_multiplex": 10, "get_mix_column_precomput": 10, "get_sbox_precomput": 10, "sbox_compon": [10, 206], "select_bits_continuous_diffusion_analysi": 10, "bit_vector_and": 11, "matric": [11, 12, 104, 114, 120, 121, 196, 215, 219], "ANDed": [11, 12], "per": [11, 12, 76, 114, 192, 201, 205, 207, 208], "xore": [11, 12], "togeth": [11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 93, 228], "bit_vector_concat": 11, "concaten": [11, 218, 219], "bit_vector_modadd": 11, "bit_vector_modsub": 11, "subtract": [11, 12, 18, 197, 198, 199], "bit_vector_not": 11, "arrai": [11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 96, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "bit_vector_or": 11, "ORed": [11, 12], "bit_vector_rot": 11, "bit_vector_sbox": 11, "bit_vector_shift": 11, "bit_vector_shift_by_variable_amount": 11, "bit_vector_xor": 11, "bit_vector_linear_lay": 11, "bit_vector_mix_column": 11, "mul_tabl": [11, 12], "mixcolumn": [11, 196, 215, 219], "give": [11, 12], "bit_vector_mix_column_poly0": 11, "special": [11, 12], "case": [11, 12, 61, 216], "bit_vector_print_as_hex_valu": 11, "debug": [11, 12], "displai": [11, 12, 95], "purpos": [11, 12, 61, 182], "bit_vector_select_word": 11, "extract": [11, 61, 93, 189, 197, 198, 199, 200, 202, 206], "bit_vector_to_integ": 11, "arr": 11, "unsign": [11, 12], "print_component_info": 11, "component_typ": [11, 188], "byte_vector_and": 12, "byte_vector_modadd": 12, "byte_vector_modsub": 12, "byte_vector_not": 12, "negat": [12, 67, 68, 69, 70, 71, 92, 201], "byte_vector_or": 12, "byte_vector_rot": 12, "bitwis": [12, 28, 41, 42, 74, 75, 189, 190, 194, 201, 205, 207, 208, 219, 224], "byte_vector_sbox": 12, "byte_vector_shift": 12, "shift_smount": 12, "byte_vector_shift_by_variable_amount": 12, "byte_vector_xor": 12, "byte_vector_is_consecut": 12, "l": [12, 37, 92, 132, 136, 184, 195, 203, 204, 209, 210, 211, 212, 221, 227], "consecut": 12, "revers": [12, 218, 219], "byte_vector_linear_lay": 12, "byte_vector_mix_column": 12, "byte_vector_mix_column_poly0": 12, "poli": [12, 206, 218], "byte_vector_print_as_hex_valu": 12, "byte_vector_select_all_word": 12, "unformated_input": 12, "real_bit": 12, "real_input": 12, "words_per_input": 12, "actual_inputs_bit": 12, "pars": 12, "unformatted_input": 12, "involv": [12, 78, 216], "map": [12, 201, 205, 207, 208, 219], "reserv": 12, "cipher_inputs_to_evaluate_vectorized_input": 12, "api": 12, "evaluate_vectorized_outputs_to_integ": 12, "evaluate_vectorized_output": 12, "generate_formatted_input": 12, "po": 12, "get_number_of_bytes_needed_for_bit_s": 12, "get_number_of_consecutive_bit": 12, "start": [12, 31, 34, 35, 43, 44, 69, 70, 75, 80, 81, 89, 90], "decreas": 12, "integer_array_to_evaluate_vectorized_input": 12, "accept": 12, "call": [12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91], "onc": [12, 93], "create_networkx_graph_from_input_id": 14, "deriv": 14, "split_cipher_graph_into_top_bottom": 14, "two": [14, 33, 34, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 92, 93, 96, 140, 176, 189, 190, 192, 194, 197, 198, 199, 200, 201, 202, 205, 207, 208, 216, 218, 221], "sub": [14, 18], "These": [14, 84, 201], "term": 14, "top": [14, 74, 148, 161], "bottom": [14, 74], "form": [14, 18, 76, 78, 84, 85, 92, 206, 224], "convers": 14, "descend": 14, "subgraph": 14, "add_bit_to_bit_list": 15, "bit_list": 15, "add_new_component_to_list": 15, "component_list": [15, 38, 39, 41, 42], "all_input_bits_avail": 15, "available_bit": 15, "all_output_bits_avail": 15, "all_output_updated_bits_avail": 15, "are_equal_compon": 15, "component1": [15, 33, 34], "component2": [15, 33, 34], "are_there_enough_available_inputs_to_evaluate_compon": 15, "all_equivalent_bit": 15, "key_schedule_compon": 15, "are_there_enough_available_inputs_to_perform_invers": 15, "note": [15, 43, 44, 67, 68, 69, 70, 85, 114, 132, 192, 201, 205, 206, 207, 208, 221], "assum": [15, 76], "are_these_bits_avail": 15, "bits_list": 15, "cipher_find_compon": 15, "component_input_bit": 15, "component_invers": 15, "actual": 15, "component_output_bit": 15, "compute_input_id_links_and_input_bit_positions_for_inverse_component_from_available_output_compon": 15, "available_output_compon": 15, "compute_input_id_links_and_input_bit_positions_for_inverse_component_from_input_compon": 15, "delete_orphan_link": 15, "orphan": 15, "equivalent_bits_in_common": 15, "bits_of_an_output_compon": 15, "component_bit": 15, "evaluated_compon": 15, "key_schedule_component_id": 15, "find_correct_ord": 15, "id1": 15, "list1": 15, "id2": 15, "list2": 15, "find_correct_order_for_invers": 15, "find_input_id_link_bits_equival": 15, "inverse_compon": 15, "get_all_bit_nam": 15, "get_all_components_with_the_same_input_id_link_and_input_bit_posit": 15, "get_all_equivalent_bit": 15, "get_available_output_compon": 15, "return_index": 15, "get_cipher_compon": 15, "get_equivalent_input_bit_from_output_bit": 15, "potential_unwanted_compon": 15, "base_compon": 15, "get_key_schedule_component_id": 15, "get_most_recent_intermediate_output": 15, "target_link": 15, "get_output_compon": 15, "get_relative_posit": 15, "target_bit_posit": 15, "is_bit_adjacent_to_list_of_bit": 15, "bit_nam": 15, "list_of_bit_nam": 15, "is_bit_contained_in": 15, "is_intersection_of_input_id_links_nul": 15, "is_output_bits_updated_equivalent_to_input_bit": 15, "output_bits_updated_list": 15, "input_bits_list": 15, "is_possibly_invertible_compon": 15, "order_input_id_links_for_modadd": 15, "remove_components_from_round": 15, "sort_cipher_graph": 15, "sort": [15, 218], "wai": [15, 28, 44, 216, 218], "befor": [15, 218], "inverse_ciph": 15, "sort_input_id_links_and_input_bit_posit": 15, "topological_sort": 15, "round_list": 15, "topolog": 15, "update_available_bits_with_component_input_bit": 15, "update_available_bits_with_component_output_bit": 15, "update_input_links_from_round": 15, "removed_compon": 15, "update_output_bit": 15, "algebraicmodel": [16, 189, 192, 193, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "connection_polynomi": 16, "connect": [16, 221], "equat": [16, 221], "algebraic_model": [16, 189, 192, 193, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "plaintext_y0": [16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "sbox_0_0_x0": [16, 206], "plaintext_y1": [16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "sbox_0_0_x1": [16, 206], "plaintext_y2": [16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "sbox_0_0_x2": [16, 206], "plaintext_y21": 16, "sbox_0_5_x1": 16, "plaintext_y22": 16, "sbox_0_5_x2": 16, "plaintext_y23": 16, "sbox_0_5_x3": 16, "connection_polynomials_at_round": 16, "groebner": 16, "nvar": 16, "96": [16, 184], "228": [16, 173, 174, 221], "144": 16, "192": [16, 39, 113, 114, 120, 121, 132], "state_s": [16, 93, 95, 101, 144], "174": 16, "104": 16, "tea_block_ciph": [16, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 133, 192, 197, 198, 199, 207], "teablockciph": [16, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 133, 192, 197, 198, 199, 207], "tea": [16, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 192, 197, 198, 199, 207, 219], "288": [16, 179, 221], "384": [16, 129, 143, 218], "gift_permut": [16, 152, 201, 202], "giftpermut": [16, 152, 201, 202], "gift": [16, 201, 202, 219], "448": 16, "method_call_flag": 16, "boolean_polynomial_r": [16, 17], "is_boolean_polynomial_r": [16, 17], "ngen": 16, "432": 16, "var_nam": [16, 76], "booleanpolynomialr": [17, 18], "z": [17, 18, 44, 59, 76, 85, 141, 143, 189, 202, 216, 221], "polynomialr": 17, "equality_polynomi": 18, "y0": 18, "y1": 18, "y2": 18, "mod_addition_polynomi": 18, "mod": [18, 195, 196, 197, 198, 199, 201, 203, 204, 209, 210, 211, 212, 215, 216], "carri": [18, 84, 85, 92], "provid": 18, "normal": [18, 84], "coordin": 18, "lx": 18, "ly": [18, 31, 34, 35, 69, 70, 75, 80, 81, 89, 90], "lz": 18, "lc": 18, "v": [18, 66, 85, 178, 216, 221], "f0": 18, "c0": [18, 85], "z0": 18, "c1": [18, 85], "z1": 18, "c2": 18, "z2": 18, "c3": 18, "y3": 18, "z3": [18, 87, 93], "c4": 18, "x4": [18, 218], "y4": 18, "z4": 18, "c5": 18, "x5": [18, 218], "y5": 18, "z5": 18, "c6": 18, "x6": [18, 218], "y6": 18, "z6": 18, "c7": 18, "x7": [18, 218], "y7": 18, "z7": 18, "f1": 18, "vectorspac": 18, "vx": 18, "random_el": 18, "vy": 18, "sub_var": 18, "updat": 18, "f0s_elim": 18, "eliminate_linear_vari": 18, "lambda": [18, 77, 93], "lm": 18, "tail": 18, "str": [18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 66, 67, 72, 74, 75, 76, 77, 92], "nx": 18, "ny": 18, "zz": [18, 66], "nz": 18, "bz": 18, "digit": [18, 66, 221], "padto": [18, 66], "constant_coeffici": 18, "mod_binary_operation_polynomi": 18, "is_addit": 18, "argument": 18, "mod_subtraction_polynomi": 18, "get_bct_oper": 19, "filter_out_strings_containing_substr": 21, "strings_list": 21, "substr": 21, "group_strings_by_pattern": 21, "list_of_data": 21, "mznmodel": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 214, 215, 216], "window_size_list": [22, 23, 25, 27, 32], "probability_weight_per_round": [22, 25, 27, 32], "sat_or_milp": [22, 23, 25, 27, 32, 197, 198, 199], "add_com": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "comment": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "write": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 93], "begin": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "add_constraint_from_str": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "str_constraint": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "add_output_com": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "add_solution_to_components_valu": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "component_solut": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "components_valu": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 86, 87, 88, 89, 90, 93], "output_to_pars": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 86], "solution_numb": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "add_solution_to_components_values_intern": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "component_weight": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "add_solutions_from_components_valu": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "memori": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 74, 75, 93, 221], "model_typ": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93], "solve_tim": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 93], "solver_nam": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93], "solver_output": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "total_weight": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93], "solve_extern": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "build_mix_column_truncated_t": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "coupl": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 216], "mzn_model": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 189, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 214, 215, 216], "93": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 89, 196, 215], "mix_column_truncated_table_mix_column_0_21": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 196, 215], "array2d": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 196, 206, 215, 216], "calculate_bit_posit": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "calculate_bit_valu": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "bit_valu": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93], "calculate_input_bit_posit": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 196], "word_index": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 102, 103, 104, 135, 139, 140, 196], "input_name_1": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 196], "input_name_2": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 196], "new_input_bit_positions_1": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 196], "new_input_bit_positions_2": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 196], "find_possible_number_of_active_sbox": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "activ": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 219], "box": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 56, 61, 155, 184, 185, 186, 187, 189, 200, 202, 206, 221], "abl": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 71, 86], "fix_variables_value_constraint": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "fixed_vari": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93], "step": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 130, 140, 141, 190, 192, 194, 196, 201, 205, 206, 207, 208, 215, 216, 227], "full_model": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "constraint": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 93, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 219, 221], "constraint_typ": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 89, 90, 93], "not_equ": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93], "753": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "util": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 61, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 84, 86, 87, 88, 89, 90, 176, 206, 224, 227], "set_fixed_vari": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93], "integer_to_bit_list": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 44, 67, 68, 72, 73, 74, 77, 78, 86, 87, 88, 89, 90, 93], "fix_variables_value_constraints_for_arx": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "standard": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 72, 73, 75, 76, 78, 80, 81, 87, 88, 89, 90, 92, 93, 139, 140, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 219], "mzn_xor_differential_model_arx_optim": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 192, 197, 198, 199], "mznxordifferentialmodelarxoptim": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 192, 197, 198, 199], "raiden_block_ciph": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 122, 198, 214], "raidenblockciph": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 122, 198, 214], "raiden": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 198, 214, 219], "minizinc": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 190, 192, 194, 197, 198, 199, 205, 207, 208, 214, 216], "build_xor_differential_trail_model": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 89], "key_y0": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "plaintext_y3": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "float_and_lat_valu": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "format_component_valu": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "get_command_for_solver_process": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "input_file_path": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "num_of_processor": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "timelimit": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "get_mix_column_all_input": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "input_bit_positions_1": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "input_id_link_1": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "numb_of_inp_1": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "get_total_weight": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "string_total_weight": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "initialise_model": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "model_constraint": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "retriev": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "traceback": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "most": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "recent": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "last": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 97, 99, 181, 218], "valueerror": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "No": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "output_probability_per_round": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "parse_solver_inform": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "truncat": [22, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 39, 42, 62, 66, 74, 85, 93, 114, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 219, 221], "set_component_solution_valu": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "solv": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 56, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93, 221], "chuf": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "timeout_in_seconds_": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "processes_": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "nr_solutions_": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "random_seed_": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "all_solutions_": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "intermediate_solutions_": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "free_search_": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "optimisation_level_": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "xor_differential_one_solut": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "xor_linear_one_solut": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "deterministic_truncated_xor_differenti": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "deterministic_truncated_xor_differential_one_solut": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "impossible_xor_differenti": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "gecod": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "coin": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "bc": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "processor": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 221], "limit": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 74, 75, 77, 221], "mzn_xor_differential_model": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "mznxordifferentialmodel": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "littl": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 93, 224, 229], "speck_p32_k64_o32_r4": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 70, 81, 86, 87, 88, 89, 90, 93], "solve_for_arx": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "pass": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "str_model_path": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "str_solver": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "interrupt": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "support": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 189, 190, 194, 200, 202, 216], "request": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "satisfact": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "dure": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 201, 207], "optimis": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "free_search": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "allow": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85], "ignor": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "within": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 74, 77, 218], "compil": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "disabl": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "flatten": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "twice": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "improv": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 221], "decis": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "root": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "node": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "probe": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "bound": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 43, 44, 229], "bit_positions_kei": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "statist": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "nsolut": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "weight_constraint": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "total": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 93], "non": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 43, 69, 74, 75, 77, 78, 80, 89, 90, 93, 219, 227, 229], "trail": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 89, 90, 93, 95, 189, 200, 202, 206, 207, 219, 221], "write_minizinc_model_to_fil": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "file_path": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 66, 93, 226], "prefix": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 78, 97, 99, 189, 202, 216], "insid": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 93, 141, 218], "path": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 93, 229], "mznboomerangmodelarxoptim": 23, "top_end_id": 23, "bottom_start_id": 23, "middle_id": 23, "bct_parse_result": 23, "build_all_xor_differential_trails_with_fixed_weight": [23, 32], "fixed_weight": [23, 31, 32, 34, 35, 43, 44, 69, 70, 75, 80, 81, 89, 90], "lowest": [23, 31, 32, 34, 35, 38, 39, 41, 42, 43, 44, 67, 69, 70, 72, 74, 75, 80, 81, 89, 90], "entir": [23, 32, 93], "build_lowest_weight_xor_differential_trail_model": [23, 32], "max_weight": [23, 31, 32, 34, 35, 43, 44, 69, 70, 75, 80, 81, 89, 90], "min_weight": [23, 31, 32, 34, 35, 43, 44, 69, 70, 75, 80, 81, 89, 90], "build_lowest_xor_differential_trails_with_at_most_weight": [23, 32], "fot": [23, 32], "he": [23, 32], "upper": [23, 32, 43, 44, 74, 75, 77], "binary_valu": [23, 24, 32, 87, 89, 90], "connect_round": [23, 32], "link": [23, 32, 38, 39, 62, 218, 221, 227], "rot_0_0_x0": [23, 32], "constraint_permutation_and_key_schedule_separately_by_input_s": [23, 32], "create_boomerang_model": 23, "fixed_variables_for_top_ciph": 23, "fixed_variables_for_bottom_ciph": 23, "create_bottom_ciph": 23, "original_ciph": 23, "create_top_and_bottom_ciphers_from_subgraph": 23, "create_top_ciph": 23, "extend_model_constraint": [23, 32], "extend_vari": [23, 32], "find_all_xor_differential_trails_with_fixed_weight": [23, 31, 32, 34, 43, 69, 75, 80, 89], "fixed_valu": [23, 24, 26, 28, 29, 30, 31, 32, 34, 35, 38, 39, 43, 44, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 87, 89, 90, 93], "dictioanri": [23, 32], "find_all_xor_differential_trails_with_weight_at_most": [23, 31, 32, 34, 43, 69, 75, 80, 89], "greater": [23, 32, 43, 44, 118, 119, 120, 121], "than": [23, 31, 32, 34, 35, 43, 44, 69, 70, 75, 80, 81, 84, 85, 89, 90, 108, 109, 118, 119, 120, 121, 136, 189, 190, 194, 200, 202, 216, 218, 229], "lower": [23, 32, 43, 44, 69, 70, 75, 80, 81, 89, 90], "find_lowest_weight_xor_differential_trail": [23, 31, 32, 34, 43, 69, 71, 75, 80, 89], "disctionari": [23, 32], "find_min_of_max_xor_differential_between_permutation_and_key_schedul": [23, 32], "get_model_constraint": [23, 32], "get_new_input_id_link": 23, "bottom_ciph": 23, "get_probability_vars_from_key_schedul": [23, 32], "get_probability_vars_from_permut": [23, 32], "get_vari": [23, 32], "init_constraint": [23, 32], "static": [23, 32, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 111], "initialize_bottom_ciph": 23, "objective_gener": [23, 32], "mzn_top_ciph": 23, "mzn_bottom_ciph": 23, "parse_components_with_solut": 23, "parse_probability_var": [23, 32], "probability_var": [23, 32], "reduce_ciph": 23, "new_ciph": 23, "remove_compon": [23, 222], "remove_components_not_in_graph": 23, "remove_empty_round": 23, "reset_round_id": 23, "satisfy_gener": [23, 32], "set_max_number_of_carries_on_arx_ciph": [23, 32], "max_number_of_carri": [23, 32], "set_max_number_of_nonlinear_carri": [23, 32], "max_number_of_nonlinear_carri": [23, 32], "setup_bottom_cipher_input": 23, "update_bottom_cipher_input": 23, "initial_nod": 23, "new_input_bit_posit": 23, "p_modadd_0_1_0": [23, 32], "p_modadd_1_2_0": [23, 32], "p_modadd_1_7_0": [23, 32], "p_modadd_2_2_0": [23, 32], "p_modadd_2_7_0": [23, 32], "mznciphermodel": 24, "build_cipher_model": [24, 25, 40, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87], "mzn_cipher_model": 24, "evaluate_model": 24, "final_constraint": 24, "input_constraint": [24, 28], "var": [24, 26, 28, 29, 30, 31, 33, 34, 35, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "cipher_output_3_12": [24, 30, 31], "mznciphermodelarxoptim": 25, "mzn_cipher_model_arx_optim": 25, "mzndeterministictruncatedxordifferentialmodel": [26, 28, 29, 30], "build_deterministic_truncated_xor_differential_trail_model": [26, 27, 28, 29, 30], "minim": [26, 28, 29, 30, 31, 33, 34, 35, 56, 57, 61, 62, 219], "wordwis": [26, 28, 29, 189, 190, 192, 194, 197, 198, 199, 200, 202, 206, 207, 216, 219], "mzn_deterministic_truncated_xor_differential_model": [26, 28, 29, 30], "final_deterministic_truncated_xor_differential_constraint": [26, 28, 29, 30], "find_all_deterministic_truncated_xor_differential_trail": [26, 28, 29, 30], "solve_with_api": [26, 28, 29, 30, 31, 34, 35], "speck_p32_k64_o32_r3": [26, 28, 29, 30], "cipher_output_2_12": [26, 28, 29, 30, 38, 39, 43, 44, 67, 72, 78, 190, 194], "22222222222222202222222222222222": [26, 28, 29, 30], "memory_megabyt": [26, 28, 29, 30, 31, 70, 81, 86, 87, 88, 89, 90, 93], "solving_time_second": [26, 28, 29, 30, 31, 70, 81, 86, 87, 88, 89, 90, 93], "002": [26, 28, 29, 30, 229], "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail": [26, 28, 29, 30, 38, 39, 67, 72], "find_one_deterministic_truncated_xor_differential_trail": [26, 28, 29, 30], "cipher_output_0_6": [26, 28, 29, 30], "22222222222222212222222222222220": [26, 28, 29, 30], "intermediate_output_0_5": [26, 28, 29, 30], "0000000000000000": [26, 28, 29, 30, 31], "0000000000000000000000000000000000000000000000000000000000000000": [26, 28, 29, 30], "modadd_0_1": [26, 28, 29, 30, 197, 198, 199, 216, 218], "2222222222222221": [26, 28, 29, 30], "11111111011111111111111111111111": [26, 28, 29, 30], "rot_0_0": [26, 28, 29, 30, 37, 125, 131, 149, 154, 155, 197, 198, 199, 205, 208, 218], "1111111111111110": [26, 28, 29, 30], "rot_0_3": [26, 28, 29, 30], "1111111111111111": [26, 28, 29, 30], "xor_0_2": [26, 28, 29, 30, 216, 218], "xor_0_4": [26, 28, 29, 30], "2222222222222220": [26, 28, 29, 30], "input_deterministic_truncated_xor_differential_constraint": [26, 28, 29, 30], "127": [26, 28, 29, 30, 34, 39], "count": [26, 28, 29, 30, 84, 221], "output_constraint": [26, 28, 29, 30], "declar": [26, 28, 29, 30, 31, 33, 34, 35, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "both": [26, 28, 29, 30, 34, 61, 132, 190, 194, 197, 198, 199, 206, 221], "output_compon": [26, 28, 29, 30, 190, 194], "48": [26, 28, 29, 30, 38, 39, 67, 72, 124, 176, 216, 218], "output_inverse_constraint": [26, 28, 29, 30], "intermediate_output_0_5_invers": [26, 28, 29, 30], "propagate_determinist": [26, 28, 29, 30], "mzndeterministictruncatedxordifferentialmodelarxoptim": 27, "mzn_deterministic_truncated_xor_differential_model_arx_optim": 27, "target": [28, 37, 67, 68, 69, 70, 71, 86], "combin": [28, 74, 75, 77, 216], "precis": 28, "while": [28, 34], "keep": [28, 61, 218], "track": 28, "done": [28, 40], "To": [28, 44, 219], "do": [28, 56, 61, 67, 68, 69, 70, 85, 207], "so": [28, 57, 140, 206, 218], "domain": 28, "identifi": [28, 85], "uniqu": 28, "nonlinear": 28, "mznhybridimpossiblexordifferentialmodel": 28, "mznimpossiblexordifferentialmodel": [28, 29], "determinist": [28, 29, 39, 42, 66, 74, 75, 79, 85, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 219, 221], "build_hybrid_impossible_xor_differential_trail_model": 28, "initial_round": [28, 29], "middle_round": [28, 29, 39, 42], "final_round": [28, 29], "intermediate_compon": [28, 29, 194], "probabilist": [28, 219], "inconsist": [28, 29, 33, 34], "schedul": [28, 35, 44, 70, 81, 90, 114, 142, 143, 186, 187], "mzn_hybrid_impossible_xor_differential_model": 28, "build_impossible_backward_model": [28, 29], "backward_compon": [28, 29, 64], "clean": [28, 29], "build_impossible_forward_model": [28, 29], "forward_compon": [28, 29], "build_impossible_xor_differential_trail_model": [28, 29], "incosist": [28, 29], "mzn_impossible_xor_differential_model": [28, 29], "build_impossible_xor_differential_trail_with_extensions_model": [28, 29], "extens": [28, 29], "recoveri": [28, 29], "build_improbable_backward_model": 28, "build_improbable_forward_model": 28, "clean_constraint": [28, 29], "set_of_constraint": [28, 29], "clean_inverse_impossible_variables_constraint": [28, 29], "inverse_vari": [28, 29], "inverse_constraint": [28, 29], "clean_inverse_impossible_variables_constraints_with_extens": [28, 29], "clean_repetitions_in_constraint": [28, 29], "constraints_for_const": [28, 29], "constraints_for_key_schedul": [28, 29], "extract_const": [28, 29], "extract_key_schedul": [28, 29], "final_impossible_constraint": [28, 29], "incompat": [28, 29, 39, 42], "lblock_block_ciph": [28, 112, 206], "lblockblockciph": [28, 112, 206], "lblock": [28, 185, 206, 219], "inverse_kei": 28, "inverse_cipher_output_2_19": 28, "intermediate_output_0_0": [28, 127, 128, 218], "intermediate_output_0_12": 28, "intermediate_output_0_18": 28, "intermediate_output_1_0": 28, "inverse_intermediate_output_1_0": 28, "intermediate_output_1_12": [28, 29, 30], "inverse_intermediate_output_1_12": 28, "intermediate_output_1_18": 28, "inverse_intermediate_output_1_18": 28, "inverse_intermediate_output_2_0": 28, "inverse_intermediate_output_2_12": [28, 29], "inverse_intermediate_output_2_18": 28, "present_block_ciph": [28, 38, 39, 67, 72, 117, 195, 196, 203, 204, 206, 209, 210, 211, 212, 215, 218], "presentblockciph": [28, 38, 39, 67, 72, 117, 195, 196, 203, 204, 206, 209, 210, 211, 212, 215, 218], "present": [28, 38, 39, 44, 67, 72, 195, 196, 203, 204, 206, 209, 210, 211, 212, 215, 218, 219, 221], "final_impossible_constraints_with_extens": [28, 29], "inverse_plaintext": [28, 29], "inverse_intermediate_output_0_6": [28, 29], "intermediate_output_2_12": [28, 29, 30], "inverse_intermediate_output_3_12": [28, 29], "cipher_output_4_12": [28, 29, 31, 77], "find_all_impossible_xor_differential_trail": [28, 29], "76": [28, 218], "inverse_cipher_output_3_19": 28, "80": [28, 38, 39, 67, 72, 96, 117, 135, 142, 163, 164, 165, 175, 179, 184, 206, 218, 221], "49": [28, 218, 221], "inverse_cipher_output_17_19": 28, "find_lowest_complexity_impossible_xor_differential_trail": [28, 29], "highest": [28, 29], "known": [28, 29], "inverse_cipher_output_3_12": [28, 29], "find_one_impossible_xor_differential_clust": [28, 29], "unknown": [28, 29, 38, 39, 41, 42, 67, 72, 74, 75, 76, 77, 197, 198, 199], "find_one_impossible_xor_differential_trail": [28, 29], "69": [28, 218], "0x800": 28, "inverse_cipher_output_15_19": 28, "find_one_impossible_xor_differential_trail_with_extens": [28, 29], "forward": [28, 29], "backward": [28, 29], "cipher_output_6_12": [28, 29], "id_link": [28, 29, 120, 220], "curr_ciph": [28, 29], "get_component_round": [28, 29], "get_direct_component_correspond": [28, 29], "get_inverse_component_correspond": [28, 29], "get_inverse_state_key_bits_posit": [28, 29], "get_state_key_bits_posit": [28, 29], "input_impossible_constraint": [28, 29], "input_impossible_constraints_with_extens": [28, 29], "is_cross_round_compon": [28, 29], "discarded_id": [28, 29], "link_constraints_for_trail_with_extens": [28, 29], "components_to_link": [28, 29], "key_schedul": [28, 129, 137, 152, 153], "set_inverse_component_id_in_constraint": [28, 29], "update_sbox_ddt_valid_prob": [28, 31, 34], "valid_prob": [28, 31, 34, 35, 206], "inverse_cipher_output_4_12": 29, "mznwordwisedeterministictruncatedxordifferentialmodel": 30, "final_wordwise_deterministic_truncated_xor_differential_constraint": 30, "mzn_wordwise_deterministic_truncated_xor_differential_model": 30, "plaintext_act": 30, "key_act": [30, 197, 198, 199, 216], "rot_0_0_act": 30, "modadd_0_1_act": 30, "xor_0_2_act": 30, "rot_0_3_act": 30, "xor_0_4_act": 30, "intermediate_output_0_5_act": 30, "intermediate_output_0_6_act": 30, "constant_1_0_act": 30, "rot_1_1": [30, 205, 208], "rot_1_1_act": 30, "modadd_1_2": 30, "modadd_1_2_act": 30, "xor_1_3": 30, "xor_1_3_act": 30, "rot_1_4": 30, "rot_1_4_act": 30, "xor_1_5": 30, "xor_1_5_act": 30, "rot_1_6": [30, 39, 218], "rot_1_6_act": 30, "modadd_1_7": 30, "modadd_1_7_act": 30, "xor_1_8": 30, "xor_1_8_act": 30, "rot_1_9": 30, "rot_1_9_act": 30, "xor_1_10": [30, 37], "xor_1_10_act": 30, "intermediate_output_1_11": 30, "intermediate_output_1_11_act": 30, "intermediate_output_1_12_act": 30, "constant_2_0": [30, 181, 192, 218], "constant_2_0_act": 30, "rot_2_1": 30, "rot_2_1_act": 30, "modadd_2_2": 30, "modadd_2_2_act": 30, "xor_2_3": 30, "xor_2_3_act": 30, "rot_2_4": 30, "rot_2_4_act": 30, "xor_2_5": 30, "xor_2_5_act": 30, "rot_2_6": 30, "rot_2_6_act": 30, "modadd_2_7": 30, "modadd_2_7_act": 30, "xor_2_8": [30, 190, 194], "xor_2_8_act": 30, "rot_2_9": 30, "rot_2_9_act": 30, "xor_2_10": [30, 190, 194], "xor_2_10_act": 30, "intermediate_output_2_11": 30, "intermediate_output_2_11_act": 30, "intermediate_output_2_12_act": 30, "constant_3_0": [30, 218], "constant_3_0_act": 30, "rot_3_1": 30, "rot_3_1_act": 30, "modadd_3_2": 30, "modadd_3_2_act": 30, "xor_3_3": 30, "xor_3_3_act": 30, "rot_3_4": 30, "rot_3_4_act": 30, "xor_3_5": 30, "xor_3_5_act": 30, "rot_3_6": 30, "rot_3_6_act": 30, "modadd_3_7": 30, "modadd_3_7_act": 30, "xor_3_8": 30, "xor_3_8_act": 30, "rot_3_9": 30, "rot_3_9_act": 30, "xor_3_10": 30, "xor_3_10_act": 30, "intermediate_output_3_11": 30, "intermediate_output_3_11_act": 30, "cipher_output_3_12_act": 30, "find_one_wordwise_deterministic_truncated_xor_differential_trail": [30, 41, 42], "input_wordwise_deterministic_truncated_xor_differential_constraint": [30, 41, 42], "milp_modadd": [31, 34], "build_xor_differential_trail_model_templ": [31, 34], "final_xor_differential_constraint": [31, 34], "int_search": [31, 34, 35], "smallest": [31, 34, 35, 185, 186, 187], "indomain_min": [31, 34, 35], "complet": [31, 34, 35, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "have": [31, 34, 35, 43, 44, 67, 69, 70, 72, 75, 76, 80, 81, 85, 89, 90, 206], "By": [31, 34, 35, 43, 44, 69, 70, 75, 80, 81, 89, 90, 156, 218], "interv": [31, 34, 35, 69, 70, 75, 80, 81, 89, 90], "stop": [31, 34, 35, 69, 70, 75, 80, 81, 89, 90], "find_differential_weight": [31, 34], "There": [31, 34, 35, 69, 70, 75, 80, 81, 89, 90], "could": [31, 34, 35, 69, 70, 75, 80, 81, 89, 90], "In": [31, 34, 35, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 89, 90, 91, 140, 141, 176, 189, 216, 218, 221], "run": [31, 34, 35, 43, 44, 69, 70, 75, 80, 81, 82, 89, 90, 91, 97, 99, 140, 219], "speck_p32_k64_o32_r5": [31, 89, 218], "120": 31, "349": 31, "28000010": 31, "850a9520": 31, "statu": [31, 41, 42, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "building_time_second": [31, 34, 68, 70, 73, 81, 89, 90, 93], "0021665096282958984": 31, "find_one_xor_differential_trail": [31, 34, 43, 69, 75, 80, 89], "speck_p32_k64_o32_r2": 31, "cipher_output_1_12": [31, 190], "ffff0000": 31, "find_one_xor_differential_trail_with_fixed_weight": [31, 34, 43, 69, 75, 80, 89], "get_word_operation_xor_differential_constraint": [31, 34], "new_constraint": [31, 34, 35], "input_xor_differential_constraint": [31, 34], "900": [31, 35], "400": [31, 35, 206], "1300": [31, 35], "600": [31, 35, 206], "1500": [31, 35], "800": [31, 35], "300": [31, 35, 206], "1200": [31, 35], "500": [31, 35, 206], "1400": [31, 35], "700": [31, 35], "and_xor_differential_probability_ddt": 31, "numadd": [31, 33, 35, 189, 216], "ddt": [31, 57, 189, 206], "addenda": [31, 33, 35, 189, 197, 198, 199, 216], "simon_block_ciph": [31, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 127, 189, 190, 194, 200, 202, 216], "simonblockciph": [31, 35, 37, 38, 39, 40, 41, 42, 43, 44, 66, 127, 189, 190, 194, 200, 202, 216], "simon": [31, 35, 37, 38, 39, 40, 41, 42, 43, 44, 189, 190, 194, 200, 202, 216, 219, 221], "update_and_or_ddt_valid_prob": 31, "and_already_ad": [31, 35], "cp_declar": [31, 35, 197, 198, 199, 206], "include_word_operations_mzn_fil": 32, "strategi": 32, "min_all_prob": 32, "mznxordifferentialnumberofactivesboxesmodel": [33, 34], "add_additional_xor_constraint": [33, 34], "nmax": [33, 34], "repetit": [33, 34], "reduc": [33, 34, 66, 216, 221], "minimum": [33, 34, 57, 221], "addend": [33, 34], "new": [33, 34, 67, 68, 69, 70, 85, 218, 221, 227], "procedur": [33, 34], "repeat": [33, 34, 66, 78], "mzn_xor_differential_number_of_active_sboxes_model": [33, 34], "128": [33, 34, 41, 42, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 116, 120, 121, 122, 129, 130, 133, 134, 135, 136, 137, 138, 166, 167, 168, 176, 178, 180, 214], "build_xor_differential_trail_first_step_model": [33, 34], "list_of_xor_compon": [33, 34, 196], "188": [33, 34], "possible_sbox": [33, 34], "create_xor_compon": [33, 34, 101, 217], "old_xor_compon": [33, 34], "deepcopi": [33, 34], "xor_component1": [33, 34], "xor_component2": [33, 34], "final_xor_differential_first_step_constraint": [33, 34], "number_of_active_sbox": [33, 34], "table_of_solutions_length": [33, 34], "table_of_solution_length": [33, 34], "get_new_xor_input_links_and_posit": [33, 34], "all_input": [33, 34, 216], "new_numb_of_inp": [33, 34], "get_xor_all_input": [33, 34], "input_xor_differential_first_step_constraint": [33, 34], "xor_xor_differential_first_step_constraint": [33, 34], "xor_compon": [33, 34, 197, 198, 199, 216], "xor_truncated_table_2": [33, 34, 216], "xor_0_31": [33, 34, 190, 194, 216], "build_xor_truncated_t": 33, "xor_truncated_table_3": [33, 216], "mznxordifferentialfixingnumberofactivesboxesmodel": 34, "build_xor_differential_trail_second_step_model": 34, "mzn_xor_differential_trail_search_fixing_number_of_active_sboxes_model": 34, "first_step_solver_nam": 34, "second_step_solver_nam": 34, "choco": 34, "224": [34, 143], "aes_block_cipher_k128_p128_o128_r2": 34, "00000000000000000000000000000000": 34, "cipher_output_1_32": 34, "ffffffffffffffffffffffffffffffff": 34, "993147134780884": 34, "generate_table_of_solut": 34, "first_step_solut": 34, "solve_model": 34, "xor_differential_first_step": 34, "get_solutions_dictionaries_with_build_tim": 34, "build_tim": 34, "word_sbox_0_1": 34, "word_sbox_0_2": 34, "word_sbox_0_3": 34, "word_sbox_0_4": 34, "word_sbox_0_5": 34, "word_sbox_0_6": 34, "word_sbox_0_7": 34, "word_sbox_0_8": 34, "word_sbox_0_9": 34, "word_sbox_0_10": 34, "word_sbox_0_11": 34, "word_sbox_0_12": 34, "word_sbox_0_13": 34, "word_sbox_0_14": 34, "word_sbox_0_15": 34, "word_sbox_0_16": 34, "word_sbox_0_26": 34, "word_sbox_0_27": 34, "word_sbox_0_28": 34, "word_sbox_0_29": 34, "word_sbox_1_0": 34, "word_sbox_1_1": 34, "word_sbox_1_2": 34, "word_sbox_1_3": 34, "word_sbox_1_4": 34, "word_sbox_1_5": 34, "word_sbox_1_6": 34, "word_sbox_1_7": 34, "word_sbox_1_8": 34, "word_sbox_1_9": 34, "word_sbox_1_10": 34, "word_sbox_1_11": 34, "word_sbox_1_12": 34, "word_sbox_1_13": 34, "word_sbox_1_14": 34, "word_sbox_1_15": 34, "word_sbox_1_21": 34, "word_sbox_1_22": 34, "word_sbox_1_23": 34, "word_sbox_1_24": 34, "aes_block_cipher_k128_p128_o128_r2_table_of_solut": 34, "solve_full_two_steps_xor_differential_model": 34, "building_tim": 34, "7489726543426514": 34, "xor_differential_first_step_find_all_solut": 34, "xor_0_0": [34, 105, 106, 116, 117, 130, 137, 156, 158, 159, 171, 172, 206, 218, 223], "19837307929992676": 34, "transform_first_step_model": 34, "attempt": 34, "active_sbox": 34, "ordin": 34, "mznxorlinearmodel": [35, 194], "and_xor_linear_probability_lat": 35, "lat": [35, 189], "mzn_xor_linear_model": [35, 194], "branch_xor_linear_constraint": [35, 44, 70, 81, 90], "plaintext_o": 35, "rot_0_0_i": [35, 205, 208], "xor_3_10_o": 35, "cipher_output_3_12_i": 35, "build_xor_linear_trail_model": [35, 44, 70, 81, 90], "final_xor_linear_constraint": 35, "find_all_xor_linear_trails_with_fixed_weight": [35, 44, 70, 81, 90, 93], "find_all_xor_linear_trails_with_weight_at_most": [35, 44, 70, 81, 90], "73": [35, 44, 70, 81, 90, 218, 221], "find_lowest_weight_xor_linear_trail": [35, 44, 70, 81, 90, 93], "thei": [35, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 89, 90, 91, 195, 203, 204, 206, 209, 210, 211, 212], "find_one_xor_linear_trail": [35, 44, 70, 81, 90], "find_one_xor_linear_trail_with_fixed_weight": [35, 44, 70, 81, 90], "fix_variables_value_xor_linear_constraint": [35, 44, 70, 81, 90], "get_lat_valu": 35, "lat_tabl": 35, "get_word_operation_final_xor_linear_constraint": 35, "input_xor_linear_constraint": 35, "key_o": 35, "1600": [35, 197, 198, 199, 218], "update_and_or_lat_valid_prob": 35, "update_sbox_lat_valid_prob": 35, "weight_xor_linear_constraint": [35, 44, 70, 81, 90], "kind": 37, "associ": [37, 38, 39, 74, 75, 77, 228], "cryptanalysi": [37, 61, 221], "follow": [37, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 102, 103, 104, 106, 132, 137, 141, 142, 143, 176, 206, 216, 219, 227], "some": [37, 41, 42, 56, 61, 71, 85, 86, 93, 106, 114, 137, 216, 221], "instal": [37, 57, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91], "integr": 37, "beforehand": 37, "glpk": [37, 38, 39, 40, 41, 42, 43, 44], "poor": 37, "better": 37, "you": [37, 43, 44, 82, 91, 140, 219], "cbc": [37, 96], "cvxopt": 37, "cplex": 37, "ppl": 37, "choic": 37, "milpmodel": [37, 38, 39, 40, 41, 42, 43, 44, 66, 190, 192, 194, 195, 196, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "n_window_heurist": [37, 38, 39, 40, 41, 42, 43, 44], "binary_vari": [37, 38, 39, 40, 41, 42, 43, 44, 189, 197, 198, 199, 200, 202, 206], "milp_model": [37, 38, 39, 40, 41, 42, 43, 44, 64, 66, 93, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "init_model_in_sage_milp_class": [37, 38, 39, 40, 41, 42, 43, 44, 66, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "cipher_output_1_8": [37, 38, 39, 40, 41, 42, 43, 44, 190, 194], "x_0": [37, 38, 39, 40, 41, 42, 43, 44, 66, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "x_1": [37, 38, 39, 40, 41, 42, 43, 44, 66, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "x_2": [37, 38, 39, 40, 41, 42, 43, 44, 66, 85, 190, 192, 194, 195, 196, 197, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "x_3": [37, 38, 39, 40, 41, 42, 43, 44, 66, 85, 92, 192, 196, 197, 198, 199, 206, 207, 215, 216], "x_4": [37, 38, 39, 40, 41, 42, 43, 44, 66, 195, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "x_5": [37, 38, 39, 40, 41, 42, 43, 44, 196, 205, 206, 207, 208, 215, 216], "x_6": [37, 38, 39, 40, 41, 42, 43, 44, 195, 196, 203, 204, 206, 207, 209, 210, 211, 212, 215, 216], "x_7": [37, 38, 39, 40, 41, 42, 43, 44, 195, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "x_8": [37, 38, 39, 40, 41, 42, 43, 44, 195, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "x_9": [37, 38, 39, 40, 41, 42, 43, 44, 195, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "x_10": [37, 38, 39, 40, 41, 42, 43, 44, 195, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "x_11": [37, 38, 39, 40, 41, 42, 43, 44, 195, 196, 203, 204, 206, 207, 209, 210, 211, 212, 215], "_model": [37, 38, 39, 40, 41, 42, 43, 44, 66], "program": [37, 38, 39, 40, 41, 42, 43, 44, 66, 221], "integer_vari": [37, 38, 39, 40, 41, 42, 43, 44, 189, 197, 198, 199, 200, 202, 206], "intermediate_output_nam": [37, 38, 39, 40, 41, 42, 43, 44], "non_linear_component_id": [37, 38, 39, 40, 41, 42, 43, 44, 206], "external_solver_nam": [37, 38, 39, 40, 41, 42, 43, 44], "intern": [37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 144, 221], "sagemath": [37, 38, 39, 40, 41, 42, 43, 44, 219], "extern": [37, 38, 39, 40, 41, 42, 43, 44, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91], "lp": [37, 38, 39, 40, 41, 42, 43, 44], "outsid": [37, 38, 39, 40, 41, 42, 43, 44], "milp_xor_differential_model": [37, 38, 39, 40, 41, 42, 43, 44, 189, 197, 198, 199, 200, 202, 206], "milpxordifferentialmodel": [37, 38, 39, 40, 41, 42, 43, 44, 189, 197, 198, 199, 200, 202, 206], "add_constraints_to_build_in_sage_milp_class": [37, 38, 39, 40, 41, 42, 43, 44], "weight_precis": [37, 38, 39, 40, 41, 42, 43, 44, 206], "get_independent_input_output_vari": 37, "those": [37, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 115], "msb": [37, 66, 71, 93, 216], "xor_1_10_0_i": 37, "xor_1_10_1_i": 37, "xor_1_10_30_i": 37, "xor_1_10_31_i": 37, "xor_1_10_0_o": 37, "xor_1_10_1_o": 37, "xor_1_10_14_o": 37, "xor_1_10_15_o": 37, "get_input_output_vari": 37, "plaintext_0": [37, 68, 69, 70, 71, 73, 78, 80, 81, 86, 87, 88, 89, 90], "plaintext_1": [37, 68, 69, 70, 71, 73, 78, 80, 81, 86, 87, 88, 89, 90], "plaintext_2": [37, 68, 69, 70, 71, 73, 78, 80, 81, 86, 87, 88, 89, 90], "plaintext_13": 37, "plaintext_14": 37, "plaintext_15": 37, "rot_0_0_0": [37, 197, 198, 199, 205, 208], "rot_0_0_1": [37, 197, 198, 199, 205, 208], "rot_0_0_2": 37, "rot_0_0_13": [37, 197], "rot_0_0_14": [37, 197, 205, 208], "rot_0_0_15": [37, 197, 198, 199, 205, 208], "milpbitwisedeterministictruncatedxordifferentialmodel": [38, 39, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "_model_constraint": [38, 39, 41, 42, 43, 44], "them": [38, 39, 41, 42, 43, 44, 76, 85, 228, 229], "milp_bitwise_deterministic_truncated_xor_differential_model": [38, 39, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "build_bitwise_deterministic_truncated_xor_differential_trail_model": [38, 39, 67, 72], "dict": [38, 39, 41, 42, 43, 67, 72, 74, 75, 76, 77, 93, 189, 197, 198, 199, 201, 205, 206, 208], "see": [38, 39, 41, 42, 44, 67, 71, 72, 76, 85, 86, 189, 200, 202, 206, 218], "get_single_key_scenario_format_for_fixed_valu": [38, 39, 41, 42, 43, 67, 72, 93], "find_one_bitwise_deterministic_truncated_xor_differential_trail": [38, 39, 67, 72], "out": [38, 39, 67, 72, 85, 95, 189, 197, 198, 199, 216], "fix_variables_value_bitwise_deterministic_truncated_xor_differential_constraint": [38, 39], "model_vari": [38, 39, 41, 42, 64], "mipvari": [38, 39, 41, 42, 189, 197, 198, 199, 200, 202, 206], "link_binary_tuples_to_integer_vari": [38, 39], "id_tupl": [38, 39], "pattern": [38, 39, 216, 219], "mean": [38, 39, 96], "input_id": [38, 39, 118, 119, 120, 218], "output_id": [38, 39, 197], "_get_input_output_vari": [38, 39], "input_ids_tupl": [38, 39], "output_ids_tupl": [38, 39], "_get_input_output_variables_tupl": [38, 39], "x_96": [38, 39, 197, 198, 199, 216], "x_97": [38, 39, 197, 198, 199, 216], "x_142": [38, 39], "x_92": [38, 39], "x_93": [38, 39], "x_143": [38, 39], "x_94": [38, 39, 197, 198, 199, 216], "x_95": [38, 39, 197, 198, 199, 216], "trunc_binvar": [38, 39], "milpbitwiseimpossiblexordifferentialmodel": 39, "add_constraints_to_build_fully_automatic_model_in_sage_milp_class": [39, 42], "include_all_compon": [39, 42, 64], "sourc": [39, 42, 61], "milp_bitwise_impossible_xor_differential_model": 39, "occur": [39, 42], "add_constraints_to_build_in_sage_milp_class_with_chosen_incompatible_compon": [39, 42], "build_bitwise_impossible_xor_differential_trail_model": 39, "_forward_ciph": [39, 42], "backward_ciph": [39, 42], "_cipher": [39, 42, 93], "_backward_ciph": [39, 42], "_backward": [39, 42], "find_one_bitwise_impossible_xor_differential_trail": 39, "http": [39, 41, 42, 44, 57, 58, 59, 61, 62, 66, 106, 114, 115, 119, 135, 137, 157, 176, 189, 196, 197, 198, 199, 200, 202, 215, 221, 227], "eprint": [39, 44, 119, 176, 189, 197, 198, 199, 200, 202, 221], "iacr": [39, 41, 42, 44, 57, 58, 59, 119, 176, 189, 196, 197, 198, 199, 200, 202, 215, 221], "org": [39, 41, 42, 44, 57, 58, 59, 106, 119, 137, 176, 189, 196, 197, 198, 199, 200, 202, 215, 221, 227], "2014": [39, 44, 189, 200, 202, 206, 221], "761": 39, "pdf": [39, 41, 42, 44, 119, 135, 157, 176, 189, 197, 198, 199, 200, 202, 221], "cipher_output_10_13": 39, "72": [39, 96, 134, 218], "47": [39, 96, 218], "cipher_output_11_12": 39, "find_one_bitwise_impossible_xor_differential_trail_with_chosen_incompatible_compon": 39, "intermediate_output_5_12": 39, "ascon_sbox_sigma_permut": [39, 147, 195, 196, 203, 204, 209, 210, 211, 212, 215], "asconsboxsigmapermut": [39, 147, 195, 196, 203, 204, 209, 210, 211, 212, 215], "ascon": [39, 195, 196, 201, 203, 204, 206, 209, 210, 211, 212, 215, 218, 219], "191": 39, "p1": [39, 131], "intermediate_output_0_71": 39, "p2": [39, 131], "intermediate_output_1_71": 39, "p3": 39, "intermediate_output_2_71": 39, "p5": 39, "cipher_output_4_71": 39, "sbox_3_56": 39, "find_one_bitwise_impossible_xor_differential_trail_with_fully_automatic_model": 39, "key_backward": 39, "ciphertext_backward": 39, "cipher_output_10_13_backward": 39, "milpciphermodel": 40, "cannot": 40, "inequ": [40, 66, 85, 92, 197, 198, 199, 201, 206, 216, 219], "milp_cipher_model": 40, "milpwordwisedeterministictruncatedxordifferentialmodel": [41, 42, 190, 192, 194, 195, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "fixed_bit": [41, 42], "fixed_word": [41, 42], "milp_wordwise_deterministic_truncated_xor_differential_model": [41, 42, 190, 192, 194, 195, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "build_wordwise_deterministic_truncated_xor_differential_trail_model": [41, 42], "cipher_list": [41, 42, 218], "find_lowest_varied_patterns_wordwise_deterministic_truncated_xor_differential_trail": [41, 42], "fix_variables_value_wordwise_deterministic_truncated_xor_differential_constraint": [41, 42], "exist": [41, 42], "intermediate_output_0_35": [41, 42, 190, 194], "tosc": [41, 42, 57, 58, 59, 196, 215, 221], "php": [41, 42, 57, 58, 59, 196, 215, 221], "articl": [41, 42, 57, 58, 59, 196, 215, 221], "view": [41, 42, 57, 58, 59, 196, 215, 221], "8702": [41, 42, 58, 59, 196, 215, 221], "8294": [41, 42, 58, 59, 196, 215, 221], "github": [41, 42, 61, 114, 115, 197, 198, 199], "com": [41, 42, 61, 62, 66, 114, 115, 135, 197, 198, 199, 221], "td": [41, 42], "mdla": [41, 42], "auxiliary_materi": [41, 42], "blob": [41, 42, 114, 115, 197, 198, 199], "master": [41, 42, 114, 115, 136, 176, 197, 198, 199], "supplementari": [41, 42], "materi": [41, 42], "x_class": [41, 42, 64, 189, 190, 192, 194, 195, 196, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "key_word_0_class": [41, 42], "x_480": [41, 42], "key_word_1_class": [41, 42], "x_481": [41, 42], "cipher_output_1_32_126": [41, 42, 190, 194], "x_3078": [41, 42], "cipher_output_1_32_127": [41, 42, 190, 194], "x_3079": [41, 42], "x_3044": [41, 42], "x_3045": [41, 42], "x_3054": [41, 42], "x_3055": [41, 42], "trunc_wordvar": [41, 42], "milpwordwiseimpossiblexordifferentialmodel": 42, "milp_wordwise_impossible_xor_differential_model": 42, "intermediate_output_0_37": 42, "build_wordwise_impossible_xor_differential_trail_model": 42, "find_one_wordwise_impossible_xor_differential_trail": 42, "find_one_wordwise_impossible_xor_differential_trail_with_chosen_compon": 42, "find_one_wordwise_impossible_xor_differential_trail_with_fully_automatic_model": 42, "mip": [43, 44, 66, 199], "532": 43, "exclude_variables_value_constraint": 43, "ensur": [43, 44, 84, 201, 205, 207, 208], "least": [43, 44, 69, 75, 80, 85, 93], "x_12": [43, 44, 189, 195, 203, 204, 206, 207, 209, 210, 211, 212], "x_13": [43, 44, 195, 196, 203, 204, 206, 207, 209, 210, 211, 212, 215], "x_14": [43, 44, 192, 196, 205, 206, 207, 208, 215], "x_15": [43, 44, 189, 192, 196, 197, 198, 199, 200, 202, 205, 206, 207, 208, 215], "convert_solver_solution_to_dictionari": [43, 44, 93], "end": [43, 44, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 93, 218], "reach": [43, 44], "maximum": [43, 44, 74, 75, 76, 77], "conveni": [43, 44], "necessarili": [43, 44], "is_single_kei": 43, "milpxorlinearmodel": [44, 93, 189, 194, 197, 198, 199, 200, 202, 206], "logarithm": [44, 70, 81, 90], "milp_xor_linear_model": [44, 93, 189, 194, 197, 198, 199, 200, 202, 206], "743": [44, 221], "dummi": [44, 66, 85], "x_316": 44, "x_317": 44, "x_318": 44, "x_319": 44, "exclude_variables_value_xor_linear_constraint": 44, "verifi": [44, 93], "2019": [44, 221], "019": 44, "2016": [44, 197, 198, 199, 221], "407": [44, 197, 198, 199, 221], "747": [44, 221], "page": [44, 219, 221], "973": [44, 189, 200, 202], "reproduc": 44, "0x03805224": 44, "0x00200000": 44, "update_xor_linear_constraints_for_more_than_two_bit": 44, "input_var": [44, 189, 195, 197, 198, 199, 200, 202, 206, 216], "output_var": [44, 189, 195, 197, 198, 199, 200, 202, 206, 216], "and_lat": 56, "and_inequ": 56, "convex_hul": [56, 61], "valid_point": [56, 62, 66, 206], "convex": [56, 61], "hull": [56, 61], "behaviour": [56, 61], "polyhedron": [56, 61, 206], "cutting_off_greedi": [56, 61], "cut": [56, 61], "off": [56, 61], "h": [56, 61, 141, 143, 221], "cutting_off_milp": [56, 61], "number_of_ineq": [56, 61], "necessari": [56, 61], "variant": [56, 61], "might": [56, 61, 114], "faster": [56, 61, 216], "becaus": [56, 61, 85, 141, 142, 143], "later": [56, 61], "itself": [56, 61, 183], "logic": [57, 62, 201, 205, 206, 207, 208, 219], "espresso": [57, 62, 66, 206, 216], "alreadi": [57, 62, 206], "docker": [57, 62, 82, 91], "delete_dictionary_that_contains_inequalities_for_large_sbox": [57, 206], "generate_espresso_input": [57, 66], "valid_transformations_matrix": 57, "generate_product_of_sum_from_espresso": [57, 66], "get_dictionary_that_contains_inequalities_for_large_sbox": 57, "describ": [57, 97, 99, 148, 151, 189, 197, 198, 199, 200, 202, 206], "805": [57, 221], "759": [57, 221], "separ": [57, 67, 68, 69, 70, 71], "pb": 57, "seen": [57, 66, 141, 142, 143, 189, 200, 202, 216], "update_dictionary_that_contains_inequalities_for_large_sbox": 57, "delete_dictionary_that_contains_wordwise_truncated_mds_inequ": 58, "generate_valid_points_for_truncated_mds_matrix": 58, "max_pattern_valu": [58, 59], "output_dictionary_that_contains_wordwise_truncated_mds_inequ": 58, "update_dictionary_that_contains_wordwise_truncated_mds_inequ": 58, "wordsiz": [58, 59], "delete_dictionary_that_contains_wordwise_truncated_input_inequ": 59, "delete_dictionary_that_contains_wordwise_truncated_xor_inequ": 59, "generate_valid_points_for_xor_between_n_input_word": 59, "number_of_word": [59, 110, 113], "between": [59, 61, 66, 85, 92, 136, 216, 219, 221, 229], "o": [59, 221], "truth": 59, "000000": 59, "000101": 59, "001010": 59, "001111": 59, "010001": 59, "010100": 59, "010101": 59, "011011": 59, "011111": 59, "100010": 59, "100111": 59, "101011": 59, "101111": 59, "110011": 59, "110111": 59, "111011": 59, "111111": 59, "pla": 59, "data": [59, 84, 96, 116, 117, 124, 127, 130, 134, 219, 225, 228], "generate_valid_points_input_word": 59, "get_valid_points_for_wordwise_xor": 59, "delta_in_1": 59, "zeta_in_1": 59, "delta_in_2": 59, "zeta_in_2": 59, "output_dictionary_that_contains_wordwise_truncated_input_inequ": 59, "output_dictionary_that_contains_wordwise_truncated_xor_inequ": 59, "update_dictionary_that_contains_wordwise_truncated_input_inequ": 59, "update_dictionary_that_contains_wordwise_truncated_xor_inequalities_between_n_input": 59, "update_dictionary_that_contains_xor_inequalities_for_specific_wordwise_matrix": 59, "mat": [59, 60, 115], "delete_dictionary_that_contains_xor_inequ": 60, "generate_all_possible_points_with_n_bit": 60, "number_of_bit": 60, "generate_impossible_points_for_xor_between_n_input_bit": 60, "output_dictionary_that_contains_xor_inequ": 60, "update_dictionary_that_contains_xor_inequalities_between_n_input_bit": 60, "number_of_input_bit": [60, 216], "update_dictionary_that_contains_xor_inequalities_for_specific_matrix": 60, "gist": 61, "pfasant": 61, "3a2f087e74cd0f2a10853c8a5d036d85": 61, "infeas": 61, "generate_inequalities_for_large_sbox": [61, 206], "care": [61, 71], "small": [61, 185, 186, 187, 206, 219, 221], "larg": [61, 206, 219, 221], "henc": 61, "decid": [61, 85], "comparison": [61, 221], "big_endian": 61, "choos": 61, "transit": [61, 66, 206], "dict_polyhedron": 61, "delete_dictionary_that_contains_inequalities_for_small_sbox": 61, "get_dictionary_that_contains_inequalities_for_small_sbox": 61, "sbox_inequ": 61, "greedi": 61, "crypto": [61, 206, 221], "sbox_pres": 61, "generate_sbox_inequalities_for_trail_search": 61, "sbox_ineq": 61, "to_bit": 61, "update_dictionary_that_contains_inequalities_for_small_sbox": 61, "notion": 62, "discuss": 62, "springer": [62, 184, 221], "chapter": [62, 221], "1007": [62, 221], "978": [62, 221], "031": [62, 221], "26553": [62, 221], "2_3": [62, 221], "delete_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bit": 62, "generate_dict_product_of_sum_from_espresso": 62, "get_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bit": 62, "get_transitions_for_single_output_bit": 62, "update_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bit": 62, "fix_variables_value_deterministic_truncated_xor_differential_constraint": 64, "generate_all_incompatibility_constraints_for_fully_automatic_model": 64, "generate_incompatiblity_constraints_for_compon": 64, "get_word_oper": [65, 83], "delete_espresso_dictionari": 66, "espresso_pos_to_constraint": 66, "espresso_inequ": 66, "itertool": [66, 74, 77], "i1": [66, 85, 206], "i2": 66, "els": [66, 92, 189, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 209, 210, 211, 212, 215, 216], "bit_transit": 66, "join": [66, 93], "milp_and": 66, "a_and_b": 66, "iff": 66, "milp_els": 66, "var_if": 66, "else_constraint": 66, "big_m": 66, "statement": 66, "milp_eq": 66, "a_eq_b": 66, "_integer_vari": 66, "_binary_vari": 66, "milp_generalized_and": 66, "var_list": 66, "a_0": [66, 85], "a_1": [66, 85], "a_n": 66, "a_i": 66, "generalized_and": 66, "general_and": 66, "milp_generalized_xor": 66, "input_var_list": 66, "a_": 66, "milp_geq": 66, "a_geq_b": 66, "milp_great": 66, "a_greater_b": 66, "milp_if_elif_els": 66, "var_if_list": 66, "then_constraints_list": 66, "elif": [66, 216], "then_constraint": 66, "appli": [66, 77, 84, 201, 216, 221], "stackoverflow": 66, "question": 66, "41009196": 66, "elseif": [66, 197, 198, 199, 216], "milp_if_then": 66, "milp_if_then_els": 66, "milp_leq": 66, "a_leq_b": 66, "milp_less": 66, "a_less_b": 66, "set_max": 66, "set_min": 66, "milp_neq": 66, "a_neq_b": 66, "milp_or": 66, "a_or_b": 66, "milp_xor": 66, "milp_xor_trunc": 66, "input_1": [66, 197, 198, 199], "input_2": [66, 197, 198, 199], "encod": [66, 77, 192, 201, 205, 206, 207, 208, 216], "v0": [66, 216], "v1": [66, 216], "line": 66, "wa": [66, 102, 103, 104, 182, 216], "milp_xor_truncated_wordwis": 66, "91": [66, 214], "output_espresso_dictionari": 66, "overrid": [67, 68, 69, 70, 200], "superclass": [67, 68, 69, 70], "advantag": [67, 68, 69, 70], "handl": [67, 68, 69, 70, 71, 85, 141, 142, 143, 144, 176], "claus": [67, 68, 69, 70, 71, 72, 73, 76, 78, 79, 80, 81, 84, 85, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "cryptominisat": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 90], "therefor": [67, 68, 69, 70], "cnf": [67, 68, 69, 70, 71, 84, 86, 189, 202, 206, 207, 216, 219], "rule": [67, 68, 69, 70, 71], "space": [67, 68, 69, 70, 71], "nor": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "dash": [67, 68, 69, 70, 71], "liter": [67, 68, 69, 70, 71], "prepend": [67, 68, 69, 70, 71], "introduc": [67, 68, 69, 70], "were": [67, 68, 69, 70, 84], "overridden": [67, 68, 69, 70], "further": [67, 68, 69, 70, 71, 82, 86, 91], "inform": [67, 68, 69, 70, 71, 74, 82, 86, 93, 206, 218, 221], "visit": [67, 68, 69, 70, 82], "cmssatdeterministictruncatedxordifferentialmodel": 67, "counter": [67, 68, 69, 70, 71, 72, 73, 76, 79, 80, 81, 86, 87, 88, 89, 90, 176, 229], "sequenti": [67, 68, 69, 70, 71, 72, 73, 76, 79, 80, 81, 86, 87, 88, 89, 90, 216], "compact": [67, 68, 69, 70, 71, 72, 73, 76, 79, 80, 81, 102, 103, 105, 110, 112, 113, 114, 116, 117, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 181, 219], "satbitwisedeterministictruncatedxordifferentialmodel": [67, 72], "number_of_unknown_vari": [67, 72, 74, 75, 76, 77], "sat_model": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 194, 197, 198, 199, 206], "sat_bitwise_deterministic_truncated_xor_differential_model": [67, 72], "build_generic_sat_model_from_dictionari": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "component_and_model_typ": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "calculate_component_weight": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "out_suffix": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 92], "output_values_dict": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "cryptominisat_ext": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "semi": [67, 72, 79, 197, 198, 199, 219, 221], "sat_semi_deterministic_truncated_xor_differential_model": [67, 72, 76, 79], "satsemideterministictruncatedxordifferentialmodel": [67, 72, 76, 79], "list_of_constraint": [67, 72, 76, 79], "expected_set_of_constraint": [67, 72, 76, 79], "plaintext_0_0": [67, 72, 76, 79], "plaintext_0_1": [67, 72, 76, 79], "plaintext_1_0": [67, 72, 76, 79], "plaintext_1_1": [67, 72, 76, 79], "plaintext_2_0": [67, 72, 76, 79], "plaintext_2_1": [67, 72, 76, 79], "plaintext_3_0": [67, 72, 76, 79], "plaintext_3_1": [67, 72, 76, 79], "ciphertext_0_0": [67, 72, 76, 79], "ciphertext_0_1": [67, 72, 76, 79], "ciphertext_1_0": [67, 72, 76, 79], "ciphertext_1_1": [67, 72, 76, 79], "ciphertext_2_0": [67, 72, 76, 79], "ciphertext_2_1": [67, 72, 76, 79], "ciphertext_3_0": [67, 72, 76, 79], "ciphertext_3_1": [67, 72, 76, 79], "rais": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 114], "keyerror": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90], "except": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 229], "satmodel": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 197, 198, 199, 206], "sboxes_ddt_templ": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 206], "sboxes_lat_templ": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 206], "_sage": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "subprocess": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91], "work": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "embed": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 221], "sat_cipher_model": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "satciphermodel": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "tea_p64_k128_o64_r32": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "intermediate_output_31_15": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "8ca8d5de0906f08": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "sign": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 93, 189, 192, 197, 198, 199, 200, 201, 202, 205, 207, 208, 213, 214, 216, 229], "cipher_output_31_16": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "dummy_hw_0_0_0": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "dummy_hw_0_0_1": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "dummy_hw_0_0_2": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "dummy_hw_0_61_3": [67, 72], "dummy_hw_0_62_3": [67, 72], "cipher_output_2_12_30_0": [67, 72], "cipher_output_2_12_31_0": [67, 72], "cmssatciphermodel": 68, "cms_model": [68, 69, 70], "cms_cipher_model": 68, "find_missing_bit": [68, 73, 87], "flow": [68, 73, 87], "endian": [68, 73, 78, 87, 93, 224, 229], "list_length": [68, 73, 78, 87, 93], "int_valu": [68, 73, 87, 93], "0xaffec7": [68, 73, 87], "speck_p32_k64_o32_r22": [68, 73], "intermediate_output_21_11": [68, 73, 87], "1411": [68, 73], "cipher_output_21_12": [68, 73, 87], "affec7": [68, 73, 87], "019376516342163086": [68, 73], "plaintext_3": [68, 69, 70, 71, 73, 78, 80, 81, 86, 87, 88, 89, 90], "ciphertext_0": [68, 69, 70, 71, 73, 78, 80, 81], "ciphertext_1": [68, 69, 70, 71, 73, 78, 80, 81], "ciphertext_2": [68, 69, 70, 71, 73, 78, 80, 81], "ciphertext_3": [68, 69, 70, 71, 73, 78, 80, 81], "sat_xor_differential_model": [68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81], "satxordifferentialmodel": [68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81], "dummy_hw_0_77_6": [68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81], "dummy_hw_0_78_6": [68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81], "hw_modadd_2_7_14": [68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81], "hw_modadd_2_7_15": [68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81], "cmssatxordifferentialmodel": 69, "build_xor_differential_trail_and_checker_model_at_intermediate_output_level": [69, 75, 80], "pair": [69, 75, 80, 206, 219, 229], "cms_xor_differential_model": 69, "almost": [69, 70, 75, 80, 81, 89, 90], "alwai": [69, 70, 75, 80, 81, 89, 90, 181, 189, 192, 197, 198, 199, 200, 202, 218], "guess": [69, 70, 75, 80, 81, 89, 90], "longest": [69, 70, 75, 80, 81, 89, 90], "set_window_size_heuristic_by_round": [69, 75, 80], "set_window_size_heuristic_by_component_id": [69, 75, 80], "window_size_by_component_id_valu": [69, 75, 80], "number_of_full_window": [69, 75, 80], "full_window_oper": [69, 75, 80], "at_least": [69, 75, 80], "window_size_by_round_valu": [69, 75, 80], "set_window_size_weight_pr_var": [69, 75, 80], "window_size_weight_pr_var": [69, 75, 80], "window_size_full_window_var": [69, 75, 80], "window_size_number_of_full_window": [69, 75, 80], "cmssatxorlinearmodel": 70, "satxorlinearmodel": [70, 81, 194], "cms_xor_linear_model": 70, "plaintext_0_o": [70, 81, 90], "rot_0_0_0_i": [70, 81, 90, 205, 208], "plaintext_1_o": [70, 81, 90], "rot_0_0_1_i": [70, 81, 90, 205, 208], "plaintext_2_o": [70, 81, 90], "rot_0_0_2_i": 70, "xor_2_10_13_o": 70, "cipher_output_2_12_29_i": 70, "xor_2_10_14_o": [70, 81, 90], "cipher_output_2_12_30_i": [70, 81, 90, 190], "xor_2_10_15_o": [70, 81, 90], "cipher_output_2_12_31_i": [70, 81, 90, 190], "sat_xor_linear_model": [70, 81, 194], "187": [70, 81, 90], "010079622268676758": [70, 81], "plaintext_3_o": [70, 81, 90], "ciphertext_0_o": [70, 81], "ciphertext_1_o": [70, 81], "ciphertext_2_o": [70, 81], "ciphertext_3_o": [70, 81], "translat": [71, 189, 202, 216], "dimac": 71, "whenev": 71, "section": [71, 85, 86], "remark": [71, 93], "compliant": 71, "signific": 71, "Be": 71, "inspect": [71, 229], "well": 71, "sattruncatedxordifferentialmodel": [72, 75, 76, 79], "satdifferentiallinearmodel": 74, "list_of_compon": 74, "middle_part_model": 74, "sat_bitwise_deterministic_truncated_xor_differential_constraint": [74, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "concret": [74, 228], "build_xor_differential_linear_model": 74, "num_unknown_var": [74, 75], "unknown_window_size_configur": [74, 75, 76], "constrain": [74, 75, 77, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "sat_differential_linear_model": 74, "component_model_typ": [74, 75], "middle_part_compon": [74, 77], "bottom_part_compon": [74, 77], "component_model_list": [74, 77], "being": [74, 75, 77, 85], "find_lowest_weight_xor_differential_linear_trail": 74, "written": [74, 75, 77], "syntax": [74, 75, 77], "solver_default": [74, 75, 77], "middl": 74, "metadata": [74, 75], "usag": [74, 75, 221], "find_one_differential_linear_trail_with_fixed_weight": 74, "regular": [74, 75, 221], "chain": [74, 77], "0x05020402": 74, "ciphertext_differ": 74, "cipher_output_5_12": 74, "0x00040004": [74, 77], "sat_heterogeneous_model": [74, 77], "cadical_ext": 74, "regular_compon": [74, 75, 77], "truncated_compon": [74, 75], "linear_compon": [74, 77], "impos": [74, 77], "satprobabilisticxortruncateddifferentialmodel": 75, "dict_of_compon": [75, 77], "build_xor_probabilistic_truncated_differential_model": 75, "number_of_unknowns_per_compon": [75, 76], "sat_probabilistic_xor_truncated_differential_model": 75, "component_object": 75, "sat_semi_deterministic_truncated_xor_differential_constraint": [75, 190, 192, 194, 197, 198, 199, 205, 208, 216], "find_lowest_weight_xor_probabilistic_truncated_differential_trail": 75, "find_one_xor_probabilistic_truncated_differential_trail_with_fixed_weight": 75, "build_semi_deterministic_truncated_xor_differential_trail_model": 76, "find_one_semi_deterministic_truncated_xor_differential_trail": 76, "window": [76, 219], "unknown_window_size_configuration_constraint": 76, "variables_list": [76, 216], "cardinality_constraint_method": 76, "cardin": 76, "group_tripl": 76, "hw_": 76, "_modadd_x_y_z": 76, "pvarnam": 76, "qvarnam": 76, "rvarnam": 76, "exactli": 76, "shareddifferencepairedinputdifferentiallinearmodel": 77, "high": [77, 78, 96, 221, 229], "distinguish": [77, 78, 93, 221], "shareddifferencepairedinputdifferentialmodel": [77, 78], "mask": [77, 85, 92, 216], "design": 77, "condit": [77, 78, 92, 201, 205, 207, 208], "oplu": [77, 78], "applic": [77, 85, 155, 189, 200, 202, 221], "inner": 77, "build_shared_difference_paired_input_differential_model": [77, 78], "sat_shared_difference_paired_input_differential_linear_model": 77, "component_dict": 77, "find_one_shared_difference_paired_input_differential_linear_trail_with_fixed_weight": 77, "top_part_compon": 77, "0x00302000": 77, "kissat_ext": 77, "mathemat": [78, 221], "sat_shared_difference_paired_input_differential_model": 78, "find_one_shared_difference_paired_input_differential_trail_with_fixed_weight": 78, "0x00102000": 78, "0x81028108": 78, "add_prefix_id_to_compon": 78, "bind": 81, "bit_bind": 81, "divid": 82, "categori": 82, "action": [82, 91], "other": [82, 85, 106, 110, 112, 113, 114, 116, 117, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 148, 156, 161, 216, 221], "abstract": 82, "bare": [82, 91], "metal": [82, 91], "sinc": [82, 91, 189, 192, 202, 216], "imag": [82, 91], "convert_claus": 84, "generate_window_size_claus": 84, "first_input_differ": 84, "second_input_differ": 84, "output_differ": [84, 93, 206], "aux_var": 84, "simplifi": [84, 206, 216], "conjunct": 84, "ones": [84, 201], "formula": [84, 85, 92], "below": [84, 114], "sympi": 84, "notat": [84, 189, 202, 216], "formula_temp": 84, "And": [84, 85, 92, 202, 216, 219, 229], "aux": 84, "Not": [84, 85, 189, 202, 216, 219], "serv": 84, "global": [84, 115, 135], "full": 84, "auxiliari": 84, "n_window_heuristic_help": 84, "generating_n_window_claus": 84, "window_size_plus_on": 84, "load_list": 84, "filenam": [84, 96], "load": [84, 114], "pickl": 84, "save_list": 84, "save": [84, 96, 97, 99, 115], "consum": [85, 93], "offer": 85, "directli": 85, "basic": 85, "lipmaa": [85, 92, 221], "moriai": [85, 92, 221], "cornerston": 85, "like": [85, 93, 141, 142, 143], "glucos": 85, "minisat": 85, "unfortun": 85, "stdin": 85, "suppli": 85, "best": [85, 221], "cms_add_clauses_to_solv": 85, "numerical_cnf": 85, "overwritten": 85, "cnf_and": 85, "variable_0": [85, 92], "variable_1": [85, 92], "variable_": 85, "operand": [85, 92, 189, 190, 194, 198, 200, 202, 216], "cnf_and_differenti": 85, "diff_in_0": 85, "diff_in_1": 85, "diff_out": 85, "hw": [85, 92], "and_0": 85, "and_1": 85, "and_out": 85, "cnf_and_linear": 85, "mask_in_0": 85, "mask_in_1": 85, "mask_out": 85, "in_0": 85, "in_1": 85, "cnf_and_seq": 85, "out_id": 85, "in_id": 85, "cnf_carri": 85, "previous_carri": [85, 92], "Or": [85, 92, 189, 216, 219], "bitvector": [85, 92], "comut": 85, "addendum": [85, 92], "previou": [85, 92], "c_3": 85, "y_3": [85, 92], "c_2": [85, 92], "cnf_carry_comp2": 85, "notwis": 85, "cnf_equival": 85, "variable_2": 85, "cnf_hw_lipmaa": 85, "alpha": [85, 92, 132], "beta": [85, 92, 132], "gamma": [85, 92, 132], "hw_i": 85, "alpha_": 85, "beta_": 85, "gamma_": 85, "hw_6": 85, "alpha_7": 85, "beta_7": 85, "gamma_7": 85, "cnf_inequ": 85, "left_var": 85, "right_var": 85, "side": 85, "cnf_lipmaa": 85, "beta_1": [85, 92], "dummy_i": 85, "alpha_i": 85, "beta_i": 85, "gamma_i": 85, "next": [85, 92], "hw_10": 85, "dummy_10": 85, "beta_11": 85, "alpha_10": 85, "beta_10": 85, "gamma_10": 85, "cnf_modadd_inequ": 85, "chaskei": [85, 221], "cnf_n_window_heuristic_on_w_var": 85, "hw_bit_id": 85, "cnf_or": 85, "cnf_or_seq": 85, "cnf_result_comp2": 85, "r_3": 85, "cnf_vshift_fals": 85, "shift_id": 85, "state": [85, 101, 102, 103, 104, 105, 120, 121, 123, 129, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 176, 177, 179, 185, 207, 218], "assign": 85, "s_1": 85, "i_1": 85, "k_7": 85, "cnf_vshift_id": 85, "in_shift": 85, "s_3": 85, "i_3": 85, "i_4": 85, "cnf_xor": 85, "cnf_xor_seq": 85, "variables_n": 85, "whole": [85, 206], "i_0": 85, "r_7": 85, "a_7": 85, "b_7": 85, "c_7": 85, "d_7": 85, "cnf_xor_trunc": 85, "behav": 85, "r0": 85, "r1": 85, "a0": 85, "a1": 85, "b0": 85, "b1": 85, "cnf_xor_truncated_seq": 85, "i0": [85, 206], "create_numerical_cnf": 85, "get_cnf_bitwise_truncate_constraint": 85, "get_cnf_semi_deterministic_window_1": 85, "a_t0": 85, "a_t1": 85, "a_t2": 85, "a_v0": 85, "a_v1": 85, "a_v2": 85, "b_t0": 85, "b_t1": 85, "b_t2": 85, "b_v0": 85, "b_v1": 85, "b_v2": 85, "c_t0": 85, "c_t1": 85, "c_t2": 85, "c_v0": 85, "c_v1": 85, "p0": 85, "q0": 85, "get_cnf_semi_deterministic_window_2": 85, "a_t3": 85, "a_v3": 85, "b_t3": 85, "b_v3": 85, "c_t3": 85, "get_cnf_semi_deterministic_window_3": 85, "a_t4": 85, "a_v4": 85, "b_t4": 85, "b_v4": 85, "c_t4": 85, "get_cnf_truncated_linear_constraint": 85, "get_semi_deterministic_cnf_window_0": 85, "modadd_trunc": 85, "next_carri": 85, "modadd_truncated_lsb": 85, "modadd_truncated_msb": 85, "numerical_cnf_to_dimac": 85, "run_minisat": 85, "solver_spec": 85, "dimacs_input": 85, "input_file_nam": 85, "output_file_nam": 85, "run_parkissat": 85, "parkissat": 85, "run_sat_solv": 85, "host": 85, "env_vars_str": 85, "pipe": 85, "run_yic": 85, "yice": 85, "lib": [86, 87, 88, 89, 90, 92, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "smtmodel": [86, 87, 88, 89, 90, 206], "cipher_input_vari": [86, 87, 88, 89, 90], "smt_model": [86, 87, 88, 89, 90, 194, 206], "key_62": [86, 87, 88, 89, 90, 216], "key_63": [86, 87, 88, 89, 90, 216], "assert": [86, 87, 88, 89, 90, 92, 114, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "get_xor_probability_constraint": [86, 87, 88, 89, 90], "bit_id": [86, 87, 88, 89, 90, 206], "templat": [86, 87, 88, 89, 90, 206, 219], "z3_ext": [86, 87, 88, 89, 90], "09": [86, 87, 88, 89, 90], "update_constraints_for_equal_typ": [86, 87, 88, 89, 90], "update_constraints_for_not_equal_typ": [86, 87, 88, 89, 90], "mathsat_pars": 86, "yices_pars": 86, "z3_parser": 86, "smtciphermodel": 87, "smt_cipher_model": 87, "speck_k64_p32_o32_r22": 87, "90fe": 87, "smtdeterministictruncatedxordifferentialmodel": 88, "smtxordifferentialmodel": 89, "smt_xor_differential_model": 89, "002946615219116211": 89, "cryptominismt": 89, "get_operand": 89, "smtxorlinearmodel": [90, 194], "smt_xor_linear_model": [90, 194], "cipher_input_xor_linear_vari": 90, "key_62_o": 90, "key_63_o": 90, "06": 90, "65": [90, 218], "67": [90, 218], "003168344497680664": 90, "get_component_hex_valu": 92, "variable2valu": 92, "smt_and": 92, "smt_assert": 92, "smt_carri": 92, "smt_distinct": 92, "distinct": [92, 176, 201], "smt_equival": 92, "smt_impli": 92, "anteced": 92, "consequ": [92, 206], "implic": [92, 206], "smt_ite": 92, "altern": 92, "t": [92, 141, 142, 143, 160, 193, 221, 227, 229], "ite": [92, 214], "smt_lipmaa": 92, "smt_not": 92, "smt_or": 92, "smt_xor": 92, "add_arc": 93, "arc": [93, 218], "curr_input_bit_id": 93, "intermediate_output_arc": 93, "previous_output_bit_id": 93, "check_if_implemented_compon": 93, "mb": 93, "set_component_value_weight_sign": 93, "239": 93, "175": 93, "500000000000": 93, "239000000000000": 93, "differential_checker_permut": 93, "input_differ": [93, 206], "experiment": 93, "differential_linear_checker_for_block_cipher_single_kei": 93, "output_mask": 93, "block_siz": 93, "key_siz": [93, 123], "fixed_kei": 93, "differential_linear_checker_for_permut": 93, "help": 93, "differential_truncated_checker_permut": 93, "differential_truncated_checker_single_kei": 93, "extract_bit_posit": 93, "binary_str": 93, "unknow": 93, "extract_bit": 93, "find_sign_for_one_xor_linear_trail": 93, "trail_with_sign": 93, "ab": [93, 221], "final_sign": 93, "find_sign_for_xor_linear_trail": 93, "trails_with_sign": 93, "get_bit_bind": 93, "format_func": 93, "point": [93, 114, 218], "rel": [93, 218], "speck_without_key_schedul": [93, 194], "key_0_2_0_o": 93, "xor_0_2_16_i": [93, 216], "key_0_2_10_o": 93, "xor_0_2_26_i": 93, "key_0_2_11_o": 93, "xor_0_2_27_i": 93, "xor_1_8_7_o": 93, "xor_1_10_7_i": 93, "cipher_output_1_12_7_i": 93, "xor_1_8_8_o": 93, "xor_1_10_8_i": 93, "cipher_output_1_12_8_i": 93, "xor_1_8_9_o": 93, "xor_1_10_9_i": 93, "cipher_output_1_12_9_i": 93, "intermediate_output_0_6_0_i": [93, 194], "xor_0_2_0_o": [93, 216], "xor_0_4_0_i": 93, "intermediate_output_0_6_10_i": 93, "xor_0_2_10_o": 93, "xor_0_4_10_i": 93, "intermediate_output_0_6_11_i": 93, "xor_0_2_11_o": 93, "xor_0_4_11_i": 93, "intermediate_output_0_6_7_i": 93, "xor_0_2_7_o": 93, "xor_0_4_7_i": 93, "intermediate_output_0_6_8_i": 93, "xor_0_2_8_o": 93, "xor_0_4_8_i": 93, "intermediate_output_0_6_9_i": 93, "xor_0_2_9_o": 93, "xor_0_4_9_i": 93, "get_previous_output_bit_id": 93, "get_related_key_scenario_format_for_fixed_valu": 93, "desir": 93, "endia": [93, 225], "lsb": 93, "print_components_valu": 93, "0x1234": [93, 184], "0xabcd": 93, "set_component_solut": 93, "hexadecim": 93, "abcd1234": 93, "0x0000": [93, 218], "avoid": 93, "match": 93, "shared_difference_paired_input_differential_checker_permut": 93, "shareddifferencepairedinputdifferenti": 93, "shared_difference_paired_input_differential_linear_checker_permut": 93, "shareddifferencepairedinputdifferentiallinear": 93, "to_bias_for_correlation_measur": 93, "to_bias_for_probability_measur": 93, "to_bias_for_xor_linear_trail": 93, "06306815147399902": 93, "to_correlation_for_bias_measur": 93, "to_correlation_for_probability_measur": 93, "to_correlation_for_xor_linear_trail": 93, "10187196731567383": 93, "to_probability_for_bias_measur": 93, "to_probability_for_correlation_measur": 93, "to_probability_for_xor_linear_trail": 93, "13295412063598633": 93, "83": 93, "write_model_to_fil": 93, "model_to_writ": 93, "directori": [93, 95], "finish": 93, "suggest": 93, "graph_representation_of_the_ciph": 93, "solver_typ": 93, "txt": [93, 228], "speck32_64_r22_sat": 93, "anyth": 93, "model_fil": 93, "write_solution_to_fil": 93, "compos": 93, "previous_result": 93, "cipher_id_solver_nam": 93, "speck32_64_r22_cryptominisat": 93, "test_report": 95, "clean_report": 95, "output_dir": 95, "home": 95, "runner": 95, "_work": 95, "doc": [95, 227], "create_heatmap_subplot": 95, "graph_data": 95, "save_as_datafram": 95, "fixed_input": 95, "fixed_output": 95, "fixed_test": 95, "save_as_imag": 95, "show_as_hex": 95, "fixed_input_differ": 95, "key_state_s": 95, "output_directori": 95, "show_word_permut": 95, "show_var_shift": 95, "show_var_rot": 95, "show_theta_xoodoo": 95, "show_theta_keccak": 95, "show_shift_row": 95, "show_sigma": 95, "show_revers": 95, "show_permu": 95, "show_multi_input_non_linear_logical_oper": 95, "show_modular": 95, "show_modsub": 95, "show_const": 95, "show_rot": 95, "show_sbox": 95, "show_mix_column": 95, "show_shift": 95, "show_linear_lay": 95, "show_xor": 95, "show_modadd": 95, "show_and": 95, "show_or": 95, "show_not": 95, "show_plaintext": 95, "show_kei": 95, "show_intermediate_output": 95, "show_cipher_output": 95, "show_input": 95, "show_output": 95, "graphic": 95, "bool": [95, 218], "wether": 95, "show_": 95, "avalanche_test_result": 95, "averag": 95, "save_as_json": 95, "save_as_latex_t": 95, "show_graph": 95, "datasetgener": 96, "generate_avalanche_dataset": 96, "input_index": [96, 97, 99], "save_fil": 96, "plaintest": 96, "bit_stream": 96, "statistical_test": [96, 97, 99], "dataset_gener": 96, "237": 96, "generate_cbc_dataset": 96, "number_of_blocks_in_one_sampl": 96, "163": 96, "156": 96, "33": [96, 202, 218], "37": [96, 218], "90": [96, 221, 229], "178": 96, "59": [96, 218], "124": [96, 221], "118": 96, "221": 96, "generate_correlation_dataset": 96, "generate_high_density_dataset": 96, "ratio": 96, "densiti": 96, "exmapl": 96, "taken": [96, 102, 103, 104, 114, 135, 216], "generate_low_density_dataset": 96, "low": [96, 221, 229], "generate_random_dataset": 96, "get_cipher_outputs_for_cbc_dataset": 96, "get_cipher_outputs_for_correlation_dataset": 96, "inputs_fix": 96, "get_cipher_outputs_for_density_dataset": 96, "inputs_dens": 96, "datasettyp": 96, "enum": 96, "enumer": [96, 221], "cipher_block_chaining_mod": 96, "high_dens": 96, "low_dens": 96, "get_low_density_sequ": 96, "set_testing_data_amount": 96, "diehardertest": 97, "dieharder_statistical_test": 97, "test_typ": [97, 99], "bits_in_one_sequence_diehard": 97, "number_of_sequences_diehard": 97, "round_start": [97, 99], "round_end": [97, 99], "dieharder_report_folder_prefix": 97, "dieharder_statistics_report": 97, "dieharder_test_opt": 97, "unpars": [97, 99], "folder": [97, 99], "go": [97, 99], "compat": [97, 99], "report": [97, 99, 219, 221, 228], "dieharder_test": 97, "dieharder_avalanche_test_result": 97, "niststatisticaltest": 99, "nist_statistical_test": 99, "bits_in_one_sequ": 99, "number_of_sequ": 99, "nist_report_folder_prefix": 99, "nist_statistics_report": 99, "statistical_test_option_list": 99, "111111111111111": 99, "nist_test": 99, "nist_avalanche_test_result": 99, "0x2b7e151628aed2a6abf7158809cf4f3c": 101, "0x6bc1bee22e409f96e93d7e117393172a": 101, "0x3ad77bb40d7a3660a89ecaf32466ef97": 101, "create_constant_compon": 101, "create_key_sbox_compon": 101, "key_rot": 101, "create_mix_column_compon": 101, "shift_row_compon": 101, "create_rotate_compon": 101, "remaining_xor": 101, "create_round_kei": 101, "create_round_output_compon": 101, "add_round_kei": [101, 114, 117, 144], "create_sbox_compon": [101, 124, 144], "first_add_round_kei": 101, "create_shift_row_compon": 101, "sboxes_compon": [101, 124, 144], "key_sboxes_compon": 101, "xor1": 101, "aradiblockciph": [102, 103], "sub_keys_zero": [102, 103, 104, 110, 112, 135], "transformations_flag": [102, 103, 104, 110, 112, 135], "gremw24": [102, 103, 104, 221], "aradi_block_ciph": 102, "0x1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100": [102, 103, 104], "83791582030165712186104466959690447122": [102, 103, 104], "get_round_key_id": [102, 103, 104], "round_i": [102, 103, 104, 110, 113, 169], "l_function": [102, 103, 104], "xy_id_link": [102, 103, 104], "x_bit": 102, "y_bit": 102, "round_index": [102, 103, 104], "m_function": [102, 103, 104, 120], "xy_input_bit": [102, 103, 104], "round_funct": [102, 103, 104, 106, 110, 112, 113, 123, 129, 131, 135, 137, 143, 145, 146, 147, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 185], "round_kei": [102, 103, 104, 106, 110, 111, 113, 114, 116, 125, 126, 127, 128, 137], "update_kei": [102, 103, 104, 105, 112, 135, 185], "get_key_word_bit_index": [102, 103, 104], "aradiblockciphersbox": 103, "aradi_block_cipher_sbox": 103, "aradiblockciphersboxandcompactlinearmap": 104, "instead": [104, 206, 207, 216], "tradit": 104, "aradi_block_cipher_sbox_and_compact_linear_map": 104, "aradi_linear_layer_bitarrai": 104, "input_bitarrai": 104, "a_shift": 104, "b_shift": 104, "c_shift": 104, "circular_shift_left_bitarrai": 104, "circular": 104, "create_linear_lay": 104, "shift_a": 104, "shift_b": 104, "shift_c": 104, "baksheeshblockciph": 105, "35": [105, 190, 194, 218], "baksheesh_block_ciph": 105, "apply_bit_permut": 105, "apply_round_const": 105, "apply_sbox_lay": 105, "balletblockciph": 106, "www": [106, 135, 137, 189, 200, 202, 221], "jcr": [106, 137], "cacrnet": [106, 137], "cn": [106, 137], "en": [106, 135, 137], "13868": [106, 137], "cnki": [106, 137], "000335": 106, "0xe60e830ca56ec84814fbd2579993d435": 106, "0xcd52c514213c9632514fb60a64840881": 106, "0xc1c2e89c1581d166f3c87b5999f87a9f": 106, "0xc419afdd747886b9f8e6890a3db19fa3": 106, "0x8e1d7bede15b5fae9e67b09c734829149b5e7f8d02f49fccaa1437574d9f792b": 106, "0x636f07e9df66d2ec34d0ad3bb87e0f79": 106, "0xfdc0bf9c6bfeb2ffd160128e5190af6cdad291114d953986de472ad8be6ea8c7": 106, "0x19f29ab90c31da41d2013ed7128338ad7eacb494fae0572801c30948454cb1ca": 106, "0x2d07ee91d634c27f3155f9e575bdc634acaa611e3654c4ce06ea130e9bc394e": 106, "ballet_block_ciph": 106, "46": [106, 218, 221], "0x00000000000000010000000200000003": 106, "0x00000000000000040000000000000005": 106, "0x911090b9308acdd426341f12be355b11": 106, "check_paramet": [106, 137], "key_schedule_n2n": 106, "key_0": [106, 137, 214], "key_1": [106, 137, 197, 198, 199, 214], "t_0": 106, "t_1": 106, "rc": [106, 137, 149, 150, 151, 154, 155], "key_schedule_nn": 106, "state_0": 106, "state_1": 106, "state_2": 106, "state_3": 106, "last_round": 106, "round_initi": [106, 131, 137], "bea1blockciph": 107, "bea": 107, "bea1_block_ciph": 107, "0x8cdd0f3459fb721e798655298d5c1": 107, "0x47a57eff5d6475a68916": 107, "0x439d5298656eccc67de": 107, "xor_round_kei": 107, "key_stat": [107, 120, 121], "cipher_st": 107, "desblockciph": 108, "number_of_sbox": [108, 109, 114], "less": [108, 109, 111, 121, 136, 206, 229], "des_block_ciph": 108, "0x133457799bbcdff1": 108, "0x0123456789abcdef": [108, 109], "0x85e813540f0ab405": [108, 109], "desexactkeylengthblockciph": 109, "des_exact_key_length_block_ciph": 109, "des_ciph": 109, "0x12695bc9b7b7f8": 109, "hightblockciph": 110, "hight_block_ciph": 110, "modadd_0_0": [110, 122, 139, 218], "internal_st": [110, 113], "create_sub_kei": 110, "sub_key_temp_list": 110, "final_transform": 110, "plaintext_list": 110, "whitening_key_list": 110, "get_numbers_of_round": [110, 113], "initial_transform": 110, "init_input": [110, 113], "temp_subkey_gener": 110, "master_kei": 110, "whitening_key_gener": 110, "kasumiblockciph": 111, "kasumi_block_ciph": 111, "0x9900aabbccddeeff1122334455667788": 111, "0xfedcba0987654321": 111, "0x514896226caa4f20": 111, "derived_kei": 111, "fi_function1": 111, "ki_id": 111, "ki_posit": 111, "fl_function": 111, "sub_kei": 111, "fo_funct": 111, "init_halv": 111, "key_der": 111, "13985955387709807565": 112, "leablockciph": 113, "reorder_input_and_output": 113, "lea_block_ciph": 113, "get_ith_key128": 113, "number_of_oper": 113, "delta_const": 113, "left_rotations_list": 113, "get_ith_key192": 113, "get_ith_key256": 113, "format_output": 113, "input_bit_positions_lst": 113, "lowmcblockciph": 114, "lowmc_block_ciph": 114, "linear_layer_0_0": [114, 218], "picnic": 114, "microsoft": 114, "unit_test": 114, "vectorset": 114, "l1": 114, "0x80000000000000000000000000000000": 114, "0xabff0000000000000000000000000000": 114, "0x0e30720b9f64d5c2a7771c8c238d8f70": 114, "0xb5df537b000000000000000000000000": 114, "0xf77db57b000000000000000000000000": 114, "0x0e5961e9992153b13245af243dd7ddc0": 114, "l3": 114, "0x800000000000000000000000000000000000000000000000": 114, "0xabff00000000000000000000000000000000000000000000": 114, "0xa85b8244344a2e1b10a17bab043073f6bb649ae6af659f6f": 114, "0xb5df537b0000000000000000000000000000000000000000": 114, "0xf77db57b0000000000000000000000000000000000000000": 114, "0x210bbc4a434b32db1e85ae7a27fee9e41582fac21d035aa1": 114, "l5": 114, "38": [114, 218], "0x8000000000000000000000000000000000000000000000000000000000000000": 114, "0xabff000000000000000000000000000000000000000000000000000000000000": 114, "0xb8f20a888a0a9ec4e495f1fb439abdde18c1d3d29cf20df4b10a567aa02c7267": 114, "0xf77db57b00000000000000000000000000000000000000000000000000000000": 114, "0xb5df537b00000000000000000000000000000000000000000000000000000000": 114, "0xeeecce6a584a93306daea07519b47ad6402c11dd942aa3166541444977a214c5": 114, "picnic3": 114, "exact": [114, 219], "129": [114, 221], "136": [114, 221], "error": [114, 221], "0x8000000000000000000000000000000000": 114, "0xabff000000000000000000000000000000": 114, "0x2fd7d5425ee35e667c972f12fb153e9d80": 114, "0xab22425149aa612d7fff137220275b1680": 114, "0x4b992353a60665bf992d035482c1d27900": 114, "0x2a4062d835c593ea19f822ad242477d280": 114, "0xe73af29cfc7ae53e5220d31e2e5917da80": 114, "0x304ba7a8de2b5cf887f9a48ab7561bf680": 114, "0x5cd2c355328efde9f378c16123d33fb300": 114, "0x30f33488532d7eb8a5f8fb4f2e63ba5600": 114, "0xc26a5df906158dcb6ac7891da9f49f7800": 114, "0xb43b65f7c535006cf27e86f551bd01580": 114, "0xf8f7a225de77123129107a20f5543afa7833076653ba2b29": 114, "0x81b85dfe40f612275aa3f9199139ebaae8dff8366f2dd34": 114, "0xb865ccf3fcda8ddbed527dc34dd4150d4a482dcbf7e9643c": 114, "0x95ef9ed7c37872a7b4602a3fa9c46ebcb84254ed0e44ee9f": 114, "0x2405978fdaad9b6d8dcdd18a0c2c0ec68b69dd0a3754fe38": 114, "0x33e8b4552e95ef5279497706bce01ecb4acb860141b7fc43": 114, "0xddaf0f9d9edd572069a8949faea0d1fd2d91ef262b411caf": 114, "0x569d7d822300943d9483477427e88ea227a2e3172c04bcd3": 114, "0xaeeb9d5b61a2a56dd598f7da26dfd78cc992e0aea3fc2e39": 114, "0x869870ae6547ad0afef27793170d96bc78e040096944808f": 114, "255": [114, 123, 197, 198, 199, 216], "0xd4721d846dd14dba3a2c41501c02da282ecafd72df77992f3967efd6e8f3f356": 114, "0x7c20be53b6d6008149e19a34b97d9684a0914caf9f7f38b2499811369c3f53da": 114, "0x8863f129c0387ae5a402a49bd64927c4c65964fb8531b0d761b161b4c97b755": 114, "0x3b6e4b63cc8b08268b6781d5a629d6e03020c1c048d4684161b90ad73339126": 114, "0x6df9e78d0fc1b870dabe520514b959636a42304bf43a2408524506c81ea30b14": 114, "0x9e5178420520b8cca529595b80c4703b2dcf2a0730643a6f412798605f052b68": 114, "0x0f19fcc8bc18869aab8e4fe81e9767d18cfe715081929f92963b4000000626f8": 114, "0xb071c6d4a377e551254c5dc401a3d08acb99609f418a8c2207f5122b5a17fe9a": 114, "0xf7616dc514fd0e1028561d098aafa54c34be728cf24a5024df17b9cc2e33fbfa": 114, "0x4448c70ac3863021be232c63381687cd5defb50ba28d7b268e19727baebc679a": 114, "add_output_compon": [114, 131, 157, 158, 159, 170, 171, 172], "plaintext_id": 114, "add_round_const": 114, "rk_id": 114, "define_number_of_round": [114, 139, 140], "define_number_of_sbox": 114, "n_sbox": 114, "load_const": 114, "adapt": [114, 115], "thorkn": 114, "dat": [114, 115], "lowmc_generate_matric": 114, "sbox_lay": [114, 117], "update_key_regist": [114, 117], "key_id": [114, 116], "generate_matric": 115, "repo": 115, "grain_ssg": 115, "grain": [115, 219], "lsfr": 115, "shrink": 115, "instantiate_matrix": 115, "gen": 115, "instanti": 115, "maxim": 115, "rank": [115, 221], "generat": 115, "main": 115, "arg": 115, "blocksiz": 115, "keysiz": 115, "lowmc_constants_p": 115, "_k": 115, "_r": 115, "xor_matrix_valu": 115, "columns_m": 115, "rows_n": 115, "key_add": 116, "round_key_id": 116, "shuffle_cel": 116, "sub_cel": 116, "permutation_lay": [117, 184], "princeblockciph": 118, "prince_block_ciph": 118, "0xffffffffffffffff0000000000000000": 118, "0x0000000000000000": [118, 119, 120, 121], "0x9fb51935fc3df524": 118, "generate_first_round": [118, 119], "current_st": [118, 119], "get_k0_prim": 118, "key_component_id": 118, "get_last_round": [118, 119], "pos_whiten": [118, 119], "final_xor": [118, 119], "pre_whiten": [118, 119], "prince_cor": [118, 119], "xor_initi": [118, 119], "get_m_prim": [118, 119], "get_shift_rows_matrix": [118, 119], "get_shift_rows_matrix_invers": [118, 119], "princev2blockciph": 119, "princev2": 119, "technic": 119, "along": 119, "here": [119, 206], "2020": [119, 189, 200, 202, 221], "1269": 119, "prince_v2_block_ciph": 119, "prince_v2": 119, "0x00000000000000000000000000000000": 119, "0x0125fc7359441690": 119, "qarmav2blockciph": [120, 121], "number_of_lay": [120, 121], "tweak_bit_s": [120, 121, 124, 134], "qarma": [120, 121], "v2": [120, 121, 219], "qarmav2_block_ciph": 120, "0x0123456789abcdeffedcba9876543210": [120, 121, 137], "0x7e5c3a18f6d4b2901eb852fc9630da74": [120, 121], "0x2cc660354929f2ca": [120, 121], "input_po": 120, "constants_initi": [120, 121], "constants_upd": [120, 121], "direct_round": [120, 121], "tweak_stat": [120, 121], "tweak_permut": [120, 121], "constants_st": 120, "first_round_start": [120, 121], "inverse_round": [120, 121], "key_initi": [120, 121, 129, 131], "key_upd": [120, 121], "last_round_end": [120, 121], "majority_funct": [120, 121], "o_funct": [120, 121], "reflector": [120, 121], "state_mask": 120, "state_rot": 120, "state_sbox": 120, "tweak_initi": [120, 121], "tweak_upd": 120, "tweak_shuffl": 120, "update_single_const": [120, 121], "qarmav2mixcolumnblockciph": 121, "version": [121, 155, 206], "diffus": [121, 219, 221], "howev": [121, 216], "mai": [121, 221], "effici": [121, 221], "qarmav2_with_mixcolumn_block_ciph": 121, "round_const": [121, 154, 155], "right_shift_amount": [122, 133, 138], "left_shift_amount": [122, 133, 138], "rc5blockciph": 123, "2040": 123, "rc5_block_ciph": 123, "0x0001020304050607": 123, "0x00010203": 123, "0x23a8d72": 123, "compute_magic_const": 123, "first_round": [123, 146, 147], "key_expans": 123, "scarfblockciph": 124, "240": 124, "scarf_block_ciph": 124, "f_function": 124, "ti": 124, "add_subkei": [124, 134], "create_and_compon": 124, "and_compon": [124, 189, 200, 202], "create_rot_compon": 124, "create_sigma_compon": 124, "tweakey_schedul": 124, "simeckblockciph": [125, 126], "simeck_block_ciph": 125, "feistel_funct": [125, 126, 127, 128], "update_keys_buff": [125, 126], "keys_buff": [125, 126], "simecksboxblockciph": 126, "simeck_sbox_block_ciph": 126, "simeck_sbox": 126, "generate_round_kei": [127, 128], "simonsboxblockciph": 128, "simon_sbox_block_ciph": 128, "simon_sbox": 128, "skinnyblockciph": 129, "skinny_block_ciph": 129, "rc2": 129, "state_initi": [129, 157, 158, 159, 180], "sparxblockciph": 130, "sparx_block_ciph": 130, "print_cipher_structure_as_python_dictionary_to_fil": [130, 136, 143, 156], "graph_represent": [130, 136, 143, 156], "k_4_128": 130, "k_4_64": 130, "k_8_256": 130, "arx_box": 130, "arx_input": 130, "assign_functions_based_on": 130, "lambda_2": 130, "lambda_4": 130, "get_number_of_steps_from": 130, "rotation_alpha": 131, "rotation_beta": 131, "speedyblockciph": 132, "lmm": [132, 221], "2021": [132, 189, 200, 202, 221], "pleas": 132, "speedy_block_ciph": 132, "0xa13a632451070e4382a27f26a40682f3fe9ff68028d24fdb": 132, "0x764c4f6254e1bff208e95862428faed01584f4207a7e8477": 132, "0x01da25a93d1cfc5e4c0b74f677eb746c281a260193b7755a": 132, "shift_0_0": [133, 138, 207, 218], "threefishblockciph": 134, "threefish_block_ciph": 134, "subkei": 134, "subkey_schedul": 134, "word_permut": 134, "twineblockciph": 135, "36": [135, 207, 218], "nec": 135, "rd": 135, "tg": 135, "symenc": 135, "twine_lc11": 135, "twine_block_ciph": 135, "0x123456789abcdef": 135, "0x00112233445566778899": 135, "0x7c1f0f80b1df9c28": 135, "0x00112233445566778899aabbccddeeff": 135, "0x979ff9b379b5a9b8": 135, "get_word_bit_index": 135, "key_length": 136, "twofish_key256_r16": 136, "0xd43bb7556ea32e46f2a282b7d45b4e0d57ff739d4dc92c1bd7fc01700cc8216f": 136, "0x90afe91bb288544f2c32dc239b2635e6": 136, "0x6cb4561c40bf0a9705931cb6d408e7fa": 136, "h_function": 136, "l_bit": 136, "ublockblockciph": 137, "000334": 137, "0x32122bedd023c429023470e1158c147d": 137, "0x0123456789abcdeffedcba9876543210000102030405060708090a0b0c0d0e0f": 137, "0x64accd6e34cac84d384cd4ba7aeadd19": 137, "0xd8e9351c5f4d27ea842135ca1640ad4b0ce119bc25c03e7c329ea8fe93e7bdf": 137, "ublock_block_ciph": 137, "key_2": [137, 197, 198, 199, 214], "key_3": 137, "state_left": 137, "state_right": 137, "blake2hashfunct": 139, "1024": [139, 214], "state_bit_s": [139, 140, 163, 164, 165, 175, 179], "rot_amount": [139, 140, 169], "accordingli": [139, 140], "configur": [139, 140, 207], "hash_funct": [139, 140, 141, 142, 143, 144], "blake2_hash_funct": 139, "column_step": [139, 140], "data_word_id": [139, 140], "data_word_rang": [139, 140], "state_word_id": [139, 140], "state_word_rang": [139, 140], "define_permut": [139, 140], "define_rotation_amount": [139, 140], "diagonal_step": [139, 140], "state_transform": [139, 140], "m0": [139, 140], "m1": [139, 140], "blakehashfunct": 140, "512": [140, 143, 177, 179, 214], "diagon": [140, 169], "blake_hash_funct": 140, "define_const": 140, "origin": [141, 142, 143], "rfc": [141, 142, 143], "1321": 141, "strictli": [141, 142, 143], "adher": [141, 142, 143], "symmetr": [141, 142, 143, 221], "md5hashfunct": 141, "just": [141, 142, 143, 144, 192, 195, 203, 204, 209, 210, 211, 212], "md5_hash_funct": 141, "0x5175656c2066657a20736768656d626f20636f70726520646176616e74692e8000000000000000000000000000000000000000000000000000000000000000f8": 141, "digest": [141, 142, 143, 144], "0x3956fba8c05053e5a27040b8ab9a7545": 141, "add_and_component_in_md5": 141, "component_0": [141, 142, 143], "component_1": [141, 142, 143], "add_modadd_component_in_md5": 141, "add_modadd_component_in_md5_for_x": 141, "add_not_component_in_md5": 141, "add_or_component_in_md5": 141, "add_rotate_component_in_md5": 141, "add_round_output_component_in_md5": 141, "add_xor_component_in_md5": 141, "md5_step": 141, "3174": 142, "sha": [142, 143], "sha1hashfunct": 142, "sha1_hash_funct": 142, "0x43686961726180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030": [142, 143], "0x04f0c8e0efe316e609390a3d98e97f5acc53c199": 142, "add_and_component_in_sha1": 142, "add_modadd_component_in_sha1": 142, "add_rotate_component_in_sha1": 142, "add_round_output_component_in_sha1": 142, "compute_temp_and_s_30_b": 142, "ft_b_c_d": 142, "rounds_0_19": 142, "rounds_20_39": 142, "rounds_40_59": 142, "6234": 143, "famili": [143, 185, 186, 187, 221], "sha2hashfunct": 143, "sha2_hash_funct": 143, "sha256": 143, "0x0d8d2647a12b0d544989a6b03603b8b3c27e2c4e0be08671745366d1a8bc4d95": 143, "add_and_component_sha2": 143, "add_modadd_component_sha2": 143, "add_rotate_component_sha2": 143, "add_round_output_component_sha2": 143, "add_xor_component_sha2": 143, "compute_bsig0_bsig1": 143, "compute_ch": 143, "compute_maj": 143, "compute_ssig0_ssig1": 143, "kt": 143, "whirlpoolhashfunct": 144, "whirlpool_hash_funct": 144, "0x61626380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018": 144, "0x4e2448a4c6f486bb16b6562c73b4020bf3043e3a731bce721ae1b303d97e6d4c7181eebdb6c57e277d0e34957114cbd6c797fc9d95d8b582d225292076d4eef5": 144, "create_mix_row_compon": 144, "shift_column_compon": 144, "create_round_constant_compon": 144, "create_shift_column_compon": 144, "asconpermut": [145, 201], "ascon_permut": [145, 201], "ci": [145, 146, 147, 152, 153, 157, 158, 159, 162, 170, 171, 172], "asconsboxsigmanomatrixpermut": [146, 206], "ascon_sbox_sigma_no_matrix_permut": [146, 206], "state_of_compon": [148, 161, 169], "cipher_famili": [148, 161, 169], "odd": [148, 161], "addition": [148, 207], "dey2023": 148, "bottom_half_quarter_round": [148, 161, 177], "top_half_quarter_round": [148, 161, 177], "gastonpermut": 149, "gaston_permut": 149, "0x88b326096bebc6356ca8fb64bc5ce6caf1ce3840d819071354d70067438689b5f17fe863f958f32b": [149, 150, 151], "0x1f4ad9906da6a2544b84d7f83f2bddfa468a0853578a00e36c05a0506df7f66e4efb22112453c964": [149, 150, 151], "0x1ba89b5b5c4583b622135709ae53417d9847b975e9ec9f3dce042df2a402591d563ec68fc30307ea": [149, 150, 151], "0xffffffffffffffff0123456789abcdeffedcba9876543210aaaaaaaaaaaaaaaa0101010101010101": [149, 150, 151], "0x3117d51b14937067338f17f773c13f79dfb86e0868d252ab0d461d35eb863de708bce3e354c7231a": [149, 150, 151], "gaston_chi": 149, "gaston_iota": [149, 150, 151], "gaston_rho_east": [149, 150, 151], "gaston_rho_west": [149, 150, 151], "gaston_round_funct": [149, 150, 151], "gaston_theta": [149, 150, 151], "gastonsboxpermut": 150, "gaston_sbox_permut": 150, "0x00000000000000010000000000000001000000000000000100000000000000010000000000000001": [150, 151], "0x202d7fa691663e77043cb03594656fcdf6747f2da9cd9200ec3380fde8ec84d565247e6763406084": [150, 151], "gaston_chi_sbox": [150, 151], "gastonsboxthetapermut": 151, "easi": 151, "gaston_sbox_theta_permut": 151, "and_0_0": [152, 166, 168, 218], "round_key_u": [152, 153], "round_key_v": [152, 153], "giftsboxpermut": 153, "gift_sbox_permut": 153, "gimlipermut": [154, 155], "gimli_permut": 154, "sp_box": [154, 155], "big_swap": [154, 155], "small_swap": [154, 155], "gimlisboxpermut": 155, "gimli_sbox_permut": 155, "graincorepermut": 156, "grain_core_permut": 156, "grain_cor": 156, "160": [156, 163, 164, 165], "gc": 156, "keccakinvertiblepermut": 157, "nvlpub": 157, "nist": [157, 219], "gov": 157, "nistpub": 157, "fip": 157, "202": 157, "keccak_invertible_permut": 157, "theta_keccak_0_0": [157, 218], "chi_definit": [157, 158, 159, 170, 171, 172], "get_ci": [157, 158, 159, 229], "iota_definit": [157, 158, 159, 170, 171, 172], "rho_and_pi_definit": [157, 158, 159], "theta_definit": [157, 158, 159, 170, 171, 172], "keccakpermut": 158, "keccak_permut": 158, "add_round_output_linear": [158, 171], "add_round_output_nonlinear": [158, 171], "keccaksboxpermut": 159, "keccak_sbox_permut": 159, "photonpermut": 160, "photon_permut": 160, "component_rc": 160, "components_": 160, "salsapermut": 161, "salsa_permut": 161, "sparklepermut": 162, "number_of_block": [162, 229], "number_of_step": 162, "sparkle_permut": 162, "alzett": 162, "state_x": 162, "state_i": 162, "alzette_round": 162, "rotate_x": 162, "rotate_i": 162, "ell_funct": 162, "constant_ci": 162, "constant_r": 162, "spongentpifsrpermut": 163, "spongent_pi_fsr_permut": 163, "spongentpi": [163, 164, 165], "icounter_upd": [163, 164], "icount": [163, 164], "const_0": [163, 164, 178], "spongentpipermut": 164, "spongent_pi_permut": 164, "spongentpiprecomputationpermut": 165, "spongent_pi_precomputation_permut": 165, "tinyjambuwordbasedpermut": 166, "tinyjambu_32bits_word_permut": 166, "tinyjambufsrwordbasedpermut": 167, "tinyjambu_fsr_32bits_word_permut": 167, "not_const": 167, "tinyjambupermut": 168, "tinyjambu_permut": 168, "add_intermediate_output_component_latin_dances_permut": 169, "get_input_bit_positions_latin_d": 169, "half_like_round_function_latin_d": 169, "init_latin_dances_ciph": 169, "super_class": 169, "quarter_round_index": 169, "init_state_latin_d": 169, "print_state_id": 169, "sub_quarter_round_latin_d": 169, "p1_index": 169, "p2_index": 169, "p3_index": 169, "xoodooinvertiblepermut": 170, "xoodoo_invertible_permut": 170, "theta_xoodoo_0_0": [170, 218], "plane": [170, 171, 172, 229], "apply_sbox_to_each_3bit_column": [170, 172], "planes_new": [170, 172], "rhoeast_definit": [170, 171, 172], "rhowest_definit": [170, 171, 172], "rotate_x_z": [170, 171, 172], "rotx": [170, 171, 172], "rotz": [170, 171, 172], "xoodoopermut": 171, "xoodoo_permut": 171, "xoodoosboxpermut": 172, "xoodoo_sbox_permut": 172, "xoodoo_permutation_sbox": 172, "a51streamciph": [173, 193], "frame_bit_s": [173, 174], "number_of_normal_clocks_at_initi": [173, 174], "stream_ciph": [173, 174, 175, 176, 177, 178, 179, 180, 193], "a5_1_stream_ciph": [173, 193], "a51": [173, 193], "229": [173, 174], "fsr_1_0": [173, 174, 193], "0x48c4a2e691d5b3f7": 173, "frame": [173, 174], "0b0010110010000000000000": 173, "keystream": [173, 174, 176, 178, 179], "0x534eaa582fe8151ab6e1855a728c093f4d68d757ed949b4cbe41b7c6b": 173, "regs_initi": 173, "regs_siz": 173, "reg": 173, "fsr_descript": 173, "a52streamciph": 174, "a5_2_stream_ciph": 174, "a52": 174, "0x003fffffffffffff": 174, "0b1000010000000000000000": 174, "0xf4512cac13593764460b722dadd51200350ca385a853735ee5c889944": 174, "biviumstreamciph": [175, 193], "iv_bit_s": [175, 178, 179, 180], "177": [175, 221], "number_of_initialization_clock": [175, 178, 179, 180, 193], "708": 175, "keystream_bit_len": [175, 176, 179, 193], "clock": [175, 179, 218], "bivium_stream_ciph": [175, 193], "biv": 175, "0xffffffffffffffffffff": 175, "iv": [175, 178, 179, 180], "ks": [175, 176, 179, 180], "0x30d0e5ede563dee67884718977510a4c22661cf128d8f75af4a2708276014d83": 175, "0xffffffffff0000000000": 175, "0xffffffffff": 175, "0xdebe55784f853606399af3f6f4b8d0a706963a91f2ba4c687baea16da074f3c3": 175, "bivium_key_stream": 175, "clock_numb": [175, 176, 178, 179, 180], "bivium_state_initi": 175, "bluetoothstreamciphere0": [176, 193], "lfsr_state_bit_s": 176, "fsm_bit_siz": 176, "125": 176, "encrypt": [176, 183, 221], "decrypt": 176, "detail": [176, 206, 227], "2022": [176, 221], "016": 176, "compris": 176, "stage": 176, "132": [176, 221], "four": 176, "address": 176, "dedic": 176, "lfsr_state_s": 176, "finite_state_machine_bit_s": 176, "lfsr_input_st": 176, "fsm_input_st": 176, "bluetooth_stream_cipher_e0": [176, 193], "fsm": 176, "0x25ac1ea08e1ec131e0a1780f7a2a42bb": 176, "0x8cd29cc32668b90ee2312924376f1b4": 176, "0xe22f92fff8c245c49d10359a02f1e555": 176, "0x1198636720bac54986d1ab5a494866c9": 176, "e0_keystream": 176, "lfsr_state": 176, "fsm_id": 176, "fsm_po": 176, "e0_nonlinear_funct": 176, "chachastreamciph": 177, "block_count": 177, "chacha_const": 177, "129519094746312487908866675886161683828": 177, "0x617078653320646e79622d326b206574": 177, "chacha_stream_ciph": 177, "sp": 177, "init_state_plaintext": 177, "input_state_of_compon": 177, "snow3gstreamciph": [178, 193], "keystream_word_s": [178, 193], "snow3g_stream_ciph": [178, 193], "snow": [178, 193], "0xea024714ad5c4d84df1f9b251c0bf45f": 178, "0x2bd6459f82c5b300952c49104881ff48": 178, "ks_32": 178, "0xabee97047ac31373": 178, "ks2": 178, "10407660024169345926": 178, "divalpha": 178, "s11": 178, "mulalpha": 178, "s0": 178, "mulx": 178, "mulxpow": 178, "s1": 178, "w_id": 178, "w_po": 178, "s2": 178, "clock_fsm": 178, "clock_lfsr": 178, "clock_lfsr_initialization_mod": 178, "create_alpha_st": 178, "initial_filling_lfsr_fsm": 178, "snow3g_key_stream": 178, "snow3g_state_initi": 178, "triviumstreamciph": [179, 193], "1152": 179, "initialization_vector_bit_s": 179, "trivium_stream_ciph": [179, 193], "triv": 179, "0x00000000000000000000": 179, "0xdf07fd641a9aa0d88a5e7472c4f993fe6a4cc06898e0f3b4e7159ef0854d97b3": 179, "get_keystream_bit_len": 179, "trivium_key_stream": 179, "key_stream": [179, 180], "trivium_state_initi": 179, "zucstreamciph": 180, "len_keystream_word": 180, "zuc_stream_ciph": 180, "0xffffffffffffffffffffffffffffffff": 180, "0x657cfa07096398b": 180, "clocking_lfsr": 180, "key_loading_to_lfsr": 180, "key_st": 180, "lfsr_s_high_16bit": 180, "lfsr_s_low_16bit": 180, "lfsr_with_initialization_mod": 180, "linear_layer_rot": 180, "w1": 180, "w2": 180, "rot": 180, "linear_transform_l1": 180, "linear_transform_l2": 180, "s_box_lay": 180, "lo": 180, "zuc_nonlinear_f": 180, "constantblockciph": 181, "constant_block_ciph": 181, "constant_o3_r3": 181, "0b000": [181, 186], "0b001": [181, 186], "intermediate_output_1_1": 181, "0b010": [181, 186, 187], "cipher_output_2_1": 181, "create_round": 181, "meant": 182, "secur": [182, 221], "sever": 182, "weak": 182, "add_and_component_to_even_round": 182, "type1_key_schedule_xor": 182, "type2_key_schedule_and": 182, "add_sbox_components_layer_in_even_round": 182, "type1_sbox": 182, "type2_modadd1": 182, "type2_modadd2": 182, "type2_xor1": 182, "type2_xor2": 182, "add_xor_component_to_even_round": 182, "type2_key_schedule_xor": 182, "collect_input_id_link": 182, "identityblockcipherencrypt": 183, "mainli": 183, "toycipherfour": 184, "rotation_lay": [184, 186, 187], "knudsen2011thebc": [184, 221], "knudsen": [184, 221], "robshaw": [184, 221], "2011": [184, 221], "companion": [184, 221], "toy_cipherfour": 184, "toy_ciph": 184, "0x111122223333444455556666": 184, "17897": 184, "0x45e9": 184, "0x5678": 184, "0x123456781234567812abcdef": 184, "0xbeec": 184, "0x9abc": 184, "0x3333555577779999bbbbcccc": 184, "0xef01": 184, "61185": 184, "sbox_output": 184, "s_0": 185, "round_0": [186, 187], "intermediate_output_0_0_input": 186, "0b111110": 186, "intermediate_output_0_0_output": 186, "xor_0_1_input": 186, "0xffe": 186, "xor_0_1_output": 186, "0b000001": [186, 187], "sbox_0_2_input": 186, "sbox_0_2_output": 186, "sbox_0_3_input": [186, 187], "sbox_0_3_output": [186, 187], "0b101": 186, "rot_0_4_input": 186, "0b000101": 186, "rot_0_4_output": 186, "0b100010": 186, "intermediate_output_0_5_input": 186, "intermediate_output_0_5_output": 186, "round_1": [186, 187], "intermediate_output_1_0_input": 186, "intermediate_output_1_0_output": 186, "xor_1_1_input": 186, "0x8be": 186, "xor_1_1_output": 186, "0b011100": 186, "sbox_1_2_input": 186, "0b011": [186, 187], "sbox_1_2_output": 186, "sbox_1_3_input": [186, 187], "0b100": 186, "sbox_1_3_output": [186, 187], "0b110": 186, "rot_1_4_input": 186, "0b010110": 186, "rot_1_4_output": 186, "0b001011": 186, "intermediate_output_1_5_input": 186, "intermediate_output_1_5_output": 186, "cipher_output_1_6_input": 186, "cipher_output_1_6_output": 186, "0x1ff": 186, "0x1fe": 186, "0x173": 186, "round_key_rot": 187, "rot_0_0_input": 187, "rot_0_0_output": 187, "0b100000": 187, "intermediate_output_0_1_input": 187, "xor_0_2_input": 187, "0xfe0": 187, "xor_0_2_output": 187, "0b011111": 187, "sbox_0_4_input": 187, "0b111": 187, "sbox_0_4_output": 187, "rot_0_5_input": 187, "0b010111": 187, "rot_0_5_output": 187, "0b101011": 187, "intermediate_output_0_6_input": 187, "intermediate_output_0_6_output": 187, "rot_1_0_input": 187, "rot_1_0_output": 187, "0b010000": 187, "intermediate_output_1_1_input": 187, "intermediate_output_1_1_output": 187, "xor_1_2_input": 187, "0xad0": 187, "xor_1_2_output": 187, "0b111011": 187, "sbox_1_4_input": 187, "sbox_1_4_output": 187, "rot_1_5_input": 187, "0b111010": 187, "rot_1_5_output": 187, "0b011101": 187, "intermediate_output_1_6_input": 187, "intermediate_output_1_6_output": 187, "cipher_output_1_7_input": 187, "cipher_output_1_7_output": 187, "check_output_s": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "available_word_s": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "get_graph_represent": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "is_forbidden": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "forbidden_typ": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 222, 223], "forbidden_descript": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 222, 223], "is_id_equal_to": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "dto": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 222], "output_size_for_concaten": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "print_valu": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "print_word_valu": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "select_word": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "set_descript": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "id_str": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 229], "set_input_bit_posit": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220], "set_input_id_link": [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220], "check_siz": 188, "position_list": 188, "free_input": 188, "linear_layer_to_binary_matrix": 188, "linear_layer_funct": 188, "list_specific_input": 188, "multiinputnonlinearlogicaloper": [189, 200, 202], "algebraic_polynomi": [189, 192, 193, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "and_0_8": [189, 200, 202], "and_0_8_x0": 189, "and_0_8_x12": 189, "and_0_8_y0": 189, "and_0_8_x1": 189, "and_0_8_x13": 189, "and_0_8_y1": 189, "and_0_8_x2": 189, "and_0_8_x14": 189, "and_0_8_y2": 189, "and_0_8_x3": 189, "and_0_8_x15": 189, "and_0_8_y3": 189, "and_0_8_x4": 189, "and_0_8_x16": 189, "and_0_8_y4": 189, "and_0_8_x5": 189, "and_0_8_x17": 189, "and_0_8_y5": 189, "and_0_8_x6": 189, "and_0_8_x18": 189, "and_0_8_y6": 189, "and_0_8_x7": 189, "and_0_8_x19": 189, "and_0_8_y7": 189, "and_0_8_x8": 189, "and_0_8_x20": 189, "and_0_8_y8": 189, "and_0_8_x9": 189, "and_0_8_x21": 189, "and_0_8_y9": 189, "and_0_8_x10": 189, "and_0_8_x22": 189, "and_0_8_y10": 189, "and_0_8_x11": 189, "and_0_8_x23": 189, "and_0_8_y11": 189, "cms_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "cm": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "and_0_8_0": [189, 200, 202], "and_0_8_1": [189, 200, 202], "and_0_8_2": [189, 200, 202], "and_0_8_11": [189, 200, 202], "xor_0_7_11": [189, 200, 202], "key_23": [189, 200, 202], "cms_xor_differential_propagation_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "cms_xor_linear_mask_propagation_constraint": [189, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "cp_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "xor_0_7": [189, 200, 202, 216], "cp_deterministic_truncated_xor_differential_constraint": [189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 212, 215, 216], "endif": [189, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 209, 210, 211, 212, 215, 216], "cp_deterministic_truncated_xor_differential_trail_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "cp_wordwise_deterministic_truncated_xor_differential_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "sbox_0_2": [189, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215], "sbox_0_6": [189, 200, 201, 202, 205, 207, 208], "sbox_0_10": [189, 200, 201, 202, 205, 207, 208], "sbox_0_14": [189, 200, 201, 202, 205, 207, 208], "sbox_0_2_act": [189, 200, 202], "and_0_18_act": [189, 200, 202], "and_0_18_valu": [189, 200, 202], "sbox_0_14_act": [189, 200, 202], "cp_xor_differential_propagation_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "and2inputs_ddt": [189, 200, 202], "cp_xor_linear_mask_propagation_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "and_0_8_i": 189, "and_0_8_o": 189, "and2inputs_lat": [189, 202], "generic_sign_linear_constraint": [189, 199, 200, 201, 202], "get_bit_based_vectorized_python_cod": [189, 190, 191, 192, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "param": [189, 190, 191, 192, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "get_byte_based_vectorized_python_cod": [189, 190, 191, 192, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "get_word_operation_sign": [189, 197, 198, 199, 200, 201, 202, 205, 207, 208, 213, 214, 216], "milp_bitwise_deterministic_truncated_xor_differential_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "xor_0_7_0": [189, 200, 202], "xor_0_7_1": [189, 200, 202], "and_0_8_10": [189, 200, 202], "x_34": [189, 196, 200, 202, 215, 216], "x_35": [189, 196, 200, 202, 215], "x_36": [189, 200, 202], "x_47": [189, 195, 197, 198, 199, 200, 202, 203, 204, 209, 210, 211, 212, 216], "milp_twoterms_xor_linear_probability_constraint": [189, 200, 202], "chunk_numb": [189, 197, 198, 199, 200, 202], "2x1": [189, 200, 202], "290": [189, 200, 202], "milp_xor_differential_propagation_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "632": [189, 200, 202], "archiv": [189, 200, 202, 221], "fse2014": [189, 200, 202], "85400194": [189, 200, 202], "213": [189, 200, 202, 221], "and_0_4": [189, 200, 202], "rot_0_1_0": [189, 200, 202], "rot_0_1_1": [189, 200, 202], "and_0_4_14": [189, 200, 202], "x_46": [189, 195, 197, 198, 199, 200, 202, 203, 204, 209, 210, 211, 212, 216], "and_0_4_15": [189, 200, 202], "x_32": [189, 190, 194, 196, 197, 198, 199, 200, 201, 202, 206, 215, 216], "x_48": [189, 197, 198, 199, 200, 202, 216], "x_33": [189, 200, 201, 202, 206, 216], "x_49": [189, 197, 198, 199, 200, 202, 216], "x_64": [189, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 215], "x_50": [189, 197, 198, 199, 200, 202], "x_51": [189, 197, 198, 199, 200, 202], "x_52": [189, 197, 198, 199, 200, 202], "x_53": [189, 197, 198, 199, 200, 202], "x_54": [189, 197, 198, 199, 200, 202], "x_55": [189, 197, 198, 199, 200, 202], "x_56": [189, 197, 198, 199, 200, 202], "x_57": [189, 197, 198, 199, 200, 202], "x_58": [189, 197, 198, 199, 200, 202], "x_59": [189, 195, 196, 197, 198, 199, 200, 202, 203, 204, 209, 210, 211, 212, 215], "x_60": [189, 197, 198, 199, 200, 202], "x_61": [189, 197, 198, 199, 200, 202], "x_62": [189, 190, 194, 196, 197, 198, 199, 200, 201, 202, 215, 216], "x_63": [189, 190, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 215, 216], "milp_xor_linear_mask_propagation_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "and_0_4_0_i": [189, 200, 202], "and_0_4_1_i": [189, 200, 202], "and_0_4_14_o": [189, 200, 202], "and_0_4_15_o": [189, 200, 202], "x_16": [189, 190, 194, 196, 197, 198, 199, 200, 202, 205, 206, 208, 215, 216], "x_17": [189, 190, 194, 197, 198, 199, 200, 202, 205, 206, 208], "x_37": [189, 200, 202], "x_38": [189, 200, 202], "x_39": [189, 200, 202, 216], "x_40": [189, 200, 202, 216], "x_41": [189, 200, 202, 216], "x_42": [189, 200, 202, 216], "x_43": [189, 200, 202, 216], "x_44": [189, 200, 202, 216], "x_45": [189, 200, 202, 216], "and_0_8_0_0": [189, 200, 202], "and_0_8_1_0": [189, 200, 202], "and_0_8_10_1": [189, 200, 202], "and_0_8_11_1": [189, 200, 202], "xor_0_7_0_0": [189, 200, 202], "key_12_0": [189, 200, 202], "and_0_8_11_0": [189, 200, 202], "xor_0_7_11_0": [189, 200, 202], "key_23_0": [189, 200, 202], "xor_0_7_11_1": [189, 200, 202], "key_23_1": [189, 200, 202], "sat_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "becom": [189, 202, 216], "key_12": [189, 200, 202], "sat_xor_differential_propagation_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "allw2014": [189, 200, 202, 221], "heavili": [189, 197, 198, 199, 200, 202], "reli": [189, 197, 198, 199, 200, 202], "fact": [189, 197, 198, 199, 200, 202], "hw_and_0_8_10": [189, 200, 202], "hw_and_0_8_11": [189, 200, 202], "hw_and_0_8_0": [189, 200, 202], "sat_xor_linear_mask_propagation_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "and_0_8_0_i": [189, 200, 202], "and_0_8_1_i": [189, 200, 202], "hw_and_0_8_10_o": [189, 200, 202], "hw_and_0_8_11_o": [189, 200, 202], "hw_and_0_8_0_o": [189, 200, 202], "and_0_8_12_i": [189, 200, 202], "and_0_8_11_o": [189, 200, 202], "smt_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "formal": [189, 202, 216], "builtin": [189, 202, 216], "key_13": [189, 200, 202], "xor_0_7_10": [189, 200, 202], "key_22": [189, 200, 202], "smt_xor_differential_propagation_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "hw_and_0_8_1": [189, 200, 202], "smt_xor_linear_mask_propagation_constraint": [189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "and_0_8_0_o": [189, 200, 202], "and_0_8_13_i": [189, 200, 202], "and_0_8_1_o": [189, 200, 202], "hw_and_0_8_1_o": [189, 200, 202], "and_0_8_10_i": [189, 200, 202], "and_0_8_22_i": [189, 200, 202], "and_0_8_10_o": [189, 200, 202], "and_0_8_11_i": [189, 200, 202], "and_0_8_23_i": [189, 200, 202], "cp_twoterm": [189, 197, 198], "inp1": [189, 197], "inp2": [189, 197], "cp_xor_differential_probability_ddt": 189, "cp_xor_linear_probability_lat": 189, "cipheroutput": [190, 194], "is_intermedi": 190, "cipher_output_compon": [190, 194], "cipher_output_2_12_0": [190, 194], "cipher_output_2_12_1": [190, 194], "cipher_output_2_12_2": [190, 194], "xor_2_10_14": [190, 194], "cipher_output_2_12_30": [190, 194], "cipher_output_2_12_31": [190, 194], "xor_2_10_15": [190, 194], "intermediate_output_0_35_valu": [190, 194], "xor_0_31_valu": [190, 194], "intermediate_output_0_35_act": [190, 194], "xor_0_34_act": [190, 194], "cp_xor_differential_propagation_first_step_constraint": [190, 192, 194, 196, 201, 205, 206, 207, 208, 215, 216], "xor_0_34": [190, 194], "cipher_output_21_12_i": 190, "cipher_output_21_12_o": 190, "xor_1_6_0": [190, 194], "xor_1_6_1": [190, 194], "cipher_output_1_8_30": [190, 194], "cipher_output_1_8_31": [190, 194], "x_31": [190, 194, 197, 198, 199, 201, 205, 206, 208, 216], "milp_constraint": [190, 194, 195, 196, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 215, 216], "milp_wordwise_deterministic_truncated_xor_differential_constraint": [190, 192, 194, 195, 196, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216], "xor_1_31_word_0_class": [190, 194], "xor_1_31_word_1_class": [190, 194], "x_286": [190, 194], "x_287": [190, 194], "x_158": [190, 194, 216], "x_159": [190, 194, 197, 198, 199, 216], "cipher_output_1_12_0_i": 190, "cipher_output_1_12_1_i": 190, "cipher_output_1_12_2_i": 190, "cipher_output_1_12_30_o": 190, "cipher_output_1_12_31_o": 190, "minizinc_constraint": [190, 194, 205, 207, 208, 216], "minizinc_deterministic_truncated_xor_differential_trail_constraint": [190, 192, 194, 205, 207, 208], "minizinc_xor_differential_propagation_constraint": [190, 192, 194, 197, 198, 199, 205, 207, 208, 214, 216], "cipher_output_2_12_0_0": [190, 194], "cipher_output_2_12_1_0": [190, 194], "cipher_output_2_12_30_1": [190, 194], "cipher_output_2_12_31_1": [190, 194], "xor_2_8_0_0": [190, 194], "xor_2_10_15_1": [190, 194], "xor_2_8_0": [190, 194], "cipher_output_2_12_0_i": 190, "cipher_output_2_12_1_i": 190, "cipher_output_2_12_30_o": 190, "cipher_output_2_12_31_o": 190, "cipher_output_2_12_0_o": 190, "xor_2_8_1": [190, 194], "cipher_output_2_12_1_o": 190, "get_bit_based_c_cod": [191, 192, 195, 196, 203, 204, 206, 209, 210, 211, 212, 215], "get_word_based_c_cod": [191, 192, 205, 206, 207, 208, 213, 214], "constant_compon": 192, "constant_0_10": 192, "constant_0_10_y0": 192, "constant_0_10_y1": 192, "constant_0_10_y2": 192, "constant_0_10_y3": 192, "constant_0_10_y4": 192, "constant_0_10_y5": 192, "constant_0_10_y6": 192, "constant_0_10_y7": 192, "constant_0_10_y8": 192, "constant_0_10_y9": 192, "constant_0_10_y10": 192, "constant_0_10_y11": 192, "constant_0_10_y12": 192, "constant_0_10_y13": 192, "constant_0_10_y14": 192, "constant_0_10_y15": 192, "constant_0_10_y16": 192, "constant_0_10_y17": 192, "constant_0_10_y18": 192, "constant_0_10_y19": 192, "constant_0_10_y20": 192, "constant_0_10_y21": 192, "constant_0_10_y22": 192, "constant_0_10_y23": 192, "constant_2_0_0": 192, "constant_2_0_1": 192, "constant_2_0_2": 192, "constant_2_0_13": 192, "constant_2_0_14": 192, "constant_2_0_15": 192, "constant_0_18_act": 192, "array1d": [192, 197, 198, 199, 205, 206, 207, 208, 214], "constant_0_18_valu": 192, "constant_0_30": 192, "constant_2_0_o": 192, "constant_1_0_0": 192, "constant_1_0_1": 192, "constant_1_0_14": 192, "constant_1_0_15": 192, "constant_0_30_word_0_class": 192, "constant_0_30_word_1_class": 192, "constant_0_30_word_2_class": 192, "constant_0_30_word_3_class": 192, "constant_2_0_0_o": 192, "constant_2_0_1_o": 192, "constant_2_0_14_o": 192, "constant_2_0_15_o": 192, "constant_xor_differential_constraint": 192, "symbol": [192, 201, 205, 207, 208, 221], "constant_2_0_0_0": 192, "constant_2_0_1_0": 192, "constant_2_0_14_1": 192, "constant_2_0_15_1": 192, "contribut": 192, "null": 192, "constant_2_0_2_o": 192, "constant_0_2_0": 192, "constant_0_2_1": 192, "constant_0_2_30": 192, "constant_0_2_31": 192, "constant_0_2_0_o": 192, "constant_0_2_1_o": 192, "constant_0_2_2_o": 192, "constant_0_2_30_o": 192, "constant_0_2_31_o": 192, "constant_to_repr": 192, "feedback": [193, 218], "fsr_compon": 193, "fsr_1_0_x1": 193, "fsr_1_0_x30": 193, "fsr_1_0_x53": 193, "fsr_1_0_x10": 193, "fsr_1_0_x0": 193, "fsr_1_0_y0": 193, "bivium": [193, 219], "fsr_0_1": 193, "92": 193, "fsr_0_1_x94": 193, "fsr_0_1_x95": 193, "fsr_0_1_y92": 193, "fsr_0_1_x108": 193, "fsr_0_1_x93": 193, "fsr_0_1_x24": 193, "trivium": [193, 219], "fsr_0_2": 193, "fsr_0_2_x178": 193, "fsr_0_2_x179": 193, "fsr_0_2_y92": 193, "fsr_0_2_x222": 193, "fsr_0_2_x177": 193, "fsr_0_2_x24": 193, "e0": [193, 219], "fsr_0_16": 193, "fsr_0_16_y24": 193, "fsr_0_16_x17": 193, "fsr_0_16_x13": 193, "fsr_0_16_x5": 193, "fsr_0_16_x0": 193, "fsr_0_714": 193, "480": 193, "fsr_0_714_y480": 193, "fsr_0_714_x352": 193, "fsr_0_714_x64": 193, "fsr_0_714_x0": 193, "intermediateoutput": 194, "intermediate_output_0_6_o": 194, "intermediate_output_0_6_i": 194, "xor_0_4_o": 194, "intermediate_output_0_6_1_i": 194, "intermediate_output_0_6_2_i": 194, "xor_0_4_14_o": 194, "x_110": [194, 216], "xor_0_4_15_o": 194, "x_111": [194, 216], "intermediate_output_0_6_30_o": 194, "intermediate_output_0_6_31_o": 194, "intermediate_output_0_6_0_o": 194, "intermediate_output_0_6_31_i": 194, "intermediate_output_0_6_1_o": 194, "intermediate_output_0_6_30_i": 194, "update_xor_linear_constraints_for_more_than_one_bit": 194, "intermediate_var": 194, "linked_compon": 194, "linearlay": [195, 196, 203, 204, 209, 210, 211, 212], "linear_layer_compon": [195, 196, 203, 204, 209, 210, 211, 212, 215], "linear_layer_0_6": [195, 196, 203, 204, 209, 210, 211, 212, 215], "linear_layer_0_6_y0": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x23": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x19": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x18": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x16": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x15": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x14": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x12": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x9": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x8": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x6": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_x3": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_0": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_1": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_2": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_21": [195, 203, 204, 209, 210, 211, 212], "sbox_0_0_1": [195, 203, 204, 209, 210, 211, 212], "sbox_0_1_2": [195, 203, 204, 206, 209, 210, 211, 212], "sbox_0_1_3": [195, 203, 204, 206, 209, 210, 211, 212], "sbox_0_2_0": [195, 203, 204, 206, 209, 210, 211, 212], "sbox_0_2_1": [195, 203, 204, 206, 209, 210, 211, 212], "sbox_0_2_3": [195, 203, 204, 206, 209, 210, 211, 212], "sbox_0_3_1": [195, 203, 204, 209, 210, 211, 212], "sbox_0_3_2": [195, 203, 204, 209, 210, 211, 212], "sbox_0_4_1": [195, 203, 204, 209, 210, 211, 212], "sbox_0_4_2": [195, 203, 204, 209, 210, 211, 212], "sbox_0_5_1": [195, 203, 204, 206, 209, 210, 211, 212], "sbox_0_5_3": [195, 203, 204, 206, 209, 210, 211, 212], "linear_layer_0_6_22": [195, 203, 204, 209, 210, 211, 212], "sbox_0_0_2": [195, 203, 204, 209, 210, 211, 212], "sbox_0_2_2": [195, 203, 204, 206, 209, 210, 211, 212], "sbox_0_4_3": [195, 203, 204, 209, 210, 211, 212], "sbox_0_5_0": [195, 203, 204, 206, 209, 210, 211, 212], "linear_layer_0_6_23": [195, 203, 204, 209, 210, 211, 212], "sbox_0_0_0": [195, 203, 204, 209, 210, 211, 212], "sbox_0_0_3": [195, 203, 204, 209, 210, 211, 212], "sbox_0_3_3": [195, 203, 204, 209, 210, 211, 212], "sbox_0_5_2": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_0_i": [195, 196, 203, 204, 209, 210, 211, 212, 215], "linear_layer_0_6_1_i": [195, 196, 203, 204, 209, 210, 211, 212, 215], "linear_layer_0_6_2_i": [195, 196, 203, 204, 209, 210, 211, 212, 215], "linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_0_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_1_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_2_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_3_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_4_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_5_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_6_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_8_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_9_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_10_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_11_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_12_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_18_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_19_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_23_linear_layer_0_6_21_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_0_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_1_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_2_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_3_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_4_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_6_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_9_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_13_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_14_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_15_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_16_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_19_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_20_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_21_linear_layer_0_6_22_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "linear_layer_0_6_23_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_1_linear_layer_0_6_23_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_5_linear_layer_0_6_23_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_7_linear_layer_0_6_23_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_8_linear_layer_0_6_23_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_9_linear_layer_0_6_23_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_14_linear_layer_0_6_23_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_17_linear_layer_0_6_23_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_18_linear_layer_0_6_23_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "dummy_23_linear_layer_0_6_23_o": [195, 196, 203, 204, 209, 210, 211, 212, 215], "sbox_0_1": [195, 196, 203, 204, 206, 209, 210, 211, 212, 215, 218], "sbox_0_3": [195, 196, 203, 204, 209, 210, 211, 212, 215], "sbox_0_4": [195, 196, 203, 204, 209, 210, 211, 212, 215], "sbox_0_5": [195, 196, 203, 204, 206, 209, 210, 211, 212, 215], "linear_layer_0_6_i": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_o": [195, 203, 204, 209, 210, 211, 212], "milp_bitwise_deterministic_truncated_xor_differential_binary_constraint": [195, 196, 197, 198, 199, 203, 204, 209, 210, 211, 212, 215, 216], "68": [195, 196, 203, 204, 209, 210, 211, 212, 215, 218], "sbox_0_1_0": [195, 196, 203, 204, 206, 209, 210, 211, 212, 215], "sbox_0_1_1": [195, 196, 203, 204, 206, 209, 210, 211, 212, 215], "linear_layer_0_17_62": [195, 196, 203, 204, 209, 210, 211, 212, 215], "x_126": [195, 196, 201, 203, 204, 209, 210, 211, 212, 215], "linear_layer_0_17_63": [195, 196, 203, 204, 209, 210, 211, 212, 215], "x_127": [195, 196, 201, 203, 204, 209, 210, 211, 212, 215], "x_65": [195, 196, 197, 198, 199, 201, 203, 204, 209, 210, 211, 212, 215], "mix_column_0_20_word_0_class_bit_0": [195, 203, 204, 209, 210, 211, 212], "mix_column_0_20_word_0_class_bit_1": [195, 203, 204, 209, 210, 211, 212], "mix_column_0_21_14": [195, 203, 204, 209, 210, 211, 212], "mix_column_0_21_15": [195, 203, 204, 209, 210, 211, 212], "x_18": [195, 203, 204, 206, 209, 210, 211, 212], "x_19": [195, 203, 204, 206, 209, 210, 211, 212], "x_25": [195, 203, 204, 206, 209, 210, 211, 212], "linear_layer_0_17_0_i": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_17_1_i": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_17_62_o": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_17_63_o": [195, 203, 204, 209, 210, 211, 212], "thu": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_23_0": [195, 203, 204, 209, 210, 211, 212], "inter_12_linear_layer_0_6_23_1": [195, 203, 204, 209, 210, 211, 212], "sbox_0_5_3_1": [195, 203, 204, 209, 210, 211, 212], "linear_layer_0_6_23_1": [195, 203, 204, 209, 210, 211, 212], "vairabl": [195, 203, 204, 209, 210, 211, 212], "update_constraints_for_more_than_one_bit": 195, "dict_inequ": 195, "indexes_of_values_in_col": 195, "number_of_1": 195, "mix_column_0_20_x0": [196, 215], "mix_column_0_20_y0": [196, 215], "mix_column_0_20_x1": [196, 215], "mix_column_0_20_y1": [196, 215], "mix_column_0_20_x2": [196, 215], "mix_column_0_20_y2": [196, 215], "mix_column_0_20_y61": [196, 215], "mix_column_0_20_y62": [196, 215], "mix_column_0_20_y63": [196, 215], "mix_column_0_23_0": [196, 215], "mix_column_0_23_1": [196, 215], "mix_column_0_23_2": [196, 215], "mix_column_0_23_15": [196, 215], "mix_column_0_20_35": [196, 215], "mix_column_0_20_39": [196, 215], "mix_column_0_20_43": [196, 215], "rot_0_17": [196, 215], "rot_0_18": [196, 205, 208, 215, 218], "rot_0_19": [196, 215], "rot_0_20": [196, 215], "mix_column_0_21_i": [196, 215], "mix_column_0_21_o": [196, 215], "rot_0_17_0": [196, 215], "rot_0_17_1": [196, 215], "mix_column_0_21_30": [196, 215], "mix_column_0_21_31": [196, 215], "x_24": [196, 206, 215], "md": [196, 215, 219], "rot_0_17_word_0_class_bit_0": [196, 215], "rot_0_17_word_0_class_bit_1": [196, 215], "mix_column_0_21_word_3_class_bit_0": [196, 215], "mix_column_0_21_word_3_class_bit_1": [196, 215], "mix_column_0_20_0_i": [196, 215], "mix_column_0_20_1_i": [196, 215], "mix_column_0_20_62_o": [196, 215], "mix_column_0_20_63_o": [196, 215], "compoment": [196, 215], "mix_column_0_23_15_0": [196, 215], "inter_0_mix_column_0_23_15_1": [196, 215], "mix_column_0_20_43_1": [196, 215], "mix_column_0_23_15_1": [196, 215], "mix_column_0_23_15_o": [196, 215], "dummy_3_mix_column_0_23_15_o": [196, 215], "dummy_7_mix_column_0_23_15_o": [196, 215], "dummy_11_mix_column_0_23_15_o": [196, 215], "output_id_link_1": 196, "output_id_link_2": 196, "cp_get_all_input": 196, "numb_of_inp": [196, 216], "modadd_compon": [197, 198, 199], "modadd_1_9": 197, "modadd_1_9_c0_0": 197, "modadd_1_9_o0_0": 197, "modadd_1_9_x6": [197, 198, 199], "modadd_1_9_x0": [197, 198, 199], "modadd_1_9_o0_4": 197, "modadd_1_9_c1_4": 197, "modadd_1_9_x16": 197, "modadd_1_9_c1_5": 197, "modadd_1_9_o0_5": 197, "modadd_1_9_y5": 197, "modadd_1_9_x17": 197, "carry_modadd_0_1_0": 197, "carry_modadd_0_1_1": 197, "carry_modadd_0_1_2": 197, "modadd_0_1_13": [197, 216], "plaintext_29": 197, "carry_modadd_0_1_13": 197, "modadd_0_1_14": [197, 198, 199, 216], "plaintext_30": 197, "carry_modadd_0_1_14": 197, "modadd_0_1_15": [197, 198, 199, 216], "plaintext_31": [197, 198, 199], "lwr2016": [197, 198, 199, 216, 221], "substrat": [197, 198, 199], "modadd_0_1_0_i": [197, 198, 199], "modadd_0_1_1_i": [197, 198, 199], "modadd_0_1_2_i": [197, 198, 199], "hw_modadd_0_1_14_o": [197, 198, 199], "modadd_0_1_14_o": [197, 198, 199], "modadd_0_1_30_i": [197, 198, 199], "hw_modadd_0_1_15_o": [197, 198, 199], "modadd_0_1_15_o": [197, 198, 199], "modadd_0_1_31_i": [197, 198, 199], "pre_modadd_0_1_0": [197, 198, 199], "pre_modadd_0_1_1": [197, 198, 199], "carry_modadd_0_1": 197, "modular_addition_word": [197, 198, 199], "cp_twoterms_xor_differential_prob": [197, 198, 199], "inplen": 197, "xor_0_0_temp_0_0_valu": [197, 198, 199, 216], "xor_0_0_bound_value_0_15": [197, 198, 199, 216], "xor_0_0_temp_0_15_valu": [197, 198, 199, 216], "xor_0_0_temp_1_15_valu": [197, 198, 199, 216], "ceil": [197, 198, 199, 216], "log2": [197, 198, 199, 206, 216], "key_valu": [197, 198, 199, 216], "xor_0_0_temp_0_0_act": [197, 198, 199, 216], "xor_0_0_temp_0_15_act": [197, 198, 199, 216], "xor_0_0_temp_1_15_act": [197, 198, 199, 216], "xor_0_0_act": [197, 198, 199, 216], "xor_0_0_valu": [197, 198, 199, 206, 216], "pow": [197, 198, 199, 216], "eq_modadd_0_1": [197, 198, 199], "eq": [197, 198, 199], "shi_pre_modadd_0_1_1": [197, 198, 199], "shi_pre_modadd_0_1_0": [197, 198, 199], "shi_modadd_0_1": [197, 198, 199], "foral": [197, 198, 199], "cp_xor_differential_propagation_constraints_arx_optim": [197, 198, 199], "pre_modadd_1_9_1": [197, 198, 199], "sbox_1_0": [197, 198, 199], "modadd_0_1_i": [197, 198, 199], "modadd_0_1_o": [197, 198, 199], "modadd_linear": [197, 198, 199], "create_bct_mzn_constraint_from_component_id": [197, 198, 199], "rot_0_0_0_class_bit_0": [197, 198, 199], "rot_0_0_0_class_bit_1": [197, 198, 199], "modadd_0_1_15_class_bit_0": [197, 198, 199], "modadd_0_1_15_class_bit_1": [197, 198, 199], "x_30": [197, 198, 199, 201, 205, 206, 208, 216], "x_157": [197, 198, 199], "x_160": [197, 198, 199], "430": [197, 198, 199], "fwgsh2016": [197, 198, 199, 221], "arbitrari": [197, 198, 199], "x_66": [197, 198, 199], "modadd_1_9_x1": [197, 198, 199], "modadd_1_9_x2": [197, 198, 199], "modadd_1_9_x3": [197, 198, 199], "modadd_1_9_x4": [197, 198, 199], "modadd_1_9_x5": [197, 198, 199], "modadd_1_9_x7": [197, 198, 199], "modadd_1_9_x8": [197, 198, 199], "modadd_1_9_x9": [197, 198, 199], "modadd_1_9_x10": [197, 198, 199], "modadd_1_9_x11": [197, 198, 199], "modadd_1_9_y0_0": [197, 198, 199], "modadd_1_9_y1_0": [197, 198, 199], "modadd_1_9_y2_0": [197, 198, 199], "modadd_1_9_y3_0": [197, 198, 199], "modadd_1_9_y4_0": [197, 198, 199], "modadd_1_9_y5_0": [197, 198, 199], "p_modadd_1_9_0": [197, 198, 199], "dummy_modadd_1_9_0": [197, 198, 199], "nconstraint": [197, 198, 199], "carry_modadd_1_9_0": [197, 198, 199], "xor3": [197, 198, 199], "built": [197, 198, 199], "pivot": [197, 198, 199], "usual": [197, 198, 199], "modadd_0_1_0_0": [197, 198, 199, 216], "modadd_0_1_1_0": [197, 198, 199], "carry_modadd_0_1_14_1_1": [197, 198, 199], "carry_modadd_0_1_15_1_1": [197, 198, 199], "carry_modadd_0_1_15_0_0": [197, 198, 199], "carry_modadd_0_1_0_0_0": [197, 198, 199], "plaintext_31_1": [197, 198, 199], "modadd_0_1_15_0": [197, 198, 199], "modadd_0_1_15_1": [197, 198, 199, 216], "rot_0_0_15_1": [197, 198, 199], "carry_0_modadd_0_1_0": 197, "carry_0_modadd_0_1_1": 197, "plaintext_17": [197, 198, 199], "lm2001": [197, 198, 199, 221], "modadd_0_1_0": [197, 198, 199, 216], "modadd_0_1_1": [197, 198, 199, 216], "hw_modadd_0_1_14": [197, 198, 199], "hw_modadd_0_1_15": [197, 198, 199], "hw_modadd_0_1_0": [197, 198, 199], "hw_modadd_0_1_0_o": [197, 198, 199], "hw_modadd_0_1_1_o": [197, 198, 199], "modadd_0_1_0_o": [197, 198, 199], "modadd_0_1_16_i": [197, 198, 199], "modadd_0_1_30": [197, 198, 199], "modadd_0_1_31": [197, 198, 199], "shift_0_0_1": [197, 198, 199, 207], "shift_0_0_2": [197, 198, 199, 207], "carry_0_modadd_0_1_2": 197, "shift_0_0_30": [197, 198, 199, 207], "key_30": [197, 198, 199], "carry_0_modadd_0_1_30": 197, "shift_0_0_31": [197, 198, 199, 207], "key_31": [197, 198, 199], "hw_modadd_0_1_30": [197, 198, 199], "hw_modadd_0_1_31": [197, 198, 199], "hw_modadd_0_1_1": [197, 198, 199], "modadd_0_1_2": [197, 198, 199], "hw_modadd_0_1_30_o": [197, 198, 199], "hw_modadd_0_1_31_o": [197, 198, 199], "modadd_0_1_32_i": [197, 198, 199], "modadd_0_1_30_o": [197, 198, 199], "modadd_0_1_62_i": [197, 198, 199], "modadd_0_1_31_o": [197, 198, 199], "modadd_0_1_63_i": [197, 198, 199], "twoterms_milp_probability_xor_linear_constraint": [197, 198, 199], "fu2016": [197, 198, 199], "fukai6": [197, 198, 199], "milp_speck": [197, 198, 199], "speck_diff_find": [197, 198, 199], "cms_modadd": 197, "input0_id": 197, "input1_id": 197, "carry_id": 197, "cms_modadd_seq": 197, "outputs_id": 197, "inputs_id": [197, 229], "carries_id": 197, "sat_modadd": 197, "sat_modadd_seq": 197, "smt_modadd": 197, "smt_modadd_seq": 197, "modsub_0_0": [198, 218], "modsub_compon": 198, "modsub_0_0_b0_0": 198, "modsub_0_0_y0": 198, "modsub_0_0_x4": 198, "modsub_0_0_x0": 198, "modsub_0_0_b0_1": 198, "modsub_0_0_y1": 198, "modsub_0_0_x5": 198, "modsub_0_0_x1": 198, "modsub_0_0_b0_2": 198, "modsub_0_0_y2": 198, "modsub_0_0_x6": 198, "modsub_0_0_x2": 198, "modsub_0_0_b0_3": 198, "modsub_0_0_y3": 198, "modsub_0_0_x7": 198, "modsub_0_0_x3": 198, "temp_carry_plaintext_32": 198, "temp_carry_plaintext_33": 198, "temp_carry_plaintext_34": 198, "modsub_0_7_31": 198, "modadd_0_4_31": 198, "temp_input_plaintext_63": 198, "constant_modsub_0_7": 198, "minus_pre_modsub_0_7_1": 198, "pre_modsub_0_7_0": 198, "modadd_0_4": 198, "pre_minus_pre_modsub_0_7_1": 198, "pre_modsub_0_7_1": 198, "modsub_0_7": 198, "contraint": 198, "complement": 198, "addtion": 198, "modsub_0_7_30": 198, "plaintext_33": 198, "plaintext_34": 198, "modadd_0_4_30": 198, "temp_input_plaintext_62": 198, "carry_modsub_0_7_30": 198, "component_nam": 198, "modular_compon": 199, "milp_n_window_heurist": 199, "window_s": 199, "not_compon": 201, "not_0_5": 201, "not_0_5_y0": 201, "not_0_5_x0": 201, "not_0_5_y1": 201, "not_0_5_x1": 201, "not_0_5_y2": 201, "not_0_5_x2": 201, "not_0_5_y61": 201, "not_0_5_x61": 201, "not_0_5_y62": 201, "not_0_5_x62": 201, "not_0_5_y63": 201, "not_0_5_x63": 201, "not_0_8_0": 201, "not_0_8_1": 201, "not_0_8_2": 201, "not_0_8_30": 201, "xor_0_6_30": 201, "not_0_8_31": 201, "xor_0_6_31": 201, "not_0_8": 201, "xor_0_6": 201, "cp_xor_differential_first_step_constraint": [201, 205, 206, 207, 208], "not_0_18": 201, "not_0_5_i": 201, "not_0_5_o": 201, "xor_0_6_0": 201, "xor_0_6_1": 201, "xor_0_2_0": [201, 216], "xor_0_2_1": [201, 216], "not_0_5_62": 201, "not_0_5_63": 201, "not_0_5_0_i": 201, "not_0_5_1_i": 201, "not_0_5_62_o": 201, "not_0_5_63_o": 201, "correctli": [201, 205, 207, 208], "not_0_8_0_0": 201, "not_0_8_1_0": 201, "not_0_8_30_1": 201, "not_0_8_31_1": 201, "xor_0_6_0_0": 201, "xor_0_6_31_0": 201, "xor_0_6_31_1": 201, "enforc": [201, 206], "correct": [201, 221], "accur": 201, "reflect": 201, "ouput": [201, 205, 207, 208], "not_0_8_0_i": 201, "not_0_8_1_i": 201, "not_0_8_30_o": 201, "not_0_8_31_o": 201, "not_0_8_0_o": 201, "not_0_8_31_i": 201, "not_0_5_0": 201, "not_0_5_1": 201, "xor_0_2_62": 201, "xor_0_2_63": 201, "not_0_5_0_o": 201, "not_0_5_1_o": 201, "not_0_5_62_i": 201, "not_0_5_63_i": 201, "or_compon": 202, "or_0_4": 202, "or_0_4_x0": 202, "or_0_4_x32": 202, "or_0_4_y0": 202, "or_0_4_x1": 202, "or_0_4_x33": 202, "or_0_4_y1": 202, "or_0_4_x2": 202, "or_0_4_x34": 202, "or_0_4_y2": 202, "or_0_4_x3": 202, "or_0_4_x35": 202, "or_0_4_y3": 202, "or_0_4_x4": 202, "or_0_4_x36": 202, "or_0_4_y4": 202, "or_0_4_x5": 202, "or_0_4_x37": 202, "or_0_4_y5": 202, "or_0_4_x6": 202, "or_0_4_x38": 202, "or_0_4_y6": 202, "or_0_4_x7": 202, "or_0_4_x39": 202, "or_0_4_y7": 202, "or_0_4_x8": 202, "or_0_4_x40": 202, "or_0_4_y8": 202, "or_0_4_x9": 202, "or_0_4_x41": 202, "or_0_4_y9": 202, "or_0_4_x10": 202, "or_0_4_x42": 202, "or_0_4_y10": 202, "or_0_4_x11": 202, "or_0_4_x43": 202, "or_0_4_y11": 202, "or_0_4_x12": 202, "or_0_4_x44": 202, "or_0_4_y12": 202, "or_0_4_x13": 202, "or_0_4_x45": 202, "or_0_4_y13": 202, "or_0_4_x14": 202, "or_0_4_x46": 202, "or_0_4_y14": 202, "or_0_4_x15": 202, "or_0_4_x47": 202, "or_0_4_y15": 202, "or_0_4_x16": 202, "or_0_4_x48": 202, "or_0_4_y16": 202, "or_0_4_x17": 202, "or_0_4_x49": 202, "or_0_4_y17": 202, "or_0_4_x18": 202, "or_0_4_x50": 202, "or_0_4_y18": 202, "or_0_4_x19": 202, "or_0_4_x51": 202, "or_0_4_y19": 202, "or_0_4_x20": 202, "or_0_4_x52": 202, "or_0_4_y20": 202, "or_0_4_x21": 202, "or_0_4_x53": 202, "or_0_4_y21": 202, "or_0_4_x22": 202, "or_0_4_x54": 202, "or_0_4_y22": 202, "or_0_4_x23": 202, "or_0_4_x55": 202, "or_0_4_y23": 202, "or_0_4_x24": 202, "or_0_4_x56": 202, "or_0_4_y24": 202, "or_0_4_x25": 202, "or_0_4_x57": 202, "or_0_4_y25": 202, "or_0_4_x26": 202, "or_0_4_x58": 202, "or_0_4_y26": 202, "or_0_4_x27": 202, "or_0_4_x59": 202, "or_0_4_y27": 202, "or_0_4_x28": 202, "or_0_4_x60": 202, "or_0_4_y28": 202, "or_0_4_x29": 202, "or_0_4_x61": 202, "or_0_4_y29": 202, "or_0_4_x30": 202, "or_0_4_x62": 202, "or_0_4_y30": 202, "or_0_4_x31": 202, "or_0_4_x63": 202, "or_0_4_y31": 202, "or_0_9": 202, "pre_or_0_9_0": 202, "pre_or_0_9_1": 202, "39": [202, 218], "3200": 202, "p_or_39_6": 202, "or_39_6_i": 202, "or_39_6_o": 202, "or_0_4_0": 202, "or_0_4_1": 202, "or_0_4_30": 202, "or_0_4_31": 202, "xor_0_3_0": 202, "xor_0_1_0": 202, "xor_0_1_31": 202, "xor_0_3_31": 202, "xor_0_3_1": 202, "xor_0_1_1": 202, "xor_0_3_30": 202, "xor_0_1_30": 202, "rotate_compon": [205, 208], "rot_1_11_y0": [205, 208], "rot_1_11_x3": [205, 208], "rot_1_11_y1": [205, 208], "rot_1_11_x4": [205, 208], "rot_1_11_y2": [205, 208], "rot_1_11_x5": [205, 208], "rot_1_11_y3": [205, 208], "rot_1_11_x0": [205, 208], "rot_1_11_y4": [205, 208], "rot_1_11_x1": [205, 208], "rot_1_11_y5": [205, 208], "rot_1_11_x2": [205, 208], "rot_1_1_0": [205, 208], "rot_1_1_1": [205, 208], "rot_1_1_2": [205, 208], "key_39": [205, 208], "rot_1_1_14": [205, 208], "rot_1_1_15": [205, 208], "key_40": [205, 208], "cp_inverse_constraint": [205, 207, 208], "rot_0_0_invers": [205, 208], "rot_0_0_o": [205, 208], "key_32": [205, 208], "key_33": [205, 208], "sbox_0_2_word_0_class": [205, 207, 208], "sbox_0_6_word_0_class": [205, 207, 208], "rot_0_18_30": [205, 208], "x_70": [205, 207, 208], "rot_0_18_31": [205, 208], "x_71": [205, 207, 208], "rot_1_1_0_i": [205, 208], "rot_1_1_1_i": [205, 208], "rot_1_1_14_o": [205, 208], "rot_1_1_15_o": [205, 208], "rotate_mzn_constraint": [205, 208], "lrot": [205, 208], "rot_1_1_0_0": [205, 208], "rot_1_1_1_0": [205, 208], "rot_1_1_14_1": [205, 208], "rot_1_1_15_1": [205, 208], "key_41_0": [205, 208], "key_40_1": [205, 208], "key_41": [205, 208], "rot_1_1_0_o": [205, 208], "rot_1_1_9_i": [205, 208], "rot_1_1_8_i": [205, 208], "plaintext_9": [205, 207, 208], "plaintext_10": [205, 208], "plaintext_7": [205, 208], "plaintext_8": [205, 207, 208], "rot_0_0_14_o": [205, 208], "rot_0_0_15_o": [205, 208], "rot_0_0_0_o": [205, 208], "rot_0_0_9_i": [205, 208], "rot_0_0_1_o": [205, 208], "rot_0_0_10_i": [205, 208], "rot_0_0_7_i": [205, 208], "rot_0_0_8_i": [205, 208], "s_box_descript": 206, "sbox_0_0_y2": 206, "sbox_0_0_y0": 206, "sbox_0_0_x3": 206, "sbox_0_0_y1": 206, "sbox_0_0_y3": 206, "xor_0_0_4": 206, "xor_0_0_5": 206, "xor_0_0_6": 206, "xor_0_0_7": 206, "sbox_mant": 206, "encount": 206, "again": 206, "table_sbox_0_5": 206, "xor_0_1": [206, 223], "table_sbox_0_1": 206, "cp_hybrid_deterministic_truncated_xor_differential_constraint": [206, 216], "list_of_component_numb": 206, "hybrid": [206, 216, 219, 221], "abstract_sbox_0_2": 206, "sbox_0_1_act": 206, "ddt_sbox_0_5": 206, "sbox_0_5_i": 206, "sbox_0_5_o": 206, "lat_sbox_0_5": 206, "generate_sbox_sign_lat": 206, "get_ddt_with_undisturbed_transit": 206, "undisturb": [206, 219, 221], "czz2023": [206, 221], "valid_transit": 206, "81": [206, 221], "243": 206, "xor_0_0_0": 206, "xor_0_0_1": 206, "milp_large_xor_differential_probability_constraint": 206, "astty2017": [206, 221], "_non_linear_component_id": 206, "milp_large_xor_linear_probability_constraint": 206, "veri": 206, "sbox_0_1_0_i": 206, "sbox_0_1_1_i": 206, "sbox_0_1_6_o": 206, "sbox_0_1_7_o": 206, "x_20": 206, "x_21": 206, "x_22": 206, "x_23": 206, "x_26": 206, "x_27": 206, "x_28": [206, 221], "x_29": 206, "442": 206, "368": 206, "342": 206, "319": [206, 221], "milp_small_xor_differential_probability_constraint": 206, "shw": [206, 221], "milp_small_xor_linear_probability_constraint": 206, "appendix": 206, "sbox_0_1_2_o": 206, "sbox_0_1_3_o": 206, "milp_undisturbed_bits_bitwise_deterministic_truncated_xor_differential_constraint": 206, "mention": 206, "xor_0_0_0_class_bit_0": 206, "xor_0_0_0_class_bit_1": 206, "sbox_0_1_3_class_bit_0": 206, "sbox_0_1_3_class_bit_1": 206, "sgww2020": [206, 221], "geometri": 206, "constructor": 206, "vertic": 206, "hrepresent": 206, "repr_pretti": 206, "xor_0_0_word_0_class_bit_0": 206, "xor_0_0_word_0_class_bit_1": 206, "sbox_0_1_word_0_class_bit_0": 206, "sbox_0_1_word_0_class_bit_1": 206, "milp_wordwise_deterministic_truncated_xor_differential_simple_constraint": [206, 216], "dx": 206, "dy": [206, 216], "xor_0_0_word_0_class": 206, "sbox_0_1_word_0_class": 206, "idea": 206, "sbox_0_2_0_0": 206, "sbox_0_2_1_0": 206, "sbox_0_2_2_1": 206, "sbox_0_2_3_1": 206, "xor_0_0_4_1": 206, "xor_0_0_7_1": 206, "sbox_0_2_3_0": 206, "sbox_0_2_2_0": 206, "xor_0_0_5_0": 206, "xor_0_0_4_0": 206, "oj": 206, "Then": 206, "minterm": 206, "Of": 206, "sop": 206, "unari": 206, "approach": [206, 221], "sw2023": [206, 221], "hw_sbox_0_2_2": 206, "hw_sbox_0_2_3": 206, "hw_sbox_0_2_1": 206, "hw_sbox_0_2_0": 206, "absolut": 206, "sbox_0_2_0_i": 206, "sbox_0_2_1_i": 206, "hw_sbox_0_2_2_o": 206, "hw_sbox_0_2_3_o": 206, "sbox_0_2_2_i": 206, "sbox_0_2_0_o": 206, "sbox_0_2_1_o": 206, "sbox_0_2_3_i": 206, "sbox_0_2_3_o": 206, "hw_sbox_0_2_1_o": 206, "hw_sbox_0_2_0_o": 206, "xor_0_0_2": 206, "xor_0_0_3": 206, "hw_sbox_0_5_2": 206, "hw_sbox_0_5_3": 206, "plaintext_20": 206, "hw_sbox_0_5_1": 206, "hw_sbox_0_5_0": 206, "check_table_feas": 206, "table_typ": 206, "cp_update_ddt_valid_prob": 206, "table_item": 206, "cp_update_lat_valid_prob": 206, "milp_large_xor_probability_constraint_for_inequ": 206, "ineq": 206, "proba": 206, "sbox_input_s": 206, "sbox_output_s": 206, "milp_set_constraints_from_dictionnary_for_large_sbox": 206, "probability_dictionari": 206, "sat_build_table_templ": 206, "get_hamming_weight_funct": 206, "input_bit_len": 206, "output_bit_len": 206, "smt_build_table_templ": 206, "smt_get_sbox_probability_constraint": 206, "shift_compon": 207, "shift_1_12": 207, "shift_1_12_y0": 207, "shift_1_12_y1": 207, "shift_1_12_y2": 207, "shift_1_12_y3": 207, "shift_1_12_x0": 207, "shift_1_12_y4": 207, "shift_1_12_x1": 207, "shift_1_12_y5": 207, "shift_1_12_x2": 207, "shift_0_0_0": 207, "shift_0_0_29": 207, "shift_0_0_invers": 207, "shift_0_18_act": 207, "sbox_0_6_act": 207, "shift_0_18_valu": 207, "shift_0_18": 207, "shift_0_0_i": 207, "shift_0_0_o": 207, "shift_0_0_6": 207, "shift_0_0_7": 207, "shift_0_18_30": 207, "shift_0_18_31": 207, "shift_0_0_0_i": 207, "shift_0_0_1_i": 207, "shift_0_0_6_o": 207, "shift_0_0_7_o": 207, "shift_mzn_constraint": 207, "lshift": [207, 214], "shift_0_0_x0": 207, "shift_0_0_x1": 207, "shift_0_0_x2": 207, "shift_0_0_x3": 207, "shift_0_0_x4": 207, "shift_0_0_x5": 207, "shift_0_0_x6": 207, "shift_0_0_x7": 207, "shift_0_0_x8": 207, "shift_0_0_x9": 207, "shift_0_0_x10": 207, "shift_0_0_x11": 207, "shift_0_0_x12": 207, "shift_0_0_x13": 207, "shift_0_0_x14": 207, "shift_0_0_x15": 207, "shift_0_0_x16": 207, "shift_0_0_x17": 207, "shift_0_0_x18": 207, "shift_0_0_x19": 207, "shift_0_0_x20": 207, "shift_0_0_x21": 207, "shift_0_0_x22": 207, "shift_0_0_x23": 207, "shift_0_0_x24": 207, "shift_0_0_x25": 207, "shift_0_0_x26": 207, "shift_0_0_x27": 207, "shift_0_0_x28": 207, "shift_0_0_x29": 207, "shift_0_0_x30": 207, "shift_0_0_x31": 207, "shift_0_0_y0": 207, "shift_0_0_y1": 207, "shift_0_0_y2": 207, "shift_0_0_y3": 207, "shift_0_0_y4": 207, "shift_0_0_y5": 207, "shift_0_0_y6": 207, "shift_0_0_y7": 207, "shift_0_0_y8": 207, "shift_0_0_y9": 207, "shift_0_0_y10": 207, "shift_0_0_y11": 207, "shift_0_0_y12": 207, "shift_0_0_y13": 207, "shift_0_0_y14": 207, "shift_0_0_y15": 207, "shift_0_0_y16": 207, "shift_0_0_y17": 207, "shift_0_0_y18": 207, "shift_0_0_y19": 207, "shift_0_0_y20": 207, "shift_0_0_y21": 207, "shift_0_0_y22": 207, "shift_0_0_y23": 207, "shift_0_0_y24": 207, "shift_0_0_y25": 207, "shift_0_0_y26": 207, "shift_0_0_y27": 207, "shift_0_0_y28": 207, "shift_0_0_y29": 207, "shift_0_0_y30": 207, "shift_0_0_y31": 207, "shift_0_0_0_0": 207, "shift_0_0_1_0": 207, "shift_0_0_30_1": 207, "shift_0_0_31_1": 207, "plaintext_36_0": 207, "shift_0_0_31_0": 207, "plaintext_36": 207, "shift_0_0_30_o": 207, "shift_0_0_31_o": 207, "shift_0_0_27_o": 207, "shift_0_0_31_i": 207, "fashion": 207, "plaintext_37": 207, "shift_0_0_26_o": 207, "shift_0_0_30_i": 207, "shiftrow": 208, "thetagaston": 210, "thetakeccak": 211, "thetaxoodoo": 212, "variablerot": 213, "variableshift": 214, "BY": 214, "variable_shift_compon": 214, "var_shift_0_2_0": 214, "var_shift_0_2_1": 214, "var_shift_0_2_2": 214, "var_shift_0_2_31": 214, "state_3_var_shift_0_2_31": 214, "key_91": 214, "pre_var_shift_0_2": 214, "shift_amount_var_shift_0_2": 214, "bitarraytoint": 214, "95": 214, "var_shift_0_2": 214, "mzn_shift_by_variable_amount_constraint": 214, "lshift_by_variable_amount": 214, "var_shift_0_2_x0": 214, "var_shift_0_2_x1": 214, "var_shift_0_2_x2": 214, "var_shift_0_2_x3": 214, "var_shift_0_2_x4": 214, "var_shift_0_2_x5": 214, "var_shift_0_2_x6": 214, "var_shift_0_2_x7": 214, "var_shift_0_2_x8": 214, "var_shift_0_2_x9": 214, "var_shift_0_2_x10": 214, "var_shift_0_2_x11": 214, "var_shift_0_2_x12": 214, "var_shift_0_2_x13": 214, "var_shift_0_2_x14": 214, "var_shift_0_2_x15": 214, "var_shift_0_2_x16": 214, "var_shift_0_2_x17": 214, "var_shift_0_2_x18": 214, "var_shift_0_2_x19": 214, "var_shift_0_2_x20": 214, "var_shift_0_2_x21": 214, "var_shift_0_2_x22": 214, "var_shift_0_2_x23": 214, "var_shift_0_2_x24": 214, "var_shift_0_2_x25": 214, "var_shift_0_2_x26": 214, "var_shift_0_2_x27": 214, "var_shift_0_2_x28": 214, "var_shift_0_2_x29": 214, "var_shift_0_2_x30": 214, "var_shift_0_2_x31": 214, "2147483648": 214, "var_shift_0_2_x63": 214, "1073741824": 214, "var_shift_0_2_x62": 214, "536870912": 214, "var_shift_0_2_x61": 214, "268435456": 214, "var_shift_0_2_x60": 214, "134217728": 214, "var_shift_0_2_x59": 214, "67108864": 214, "var_shift_0_2_x58": 214, "33554432": 214, "var_shift_0_2_x57": 214, "16777216": 214, "var_shift_0_2_x56": 214, "8388608": 214, "var_shift_0_2_x55": 214, "4194304": 214, "var_shift_0_2_x54": 214, "2097152": 214, "var_shift_0_2_x53": 214, "1048576": 214, "var_shift_0_2_x52": 214, "524288": 214, "var_shift_0_2_x51": 214, "262144": 214, "var_shift_0_2_x50": 214, "131072": 214, "var_shift_0_2_x49": 214, "65536": 214, "var_shift_0_2_x48": 214, "32768": 214, "var_shift_0_2_x47": 214, "16384": 214, "var_shift_0_2_x46": 214, "8192": 214, "var_shift_0_2_x45": 214, "4096": 214, "var_shift_0_2_x44": 214, "2048": 214, "var_shift_0_2_x43": 214, "var_shift_0_2_x42": 214, "var_shift_0_2_x41": 214, "var_shift_0_2_x40": 214, "var_shift_0_2_x39": 214, "var_shift_0_2_x38": 214, "var_shift_0_2_x37": 214, "var_shift_0_2_x36": 214, "var_shift_0_2_x35": 214, "var_shift_0_2_x34": 214, "var_shift_0_2_x33": 214, "var_shift_0_2_x32": 214, "var_shift_0_2_y0": 214, "var_shift_0_2_y1": 214, "var_shift_0_2_y2": 214, "var_shift_0_2_y3": 214, "var_shift_0_2_y4": 214, "var_shift_0_2_y5": 214, "var_shift_0_2_y6": 214, "var_shift_0_2_y7": 214, "var_shift_0_2_y8": 214, "var_shift_0_2_y9": 214, "var_shift_0_2_y10": 214, "var_shift_0_2_y11": 214, "var_shift_0_2_y12": 214, "var_shift_0_2_y13": 214, "var_shift_0_2_y14": 214, "var_shift_0_2_y15": 214, "var_shift_0_2_y16": 214, "var_shift_0_2_y17": 214, "var_shift_0_2_y18": 214, "var_shift_0_2_y19": 214, "var_shift_0_2_y20": 214, "var_shift_0_2_y21": 214, "var_shift_0_2_y22": 214, "var_shift_0_2_y23": 214, "var_shift_0_2_y24": 214, "var_shift_0_2_y25": 214, "var_shift_0_2_y26": 214, "var_shift_0_2_y27": 214, "var_shift_0_2_y28": 214, "var_shift_0_2_y29": 214, "var_shift_0_2_y30": 214, "var_shift_0_2_y31": 214, "var_shift_0_2_30": 214, "state_0_var_shift_0_2_0": 214, "key_95": 214, "state_0_var_shift_0_2_1": 214, "state_3_var_shift_0_2_30": 214, "wordpermut": 215, "xor_0_7_y0": 216, "xor_0_7_x12": 216, "xor_0_7_x0": 216, "xor_0_7_y1": 216, "xor_0_7_x13": 216, "xor_0_7_x1": 216, "xor_0_7_y2": 216, "xor_0_7_x14": 216, "xor_0_7_x2": 216, "xor_0_7_y3": 216, "xor_0_7_x15": 216, "xor_0_7_x3": 216, "xor_0_7_y4": 216, "xor_0_7_x16": 216, "xor_0_7_x4": 216, "xor_0_7_y5": 216, "xor_0_7_x17": 216, "xor_0_7_x5": 216, "xor_0_7_y6": 216, "xor_0_7_x18": 216, "xor_0_7_x6": 216, "xor_0_7_y7": 216, "xor_0_7_x19": 216, "xor_0_7_x7": 216, "xor_0_7_y8": 216, "xor_0_7_x20": 216, "xor_0_7_x8": 216, "xor_0_7_y9": 216, "xor_0_7_x21": 216, "xor_0_7_x9": 216, "xor_0_7_y10": 216, "xor_0_7_x22": 216, "xor_0_7_x10": 216, "xor_0_7_y11": 216, "xor_0_7_x23": 216, "xor_0_7_x11": 216, "xor_0_2_2": 216, "xor_0_2_13": 216, "key_61": 216, "xor_0_2_14": 216, "xor_0_2_15": 216, "cp_transform_xor_components_for_first_step": 216, "_variables_list": 216, "rot_2_16": 216, "xor_2_26": 216, "xor_0_2_i": 216, "xor_0_2_o": 216, "wich": 216, "xor_0_5": 216, "and_0_4_0_class_bit_0": 216, "and_0_4_0_class_bit_1": 216, "xor_0_5_15_class_bit_0": 216, "xor_0_5_15_class_bit_1": 216, "and_0_4_0": 216, "and_0_4_1": 216, "xor_0_5_14": 216, "xor_0_5_15": 216, "manner": 216, "inde": 216, "delta_x_0": 216, "delta_x_1": 216, "delta_x_2": 216, "yield": 216, "delta_i": 216, "cancel": 216, "infer": 216, "reason": 216, "xor_0_32": 216, "xor_0_31_word_0_class_bit_0": 216, "xor_0_31_word_0_class_bit_1": 216, "xor_0_32_30": 216, "x_118": 216, "xor_0_32_31": 216, "x_119": 216, "x_81": 216, "milp_wordwise_deterministic_truncated_xor_differential_sequential_constraint": 216, "xor_wordwise_deterministic_truncated_xor_differential_constraint": 216, "dx1": 216, "dx2": 216, "dx3": 216, "sbox_0_26_word_0_class_bit_0": 216, "sbox_0_26_word_0_class_bit_1": 216, "xor_0_31_30": 216, "xor_0_31_31": 216, "x_161": 216, "dx0": 216, "zeta": [216, 221], "zetax0": 216, "zetax1": 216, "milp_xor_linear_constraint": 216, "xor_0_5_0_i": 216, "xor_0_5_1_i": 216, "xor_0_5_14_o": 216, "xor_0_5_15_o": 216, "xor_minizinc_constraint": 216, "xor_word": 216, "narray1d": 216, "xor_0_2_x16": 216, "xor_0_2_x17": 216, "xor_0_2_x18": 216, "xor_0_2_x19": 216, "xor_0_2_x20": 216, "xor_0_2_x21": 216, "xor_0_2_x22": 216, "xor_0_2_x23": 216, "xor_0_2_x24": 216, "xor_0_2_x25": 216, "xor_0_2_x26": 216, "xor_0_2_x27": 216, "xor_0_2_x28": 216, "xor_0_2_x29": 216, "xor_0_2_x30": 216, "xor_0_2_x31": 216, "xor_0_2_x0": 216, "xor_0_2_x1": 216, "xor_0_2_x2": 216, "xor_0_2_x3": 216, "xor_0_2_x4": 216, "xor_0_2_x5": 216, "xor_0_2_x6": 216, "xor_0_2_x7": 216, "xor_0_2_x8": 216, "xor_0_2_x9": 216, "xor_0_2_x10": 216, "xor_0_2_x11": 216, "xor_0_2_x12": 216, "xor_0_2_x13": 216, "xor_0_2_x14": 216, "xor_0_2_x15": 216, "xor_0_2_y0": 216, "xor_0_2_y1": 216, "xor_0_2_y2": 216, "xor_0_2_y3": 216, "xor_0_2_y4": 216, "xor_0_2_y5": 216, "xor_0_2_y6": 216, "xor_0_2_y7": 216, "xor_0_2_y8": 216, "xor_0_2_y9": 216, "xor_0_2_y10": 216, "xor_0_2_y11": 216, "xor_0_2_y12": 216, "xor_0_2_y13": 216, "xor_0_2_y14": 216, "xor_0_2_y15": 216, "xor_0_2_0_0": 216, "xor_0_2_1_0": 216, "xor_0_2_14_1": 216, "xor_0_2_15_1": 216, "key_48_0": 216, "key_63_1": 216, "xor_0_2_15_0": 216, "key_48": 216, "xor_0_2_0_i": 216, "xor_0_2_1_i": 216, "xor_0_2_14_o": 216, "xor_0_2_15_o": 216, "xor_0_2_31_i": 216, "xor_0_2_15_i": 216, "key_49": 216, "xor_0_2_1_o": 216, "xor_0_2_30_i": 216, "xor_0_2_17_i": 216, "xor_0_2_14_i": 216, "cp_build_truncated_t": 216, "generic_with_constant_sign_linear_constraint": 216, "const_mask": 216, "get_milp_constraints_from_inequ": 216, "get_transformed_xor_input_links_and_posit": 216, "input_len": 216, "component1_": 217, "component2_": 217, "round_object": 217, "create_xor_component_input": 217, "old_cipher_inputs_": 217, "get_component_pair": 217, "round_component_": 217, "update_cipher_input": [217, 218], "update_input_id_link": 217, "cipher_name_i4_o4_r1": 218, "word_oper": 218, "lfsr": 218, "nlfsr": 218, "register_1_info": 218, "register_2_info": 218, "register_n_info": 218, "register_word_length": 218, "register_polynomi": 218, "clock_polynomi": 218, "0101": 218, "0011": 218, "third": 218, "x8": 218, "fsr_0_0": 218, "register_len": 218, "cipher_name_i12_o12_r1": 218, "blanklin": 218, "not_0_0": 218, "or_0_0": 218, "component_0_0": [218, 223], "cipher_output_0_0": 218, "add_compon": [218, 222, 223], "0xab02": 218, "tag": 218, "mix_column_0_0": 218, "perm_0_0": 218, "rev_0_0": 218, "rotate_0_0": 218, "shift_row_0_0": 218, "shift_rows_0_0": 218, "sigma_0_0": 218, "theta": [218, 219], "gastonsboxtheta": 218, "theta_gaston_0_0": 218, "3520": 218, "var_rotate_0_0": 218, "var_rot_0_0": 218, "var_shift_0_0": 218, "word_bas": 218, "generate_expanded_link": 218, "get_final_input_posit": 218, "new_input_posit": 218, "unique_length": 218, "get_output_bit_size_from_id": 218, "get_unique_links_inform": 218, "new_link": 218, "is_linear_layer_permut": 218, "m_t": 218, "next_component_index_from": 218, "propagate_equival": 218, "new_expanded_link": 218, "new_posit": 218, "propagate_permut": 218, "propagate_rot": 218, "remove_cipher_input_kei": 218, "remove_forbidden_par": 218, "cipher_without_key_schedul": 218, "removed_key_speck": 218, "remove_orphan_compon": 218, "remove_permut": 218, "effect": 218, "removed_permutations_pres": 218, "sbox_0_16": 218, "61": 218, "62": 218, "41": 218, "43": 218, "44": 218, "45": 218, "51": 218, "53": 218, "55": [218, 221], "56": 218, "57": 218, "58": 218, "66": 218, "71": 218, "75": 218, "77": 218, "78": 218, "79": 218, "sbox_0_19": 218, "int_to_bytearrai": [218, 225], "remove_rot": 218, "removed_rotations_speck": 218, "0x0001": 218, "0x0002": 218, "constant_4_0": 218, "0x0003": 218, "sbox_that_should_be_second": 218, "sbox_that_should_be_first": 218, "modifi": 218, "offset": 218, "update_component_input": 218, "parent_link": 218, "update_input": 218, "keep_round_key_addit": 218, "manual": 219, "document": [219, 221], "guidelin": 219, "compound": 219, "editor": [219, 221], "script": 219, "tester": 219, "neural": [219, 221], "network": [219, 221], "divis": 219, "bct": 219, "predic": 219, "usefulfunct": 219, "boomerang": [219, 221], "heurist": 219, "helper": 219, "share": 219, "xordiff": 219, "dataset": [219, 229], "diehard": 219, "multi": 219, "bluetooth": 219, "chacha": 219, "a5": 219, "snow3g": 219, "zuc": 219, "toyfeistel": 219, "cipherfour": 219, "toyspn2": 219, "qarmav2": 219, "simeck": 219, "princ": 219, "aradi": [219, 221], "baksheesh": 219, "lowmc": 219, "ballet": 219, "lea": 219, "kasumi": 219, "bea1": 219, "scarf": 219, "twine": 219, "de": [219, 221], "rc5": 219, "skinni": [219, 221], "threefish": 219, "speedi": [219, 221], "hight": 219, "sparx": 219, "ublock": 219, "md5": 219, "whirlpool": 219, "blake": 219, "sha1": 219, "sha2": 219, "blake2": 219, "tinyjambu": 219, "32bit": 219, "core": 219, "spongent": 219, "pi": 219, "sparkl": 219, "gimli": 219, "photon": 219, "salsa": 219, "bibliograph": 219, "luck": 221, "wenzel": 221, "workshop": 221, "fast": 221, "softwar": 221, "content": [221, 228], "2f978": 221, "662": 221, "46706": 221, "0_27": 221, "adp2018": 221, "albrecht": 221, "deo": 221, "paterson": 221, "cold": 221, "boot": 221, "lwe": 221, "ntt": 221, "transact": 221, "cryptograph": 221, "hardwar": 221, "2018": 221, "173": 221, "ak2019": 221, "ankel": 221, "k\u00f6lbl": 221, "mind": 221, "gap": 221, "closer": 221, "select": 221, "area": 221, "cryptographi": 221, "sac": 221, "publish": 221, "030": 221, "10970": 221, "7_8": 221, "abdelkhalek": 221, "sasaki": 221, "todo": 221, "tolba": 221, "youssef": 221, "characterist": 221, "cryptolog": 221, "2017": 221, "99": [221, 229], "bc2003": 221, "biryukov": 221, "cannier": 221, "quadrat": 221, "proceed": 221, "2003": 221, "lnc": 221, "2887": 221, "pp": 221, "274": 221, "289": 221, "verlag": 221, "bfs2003": 221, "bardet": 221, "faug\u00e8r": 221, "salvi": 221, "complex": 221, "gr\u00f6bner": 221, "overdetermin": 221, "over": 221, "f2": 221, "research": 221, "rr": 221, "5049": 221, "inria": 221, "bdkllssss18": 221, "bo": 221, "duca": 221, "kiltz": 221, "lepoint": 221, "lyubashevski": 221, "schanck": 221, "schwabe": 221, "seiler": 221, "stehl\u00e9": 221, "crystal": 221, "kyber": 221, "cca": 221, "lattic": 221, "kem": 221, "euro": 221, "353": 221, "367": 221, "bhpr2021": 221, "bellini": 221, "hambitz": 221, "protopapa": 221, "rossi": 221, "black": 221, "innov": 221, "technolog": 221, "commun": 221, "14th": 221, "confer": 221, "secitc": 221, "virtual": 221, "event": 221, "novemb": 221, "revis": 221, "paper": 221, "berlin": 221, "heidelberg": 221, "br2021": 221, "deep": 221, "learn": 221, "convent": 221, "arai": 221, "ed": 221, "intellig": 221, "lectur": 221, "vol": 221, "285": 221, "bklpprsv2007": 221, "bogdanov": 221, "leander": 221, "paar": 221, "poschmann": 221, "seurin": 221, "vikkelso": 221, "ultra": 221, "lightweight": 221, "che": 221, "2007": 221, "4727": 221, "450": 221, "466": 221, "doi": 221, "540": 221, "74735": 221, "2_31": 221, "blp2008": 221, "bernstein": 221, "lang": 221, "peter": 221, "defend": 221, "mceliec": 221, "cryptosystem": 221, "post": 221, "quantum": 221, "2008": 221, "bfp2009": 221, "bettal": 221, "perret": 221, "multivari": 221, "197": 221, "2009": 221, "bghr2023": 221, "gerault": 221, "agnost": 221, "train": 221, "pipelin": 221, "autom": 221, "good": 221, "2023": 221, "bcc": 221, "2010": 221, "bouillaguet": 221, "chen": 221, "cheng": 221, "chou": 221, "niederhagen": 221, "shamir": 221, "yang": 221, "exhaust": 221, "12th": 221, "santa": 221, "barbara": 221, "ca": 221, "usa": 221, "august17": 221, "203": 221, "218": 221, "ber2010": 221, "grover": 221, "vs": 221, "quantumcryptographi": 221, "bf": 221, "spaenlehau": 221, "On": 221, "corr": 221, "1112": 221, "6263": 221, "blp2011": 221, "smaller": [221, 228], "decod": 221, "expon": 221, "ball": 221, "collis": 221, "annual": 221, "760": 221, "bs2011": 221, "byrn": 221, "sneyd": 221, "homogen": 221, "wcc": 221, "hal": 221, "fr": 221, "00607341": 221, "bh2012": 221, "brouwer": 221, "haemer": 221, "spectra": 221, "2012": 221, "homepag": 221, "cwi": 221, "nl": 221, "aeb": 221, "math": 221, "ipm": 221, "bfs2015": 221, "f5": 221, "journal": 221, "2015": 221, "bm2018": 221, "rate": 221, "impact": 221, "lpn": 221, "bkw2019": 221, "bj\u00f6rklund": 221, "kaski": 221, "william": 221, "systemsof": 221, "reduct": 221, "colloquium": 221, "automata": 221, "languag": 221, "icalp": 221, "volum": 221, "leibniz": 221, "informat": 221, "lipic": 221, "dagstuhl": 221, "germani": 221, "schloss": 221, "zentrum": 221, "fuer": 221, "informatik": 221, "bjmm2012": 221, "becker": 221, "joux": 221, "meurer": 221, "theori": 221, "520": 221, "536": 221, "bcg": 221, "bro": 221, "cabarca": 221, "gaborit": 221, "perlner": 221, "smith": 221, "tone": 221, "tillich": 221, "verbel": 221, "minrank": 221, "advanc": 221, "asiacrypt2020": 221, "cou2001": 221, "courtoi": 221, "la": 221, "s\u00e9curit\u00e9": 221, "primit": 221, "cryptographiqu": 221, "bas\u00e9": 221, "sur": 221, "probl\u00e8m": 221, "alg\u00e9briqu": 221, "mq": 221, "ip": 221, "hfe": 221, "phd": 221, "thesi": 221, "universit\u00e9": 221, "pari": 221, "pierr": 221, "et": 221, "mari": 221, "curi": 221, "2001": 221, "chpss18": 221, "cid": 221, "huang": 221, "peyrin": 221, "song": 221, "tool": 221, "issu": 221, "pre": 221, "161": 221, "cao": 221, "zhang": 221, "zhou": 221, "deng": 221, "yung": 221, "inscrypt": 221, "scienc": 221, "13837": 221, "cham": 221, "dakrv18": 221, "anver": 221, "karmakar": 221, "roi": 221, "vercauteren": 221, "saber": 221, "lwr": 221, "exchang": 221, "cpa": 221, "africacrypt": 221, "282": 221, "305": 221, "din2021cri": 221, "dinur": 221, "cryptanalyt": 221, "din2021imp": 221, "acm": 221, "siam": 221, "symposium": 221, "discret": 221, "soda": 221, "2550": 221, "2564": 221, "dkllsss18": 221, "dilithium": 221, "signatur": 221, "scheme": 221, "tran": 221, "cryptogr": 221, "hardw": 221, "emb": 221, "syst": 221, "238": 221, "268": 221, "dum1991": 221, "dumer": 221, "distanc": [221, 229], "proc": 221, "5th": 221, "joint": 221, "soviet": 221, "swedish": 221, "1991": 221, "du2001": 221, "duursma": 221, "111": 221, "du2004": 221, "combinator": 221, "109": 221, "sci": 221, "2948": 221, "2004": 221, "du2018": 221, "dunkelman": 221, "preprint": 221, "631": 221, "dio2020": 221, "diogo": 221, "duart": 221, "crossbr": 221, "cryptologyeprint": 221, "1058": 221, "fss2011": 221, "safei": 221, "el": 221, "din": 221, "4411": 221, "fu": 221, "wang": 221, "guo": 221, "sun": 221, "hu": 221, "go2019": 221, "gohr": 221, "speck32": 221, "green": 221, "motlei": 221, "week": 221, "llama": 221, "latenc": 221, "cryptol": 221, "arch": 221, "2024": 221, "1240": 221, "he2002": 221, "hei": 221, "tutori": 221, "2002": 221, "engr": 221, "mun": 221, "howard": 221, "ldc_tutori": 221, "hp2003": 221, "huffman": 221, "pless": 221, "fundament": 221, "cambridg": 221, "univ": 221, "press": 221, "jv2018": 221, "vits": 221, "jerzi": 221, "kaczorowski": 221, "josef": 221, "pieprzyk": 221, "jacekpomyka": 221, "theoret": 221, "kpg1999": 221, "kipni": 221, "patarin": 221, "goubin": 221, "unbalanc": 221, "oil": 221, "vinegar": 221, "eurocrypt99": 221, "206": 221, "222": 221, "1999": 221, "berlinheidelberg": 221, "book": 221, "642": 221, "17342": 221, "moo": 221, "moradi": 221, "rasoolzadeh": 221, "engin": 221, "gate": 221, "architectur": 221, "510": 221, "545": 221, "46586": 221, "tche": 221, "v2021": 221, "i4": 221, "lin1999": 221, "van": 221, "lint": 221, "introduct": 221, "3rd": 221, "gtm": 221, "86": 221, "2f3": 221, "45473": 221, "lpt": 221, "lokshtanov": 221, "paturi": 221, "tamaki": 221, "yu": 221, "beat": 221, "brute": 221, "forc": 221, "sover": 221, "twenti": 221, "eighth": 221, "2190": 221, "2202": 221, "societi": 221, "industri": 221, "liu": 221, "rijmen": 221, "39555": 221, "5_26": 221, "mmt2011": 221, "thoma": 221, "054n": 221, "107": 221, "mht2013": 221, "miura": 221, "hashimoto": 221, "takagi": 221, "underdefin": 221, "2013": [221, 229], "mo2015": 221, "ozerov": 221, "nearest": 221, "neighbor": 221, "murilo": 221, "rafael": 221, "fabio": 221, "ieee": 221, "access": 221, "123735": 221, "123745": 221, "pra1962": 221, "prang": 221, "cyclic": 221, "ir": 221, "1962": 221, "ste1988": 221, "stern": 221, "codeword": 221, "106": 221, "113": 221, "1988": 221, "lafourcad": 221, "qiao": 221, "281": 221, "306": 221, "multidimension": 221, "262": 221, "287": 221, "ma": 221, "shi": 221, "toward": 221, "predefin": 221, "sok": 221, "tw2012": 221, "wolf": 221, "underdetermin": 221, "revisit": 221, "public": 221, "pkc": 221, "vbc": 221, "baena": 221, "superdetermin": 221, "167": 221, "186": 221, "yc2004": 221, "xl": 221, "privaci": 221, "277": 221, "are_there_forbidden_compon": 222, "get_components_id": 222, "get_number_of_compon": 222, "is_component_input": 222, "fixed_index": 222, "moving_index": 222, "number_of_compon": [222, 223], "print_round": [222, 223], "print_round_as_python_dictionari": 222, "remove_component_from_id": 222, "round_as_python_dictionari": 222, "swap_compon": 222, "are_there_not_forbidden_compon": 223, "xor_1_0": 223, "xor_1_1": 223, "component_1_0": 223, "components_in_round": 223, "print_rounds_as_python_dictionari": 223, "round_at": 223, "rounds_as_python_dictionari": 223, "generate_bitmask": 224, "0b1111": 224, "to_binari": 224, "0x67452301": 224, "bytearray_to_int": 225, "bytearray_to_wordlist": 225, "int_to_wordlist": 225, "lor": 225, "ror": 225, "wordlist_to_bytearrai": 225, "wordlist_to_int": 225, "wordlist": 225, "create_scenario_str": 226, "scenario_dict": 226, "get_ciph": 226, "get_cipher_typ": 226, "cipher_filenam": 226, "load_paramet": 226, "cipher_family_nam": 226, "stdtype": 227, "html": [227, 228], "rotate_left": 227, "sequence_oper": 227, "rotate_right": 227, "shift_left": 227, "shift_right": 227, "bodi": 228, "builder": 228, "variou": 228, "respons": 228, "get_bodi": 228, "get_foot": 228, "get_head": 228, "csvbuilder": 228, "csv": 228, "footer": 228, "header": 228, "logo": 228, "latexbuild": 228, "latex": 228, "render_templ": 228, "rule_data_": 228, "set_bodi": 228, "set_foot": 228, "set_head": 228, "templatemanag": 228, "control": 228, "him": 228, "deleg": 228, "assembl": 228, "get_templ": 228, "set_build": 228, "aggregate_list_of_dictionari": 229, "group_by_kei": 229, "sum_value_kei": 229, "aggreg": 229, "summing_up": 229, "collect": 229, "datetim": 229, "my_dataset": 229, "date": 229, "value1": 229, "value2": 229, "98": 229, "expected_output": 229, "bytes_positions_to_little_endian_for_32_bit": 229, "lst": 229, "read": 229, "bytes_positions_to_little_endian_for_multiple_of_32": 229, "calculate_input": 229, "plane_num": 229, "lane_num": 229, "convert_2d_index_to_1d_index": 229, "array_dim": 229, "create_new_state_for_calcul": 229, "extract_input": 229, "input_ids_list": 229, "input_bit_positions_list": 229, "bit_positions_to_be_extract": 229, "generate_sample_from_gf_2_n": 229, "get_2d_array_element_from_1d_array_index": 229, "qi": 229, "si": 229, "get_inputs_paramet": 229, "inputs_list": 229, "get_ith_word": 229, "lst_by_id": 229, "get_k_th_bit": 229, "get_number_of_rounds_from": 229, "parameters_configur": 229, "group_list_by_kei": 229, "lst_exampl": 229, "defaultdict": 229, "layer_and_lane_initi": 229, "lane_s": 229, "merging_list_of_list": 229, "merg": 229, "point_pair": 229, "dist": 229, "dim": 229, "randomli": 229, "euclidean": 229, "poly_to_int": 229, "polynom": 229, "pprint_dictionari": 229, "pretti": 229, "pprint_dictionary_to_fil": 229, "name_fil": 229, "tii_path": 229, "getfil": 229, "tii_dir_path": 229, "dirnam": 229, "test_json": 229, "isfil": 229, "set_2d_array_element_from_1d_array_index": 229, "sgn_function": 229, "signed_dist": 229, "lst_x": 229, "lst_y": 229, "simplify_input": 229, "inputs_po": 229}, "objects": {"": [[0, 0, 0, "-", "cipher"], [188, 0, 0, "-", "component"], [217, 0, 0, "-", "compound_xor_differential_cipher"], [218, 0, 0, "-", "editor"], [220, 0, 0, "-", "input"], [222, 0, 0, "-", "round"], [223, 0, 0, "-", "rounds"]], "cipher": [[0, 1, 1, "", "Cipher"]], "cipher.Cipher": [[0, 2, 1, "", "add_AND_component"], [0, 2, 1, "", "add_FSR_component"], [0, 2, 1, "", "add_MODADD_component"], [0, 2, 1, "", "add_MODSUB_component"], [0, 2, 1, "", "add_NOT_component"], [0, 2, 1, "", "add_OR_component"], [0, 2, 1, "", "add_SBOX_component"], [0, 2, 1, "", "add_SHIFT_component"], [0, 2, 1, "", "add_XOR_component"], [0, 2, 1, "", "add_cipher_output_component"], [0, 2, 1, "", "add_concatenate_component"], [0, 2, 1, "", "add_constant_component"], [0, 2, 1, "", "add_intermediate_output_component"], [0, 2, 1, "", "add_linear_layer_component"], [0, 2, 1, "", "add_mix_column_component"], [0, 2, 1, "", "add_permutation_component"], [0, 2, 1, "", "add_reverse_component"], [0, 2, 1, "", "add_rotate_component"], [0, 2, 1, "", "add_round"], [0, 2, 1, "", "add_round_key_output_component"], [0, 2, 1, "", "add_round_output_component"], [0, 2, 1, "", "add_shift_rows_component"], [0, 2, 1, "", "add_sigma_component"], [0, 2, 1, "", "add_suffix_to_components"], [0, 2, 1, "", "add_theta_gaston_component"], [0, 2, 1, "", "add_theta_keccak_component"], [0, 2, 1, "", "add_theta_xoodoo_component"], [0, 2, 1, "", "add_variable_rotate_component"], [0, 2, 1, "", "add_variable_shift_component"], [0, 2, 1, "", "add_word_permutation_component"], [0, 2, 1, "", "as_python_dictionary"], [0, 2, 1, "", "cipher_inverse"], [0, 2, 1, "", "cipher_partial_inverse"], [0, 2, 1, "", "component_from"], [0, 2, 1, "", "convert_to_compound_xor_cipher"], [0, 2, 1, "", "create_networx_graph_from_input_ids"], [0, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [0, 3, 1, "", "current_round"], [0, 3, 1, "", "current_round_number"], [0, 3, 1, "", "current_round_number_of_components"], [0, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [0, 2, 1, "", "evaluate"], [0, 2, 1, "", "evaluate_using_c"], [0, 2, 1, "", "evaluate_vectorized"], [0, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [0, 3, 1, "", "family_name"], [0, 3, 1, "", "file_name"], [0, 2, 1, "", "find_impossible_property"], [0, 2, 1, "", "generate_bit_based_c_code"], [0, 2, 1, "", "generate_evaluate_c_code_shared_library"], [0, 2, 1, "", "generate_word_based_c_code"], [0, 2, 1, "", "get_all_components"], [0, 2, 1, "", "get_all_components_ids"], [0, 2, 1, "", "get_all_inputs_bit_positions"], [0, 2, 1, "", "get_component_from_id"], [0, 2, 1, "", "get_components_in_round"], [0, 2, 1, "", "get_current_component_id"], [0, 2, 1, "", "get_model"], [0, 2, 1, "", "get_number_of_components_in_round"], [0, 2, 1, "", "get_partial_cipher"], [0, 2, 1, "", "get_round_from_component_id"], [0, 2, 1, "", "get_sizes_of_components_by_type"], [0, 3, 1, "", "id"], [0, 2, 1, "", "impossible_differential_search"], [0, 3, 1, "", "inputs"], [0, 3, 1, "", "inputs_bit_size"], [0, 2, 1, "", "inputs_size_to_dict"], [0, 2, 1, "", "is_algebraically_secure"], [0, 2, 1, "", "is_andrx"], [0, 2, 1, "", "is_arx"], [0, 2, 1, "", "is_power_of_2_word_based"], [0, 2, 1, "", "is_shift_arx"], [0, 2, 1, "", "is_spn"], [0, 2, 1, "", "make_cipher_id"], [0, 2, 1, "", "make_file_name"], [0, 3, 1, "", "number_of_rounds"], [0, 3, 1, "", "output_bit_size"], [0, 2, 1, "", "polynomial_system"], [0, 2, 1, "", "polynomial_system_at_round"], [0, 2, 1, "", "print"], [0, 2, 1, "", "print_as_python_dictionary"], [0, 2, 1, "", "print_as_python_dictionary_to_file"], [0, 2, 1, "", "print_evaluation_python_code"], [0, 2, 1, "", "print_evaluation_python_code_to_file"], [0, 2, 1, "", "print_input_information"], [0, 3, 1, "", "reference_code"], [0, 2, 1, "", "remove_key_schedule"], [0, 2, 1, "", "remove_round_component"], [0, 2, 1, "", "remove_round_component_from_id"], [0, 3, 1, "", "rounds"], [0, 3, 1, "", "rounds_as_list"], [0, 2, 1, "", "set_file_name"], [0, 2, 1, "", "set_id"], [0, 2, 1, "", "set_inputs"], [0, 2, 1, "", "sort_cipher"], [0, 2, 1, "", "test_against_reference_code"], [0, 2, 1, "", "test_vector_check"], [0, 3, 1, "", "type"], [0, 2, 1, "", "update_input_id_links_from_component_id"], [0, 2, 1, "", "zero_correlation_linear_search"]], "cipher_modules": [[1, 0, 0, "-", "algebraic_tests"], [2, 0, 0, "-", "avalanche_tests"], [3, 0, 0, "-", "code_generator"], [4, 0, 0, "-", "component_analysis_tests"], [5, 0, 0, "-", "continuous_diffusion_analysis"], [6, 0, 0, "-", "division_trail_search"], [7, 0, 0, "-", "evaluator"], [9, 0, 0, "-", "generic_functions"], [10, 0, 0, "-", "generic_functions_continuous_diffusion_analysis"], [11, 0, 0, "-", "generic_functions_vectorized_bit"], [12, 0, 0, "-", "generic_functions_vectorized_byte"], [14, 0, 0, "-", "graph_generator"], [15, 0, 0, "-", "inverse_cipher"], [95, 0, 0, "-", "report"], [100, 0, 0, "-", "tester"]], "cipher_modules.algebraic_tests": [[1, 1, 1, "", "AlgebraicTests"]], "cipher_modules.algebraic_tests.AlgebraicTests": [[1, 2, 1, "", "algebraic_tests"]], "cipher_modules.avalanche_tests": [[2, 1, 1, "", "AvalancheTests"]], "cipher_modules.avalanche_tests.AvalancheTests": [[2, 2, 1, "", "avalanche_probability_vectors"], [2, 2, 1, "", "avalanche_tests"], [2, 2, 1, "", "compute_criterion_from_avalanche_probability_vectors"], [2, 2, 1, "", "generate_3D_plot"]], "cipher_modules.code_generator": [[3, 4, 1, "", "build_code_for_components"], [3, 4, 1, "", "build_code_for_continuous_diffusion_analysis_components"], [3, 4, 1, "", "build_continuous_diffusion_analysis_function_call"], [3, 4, 1, "", "build_function_call"], [3, 4, 1, "", "constant_to_bitstring"], [3, 4, 1, "", "delete_generated_evaluate_c_shared_library"], [3, 4, 1, "", "generate_bit_based_c_code"], [3, 4, 1, "", "generate_bit_based_vectorized_python_code_string"], [3, 4, 1, "", "generate_byte_based_vectorized_python_code_string"], [3, 4, 1, "", "generate_evaluate_c_code_shared_library"], [3, 4, 1, "", "generate_python_code_string"], [3, 4, 1, "", "generate_python_code_string_for_continuous_diffusion_analysis"], [3, 4, 1, "", "generate_word_based_c_code"], [3, 4, 1, "", "get_cipher_output_component_bit_based_c_code"], [3, 4, 1, "", "get_cipher_output_word_based_c_code"], [3, 4, 1, "", "get_intermediate_output_component_bit_based_c_code"], [3, 4, 1, "", "get_intermediate_output_word_based_c_code"], [3, 4, 1, "", "get_number_of_inputs"], [3, 4, 1, "", "get_padding_component_bit_based_c_code"], [3, 4, 1, "", "get_rounds_bit_based_c_code"], [3, 4, 1, "", "get_rounds_word_based_c_code"], [3, 4, 1, "", "get_word_operation_component_bit_based_c_code"], [3, 4, 1, "", "get_word_operation_word_based_c_code"], [3, 4, 1, "", "prepare_input_bit_based_vectorized_python_code_string"], [3, 4, 1, "", "prepare_input_byte_based_vectorized_python_code_string"], [3, 4, 1, "", "update_intermediate_structure"]], "cipher_modules.component_analysis_tests": [[4, 1, 1, "", "CipherComponentsAnalysis"], [4, 4, 1, "", "binary_matrix_of_linear_component"], [4, 4, 1, "", "branch_number"], [4, 4, 1, "", "calculate_weights_for_linear_layer"], [4, 4, 1, "", "calculate_weights_for_mix_column"], [4, 4, 1, "", "field_element_matrix_to_integer_matrix"], [4, 4, 1, "", "get_inverse_matrix_in_integer_representation"], [4, 4, 1, "", "has_maximal_branch_number"], [4, 4, 1, "", "instantiate_matrix_over_correct_field"], [4, 4, 1, "", "int_to_poly"]], "cipher_modules.component_analysis_tests.CipherComponentsAnalysis": [[4, 2, 1, "", "component_analysis_tests"], [4, 2, 1, "", "get_all_operations"], [4, 2, 1, "", "print_component_analysis_as_radar_charts"]], "cipher_modules.continuous_diffusion_analysis": [[5, 1, 1, "", "ContinuousDiffusionAnalysis"]], "cipher_modules.continuous_diffusion_analysis.ContinuousDiffusionAnalysis": [[5, 2, 1, "", "continuous_avalanche_factor"], [5, 2, 1, "", "continuous_diffusion_factor"], [5, 2, 1, "", "continuous_diffusion_tests"], [5, 2, 1, "", "continuous_neutrality_measure_for_bit_j"]], "cipher_modules.division_trail_search": [[6, 1, 1, "", "MilpDivisionTrailModel"]], "cipher_modules.division_trail_search.MilpDivisionTrailModel": [[6, 2, 1, "", "add_and_constraints"], [6, 2, 1, "", "add_constraints"], [6, 2, 1, "", "add_linear_layer_constraints"], [6, 2, 1, "", "add_modadd_constraints"], [6, 2, 1, "", "add_not_constraints"], [6, 2, 1, "", "add_sbox_constraints"], [6, 2, 1, "", "add_xor_constraints"], [6, 2, 1, "", "build_generic_model_for_specific_output_bit"], [6, 2, 1, "", "build_gurobi_model"], [6, 2, 1, "", "check_presence_of_particular_monomial_in_all_anf"], [6, 2, 1, "", "check_presence_of_particular_monomial_in_specific_anf"], [6, 2, 1, "", "create_copies"], [6, 2, 1, "", "create_copies_for_linear_layer"], [6, 2, 1, "", "create_gurobi_vars_from_all_components"], [6, 2, 1, "", "create_gurobi_vars_sbox"], [6, 2, 1, "", "find_anf_of_specific_output_bit"], [6, 2, 1, "", "find_copy_indexes"], [6, 2, 1, "", "find_degree_of_all_output_bits"], [6, 2, 1, "", "find_degree_of_specific_output_bit"], [6, 2, 1, "", "find_index_second_input"], [6, 2, 1, "", "get_all_variables_as_list"], [6, 2, 1, "", "get_anfs_from_sbox"], [6, 2, 1, "", "get_cipher_output_component_id"], [6, 2, 1, "", "get_input_vars"], [6, 2, 1, "", "get_monomial_occurences"], [6, 2, 1, "", "get_output_bit_index_previous_component"], [6, 2, 1, "", "get_output_vars"], [6, 2, 1, "", "get_solutions"], [6, 2, 1, "", "get_unused_variables"], [6, 2, 1, "", "get_where_component_is_used"], [6, 2, 1, "", "optimize_model"], [6, 2, 1, "", "order_predecessors"], [6, 2, 1, "", "re_init"], [6, 2, 1, "", "set_as_used_variables"], [6, 2, 1, "", "set_unused_variables_to_zero"]], "cipher_modules.evaluator": [[7, 4, 1, "", "evaluate"], [7, 4, 1, "", "evaluate_using_c"], [7, 4, 1, "", "evaluate_vectorized"], [7, 4, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"]], "cipher_modules.generic_functions": [[9, 4, 1, "", "AND"], [9, 4, 1, "", "MODADD"], [9, 4, 1, "", "MODSUB"], [9, 4, 1, "", "NOT"], [9, 4, 1, "", "OR"], [9, 4, 1, "", "ROTATE"], [9, 4, 1, "", "ROTATE_BY_VARIABLE_AMOUNT"], [9, 4, 1, "", "ROTATE_boolean_function"], [9, 4, 1, "", "SHIFT"], [9, 4, 1, "", "SHIFT_BY_VARIABLE_AMOUNT"], [9, 4, 1, "", "SIGMA"], [9, 4, 1, "", "THETA_GASTON"], [9, 4, 1, "", "THETA_KECCAK"], [9, 4, 1, "", "THETA_XOODOO"], [9, 4, 1, "", "XOR"], [9, 4, 1, "", "XOR_boolean_function"], [9, 4, 1, "", "add_padding"], [9, 4, 1, "", "compute_indexed_sum"], [9, 4, 1, "", "compute_word_indexed_sum"], [9, 4, 1, "", "concatenate_bool_func"], [9, 4, 1, "", "constant_bool_func"], [9, 4, 1, "", "convert_polynomial_to_binary_matrix_given_polynomial_modulus"], [9, 4, 1, "", "convert_x_to_binary_matrix_given_polynomial_modulus"], [9, 4, 1, "", "fsr_binary"], [9, 4, 1, "", "fsr_word"], [9, 4, 1, "", "index_list_to_expression_str"], [9, 4, 1, "", "index_list_to_expression_str_word"], [9, 4, 1, "", "int_to_byte_array"], [9, 4, 1, "", "linear_layer"], [9, 4, 1, "", "merge_bits"], [9, 4, 1, "", "mix_column_generalized"], [9, 4, 1, "", "mix_column_generalized_bool_func"], [9, 4, 1, "", "padding"], [9, 4, 1, "", "sbox"], [9, 4, 1, "", "sbox_bool_func"], [9, 4, 1, "", "select_bits"], [9, 4, 1, "", "set_from_hex_string"], [9, 4, 1, "", "transform_GF2NMatrix_to_BinMatrix"]], "cipher_modules.generic_functions_continuous_diffusion_analysis": [[10, 4, 1, "", "AND_continuous_diffusion_analysis"], [10, 4, 1, "", "CONSTANT_continuous_diffusion_analysis"], [10, 4, 1, "", "LINEAR_LAYER_continuous_diffusion_analysis"], [10, 4, 1, "", "MIX_COLUMN_generalized_continuous_diffusion_analysis"], [10, 4, 1, "", "MODADD_continuous_diffusion_analysis"], [10, 4, 1, "", "MODADD_continuous_diffusion_analysis_two_words"], [10, 4, 1, "", "MODSUB_continuous_diffusion_analysis"], [10, 4, 1, "", "NOT_continuous_diffusion_analysis"], [10, 4, 1, "", "OR_continuous_diffusion_analysis"], [10, 4, 1, "", "ROTATE_BY_VARIABLE_AMOUNT_continuous_diffusion_analysis"], [10, 4, 1, "", "ROTATE_continuous_diffusion_analysis"], [10, 4, 1, "", "SBOX_continuous_diffusion_analysis"], [10, 4, 1, "", "SHIFT_BY_VARIABLE_AMOUNT_continuous_diffusion_analysis"], [10, 4, 1, "", "SHIFT_continuous_diffusion_analysis"], [10, 4, 1, "", "SIGMA_continuous_diffusion_analysis"], [10, 4, 1, "", "XOR_continuous_diffusion_analysis"], [10, 4, 1, "", "XOR_continuous_diffusion_analysis_two_words"], [10, 4, 1, "", "compute_sbox_precomputations"], [10, 4, 1, "", "create_lookup_table_by_matrix"], [10, 4, 1, "", "create_lookup_table_for_finite_field_element"], [10, 4, 1, "", "extended_and_bit"], [10, 4, 1, "", "extended_left_rotation_by_variable_amount"], [10, 4, 1, "", "extended_left_shift_by_variable_amount"], [10, 4, 1, "", "extended_not_bit"], [10, 4, 1, "", "extended_one_left_rotation_iteration"], [10, 4, 1, "", "extended_one_left_shift_iteration"], [10, 4, 1, "", "extended_one_right_rotation_iteration"], [10, 4, 1, "", "extended_one_right_shift_iteration"], [10, 4, 1, "", "extended_right_rotation_by_variable_amount"], [10, 4, 1, "", "extended_right_shift_by_variable_amount"], [10, 4, 1, "", "extended_two_bit_multiplexer"], [10, 4, 1, "", "get_mix_column_precomputations"], [10, 4, 1, "", "get_sbox_precomputations"], [10, 4, 1, "", "select_bits_continuous_diffusion_analysis"]], "cipher_modules.generic_functions_vectorized_bit": [[11, 4, 1, "", "bit_vector_AND"], [11, 4, 1, "", "bit_vector_CONCAT"], [11, 4, 1, "", "bit_vector_MODADD"], [11, 4, 1, "", "bit_vector_MODSUB"], [11, 4, 1, "", "bit_vector_NOT"], [11, 4, 1, "", "bit_vector_OR"], [11, 4, 1, "", "bit_vector_ROTATE"], [11, 4, 1, "", "bit_vector_SBOX"], [11, 4, 1, "", "bit_vector_SHIFT"], [11, 4, 1, "", "bit_vector_SHIFT_BY_VARIABLE_AMOUNT"], [11, 4, 1, "", "bit_vector_XOR"], [11, 4, 1, "", "bit_vector_linear_layer"], [11, 4, 1, "", "bit_vector_mix_column"], [11, 4, 1, "", "bit_vector_mix_column_poly0"], [11, 4, 1, "", "bit_vector_print_as_hex_values"], [11, 4, 1, "", "bit_vector_select_word"], [11, 4, 1, "", "bit_vector_to_integer"], [11, 4, 1, "", "print_component_info"]], "cipher_modules.generic_functions_vectorized_byte": [[12, 4, 1, "", "byte_vector_AND"], [12, 4, 1, "", "byte_vector_MODADD"], [12, 4, 1, "", "byte_vector_MODSUB"], [12, 4, 1, "", "byte_vector_NOT"], [12, 4, 1, "", "byte_vector_OR"], [12, 4, 1, "", "byte_vector_ROTATE"], [12, 4, 1, "", "byte_vector_SBOX"], [12, 4, 1, "", "byte_vector_SHIFT"], [12, 4, 1, "", "byte_vector_SHIFT_BY_VARIABLE_AMOUNT"], [12, 4, 1, "", "byte_vector_XOR"], [12, 4, 1, "", "byte_vector_is_consecutive"], [12, 4, 1, "", "byte_vector_linear_layer"], [12, 4, 1, "", "byte_vector_mix_column"], [12, 4, 1, "", "byte_vector_mix_column_poly0"], [12, 4, 1, "", "byte_vector_print_as_hex_values"], [12, 4, 1, "", "byte_vector_select_all_words"], [12, 4, 1, "", "cipher_inputs_to_evaluate_vectorized_inputs"], [12, 4, 1, "", "evaluate_vectorized_outputs_to_integers"], [12, 4, 1, "", "generate_formatted_inputs"], [12, 4, 1, "", "get_number_of_bytes_needed_for_bit_size"], [12, 4, 1, "", "get_number_of_consecutive_bits"], [12, 4, 1, "", "integer_array_to_evaluate_vectorized_input"]], "cipher_modules.graph_generator": [[14, 4, 1, "", "create_networkx_graph_from_input_ids"], [14, 4, 1, "", "split_cipher_graph_into_top_bottom"]], "cipher_modules.inverse_cipher": [[15, 4, 1, "", "add_bit_to_bit_list"], [15, 4, 1, "", "add_new_component_to_list"], [15, 4, 1, "", "all_input_bits_available"], [15, 4, 1, "", "all_output_bits_available"], [15, 4, 1, "", "all_output_updated_bits_available"], [15, 4, 1, "", "are_equal_components"], [15, 4, 1, "", "are_there_enough_available_inputs_to_evaluate_component"], [15, 4, 1, "", "are_there_enough_available_inputs_to_perform_inversion"], [15, 4, 1, "", "are_these_bits_available"], [15, 4, 1, "", "cipher_find_component"], [15, 4, 1, "", "component_input_bits"], [15, 4, 1, "", "component_inverse"], [15, 4, 1, "", "component_output_bits"], [15, 4, 1, "", "compute_input_id_links_and_input_bit_positions_for_inverse_component_from_available_output_components"], [15, 4, 1, "", "compute_input_id_links_and_input_bit_positions_for_inverse_component_from_input_components"], [15, 4, 1, "", "delete_orphan_links"], [15, 4, 1, "", "equivalent_bits_in_common"], [15, 4, 1, "", "evaluated_component"], [15, 4, 1, "", "find_correct_order"], [15, 4, 1, "", "find_correct_order_for_inversion"], [15, 4, 1, "", "find_input_id_link_bits_equivalent"], [15, 4, 1, "", "get_all_bit_names"], [15, 4, 1, "", "get_all_components_with_the_same_input_id_link_and_input_bit_positions"], [15, 4, 1, "", "get_all_equivalent_bits"], [15, 4, 1, "", "get_available_output_components"], [15, 4, 1, "", "get_cipher_components"], [15, 4, 1, "", "get_component_from_id"], [15, 4, 1, "", "get_equivalent_input_bit_from_output_bit"], [15, 4, 1, "", "get_key_schedule_component_ids"], [15, 4, 1, "", "get_most_recent_intermediate_output"], [15, 4, 1, "", "get_output_components"], [15, 4, 1, "", "get_relative_position"], [15, 4, 1, "", "is_bit_adjacent_to_list_of_bits"], [15, 4, 1, "", "is_bit_contained_in"], [15, 4, 1, "", "is_intersection_of_input_id_links_null"], [15, 4, 1, "", "is_output_bits_updated_equivalent_to_input_bits"], [15, 4, 1, "", "is_possibly_invertible_component"], [15, 4, 1, "", "order_input_id_links_for_modadd"], [15, 4, 1, "", "remove_components_from_rounds"], [15, 4, 1, "", "sort_cipher_graph"], [15, 4, 1, "", "sort_input_id_links_and_input_bit_positions"], [15, 4, 1, "", "topological_sort"], [15, 4, 1, "", "update_available_bits_with_component_input_bits"], [15, 4, 1, "", "update_available_bits_with_component_output_bits"], [15, 4, 1, "", "update_input_links_from_rounds"], [15, 4, 1, "", "update_output_bits"]], "cipher_modules.models.algebraic": [[16, 0, 0, "-", "algebraic_model"], [17, 0, 0, "-", "boolean_polynomial_ring"], [18, 0, 0, "-", "constraints"]], "cipher_modules.models.algebraic.algebraic_model": [[16, 1, 1, "", "AlgebraicModel"]], "cipher_modules.models.algebraic.algebraic_model.AlgebraicModel": [[16, 2, 1, "", "connection_polynomials"], [16, 2, 1, "", "connection_polynomials_at_round"], [16, 2, 1, "", "is_algebraically_secure"], [16, 2, 1, "", "nvars"], [16, 2, 1, "", "polynomial_system"], [16, 2, 1, "", "polynomial_system_at_round"], [16, 2, 1, "", "ring"], [16, 2, 1, "", "var_names"]], "cipher_modules.models.algebraic.boolean_polynomial_ring": [[17, 4, 1, "", "is_boolean_polynomial_ring"]], "cipher_modules.models.algebraic.constraints": [[18, 4, 1, "", "equality_polynomials"], [18, 4, 1, "", "mod_addition_polynomials"], [18, 4, 1, "", "mod_binary_operation_polynomials"], [18, 4, 1, "", "mod_subtraction_polynomials"]], "cipher_modules.models.cp.minizinc_utils": [[19, 0, 0, "-", "mzn_bct_predicates"], [20, 0, 0, "-", "usefulfunctions"], [21, 0, 0, "-", "utils"]], "cipher_modules.models.cp.minizinc_utils.mzn_bct_predicates": [[19, 4, 1, "", "get_bct_operations"]], "cipher_modules.models.cp.minizinc_utils.utils": [[21, 4, 1, "", "filter_out_strings_containing_substring"], [21, 4, 1, "", "group_strings_by_pattern"]], "cipher_modules.models.cp": [[22, 0, 0, "-", "mzn_model"], [36, 0, 0, "-", "solvers"]], "cipher_modules.models.cp.mzn_model": [[22, 1, 1, "", "MznModel"]], "cipher_modules.models.cp.mzn_model.MznModel": [[22, 2, 1, "", "add_comment"], [22, 2, 1, "", "add_constraint_from_str"], [22, 2, 1, "", "add_output_comment"], [22, 2, 1, "", "add_solution_to_components_values"], [22, 2, 1, "", "add_solution_to_components_values_internal"], [22, 2, 1, "", "add_solutions_from_components_values"], [22, 2, 1, "", "build_mix_column_truncated_table"], [22, 2, 1, "", "calculate_bit_positions"], [22, 2, 1, "", "calculate_bit_values"], [22, 2, 1, "", "calculate_input_bit_positions"], [22, 3, 1, "", "cipher"], [22, 3, 1, "", "cipher_id"], [22, 2, 1, "", "find_possible_number_of_active_sboxes"], [22, 2, 1, "", "fix_variables_value_constraints"], [22, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [22, 3, 1, "", "float_and_lat_values"], [22, 2, 1, "", "format_component_value"], [22, 2, 1, "", "get_command_for_solver_process"], [22, 2, 1, "", "get_mix_column_all_inputs"], [22, 2, 1, "", "get_total_weight"], [22, 2, 1, "", "initialise_model"], [22, 3, 1, "", "model_constraints"], [22, 2, 1, "", "output_probability_per_round"], [22, 2, 1, "", "parse_solver_information"], [22, 2, 1, "", "set_component_solution_value"], [22, 2, 1, "", "solve"], [22, 2, 1, "", "solve_for_ARX"], [22, 2, 1, "", "solver_names"], [22, 2, 1, "", "weight_constraints"], [22, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models": [[23, 0, 0, "-", "mzn_boomerang_model_arx_optimized"], [24, 0, 0, "-", "mzn_cipher_model"], [25, 0, 0, "-", "mzn_cipher_model_arx_optimized"], [26, 0, 0, "-", "mzn_deterministic_truncated_xor_differential_model"], [27, 0, 0, "-", "mzn_deterministic_truncated_xor_differential_model_arx_optimized"], [28, 0, 0, "-", "mzn_hybrid_impossible_xor_differential_model"], [29, 0, 0, "-", "mzn_impossible_xor_differential_model"], [30, 0, 0, "-", "mzn_wordwise_deterministic_truncated_xor_differential_model"], [31, 0, 0, "-", "mzn_xor_differential_model"], [32, 0, 0, "-", "mzn_xor_differential_model_arx_optimized"], [33, 0, 0, "-", "mzn_xor_differential_number_of_active_sboxes_model"], [34, 0, 0, "-", "mzn_xor_differential_trail_search_fixing_number_of_active_sboxes_model"], [35, 0, 0, "-", "mzn_xor_linear_model"]], "cipher_modules.models.cp.mzn_models.mzn_boomerang_model_arx_optimized": [[23, 1, 1, "", "MznBoomerangModelARXOptimized"]], "cipher_modules.models.cp.mzn_models.mzn_boomerang_model_arx_optimized.MznBoomerangModelARXOptimized": [[23, 2, 1, "", "add_comment"], [23, 2, 1, "", "add_constraint_from_str"], [23, 2, 1, "", "add_output_comment"], [23, 2, 1, "", "add_solution_to_components_values"], [23, 2, 1, "", "add_solution_to_components_values_internal"], [23, 2, 1, "", "add_solutions_from_components_values"], [23, 2, 1, "", "bct_parse_result"], [23, 2, 1, "", "build_all_xor_differential_trails_with_fixed_weight"], [23, 2, 1, "", "build_lowest_weight_xor_differential_trail_model"], [23, 2, 1, "", "build_lowest_xor_differential_trails_with_at_most_weight"], [23, 2, 1, "", "build_mix_column_truncated_table"], [23, 2, 1, "", "build_xor_differential_trail_model"], [23, 2, 1, "", "calculate_bit_positions"], [23, 2, 1, "", "calculate_bit_values"], [23, 2, 1, "", "calculate_input_bit_positions"], [23, 3, 1, "", "cipher"], [23, 3, 1, "", "cipher_id"], [23, 2, 1, "", "connect_rounds"], [23, 2, 1, "", "constraint_permutation_and_key_schedule_separately_by_input_sizes"], [23, 2, 1, "", "create_boomerang_model"], [23, 2, 1, "", "create_bottom_cipher"], [23, 2, 1, "", "create_top_and_bottom_ciphers_from_subgraphs"], [23, 2, 1, "", "create_top_cipher"], [23, 2, 1, "", "extend_model_constraints"], [23, 2, 1, "", "extend_variables"], [23, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [23, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [23, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [23, 2, 1, "", "find_min_of_max_xor_differential_between_permutation_and_key_schedule"], [23, 2, 1, "", "find_possible_number_of_active_sboxes"], [23, 2, 1, "", "fix_variables_value_constraints"], [23, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [23, 3, 1, "", "float_and_lat_values"], [23, 2, 1, "", "format_component_value"], [23, 2, 1, "", "get_command_for_solver_process"], [23, 2, 1, "", "get_mix_column_all_inputs"], [23, 2, 1, "", "get_model_constraints"], [23, 2, 1, "", "get_new_input_id_links"], [23, 2, 1, "", "get_probability_vars_from_key_schedule"], [23, 2, 1, "", "get_probability_vars_from_permutation"], [23, 2, 1, "", "get_total_weight"], [23, 2, 1, "", "get_variables"], [23, 2, 1, "", "init_constraints"], [23, 2, 1, "", "initialise_model"], [23, 2, 1, "", "initialize_bottom_cipher"], [23, 3, 1, "", "model_constraints"], [23, 2, 1, "", "objective_generator"], [23, 2, 1, "", "output_probability_per_round"], [23, 2, 1, "", "parse_components_with_solution"], [23, 2, 1, "", "parse_probability_vars"], [23, 2, 1, "", "parse_solver_information"], [23, 2, 1, "", "reduce_cipher"], [23, 2, 1, "", "remove_component"], [23, 2, 1, "", "remove_components_not_in_graph"], [23, 2, 1, "", "remove_empty_rounds"], [23, 2, 1, "", "reset_round_ids"], [23, 2, 1, "", "satisfy_generator"], [23, 2, 1, "", "set_component_solution_value"], [23, 2, 1, "", "set_max_number_of_carries_on_arx_cipher"], [23, 2, 1, "", "set_max_number_of_nonlinear_carries"], [23, 2, 1, "", "setup_bottom_cipher_inputs"], [23, 2, 1, "", "solve"], [23, 2, 1, "", "solve_for_ARX"], [23, 2, 1, "", "solver_names"], [23, 2, 1, "", "update_bottom_cipher_inputs"], [23, 2, 1, "", "weight_constraints"], [23, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models.mzn_cipher_model": [[24, 1, 1, "", "MznCipherModel"]], "cipher_modules.models.cp.mzn_models.mzn_cipher_model.MznCipherModel": [[24, 2, 1, "", "add_comment"], [24, 2, 1, "", "add_constraint_from_str"], [24, 2, 1, "", "add_output_comment"], [24, 2, 1, "", "add_solution_to_components_values"], [24, 2, 1, "", "add_solution_to_components_values_internal"], [24, 2, 1, "", "add_solutions_from_components_values"], [24, 2, 1, "", "build_cipher_model"], [24, 2, 1, "", "build_mix_column_truncated_table"], [24, 2, 1, "", "calculate_bit_positions"], [24, 2, 1, "", "calculate_bit_values"], [24, 2, 1, "", "calculate_input_bit_positions"], [24, 3, 1, "", "cipher"], [24, 3, 1, "", "cipher_id"], [24, 2, 1, "", "evaluate_model"], [24, 2, 1, "", "final_constraints"], [24, 2, 1, "", "find_possible_number_of_active_sboxes"], [24, 2, 1, "", "fix_variables_value_constraints"], [24, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [24, 3, 1, "", "float_and_lat_values"], [24, 2, 1, "", "format_component_value"], [24, 2, 1, "", "get_command_for_solver_process"], [24, 2, 1, "", "get_mix_column_all_inputs"], [24, 2, 1, "", "get_total_weight"], [24, 2, 1, "", "initialise_model"], [24, 2, 1, "", "input_constraints"], [24, 3, 1, "", "model_constraints"], [24, 2, 1, "", "output_probability_per_round"], [24, 2, 1, "", "parse_solver_information"], [24, 2, 1, "", "set_component_solution_value"], [24, 2, 1, "", "solve"], [24, 2, 1, "", "solve_for_ARX"], [24, 2, 1, "", "solver_names"], [24, 2, 1, "", "weight_constraints"], [24, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models.mzn_cipher_model_arx_optimized": [[25, 1, 1, "", "MznCipherModelARXOptimized"]], "cipher_modules.models.cp.mzn_models.mzn_cipher_model_arx_optimized.MznCipherModelARXOptimized": [[25, 2, 1, "", "add_comment"], [25, 2, 1, "", "add_constraint_from_str"], [25, 2, 1, "", "add_output_comment"], [25, 2, 1, "", "add_solution_to_components_values"], [25, 2, 1, "", "add_solution_to_components_values_internal"], [25, 2, 1, "", "add_solutions_from_components_values"], [25, 2, 1, "", "build_cipher_model"], [25, 2, 1, "", "build_mix_column_truncated_table"], [25, 2, 1, "", "calculate_bit_positions"], [25, 2, 1, "", "calculate_bit_values"], [25, 2, 1, "", "calculate_input_bit_positions"], [25, 3, 1, "", "cipher"], [25, 3, 1, "", "cipher_id"], [25, 2, 1, "", "find_possible_number_of_active_sboxes"], [25, 2, 1, "", "fix_variables_value_constraints"], [25, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [25, 3, 1, "", "float_and_lat_values"], [25, 2, 1, "", "format_component_value"], [25, 2, 1, "", "get_command_for_solver_process"], [25, 2, 1, "", "get_mix_column_all_inputs"], [25, 2, 1, "", "get_total_weight"], [25, 2, 1, "", "initialise_model"], [25, 3, 1, "", "model_constraints"], [25, 2, 1, "", "output_probability_per_round"], [25, 2, 1, "", "parse_solver_information"], [25, 2, 1, "", "set_component_solution_value"], [25, 2, 1, "", "solve"], [25, 2, 1, "", "solve_for_ARX"], [25, 2, 1, "", "solver_names"], [25, 2, 1, "", "weight_constraints"], [25, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models.mzn_deterministic_truncated_xor_differential_model": [[26, 1, 1, "", "MznDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.cp.mzn_models.mzn_deterministic_truncated_xor_differential_model.MznDeterministicTruncatedXorDifferentialModel": [[26, 2, 1, "", "add_comment"], [26, 2, 1, "", "add_constraint_from_str"], [26, 2, 1, "", "add_output_comment"], [26, 2, 1, "", "add_solution_to_components_values"], [26, 2, 1, "", "add_solution_to_components_values_internal"], [26, 2, 1, "", "add_solutions_from_components_values"], [26, 2, 1, "", "build_deterministic_truncated_xor_differential_trail_model"], [26, 2, 1, "", "build_mix_column_truncated_table"], [26, 2, 1, "", "calculate_bit_positions"], [26, 2, 1, "", "calculate_bit_values"], [26, 2, 1, "", "calculate_input_bit_positions"], [26, 3, 1, "", "cipher"], [26, 3, 1, "", "cipher_id"], [26, 2, 1, "", "final_deterministic_truncated_xor_differential_constraints"], [26, 2, 1, "", "find_all_deterministic_truncated_xor_differential_trails"], [26, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [26, 2, 1, "", "find_one_deterministic_truncated_xor_differential_trail"], [26, 2, 1, "", "find_possible_number_of_active_sboxes"], [26, 2, 1, "", "fix_variables_value_constraints"], [26, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [26, 3, 1, "", "float_and_lat_values"], [26, 2, 1, "", "format_component_value"], [26, 2, 1, "", "get_command_for_solver_process"], [26, 2, 1, "", "get_mix_column_all_inputs"], [26, 2, 1, "", "get_total_weight"], [26, 2, 1, "", "initialise_model"], [26, 2, 1, "", "input_deterministic_truncated_xor_differential_constraints"], [26, 3, 1, "", "model_constraints"], [26, 2, 1, "", "output_constraints"], [26, 2, 1, "", "output_inverse_constraints"], [26, 2, 1, "", "output_probability_per_round"], [26, 2, 1, "", "parse_solver_information"], [26, 2, 1, "", "propagate_deterministically"], [26, 2, 1, "", "set_component_solution_value"], [26, 2, 1, "", "solve"], [26, 2, 1, "", "solve_for_ARX"], [26, 2, 1, "", "solver_names"], [26, 2, 1, "", "weight_constraints"], [26, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models.mzn_deterministic_truncated_xor_differential_model_arx_optimized": [[27, 1, 1, "", "MznDeterministicTruncatedXorDifferentialModelARXOptimized"]], "cipher_modules.models.cp.mzn_models.mzn_deterministic_truncated_xor_differential_model_arx_optimized.MznDeterministicTruncatedXorDifferentialModelARXOptimized": [[27, 2, 1, "", "add_comment"], [27, 2, 1, "", "add_constraint_from_str"], [27, 2, 1, "", "add_output_comment"], [27, 2, 1, "", "add_solution_to_components_values"], [27, 2, 1, "", "add_solution_to_components_values_internal"], [27, 2, 1, "", "add_solutions_from_components_values"], [27, 2, 1, "", "build_deterministic_truncated_xor_differential_trail_model"], [27, 2, 1, "", "build_mix_column_truncated_table"], [27, 2, 1, "", "calculate_bit_positions"], [27, 2, 1, "", "calculate_bit_values"], [27, 2, 1, "", "calculate_input_bit_positions"], [27, 3, 1, "", "cipher"], [27, 3, 1, "", "cipher_id"], [27, 2, 1, "", "find_possible_number_of_active_sboxes"], [27, 2, 1, "", "fix_variables_value_constraints"], [27, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [27, 3, 1, "", "float_and_lat_values"], [27, 2, 1, "", "format_component_value"], [27, 2, 1, "", "get_command_for_solver_process"], [27, 2, 1, "", "get_mix_column_all_inputs"], [27, 2, 1, "", "get_total_weight"], [27, 2, 1, "", "initialise_model"], [27, 3, 1, "", "model_constraints"], [27, 2, 1, "", "output_probability_per_round"], [27, 2, 1, "", "parse_solver_information"], [27, 2, 1, "", "set_component_solution_value"], [27, 2, 1, "", "solve"], [27, 2, 1, "", "solve_for_ARX"], [27, 2, 1, "", "solver_names"], [27, 2, 1, "", "weight_constraints"], [27, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models.mzn_hybrid_impossible_xor_differential_model": [[28, 1, 1, "", "MznHybridImpossibleXorDifferentialModel"]], "cipher_modules.models.cp.mzn_models.mzn_hybrid_impossible_xor_differential_model.MznHybridImpossibleXorDifferentialModel": [[28, 2, 1, "", "add_comment"], [28, 2, 1, "", "add_constraint_from_str"], [28, 2, 1, "", "add_output_comment"], [28, 2, 1, "", "add_solution_to_components_values"], [28, 2, 1, "", "add_solution_to_components_values_internal"], [28, 2, 1, "", "add_solutions_from_components_values"], [28, 2, 1, "", "build_deterministic_truncated_xor_differential_trail_model"], [28, 2, 1, "", "build_hybrid_impossible_xor_differential_trail_model"], [28, 2, 1, "", "build_impossible_backward_model"], [28, 2, 1, "", "build_impossible_forward_model"], [28, 2, 1, "", "build_impossible_xor_differential_trail_model"], [28, 2, 1, "", "build_impossible_xor_differential_trail_with_extensions_model"], [28, 2, 1, "", "build_improbable_backward_model"], [28, 2, 1, "", "build_improbable_forward_model"], [28, 2, 1, "", "build_mix_column_truncated_table"], [28, 2, 1, "", "calculate_bit_positions"], [28, 2, 1, "", "calculate_bit_values"], [28, 2, 1, "", "calculate_input_bit_positions"], [28, 3, 1, "", "cipher"], [28, 3, 1, "", "cipher_id"], [28, 2, 1, "", "clean_constraints"], [28, 2, 1, "", "clean_inverse_impossible_variables_constraints"], [28, 2, 1, "", "clean_inverse_impossible_variables_constraints_with_extensions"], [28, 2, 1, "", "clean_repetitions_in_constraints"], [28, 2, 1, "", "constraints_for_constants"], [28, 2, 1, "", "constraints_for_key_schedule"], [28, 2, 1, "", "extract_constants"], [28, 2, 1, "", "extract_key_schedule"], [28, 2, 1, "", "final_deterministic_truncated_xor_differential_constraints"], [28, 2, 1, "", "final_impossible_constraints"], [28, 2, 1, "", "final_impossible_constraints_with_extensions"], [28, 2, 1, "", "find_all_deterministic_truncated_xor_differential_trails"], [28, 2, 1, "", "find_all_impossible_xor_differential_trails"], [28, 2, 1, "", "find_lowest_complexity_impossible_xor_differential_trail"], [28, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [28, 2, 1, "", "find_one_deterministic_truncated_xor_differential_trail"], [28, 2, 1, "", "find_one_impossible_xor_differential_cluster"], [28, 2, 1, "", "find_one_impossible_xor_differential_trail"], [28, 2, 1, "", "find_one_impossible_xor_differential_trail_with_extensions"], [28, 2, 1, "", "find_possible_number_of_active_sboxes"], [28, 2, 1, "", "fix_variables_value_constraints"], [28, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [28, 3, 1, "", "float_and_lat_values"], [28, 2, 1, "", "format_component_value"], [28, 2, 1, "", "get_command_for_solver_process"], [28, 2, 1, "", "get_component_from_id"], [28, 2, 1, "", "get_component_round"], [28, 2, 1, "", "get_direct_component_correspondance"], [28, 2, 1, "", "get_inverse_component_correspondance"], [28, 2, 1, "", "get_inverse_state_key_bits_positions"], [28, 2, 1, "", "get_mix_column_all_inputs"], [28, 2, 1, "", "get_state_key_bits_positions"], [28, 2, 1, "", "get_total_weight"], [28, 2, 1, "", "initialise_model"], [28, 2, 1, "", "input_constraints"], [28, 2, 1, "", "input_deterministic_truncated_xor_differential_constraints"], [28, 2, 1, "", "input_impossible_constraints"], [28, 2, 1, "", "input_impossible_constraints_with_extensions"], [28, 2, 1, "", "is_cross_round_component"], [28, 2, 1, "", "link_constraints_for_trail_with_extensions"], [28, 3, 1, "", "model_constraints"], [28, 2, 1, "", "output_constraints"], [28, 2, 1, "", "output_inverse_constraints"], [28, 2, 1, "", "output_probability_per_round"], [28, 2, 1, "", "parse_solver_information"], [28, 2, 1, "", "propagate_deterministically"], [28, 2, 1, "", "set_component_solution_value"], [28, 2, 1, "", "set_inverse_component_id_in_constraints"], [28, 2, 1, "", "solve"], [28, 2, 1, "", "solve_for_ARX"], [28, 2, 1, "", "solver_names"], [28, 2, 1, "", "update_sbox_ddt_valid_probabilities"], [28, 2, 1, "", "weight_constraints"], [28, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models.mzn_impossible_xor_differential_model": [[29, 1, 1, "", "MznImpossibleXorDifferentialModel"]], "cipher_modules.models.cp.mzn_models.mzn_impossible_xor_differential_model.MznImpossibleXorDifferentialModel": [[29, 2, 1, "", "add_comment"], [29, 2, 1, "", "add_constraint_from_str"], [29, 2, 1, "", "add_output_comment"], [29, 2, 1, "", "add_solution_to_components_values"], [29, 2, 1, "", "add_solution_to_components_values_internal"], [29, 2, 1, "", "add_solutions_from_components_values"], [29, 2, 1, "", "build_deterministic_truncated_xor_differential_trail_model"], [29, 2, 1, "", "build_impossible_backward_model"], [29, 2, 1, "", "build_impossible_forward_model"], [29, 2, 1, "", "build_impossible_xor_differential_trail_model"], [29, 2, 1, "", "build_impossible_xor_differential_trail_with_extensions_model"], [29, 2, 1, "", "build_mix_column_truncated_table"], [29, 2, 1, "", "calculate_bit_positions"], [29, 2, 1, "", "calculate_bit_values"], [29, 2, 1, "", "calculate_input_bit_positions"], [29, 3, 1, "", "cipher"], [29, 3, 1, "", "cipher_id"], [29, 2, 1, "", "clean_constraints"], [29, 2, 1, "", "clean_inverse_impossible_variables_constraints"], [29, 2, 1, "", "clean_inverse_impossible_variables_constraints_with_extensions"], [29, 2, 1, "", "clean_repetitions_in_constraints"], [29, 2, 1, "", "constraints_for_constants"], [29, 2, 1, "", "constraints_for_key_schedule"], [29, 2, 1, "", "extract_constants"], [29, 2, 1, "", "extract_key_schedule"], [29, 2, 1, "", "final_deterministic_truncated_xor_differential_constraints"], [29, 2, 1, "", "final_impossible_constraints"], [29, 2, 1, "", "final_impossible_constraints_with_extensions"], [29, 2, 1, "", "find_all_deterministic_truncated_xor_differential_trails"], [29, 2, 1, "", "find_all_impossible_xor_differential_trails"], [29, 2, 1, "", "find_lowest_complexity_impossible_xor_differential_trail"], [29, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [29, 2, 1, "", "find_one_deterministic_truncated_xor_differential_trail"], [29, 2, 1, "", "find_one_impossible_xor_differential_cluster"], [29, 2, 1, "", "find_one_impossible_xor_differential_trail"], [29, 2, 1, "", "find_one_impossible_xor_differential_trail_with_extensions"], [29, 2, 1, "", "find_possible_number_of_active_sboxes"], [29, 2, 1, "", "fix_variables_value_constraints"], [29, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [29, 3, 1, "", "float_and_lat_values"], [29, 2, 1, "", "format_component_value"], [29, 2, 1, "", "get_command_for_solver_process"], [29, 2, 1, "", "get_component_from_id"], [29, 2, 1, "", "get_component_round"], [29, 2, 1, "", "get_direct_component_correspondance"], [29, 2, 1, "", "get_inverse_component_correspondance"], [29, 2, 1, "", "get_inverse_state_key_bits_positions"], [29, 2, 1, "", "get_mix_column_all_inputs"], [29, 2, 1, "", "get_state_key_bits_positions"], [29, 2, 1, "", "get_total_weight"], [29, 2, 1, "", "initialise_model"], [29, 2, 1, "", "input_deterministic_truncated_xor_differential_constraints"], [29, 2, 1, "", "input_impossible_constraints"], [29, 2, 1, "", "input_impossible_constraints_with_extensions"], [29, 2, 1, "", "is_cross_round_component"], [29, 2, 1, "", "link_constraints_for_trail_with_extensions"], [29, 3, 1, "", "model_constraints"], [29, 2, 1, "", "output_constraints"], [29, 2, 1, "", "output_inverse_constraints"], [29, 2, 1, "", "output_probability_per_round"], [29, 2, 1, "", "parse_solver_information"], [29, 2, 1, "", "propagate_deterministically"], [29, 2, 1, "", "set_component_solution_value"], [29, 2, 1, "", "set_inverse_component_id_in_constraints"], [29, 2, 1, "", "solve"], [29, 2, 1, "", "solve_for_ARX"], [29, 2, 1, "", "solver_names"], [29, 2, 1, "", "weight_constraints"], [29, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models.mzn_wordwise_deterministic_truncated_xor_differential_model": [[30, 1, 1, "", "MznWordwiseDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.cp.mzn_models.mzn_wordwise_deterministic_truncated_xor_differential_model.MznWordwiseDeterministicTruncatedXorDifferentialModel": [[30, 2, 1, "", "add_comment"], [30, 2, 1, "", "add_constraint_from_str"], [30, 2, 1, "", "add_output_comment"], [30, 2, 1, "", "add_solution_to_components_values"], [30, 2, 1, "", "add_solution_to_components_values_internal"], [30, 2, 1, "", "add_solutions_from_components_values"], [30, 2, 1, "", "build_deterministic_truncated_xor_differential_trail_model"], [30, 2, 1, "", "build_mix_column_truncated_table"], [30, 2, 1, "", "calculate_bit_positions"], [30, 2, 1, "", "calculate_bit_values"], [30, 2, 1, "", "calculate_input_bit_positions"], [30, 3, 1, "", "cipher"], [30, 3, 1, "", "cipher_id"], [30, 2, 1, "", "final_deterministic_truncated_xor_differential_constraints"], [30, 2, 1, "", "final_wordwise_deterministic_truncated_xor_differential_constraints"], [30, 2, 1, "", "find_all_deterministic_truncated_xor_differential_trails"], [30, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [30, 2, 1, "", "find_one_deterministic_truncated_xor_differential_trail"], [30, 2, 1, "", "find_one_wordwise_deterministic_truncated_xor_differential_trail"], [30, 2, 1, "", "find_possible_number_of_active_sboxes"], [30, 2, 1, "", "fix_variables_value_constraints"], [30, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [30, 3, 1, "", "float_and_lat_values"], [30, 2, 1, "", "format_component_value"], [30, 2, 1, "", "get_command_for_solver_process"], [30, 2, 1, "", "get_mix_column_all_inputs"], [30, 2, 1, "", "get_total_weight"], [30, 2, 1, "", "initialise_model"], [30, 2, 1, "", "input_deterministic_truncated_xor_differential_constraints"], [30, 2, 1, "", "input_wordwise_deterministic_truncated_xor_differential_constraints"], [30, 3, 1, "", "model_constraints"], [30, 2, 1, "", "output_constraints"], [30, 2, 1, "", "output_inverse_constraints"], [30, 2, 1, "", "output_probability_per_round"], [30, 2, 1, "", "parse_solver_information"], [30, 2, 1, "", "propagate_deterministically"], [30, 2, 1, "", "set_component_solution_value"], [30, 2, 1, "", "solve"], [30, 2, 1, "", "solve_for_ARX"], [30, 2, 1, "", "solver_names"], [30, 2, 1, "", "weight_constraints"], [30, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models.mzn_xor_differential_model": [[31, 1, 1, "", "MznXorDifferentialModel"], [31, 4, 1, "", "and_xor_differential_probability_ddt"], [31, 4, 1, "", "update_and_or_ddt_valid_probabilities"]], "cipher_modules.models.cp.mzn_models.mzn_xor_differential_model.MznXorDifferentialModel": [[31, 2, 1, "", "add_comment"], [31, 2, 1, "", "add_constraint_from_str"], [31, 2, 1, "", "add_output_comment"], [31, 2, 1, "", "add_solution_to_components_values"], [31, 2, 1, "", "add_solution_to_components_values_internal"], [31, 2, 1, "", "add_solutions_from_components_values"], [31, 2, 1, "", "build_mix_column_truncated_table"], [31, 2, 1, "", "build_xor_differential_trail_model"], [31, 2, 1, "", "build_xor_differential_trail_model_template"], [31, 2, 1, "", "calculate_bit_positions"], [31, 2, 1, "", "calculate_bit_values"], [31, 2, 1, "", "calculate_input_bit_positions"], [31, 3, 1, "", "cipher"], [31, 3, 1, "", "cipher_id"], [31, 2, 1, "", "final_xor_differential_constraints"], [31, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [31, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [31, 2, 1, "", "find_differential_weight"], [31, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [31, 2, 1, "", "find_one_xor_differential_trail"], [31, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [31, 2, 1, "", "find_possible_number_of_active_sboxes"], [31, 2, 1, "", "fix_variables_value_constraints"], [31, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [31, 3, 1, "", "float_and_lat_values"], [31, 2, 1, "", "format_component_value"], [31, 2, 1, "", "get_command_for_solver_process"], [31, 2, 1, "", "get_mix_column_all_inputs"], [31, 2, 1, "", "get_total_weight"], [31, 2, 1, "", "get_word_operation_xor_differential_constraints"], [31, 2, 1, "", "initialise_model"], [31, 2, 1, "", "input_xor_differential_constraints"], [31, 3, 1, "", "model_constraints"], [31, 2, 1, "", "output_probability_per_round"], [31, 2, 1, "", "parse_solver_information"], [31, 2, 1, "", "set_component_solution_value"], [31, 2, 1, "", "solve"], [31, 2, 1, "", "solve_for_ARX"], [31, 2, 1, "", "solver_names"], [31, 2, 1, "", "update_sbox_ddt_valid_probabilities"], [31, 2, 1, "", "weight_constraints"], [31, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models.mzn_xor_differential_model_arx_optimized": [[32, 1, 1, "", "MznXorDifferentialModelARXOptimized"]], "cipher_modules.models.cp.mzn_models.mzn_xor_differential_model_arx_optimized.MznXorDifferentialModelARXOptimized": [[32, 2, 1, "", "add_comment"], [32, 2, 1, "", "add_constraint_from_str"], [32, 2, 1, "", "add_output_comment"], [32, 2, 1, "", "add_solution_to_components_values"], [32, 2, 1, "", "add_solution_to_components_values_internal"], [32, 2, 1, "", "add_solutions_from_components_values"], [32, 2, 1, "", "build_all_xor_differential_trails_with_fixed_weight"], [32, 2, 1, "", "build_lowest_weight_xor_differential_trail_model"], [32, 2, 1, "", "build_lowest_xor_differential_trails_with_at_most_weight"], [32, 2, 1, "", "build_mix_column_truncated_table"], [32, 2, 1, "", "build_xor_differential_trail_model"], [32, 2, 1, "", "calculate_bit_positions"], [32, 2, 1, "", "calculate_bit_values"], [32, 2, 1, "", "calculate_input_bit_positions"], [32, 3, 1, "", "cipher"], [32, 3, 1, "", "cipher_id"], [32, 2, 1, "", "connect_rounds"], [32, 2, 1, "", "constraint_permutation_and_key_schedule_separately_by_input_sizes"], [32, 2, 1, "", "extend_model_constraints"], [32, 2, 1, "", "extend_variables"], [32, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [32, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [32, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [32, 2, 1, "", "find_min_of_max_xor_differential_between_permutation_and_key_schedule"], [32, 2, 1, "", "find_possible_number_of_active_sboxes"], [32, 2, 1, "", "fix_variables_value_constraints"], [32, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [32, 3, 1, "", "float_and_lat_values"], [32, 2, 1, "", "format_component_value"], [32, 2, 1, "", "get_command_for_solver_process"], [32, 2, 1, "", "get_mix_column_all_inputs"], [32, 2, 1, "", "get_model_constraints"], [32, 2, 1, "", "get_probability_vars_from_key_schedule"], [32, 2, 1, "", "get_probability_vars_from_permutation"], [32, 2, 1, "", "get_total_weight"], [32, 2, 1, "", "get_variables"], [32, 2, 1, "", "init_constraints"], [32, 2, 1, "", "initialise_model"], [32, 3, 1, "", "model_constraints"], [32, 2, 1, "", "objective_generator"], [32, 2, 1, "", "output_probability_per_round"], [32, 2, 1, "", "parse_probability_vars"], [32, 2, 1, "", "parse_solver_information"], [32, 2, 1, "", "satisfy_generator"], [32, 2, 1, "", "set_component_solution_value"], [32, 2, 1, "", "set_max_number_of_carries_on_arx_cipher"], [32, 2, 1, "", "set_max_number_of_nonlinear_carries"], [32, 2, 1, "", "solve"], [32, 2, 1, "", "solve_for_ARX"], [32, 2, 1, "", "solver_names"], [32, 2, 1, "", "weight_constraints"], [32, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.cp.mzn_models.mzn_xor_differential_number_of_active_sboxes_model": [[33, 1, 1, "", "MznXorDifferentialNumberOfActiveSboxesModel"], [33, 4, 1, "", "build_xor_truncated_table"]], "cipher_modules.models.cp.mzn_models.mzn_xor_differential_number_of_active_sboxes_model.MznXorDifferentialNumberOfActiveSboxesModel": [[33, 2, 1, "", "add_additional_xor_constraints"], [33, 2, 1, "", "add_comment"], [33, 2, 1, "", "add_constraint_from_str"], [33, 2, 1, "", "add_output_comment"], [33, 2, 1, "", "add_solution_to_components_values"], [33, 2, 1, "", "add_solution_to_components_values_internal"], [33, 2, 1, "", "add_solutions_from_components_values"], [33, 2, 1, "", "build_mix_column_truncated_table"], [33, 2, 1, "", "build_xor_differential_trail_first_step_model"], [33, 2, 1, "", "calculate_bit_positions"], [33, 2, 1, "", "calculate_bit_values"], [33, 2, 1, "", "calculate_input_bit_positions"], [33, 3, 1, "", "cipher"], [33, 3, 1, "", "cipher_id"], [33, 2, 1, "", "create_xor_component"], [33, 2, 1, "", "final_xor_differential_first_step_constraints"], [33, 2, 1, "", "find_possible_number_of_active_sboxes"], [33, 2, 1, "", "fix_variables_value_constraints"], [33, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [33, 3, 1, "", "float_and_lat_values"], [33, 2, 1, "", "format_component_value"], [33, 2, 1, "", "get_command_for_solver_process"], [33, 2, 1, "", "get_mix_column_all_inputs"], [33, 2, 1, "", "get_new_xor_input_links_and_positions"], [33, 2, 1, "", "get_total_weight"], [33, 2, 1, "", "get_xor_all_inputs"], [33, 2, 1, "", "initialise_model"], [33, 2, 1, "", "input_xor_differential_first_step_constraints"], [33, 3, 1, "", "model_constraints"], [33, 2, 1, "", "output_probability_per_round"], [33, 2, 1, "", "parse_solver_information"], [33, 2, 1, "", "set_component_solution_value"], [33, 2, 1, "", "solve"], [33, 2, 1, "", "solve_for_ARX"], [33, 2, 1, "", "solver_names"], [33, 2, 1, "", "weight_constraints"], [33, 2, 1, "", "write_minizinc_model_to_file"], [33, 2, 1, "", "xor_xor_differential_first_step_constraints"]], "cipher_modules.models.cp.mzn_models.mzn_xor_differential_trail_search_fixing_number_of_active_sboxes_model": [[34, 1, 1, "", "MznXorDifferentialFixingNumberOfActiveSboxesModel"]], "cipher_modules.models.cp.mzn_models.mzn_xor_differential_trail_search_fixing_number_of_active_sboxes_model.MznXorDifferentialFixingNumberOfActiveSboxesModel": [[34, 2, 1, "", "add_additional_xor_constraints"], [34, 2, 1, "", "add_comment"], [34, 2, 1, "", "add_constraint_from_str"], [34, 2, 1, "", "add_output_comment"], [34, 2, 1, "", "add_solution_to_components_values"], [34, 2, 1, "", "add_solution_to_components_values_internal"], [34, 2, 1, "", "add_solutions_from_components_values"], [34, 2, 1, "", "build_mix_column_truncated_table"], [34, 2, 1, "", "build_xor_differential_trail_first_step_model"], [34, 2, 1, "", "build_xor_differential_trail_model"], [34, 2, 1, "", "build_xor_differential_trail_model_template"], [34, 2, 1, "", "build_xor_differential_trail_second_step_model"], [34, 2, 1, "", "calculate_bit_positions"], [34, 2, 1, "", "calculate_bit_values"], [34, 2, 1, "", "calculate_input_bit_positions"], [34, 3, 1, "", "cipher"], [34, 3, 1, "", "cipher_id"], [34, 2, 1, "", "create_xor_component"], [34, 2, 1, "", "final_xor_differential_constraints"], [34, 2, 1, "", "final_xor_differential_first_step_constraints"], [34, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [34, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [34, 2, 1, "", "find_differential_weight"], [34, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [34, 2, 1, "", "find_one_xor_differential_trail"], [34, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [34, 2, 1, "", "find_possible_number_of_active_sboxes"], [34, 2, 1, "", "fix_variables_value_constraints"], [34, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [34, 3, 1, "", "float_and_lat_values"], [34, 2, 1, "", "format_component_value"], [34, 2, 1, "", "generate_table_of_solutions"], [34, 2, 1, "", "get_command_for_solver_process"], [34, 2, 1, "", "get_mix_column_all_inputs"], [34, 2, 1, "", "get_new_xor_input_links_and_positions"], [34, 2, 1, "", "get_solutions_dictionaries_with_build_time"], [34, 2, 1, "", "get_total_weight"], [34, 2, 1, "", "get_word_operation_xor_differential_constraints"], [34, 2, 1, "", "get_xor_all_inputs"], [34, 2, 1, "", "initialise_model"], [34, 2, 1, "", "input_xor_differential_constraints"], [34, 2, 1, "", "input_xor_differential_first_step_constraints"], [34, 3, 1, "", "model_constraints"], [34, 2, 1, "", "output_probability_per_round"], [34, 2, 1, "", "parse_solver_information"], [34, 2, 1, "", "set_component_solution_value"], [34, 2, 1, "", "solve"], [34, 2, 1, "", "solve_for_ARX"], [34, 2, 1, "", "solve_full_two_steps_xor_differential_model"], [34, 2, 1, "", "solve_model"], [34, 2, 1, "", "solver_names"], [34, 2, 1, "", "transform_first_step_model"], [34, 2, 1, "", "update_sbox_ddt_valid_probabilities"], [34, 2, 1, "", "weight_constraints"], [34, 2, 1, "", "write_minizinc_model_to_file"], [34, 2, 1, "", "xor_xor_differential_first_step_constraints"]], "cipher_modules.models.cp.mzn_models.mzn_xor_linear_model": [[35, 1, 1, "", "MznXorLinearModel"]], "cipher_modules.models.cp.mzn_models.mzn_xor_linear_model.MznXorLinearModel": [[35, 2, 1, "", "add_comment"], [35, 2, 1, "", "add_constraint_from_str"], [35, 2, 1, "", "add_output_comment"], [35, 2, 1, "", "add_solution_to_components_values"], [35, 2, 1, "", "add_solution_to_components_values_internal"], [35, 2, 1, "", "add_solutions_from_components_values"], [35, 2, 1, "", "and_xor_linear_probability_lat"], [35, 2, 1, "", "branch_xor_linear_constraints"], [35, 2, 1, "", "build_mix_column_truncated_table"], [35, 2, 1, "", "build_xor_linear_trail_model"], [35, 2, 1, "", "calculate_bit_positions"], [35, 2, 1, "", "calculate_bit_values"], [35, 2, 1, "", "calculate_input_bit_positions"], [35, 3, 1, "", "cipher"], [35, 3, 1, "", "cipher_id"], [35, 2, 1, "", "final_xor_linear_constraints"], [35, 2, 1, "", "find_all_xor_linear_trails_with_fixed_weight"], [35, 2, 1, "", "find_all_xor_linear_trails_with_weight_at_most"], [35, 2, 1, "", "find_lowest_weight_xor_linear_trail"], [35, 2, 1, "", "find_one_xor_linear_trail"], [35, 2, 1, "", "find_one_xor_linear_trail_with_fixed_weight"], [35, 2, 1, "", "find_possible_number_of_active_sboxes"], [35, 2, 1, "", "fix_variables_value_constraints"], [35, 2, 1, "", "fix_variables_value_constraints_for_ARX"], [35, 2, 1, "", "fix_variables_value_xor_linear_constraints"], [35, 3, 1, "", "float_and_lat_values"], [35, 2, 1, "", "format_component_value"], [35, 2, 1, "", "get_command_for_solver_process"], [35, 2, 1, "", "get_lat_values"], [35, 2, 1, "", "get_mix_column_all_inputs"], [35, 2, 1, "", "get_total_weight"], [35, 2, 1, "", "get_word_operation_final_xor_linear_constraints"], [35, 2, 1, "", "initialise_model"], [35, 2, 1, "", "input_xor_linear_constraints"], [35, 3, 1, "", "model_constraints"], [35, 2, 1, "", "output_probability_per_round"], [35, 2, 1, "", "parse_solver_information"], [35, 2, 1, "", "set_component_solution_value"], [35, 2, 1, "", "solve"], [35, 2, 1, "", "solve_for_ARX"], [35, 2, 1, "", "solver_names"], [35, 2, 1, "", "update_and_or_lat_valid_probabilities"], [35, 2, 1, "", "update_sbox_lat_valid_probabilities"], [35, 2, 1, "", "weight_constraints"], [35, 2, 1, "", "weight_xor_linear_constraints"], [35, 2, 1, "", "write_minizinc_model_to_file"]], "cipher_modules.models.milp": [[37, 0, 0, "-", "milp_model"], [45, 0, 0, "-", "solvers"]], "cipher_modules.models.milp.milp_model": [[37, 1, 1, "", "MilpModel"], [37, 4, 1, "", "get_independent_input_output_variables"], [37, 4, 1, "", "get_input_output_variables"]], "cipher_modules.models.milp.milp_model.MilpModel": [[37, 3, 1, "", "binary_variable"], [37, 3, 1, "", "cipher"], [37, 3, 1, "", "cipher_id"], [37, 2, 1, "", "fix_variables_value_constraints"], [37, 2, 1, "", "init_model_in_sage_milp_class"], [37, 3, 1, "", "integer_variable"], [37, 3, 1, "", "intermediate_output_names"], [37, 3, 1, "", "model"], [37, 3, 1, "", "model_constraints"], [37, 3, 1, "", "non_linear_component_id"], [37, 2, 1, "", "solve"], [37, 2, 1, "", "solver_names"], [37, 2, 1, "", "weight_constraints"]], "cipher_modules.models.milp.milp_models": [[38, 0, 0, "-", "milp_bitwise_deterministic_truncated_xor_differential_model"], [39, 0, 0, "-", "milp_bitwise_impossible_xor_differential_model"], [40, 0, 0, "-", "milp_cipher_model"], [41, 0, 0, "-", "milp_wordwise_deterministic_truncated_xor_differential_model"], [42, 0, 0, "-", "milp_wordwise_impossible_xor_differential_model"], [43, 0, 0, "-", "milp_xor_differential_model"], [44, 0, 0, "-", "milp_xor_linear_model"]], "cipher_modules.models.milp.milp_models.milp_bitwise_deterministic_truncated_xor_differential_model": [[38, 1, 1, "", "MilpBitwiseDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.milp.milp_models.milp_bitwise_deterministic_truncated_xor_differential_model.MilpBitwiseDeterministicTruncatedXorDifferentialModel": [[38, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [38, 3, 1, "", "binary_variable"], [38, 2, 1, "", "build_bitwise_deterministic_truncated_xor_differential_trail_model"], [38, 3, 1, "", "cipher"], [38, 3, 1, "", "cipher_id"], [38, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [38, 2, 1, "", "find_one_bitwise_deterministic_truncated_xor_differential_trail"], [38, 2, 1, "", "fix_variables_value_bitwise_deterministic_truncated_xor_differential_constraints"], [38, 2, 1, "", "fix_variables_value_constraints"], [38, 2, 1, "", "init_model_in_sage_milp_class"], [38, 3, 1, "", "integer_variable"], [38, 3, 1, "", "intermediate_output_names"], [38, 2, 1, "", "link_binary_tuples_to_integer_variables"], [38, 3, 1, "", "model"], [38, 3, 1, "", "model_constraints"], [38, 3, 1, "", "non_linear_component_id"], [38, 2, 1, "", "solve"], [38, 2, 1, "", "solver_names"], [38, 3, 1, "", "trunc_binvar"], [38, 2, 1, "", "weight_constraints"]], "cipher_modules.models.milp.milp_models.milp_bitwise_impossible_xor_differential_model": [[39, 1, 1, "", "MilpBitwiseImpossibleXorDifferentialModel"]], "cipher_modules.models.milp.milp_models.milp_bitwise_impossible_xor_differential_model.MilpBitwiseImpossibleXorDifferentialModel": [[39, 2, 1, "", "add_constraints_to_build_fully_automatic_model_in_sage_milp_class"], [39, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [39, 2, 1, "", "add_constraints_to_build_in_sage_milp_class_with_chosen_incompatible_components"], [39, 3, 1, "", "binary_variable"], [39, 2, 1, "", "build_bitwise_deterministic_truncated_xor_differential_trail_model"], [39, 2, 1, "", "build_bitwise_impossible_xor_differential_trail_model"], [39, 3, 1, "", "cipher"], [39, 3, 1, "", "cipher_id"], [39, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [39, 2, 1, "", "find_one_bitwise_deterministic_truncated_xor_differential_trail"], [39, 2, 1, "", "find_one_bitwise_impossible_xor_differential_trail"], [39, 2, 1, "", "find_one_bitwise_impossible_xor_differential_trail_with_chosen_incompatible_components"], [39, 2, 1, "", "find_one_bitwise_impossible_xor_differential_trail_with_fully_automatic_model"], [39, 2, 1, "", "fix_variables_value_bitwise_deterministic_truncated_xor_differential_constraints"], [39, 2, 1, "", "fix_variables_value_constraints"], [39, 2, 1, "", "init_model_in_sage_milp_class"], [39, 3, 1, "", "integer_variable"], [39, 3, 1, "", "intermediate_output_names"], [39, 2, 1, "", "link_binary_tuples_to_integer_variables"], [39, 3, 1, "", "model"], [39, 3, 1, "", "model_constraints"], [39, 3, 1, "", "non_linear_component_id"], [39, 2, 1, "", "solve"], [39, 2, 1, "", "solver_names"], [39, 3, 1, "", "trunc_binvar"], [39, 2, 1, "", "weight_constraints"]], "cipher_modules.models.milp.milp_models.milp_cipher_model": [[40, 1, 1, "", "MilpCipherModel"]], "cipher_modules.models.milp.milp_models.milp_cipher_model.MilpCipherModel": [[40, 3, 1, "", "binary_variable"], [40, 2, 1, "", "build_cipher_model"], [40, 3, 1, "", "cipher"], [40, 3, 1, "", "cipher_id"], [40, 2, 1, "", "fix_variables_value_constraints"], [40, 2, 1, "", "init_model_in_sage_milp_class"], [40, 3, 1, "", "integer_variable"], [40, 3, 1, "", "intermediate_output_names"], [40, 3, 1, "", "model"], [40, 3, 1, "", "model_constraints"], [40, 3, 1, "", "non_linear_component_id"], [40, 2, 1, "", "solve"], [40, 2, 1, "", "solver_names"], [40, 2, 1, "", "weight_constraints"]], "cipher_modules.models.milp.milp_models.milp_wordwise_deterministic_truncated_xor_differential_model": [[41, 1, 1, "", "MilpWordwiseDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.milp.milp_models.milp_wordwise_deterministic_truncated_xor_differential_model.MilpWordwiseDeterministicTruncatedXorDifferentialModel": [[41, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [41, 3, 1, "", "binary_variable"], [41, 2, 1, "", "build_wordwise_deterministic_truncated_xor_differential_trail_model"], [41, 3, 1, "", "cipher"], [41, 3, 1, "", "cipher_id"], [41, 2, 1, "", "find_lowest_varied_patterns_wordwise_deterministic_truncated_xor_differential_trail"], [41, 2, 1, "", "find_one_wordwise_deterministic_truncated_xor_differential_trail"], [41, 2, 1, "", "fix_variables_value_constraints"], [41, 2, 1, "", "fix_variables_value_wordwise_deterministic_truncated_xor_differential_constraints"], [41, 2, 1, "", "init_model_in_sage_milp_class"], [41, 2, 1, "", "input_wordwise_deterministic_truncated_xor_differential_constraints"], [41, 3, 1, "", "integer_variable"], [41, 3, 1, "", "intermediate_output_names"], [41, 3, 1, "", "model"], [41, 3, 1, "", "model_constraints"], [41, 3, 1, "", "non_linear_component_id"], [41, 2, 1, "", "solve"], [41, 2, 1, "", "solver_names"], [41, 3, 1, "", "trunc_wordvar"], [41, 2, 1, "", "weight_constraints"], [41, 3, 1, "", "word_size"]], "cipher_modules.models.milp.milp_models.milp_wordwise_impossible_xor_differential_model": [[42, 1, 1, "", "MilpWordwiseImpossibleXorDifferentialModel"]], "cipher_modules.models.milp.milp_models.milp_wordwise_impossible_xor_differential_model.MilpWordwiseImpossibleXorDifferentialModel": [[42, 2, 1, "", "add_constraints_to_build_fully_automatic_model_in_sage_milp_class"], [42, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [42, 2, 1, "", "add_constraints_to_build_in_sage_milp_class_with_chosen_incompatible_components"], [42, 3, 1, "", "binary_variable"], [42, 2, 1, "", "build_wordwise_deterministic_truncated_xor_differential_trail_model"], [42, 2, 1, "", "build_wordwise_impossible_xor_differential_trail_model"], [42, 3, 1, "", "cipher"], [42, 3, 1, "", "cipher_id"], [42, 2, 1, "", "find_lowest_varied_patterns_wordwise_deterministic_truncated_xor_differential_trail"], [42, 2, 1, "", "find_one_wordwise_deterministic_truncated_xor_differential_trail"], [42, 2, 1, "", "find_one_wordwise_impossible_xor_differential_trail"], [42, 2, 1, "", "find_one_wordwise_impossible_xor_differential_trail_with_chosen_components"], [42, 2, 1, "", "find_one_wordwise_impossible_xor_differential_trail_with_fully_automatic_model"], [42, 2, 1, "", "fix_variables_value_constraints"], [42, 2, 1, "", "fix_variables_value_wordwise_deterministic_truncated_xor_differential_constraints"], [42, 2, 1, "", "init_model_in_sage_milp_class"], [42, 2, 1, "", "input_wordwise_deterministic_truncated_xor_differential_constraints"], [42, 3, 1, "", "integer_variable"], [42, 3, 1, "", "intermediate_output_names"], [42, 3, 1, "", "model"], [42, 3, 1, "", "model_constraints"], [42, 3, 1, "", "non_linear_component_id"], [42, 2, 1, "", "solve"], [42, 2, 1, "", "solver_names"], [42, 3, 1, "", "trunc_wordvar"], [42, 2, 1, "", "weight_constraints"], [42, 3, 1, "", "word_size"]], "cipher_modules.models.milp.milp_models.milp_xor_differential_model": [[43, 1, 1, "", "MilpXorDifferentialModel"]], "cipher_modules.models.milp.milp_models.milp_xor_differential_model.MilpXorDifferentialModel": [[43, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [43, 3, 1, "", "binary_variable"], [43, 2, 1, "", "build_xor_differential_trail_model"], [43, 3, 1, "", "cipher"], [43, 3, 1, "", "cipher_id"], [43, 2, 1, "", "exclude_variables_value_constraints"], [43, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [43, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [43, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [43, 2, 1, "", "find_one_xor_differential_trail"], [43, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [43, 2, 1, "", "fix_variables_value_constraints"], [43, 2, 1, "", "init_model_in_sage_milp_class"], [43, 3, 1, "", "integer_variable"], [43, 3, 1, "", "intermediate_output_names"], [43, 2, 1, "", "is_single_key"], [43, 3, 1, "", "model"], [43, 3, 1, "", "model_constraints"], [43, 3, 1, "", "non_linear_component_id"], [43, 2, 1, "", "solve"], [43, 2, 1, "", "solver_names"], [43, 2, 1, "", "weight_constraints"], [43, 3, 1, "", "weight_precision"]], "cipher_modules.models.milp.milp_models.milp_xor_linear_model": [[44, 1, 1, "", "MilpXorLinearModel"]], "cipher_modules.models.milp.milp_models.milp_xor_linear_model.MilpXorLinearModel": [[44, 2, 1, "", "add_constraints_to_build_in_sage_milp_class"], [44, 3, 1, "", "binary_variable"], [44, 2, 1, "", "branch_xor_linear_constraints"], [44, 2, 1, "", "build_xor_linear_trail_model"], [44, 3, 1, "", "cipher"], [44, 3, 1, "", "cipher_id"], [44, 2, 1, "", "exclude_variables_value_xor_linear_constraints"], [44, 2, 1, "", "find_all_xor_linear_trails_with_fixed_weight"], [44, 2, 1, "", "find_all_xor_linear_trails_with_weight_at_most"], [44, 2, 1, "", "find_lowest_weight_xor_linear_trail"], [44, 2, 1, "", "find_one_xor_linear_trail"], [44, 2, 1, "", "find_one_xor_linear_trail_with_fixed_weight"], [44, 2, 1, "", "fix_variables_value_constraints"], [44, 2, 1, "", "fix_variables_value_xor_linear_constraints"], [44, 2, 1, "", "init_model_in_sage_milp_class"], [44, 3, 1, "", "integer_variable"], [44, 3, 1, "", "intermediate_output_names"], [44, 3, 1, "", "model"], [44, 3, 1, "", "model_constraints"], [44, 3, 1, "", "non_linear_component_id"], [44, 2, 1, "", "solve"], [44, 2, 1, "", "solver_names"], [44, 2, 1, "", "update_xor_linear_constraints_for_more_than_two_bits"], [44, 2, 1, "", "weight_constraints"], [44, 3, 1, "", "weight_precision"], [44, 2, 1, "", "weight_xor_linear_constraints"]], "cipher_modules.models.milp.utils": [[56, 0, 0, "-", "generate_inequalities_for_and_operation_2_input_bits"], [57, 0, 0, "-", "generate_inequalities_for_large_sboxes"], [58, 0, 0, "-", "generate_inequalities_for_wordwise_truncated_mds_matrices"], [59, 0, 0, "-", "generate_inequalities_for_wordwise_truncated_xor_with_n_input_bits"], [60, 0, 0, "-", "generate_inequalities_for_xor_with_n_input_bits"], [61, 0, 0, "-", "generate_sbox_inequalities_for_trail_search"], [62, 0, 0, "-", "generate_undisturbed_bits_inequalities_for_sboxes"], [63, 0, 0, "-", "milp_name_mappings"], [64, 0, 0, "-", "milp_truncated_utils"], [65, 0, 0, "-", "mzn_predicates"], [66, 0, 0, "-", "utils"]], "cipher_modules.models.milp.utils.generate_inequalities_for_and_operation_2_input_bits": [[56, 4, 1, "", "and_LAT"], [56, 4, 1, "", "and_inequalities"], [56, 4, 1, "", "convex_hull"], [56, 4, 1, "", "cutting_off_greedy"], [56, 4, 1, "", "cutting_off_milp"]], "cipher_modules.models.milp.utils.generate_inequalities_for_large_sboxes": [[57, 4, 1, "", "delete_dictionary_that_contains_inequalities_for_large_sboxes"], [57, 4, 1, "", "generate_espresso_input"], [57, 4, 1, "", "generate_product_of_sum_from_espresso"], [57, 4, 1, "", "get_dictionary_that_contains_inequalities_for_large_sboxes"], [57, 4, 1, "", "update_dictionary_that_contains_inequalities_for_large_sboxes"]], "cipher_modules.models.milp.utils.generate_inequalities_for_wordwise_truncated_mds_matrices": [[58, 4, 1, "", "delete_dictionary_that_contains_wordwise_truncated_mds_inequalities"], [58, 4, 1, "", "generate_valid_points_for_truncated_mds_matrix"], [58, 4, 1, "", "output_dictionary_that_contains_wordwise_truncated_mds_inequalities"], [58, 4, 1, "", "update_dictionary_that_contains_wordwise_truncated_mds_inequalities"]], "cipher_modules.models.milp.utils.generate_inequalities_for_wordwise_truncated_xor_with_n_input_bits": [[59, 4, 1, "", "delete_dictionary_that_contains_wordwise_truncated_input_inequalities"], [59, 4, 1, "", "delete_dictionary_that_contains_wordwise_truncated_xor_inequalities"], [59, 4, 1, "", "generate_valid_points_for_xor_between_n_input_words"], [59, 4, 1, "", "generate_valid_points_input_words"], [59, 4, 1, "", "get_valid_points_for_wordwise_xor"], [59, 4, 1, "", "output_dictionary_that_contains_wordwise_truncated_input_inequalities"], [59, 4, 1, "", "output_dictionary_that_contains_wordwise_truncated_xor_inequalities"], [59, 4, 1, "", "update_dictionary_that_contains_wordwise_truncated_input_inequalities"], [59, 4, 1, "", "update_dictionary_that_contains_wordwise_truncated_xor_inequalities_between_n_inputs"], [59, 4, 1, "", "update_dictionary_that_contains_xor_inequalities_for_specific_wordwise_matrix"]], "cipher_modules.models.milp.utils.generate_inequalities_for_xor_with_n_input_bits": [[60, 4, 1, "", "delete_dictionary_that_contains_xor_inequalities"], [60, 4, 1, "", "generate_all_possible_points_with_n_bits"], [60, 4, 1, "", "generate_impossible_points_for_xor_between_n_input_bits"], [60, 4, 1, "", "output_dictionary_that_contains_xor_inequalities"], [60, 4, 1, "", "update_dictionary_that_contains_xor_inequalities_between_n_input_bits"], [60, 4, 1, "", "update_dictionary_that_contains_xor_inequalities_for_specific_matrix"]], "cipher_modules.models.milp.utils.generate_sbox_inequalities_for_trail_search": [[61, 4, 1, "", "convex_hull"], [61, 4, 1, "", "cutting_off_greedy"], [61, 4, 1, "", "cutting_off_milp"], [61, 4, 1, "", "delete_dictionary_that_contains_inequalities_for_small_sboxes"], [61, 4, 1, "", "get_dictionary_that_contains_inequalities_for_small_sboxes"], [61, 4, 1, "", "sbox_inequalities"], [61, 4, 1, "", "to_bits"], [61, 4, 1, "", "update_dictionary_that_contains_inequalities_for_small_sboxes"]], "cipher_modules.models.milp.utils.generate_undisturbed_bits_inequalities_for_sboxes": [[62, 4, 1, "", "delete_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bits"], [62, 4, 1, "", "generate_dict_product_of_sum_from_espresso"], [62, 4, 1, "", "get_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bits"], [62, 4, 1, "", "get_transitions_for_single_output_bit"], [62, 4, 1, "", "update_dictionary_that_contains_inequalities_for_sboxes_with_undisturbed_bits"]], "cipher_modules.models.milp.utils.milp_truncated_utils": [[64, 4, 1, "", "fix_variables_value_deterministic_truncated_xor_differential_constraints"], [64, 4, 1, "", "generate_all_incompatibility_constraints_for_fully_automatic_model"], [64, 4, 1, "", "generate_incompatiblity_constraints_for_component"]], "cipher_modules.models.milp.utils.mzn_predicates": [[65, 4, 1, "", "get_word_operations"]], "cipher_modules.models.milp.utils.utils": [[66, 4, 1, "", "delete_espresso_dictionary"], [66, 4, 1, "", "espresso_pos_to_constraints"], [66, 4, 1, "", "generate_espresso_input"], [66, 4, 1, "", "generate_product_of_sum_from_espresso"], [66, 4, 1, "", "milp_and"], [66, 4, 1, "", "milp_else"], [66, 4, 1, "", "milp_eq"], [66, 4, 1, "", "milp_generalized_and"], [66, 4, 1, "", "milp_generalized_xor"], [66, 4, 1, "", "milp_geq"], [66, 4, 1, "", "milp_greater"], [66, 4, 1, "", "milp_if_elif_else"], [66, 4, 1, "", "milp_if_then"], [66, 4, 1, "", "milp_if_then_else"], [66, 4, 1, "", "milp_leq"], [66, 4, 1, "", "milp_less"], [66, 4, 1, "", "milp_neq"], [66, 4, 1, "", "milp_or"], [66, 4, 1, "", "milp_xor"], [66, 4, 1, "", "milp_xor_truncated"], [66, 4, 1, "", "milp_xor_truncated_wordwise"], [66, 4, 1, "", "output_espresso_dictionary"]], "cipher_modules.models.sat.cms_models": [[67, 0, 0, "-", "cms_bitwise_deterministic_truncated_xor_differential_model"], [68, 0, 0, "-", "cms_cipher_model"], [69, 0, 0, "-", "cms_xor_differential_model"], [70, 0, 0, "-", "cms_xor_linear_model"]], "cipher_modules.models.sat.cms_models.cms_bitwise_deterministic_truncated_xor_differential_model": [[67, 1, 1, "", "CmsSatDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.sat.cms_models.cms_bitwise_deterministic_truncated_xor_differential_model.CmsSatDeterministicTruncatedXorDifferentialModel": [[67, 2, 1, "", "build_bitwise_deterministic_truncated_xor_differential_trail_model"], [67, 2, 1, "", "build_generic_sat_model_from_dictionary"], [67, 2, 1, "", "calculate_component_weight"], [67, 3, 1, "", "cipher_id"], [67, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [67, 2, 1, "", "find_one_bitwise_deterministic_truncated_xor_differential_trail"], [67, 2, 1, "", "fix_variables_value_constraints"], [67, 3, 1, "", "model_constraints"], [67, 3, 1, "", "sboxes_ddt_templates"], [67, 3, 1, "", "sboxes_lat_templates"], [67, 2, 1, "", "solve"], [67, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.cms_models.cms_cipher_model": [[68, 1, 1, "", "CmsSatCipherModel"]], "cipher_modules.models.sat.cms_models.cms_cipher_model.CmsSatCipherModel": [[68, 2, 1, "", "build_cipher_model"], [68, 2, 1, "", "build_generic_sat_model_from_dictionary"], [68, 2, 1, "", "calculate_component_weight"], [68, 3, 1, "", "cipher_id"], [68, 2, 1, "", "find_missing_bits"], [68, 2, 1, "", "fix_variables_value_constraints"], [68, 3, 1, "", "model_constraints"], [68, 3, 1, "", "sboxes_ddt_templates"], [68, 3, 1, "", "sboxes_lat_templates"], [68, 2, 1, "", "solve"], [68, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.cms_models.cms_xor_differential_model": [[69, 1, 1, "", "CmsSatXorDifferentialModel"]], "cipher_modules.models.sat.cms_models.cms_xor_differential_model.CmsSatXorDifferentialModel": [[69, 2, 1, "", "build_generic_sat_model_from_dictionary"], [69, 2, 1, "", "build_xor_differential_trail_and_checker_model_at_intermediate_output_level"], [69, 2, 1, "", "build_xor_differential_trail_model"], [69, 2, 1, "", "calculate_component_weight"], [69, 3, 1, "", "cipher_id"], [69, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [69, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [69, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [69, 2, 1, "", "find_one_xor_differential_trail"], [69, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [69, 2, 1, "", "fix_variables_value_constraints"], [69, 3, 1, "", "model_constraints"], [69, 3, 1, "", "sboxes_ddt_templates"], [69, 3, 1, "", "sboxes_lat_templates"], [69, 2, 1, "", "set_window_size_heuristic_by_component_id"], [69, 2, 1, "", "set_window_size_heuristic_by_round"], [69, 2, 1, "", "set_window_size_weight_pr_vars"], [69, 2, 1, "", "solve"], [69, 2, 1, "", "weight_constraints"], [69, 3, 1, "", "window_size_by_component_id_values"], [69, 3, 1, "", "window_size_by_round_values"], [69, 3, 1, "", "window_size_full_window_vars"], [69, 3, 1, "", "window_size_number_of_full_window"], [69, 3, 1, "", "window_size_weight_pr_vars"]], "cipher_modules.models.sat.cms_models.cms_xor_linear_model": [[70, 1, 1, "", "CmsSatXorLinearModel"]], "cipher_modules.models.sat.cms_models.cms_xor_linear_model.CmsSatXorLinearModel": [[70, 2, 1, "", "branch_xor_linear_constraints"], [70, 2, 1, "", "build_generic_sat_model_from_dictionary"], [70, 2, 1, "", "build_xor_linear_trail_model"], [70, 2, 1, "", "calculate_component_weight"], [70, 3, 1, "", "cipher_id"], [70, 2, 1, "", "find_all_xor_linear_trails_with_fixed_weight"], [70, 2, 1, "", "find_all_xor_linear_trails_with_weight_at_most"], [70, 2, 1, "", "find_lowest_weight_xor_linear_trail"], [70, 2, 1, "", "find_one_xor_linear_trail"], [70, 2, 1, "", "find_one_xor_linear_trail_with_fixed_weight"], [70, 2, 1, "", "fix_variables_value_constraints"], [70, 2, 1, "", "fix_variables_value_xor_linear_constraints"], [70, 3, 1, "", "model_constraints"], [70, 3, 1, "", "sboxes_ddt_templates"], [70, 3, 1, "", "sboxes_lat_templates"], [70, 2, 1, "", "solve"], [70, 2, 1, "", "weight_constraints"], [70, 2, 1, "", "weight_xor_linear_constraints"]], "cipher_modules.models.sat": [[71, 0, 0, "-", "sat_model"], [82, 0, 0, "-", "solvers"]], "cipher_modules.models.sat.sat_model": [[71, 1, 1, "", "SatModel"]], "cipher_modules.models.sat.sat_model.SatModel": [[71, 2, 1, "", "build_generic_sat_model_from_dictionary"], [71, 2, 1, "", "calculate_component_weight"], [71, 3, 1, "", "cipher_id"], [71, 2, 1, "", "fix_variables_value_constraints"], [71, 3, 1, "", "model_constraints"], [71, 3, 1, "", "sboxes_ddt_templates"], [71, 3, 1, "", "sboxes_lat_templates"], [71, 2, 1, "", "solve"], [71, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models": [[72, 0, 0, "-", "sat_bitwise_deterministic_truncated_xor_differential_model"], [73, 0, 0, "-", "sat_cipher_model"], [74, 0, 0, "-", "sat_differential_linear_model"], [75, 0, 0, "-", "sat_probabilistic_xor_truncated_differential_model"], [76, 0, 0, "-", "sat_semi_deterministic_truncated_xor_differential_model"], [77, 0, 0, "-", "sat_shared_difference_paired_input_differential_linear_model"], [78, 0, 0, "-", "sat_shared_difference_paired_input_differential_model"], [79, 0, 0, "-", "sat_truncated_xor_differential_model"], [80, 0, 0, "-", "sat_xor_differential_model"], [81, 0, 0, "-", "sat_xor_linear_model"]], "cipher_modules.models.sat.sat_models.sat_bitwise_deterministic_truncated_xor_differential_model": [[72, 1, 1, "", "SatBitwiseDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.sat.sat_models.sat_bitwise_deterministic_truncated_xor_differential_model.SatBitwiseDeterministicTruncatedXorDifferentialModel": [[72, 2, 1, "", "build_bitwise_deterministic_truncated_xor_differential_trail_model"], [72, 2, 1, "", "build_generic_sat_model_from_dictionary"], [72, 2, 1, "", "calculate_component_weight"], [72, 3, 1, "", "cipher_id"], [72, 2, 1, "", "find_lowest_varied_patterns_bitwise_deterministic_truncated_xor_differential_trail"], [72, 2, 1, "", "find_one_bitwise_deterministic_truncated_xor_differential_trail"], [72, 2, 1, "", "fix_variables_value_constraints"], [72, 3, 1, "", "model_constraints"], [72, 3, 1, "", "sboxes_ddt_templates"], [72, 3, 1, "", "sboxes_lat_templates"], [72, 2, 1, "", "solve"], [72, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models.sat_cipher_model": [[73, 1, 1, "", "SatCipherModel"]], "cipher_modules.models.sat.sat_models.sat_cipher_model.SatCipherModel": [[73, 2, 1, "", "build_cipher_model"], [73, 2, 1, "", "build_generic_sat_model_from_dictionary"], [73, 2, 1, "", "calculate_component_weight"], [73, 3, 1, "", "cipher_id"], [73, 2, 1, "", "find_missing_bits"], [73, 2, 1, "", "fix_variables_value_constraints"], [73, 3, 1, "", "model_constraints"], [73, 3, 1, "", "sboxes_ddt_templates"], [73, 3, 1, "", "sboxes_lat_templates"], [73, 2, 1, "", "solve"], [73, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models.sat_differential_linear_model": [[74, 1, 1, "", "SatDifferentialLinearModel"]], "cipher_modules.models.sat.sat_models.sat_differential_linear_model.SatDifferentialLinearModel": [[74, 2, 1, "", "build_generic_sat_model_from_dictionary"], [74, 2, 1, "", "build_xor_differential_linear_model"], [74, 2, 1, "", "calculate_component_weight"], [74, 3, 1, "", "cipher"], [74, 3, 1, "", "cipher_id"], [74, 2, 1, "", "find_lowest_weight_xor_differential_linear_trail"], [74, 2, 1, "", "find_one_differential_linear_trail_with_fixed_weight"], [74, 2, 1, "", "fix_variables_value_constraints"], [74, 3, 1, "", "model_constraints"], [74, 3, 1, "", "sboxes_ddt_templates"], [74, 3, 1, "", "sboxes_lat_templates"], [74, 2, 1, "", "solve"], [74, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models.sat_probabilistic_xor_truncated_differential_model": [[75, 1, 1, "", "SatProbabilisticXorTruncatedDifferentialModel"]], "cipher_modules.models.sat.sat_models.sat_probabilistic_xor_truncated_differential_model.SatProbabilisticXorTruncatedDifferentialModel": [[75, 2, 1, "", "build_generic_sat_model_from_dictionary"], [75, 2, 1, "", "build_xor_differential_trail_and_checker_model_at_intermediate_output_level"], [75, 2, 1, "", "build_xor_differential_trail_model"], [75, 2, 1, "", "build_xor_probabilistic_truncated_differential_model"], [75, 2, 1, "", "calculate_component_weight"], [75, 3, 1, "", "cipher"], [75, 3, 1, "", "cipher_id"], [75, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [75, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [75, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [75, 2, 1, "", "find_lowest_weight_xor_probabilistic_truncated_differential_trail"], [75, 2, 1, "", "find_one_xor_differential_trail"], [75, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [75, 2, 1, "", "find_one_xor_probabilistic_truncated_differential_trail_with_fixed_weight"], [75, 2, 1, "", "fix_variables_value_constraints"], [75, 3, 1, "", "model_constraints"], [75, 3, 1, "", "sboxes_ddt_templates"], [75, 3, 1, "", "sboxes_lat_templates"], [75, 2, 1, "", "set_window_size_heuristic_by_component_id"], [75, 2, 1, "", "set_window_size_heuristic_by_round"], [75, 2, 1, "", "set_window_size_weight_pr_vars"], [75, 2, 1, "", "solve"], [75, 2, 1, "", "weight_constraints"], [75, 3, 1, "", "window_size_by_component_id_values"], [75, 3, 1, "", "window_size_by_round_values"], [75, 3, 1, "", "window_size_full_window_vars"], [75, 3, 1, "", "window_size_number_of_full_window"], [75, 3, 1, "", "window_size_weight_pr_vars"]], "cipher_modules.models.sat.sat_models.sat_semi_deterministic_truncated_xor_differential_model": [[76, 1, 1, "", "SatSemiDeterministicTruncatedXorDifferentialModel"], [76, 4, 1, "", "group_triples"]], "cipher_modules.models.sat.sat_models.sat_semi_deterministic_truncated_xor_differential_model.SatSemiDeterministicTruncatedXorDifferentialModel": [[76, 2, 1, "", "build_generic_sat_model_from_dictionary"], [76, 2, 1, "", "build_semi_deterministic_truncated_xor_differential_trail_model"], [76, 2, 1, "", "calculate_component_weight"], [76, 3, 1, "", "cipher_id"], [76, 2, 1, "", "find_one_semi_deterministic_truncated_xor_differential_trail"], [76, 2, 1, "", "fix_variables_value_constraints"], [76, 3, 1, "", "model_constraints"], [76, 3, 1, "", "sboxes_ddt_templates"], [76, 3, 1, "", "sboxes_lat_templates"], [76, 2, 1, "", "solve"], [76, 2, 1, "", "unknown_window_size_configuration_constraints"], [76, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models.sat_shared_difference_paired_input_differential_linear_model": [[77, 1, 1, "", "SharedDifferencePairedInputDifferentialLinearModel"]], "cipher_modules.models.sat.sat_models.sat_shared_difference_paired_input_differential_linear_model.SharedDifferencePairedInputDifferentialLinearModel": [[77, 2, 1, "", "build_generic_sat_model_from_dictionary"], [77, 2, 1, "", "build_shared_difference_paired_input_differential_model"], [77, 2, 1, "", "calculate_component_weight"], [77, 3, 1, "", "cipher"], [77, 3, 1, "", "cipher_id"], [77, 2, 1, "", "find_one_shared_difference_paired_input_differential_linear_trail_with_fixed_weight"], [77, 2, 1, "", "fix_variables_value_constraints"], [77, 3, 1, "", "model_constraints"], [77, 3, 1, "", "sboxes_ddt_templates"], [77, 3, 1, "", "sboxes_lat_templates"], [77, 2, 1, "", "solve"], [77, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models.sat_shared_difference_paired_input_differential_model": [[78, 1, 1, "", "SharedDifferencePairedInputDifferentialModel"], [78, 4, 1, "", "add_prefix_id_to_components"]], "cipher_modules.models.sat.sat_models.sat_shared_difference_paired_input_differential_model.SharedDifferencePairedInputDifferentialModel": [[78, 2, 1, "", "build_generic_sat_model_from_dictionary"], [78, 2, 1, "", "build_shared_difference_paired_input_differential_model"], [78, 2, 1, "", "calculate_component_weight"], [78, 3, 1, "", "cipher_id"], [78, 2, 1, "", "find_one_shared_difference_paired_input_differential_trail_with_fixed_weight"], [78, 2, 1, "", "fix_variables_value_constraints"], [78, 3, 1, "", "model_constraints"], [78, 3, 1, "", "sboxes_ddt_templates"], [78, 3, 1, "", "sboxes_lat_templates"], [78, 2, 1, "", "solve"], [78, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models.sat_truncated_xor_differential_model": [[79, 1, 1, "", "SatTruncatedXorDifferentialModel"]], "cipher_modules.models.sat.sat_models.sat_truncated_xor_differential_model.SatTruncatedXorDifferentialModel": [[79, 2, 1, "", "build_generic_sat_model_from_dictionary"], [79, 2, 1, "", "calculate_component_weight"], [79, 3, 1, "", "cipher_id"], [79, 2, 1, "", "fix_variables_value_constraints"], [79, 3, 1, "", "model_constraints"], [79, 3, 1, "", "sboxes_ddt_templates"], [79, 3, 1, "", "sboxes_lat_templates"], [79, 2, 1, "", "solve"], [79, 2, 1, "", "weight_constraints"]], "cipher_modules.models.sat.sat_models.sat_xor_differential_model": [[80, 1, 1, "", "SatXorDifferentialModel"]], "cipher_modules.models.sat.sat_models.sat_xor_differential_model.SatXorDifferentialModel": [[80, 2, 1, "", "build_generic_sat_model_from_dictionary"], [80, 2, 1, "", "build_xor_differential_trail_and_checker_model_at_intermediate_output_level"], [80, 2, 1, "", "build_xor_differential_trail_model"], [80, 2, 1, "", "calculate_component_weight"], [80, 3, 1, "", "cipher_id"], [80, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [80, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [80, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [80, 2, 1, "", "find_one_xor_differential_trail"], [80, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [80, 2, 1, "", "fix_variables_value_constraints"], [80, 3, 1, "", "model_constraints"], [80, 3, 1, "", "sboxes_ddt_templates"], [80, 3, 1, "", "sboxes_lat_templates"], [80, 2, 1, "", "set_window_size_heuristic_by_component_id"], [80, 2, 1, "", "set_window_size_heuristic_by_round"], [80, 2, 1, "", "set_window_size_weight_pr_vars"], [80, 2, 1, "", "solve"], [80, 2, 1, "", "weight_constraints"], [80, 3, 1, "", "window_size_by_component_id_values"], [80, 3, 1, "", "window_size_by_round_values"], [80, 3, 1, "", "window_size_full_window_vars"], [80, 3, 1, "", "window_size_number_of_full_window"], [80, 3, 1, "", "window_size_weight_pr_vars"]], "cipher_modules.models.sat.sat_models.sat_xor_linear_model": [[81, 1, 1, "", "SatXorLinearModel"]], "cipher_modules.models.sat.sat_models.sat_xor_linear_model.SatXorLinearModel": [[81, 2, 1, "", "branch_xor_linear_constraints"], [81, 2, 1, "", "build_generic_sat_model_from_dictionary"], [81, 2, 1, "", "build_xor_linear_trail_model"], [81, 2, 1, "", "calculate_component_weight"], [81, 3, 1, "", "cipher_id"], [81, 2, 1, "", "find_all_xor_linear_trails_with_fixed_weight"], [81, 2, 1, "", "find_all_xor_linear_trails_with_weight_at_most"], [81, 2, 1, "", "find_lowest_weight_xor_linear_trail"], [81, 2, 1, "", "find_one_xor_linear_trail"], [81, 2, 1, "", "find_one_xor_linear_trail_with_fixed_weight"], [81, 2, 1, "", "fix_variables_value_constraints"], [81, 2, 1, "", "fix_variables_value_xor_linear_constraints"], [81, 3, 1, "", "model_constraints"], [81, 3, 1, "", "sboxes_ddt_templates"], [81, 3, 1, "", "sboxes_lat_templates"], [81, 2, 1, "", "solve"], [81, 2, 1, "", "weight_constraints"], [81, 2, 1, "", "weight_xor_linear_constraints"]], "cipher_modules.models.sat.utils": [[83, 0, 0, "-", "mzn_predicates"], [84, 0, 0, "-", "n_window_heuristic_helper"], [85, 0, 0, "-", "utils"]], "cipher_modules.models.sat.utils.mzn_predicates": [[83, 4, 1, "", "get_word_operations"]], "cipher_modules.models.sat.utils.n_window_heuristic_helper": [[84, 4, 1, "", "convert_clauses"], [84, 4, 1, "", "generate_window_size_clauses"], [84, 4, 1, "", "generating_n_window_clauses"], [84, 4, 1, "", "load_list"], [84, 4, 1, "", "save_list"]], "cipher_modules.models.sat.utils.utils": [[85, 4, 1, "", "cms_add_clauses_to_solver"], [85, 4, 1, "", "cnf_and"], [85, 4, 1, "", "cnf_and_differential"], [85, 4, 1, "", "cnf_and_linear"], [85, 4, 1, "", "cnf_and_seq"], [85, 4, 1, "", "cnf_carry"], [85, 4, 1, "", "cnf_carry_comp2"], [85, 4, 1, "", "cnf_equivalent"], [85, 4, 1, "", "cnf_hw_lipmaa"], [85, 4, 1, "", "cnf_inequality"], [85, 4, 1, "", "cnf_lipmaa"], [85, 4, 1, "", "cnf_modadd_inequality"], [85, 4, 1, "", "cnf_n_window_heuristic_on_w_vars"], [85, 4, 1, "", "cnf_or"], [85, 4, 1, "", "cnf_or_seq"], [85, 4, 1, "", "cnf_result_comp2"], [85, 4, 1, "", "cnf_vshift_false"], [85, 4, 1, "", "cnf_vshift_id"], [85, 4, 1, "", "cnf_xor"], [85, 4, 1, "", "cnf_xor_seq"], [85, 4, 1, "", "cnf_xor_truncated"], [85, 4, 1, "", "cnf_xor_truncated_seq"], [85, 4, 1, "", "create_numerical_cnf"], [85, 4, 1, "", "get_cnf_bitwise_truncate_constraints"], [85, 4, 1, "", "get_cnf_semi_deterministic_window_1"], [85, 4, 1, "", "get_cnf_semi_deterministic_window_2"], [85, 4, 1, "", "get_cnf_semi_deterministic_window_3"], [85, 4, 1, "", "get_cnf_truncated_linear_constraints"], [85, 4, 1, "", "get_semi_deterministic_cnf_window_0"], [85, 4, 1, "", "modadd_truncated"], [85, 4, 1, "", "modadd_truncated_lsb"], [85, 4, 1, "", "modadd_truncated_msb"], [85, 4, 1, "", "numerical_cnf_to_dimacs"], [85, 4, 1, "", "run_minisat"], [85, 4, 1, "", "run_parkissat"], [85, 4, 1, "", "run_sat_solver"], [85, 4, 1, "", "run_yices"]], "cipher_modules.models.smt": [[86, 0, 0, "-", "smt_model"], [91, 0, 0, "-", "solvers"]], "cipher_modules.models.smt.smt_model": [[86, 1, 1, "", "SmtModel"], [86, 4, 1, "", "mathsat_parser"], [86, 4, 1, "", "yices_parser"], [86, 4, 1, "", "z3_parser"]], "cipher_modules.models.smt.smt_model.SmtModel": [[86, 2, 1, "", "calculate_component_weight"], [86, 3, 1, "", "cipher_id"], [86, 2, 1, "", "cipher_input_variables"], [86, 2, 1, "", "fix_variables_value_constraints"], [86, 2, 1, "", "get_xor_probability_constraints"], [86, 3, 1, "", "model_constraints"], [86, 3, 1, "", "sboxes_ddt_templates"], [86, 3, 1, "", "sboxes_lat_templates"], [86, 2, 1, "", "solve"], [86, 2, 1, "", "update_constraints_for_equal_type"], [86, 2, 1, "", "update_constraints_for_not_equal_type"], [86, 2, 1, "", "weight_constraints"]], "cipher_modules.models.smt.smt_models": [[87, 0, 0, "-", "smt_cipher_model"], [88, 0, 0, "-", "smt_deterministic_truncated_xor_differential_model"], [89, 0, 0, "-", "smt_xor_differential_model"], [90, 0, 0, "-", "smt_xor_linear_model"]], "cipher_modules.models.smt.smt_models.smt_cipher_model": [[87, 1, 1, "", "SmtCipherModel"]], "cipher_modules.models.smt.smt_models.smt_cipher_model.SmtCipherModel": [[87, 2, 1, "", "build_cipher_model"], [87, 2, 1, "", "calculate_component_weight"], [87, 3, 1, "", "cipher_id"], [87, 2, 1, "", "cipher_input_variables"], [87, 2, 1, "", "find_missing_bits"], [87, 2, 1, "", "fix_variables_value_constraints"], [87, 2, 1, "", "get_xor_probability_constraints"], [87, 3, 1, "", "model_constraints"], [87, 3, 1, "", "sboxes_ddt_templates"], [87, 3, 1, "", "sboxes_lat_templates"], [87, 2, 1, "", "solve"], [87, 2, 1, "", "update_constraints_for_equal_type"], [87, 2, 1, "", "update_constraints_for_not_equal_type"], [87, 2, 1, "", "weight_constraints"]], "cipher_modules.models.smt.smt_models.smt_deterministic_truncated_xor_differential_model": [[88, 1, 1, "", "SmtDeterministicTruncatedXorDifferentialModel"]], "cipher_modules.models.smt.smt_models.smt_deterministic_truncated_xor_differential_model.SmtDeterministicTruncatedXorDifferentialModel": [[88, 2, 1, "", "calculate_component_weight"], [88, 3, 1, "", "cipher_id"], [88, 2, 1, "", "cipher_input_variables"], [88, 2, 1, "", "fix_variables_value_constraints"], [88, 2, 1, "", "get_xor_probability_constraints"], [88, 3, 1, "", "model_constraints"], [88, 3, 1, "", "sboxes_ddt_templates"], [88, 3, 1, "", "sboxes_lat_templates"], [88, 2, 1, "", "solve"], [88, 2, 1, "", "update_constraints_for_equal_type"], [88, 2, 1, "", "update_constraints_for_not_equal_type"], [88, 2, 1, "", "weight_constraints"]], "cipher_modules.models.smt.smt_models.smt_xor_differential_model": [[89, 1, 1, "", "SmtXorDifferentialModel"]], "cipher_modules.models.smt.smt_models.smt_xor_differential_model.SmtXorDifferentialModel": [[89, 2, 1, "", "build_xor_differential_trail_model"], [89, 2, 1, "", "calculate_component_weight"], [89, 3, 1, "", "cipher_id"], [89, 2, 1, "", "cipher_input_variables"], [89, 2, 1, "", "find_all_xor_differential_trails_with_fixed_weight"], [89, 2, 1, "", "find_all_xor_differential_trails_with_weight_at_most"], [89, 2, 1, "", "find_lowest_weight_xor_differential_trail"], [89, 2, 1, "", "find_one_xor_differential_trail"], [89, 2, 1, "", "find_one_xor_differential_trail_with_fixed_weight"], [89, 2, 1, "", "fix_variables_value_constraints"], [89, 2, 1, "", "get_operands"], [89, 2, 1, "", "get_xor_probability_constraints"], [89, 3, 1, "", "model_constraints"], [89, 3, 1, "", "sboxes_ddt_templates"], [89, 3, 1, "", "sboxes_lat_templates"], [89, 2, 1, "", "solve"], [89, 2, 1, "", "update_constraints_for_equal_type"], [89, 2, 1, "", "update_constraints_for_not_equal_type"], [89, 2, 1, "", "weight_constraints"]], "cipher_modules.models.smt.smt_models.smt_xor_linear_model": [[90, 1, 1, "", "SmtXorLinearModel"]], "cipher_modules.models.smt.smt_models.smt_xor_linear_model.SmtXorLinearModel": [[90, 2, 1, "", "branch_xor_linear_constraints"], [90, 2, 1, "", "build_xor_linear_trail_model"], [90, 2, 1, "", "calculate_component_weight"], [90, 3, 1, "", "cipher_id"], [90, 2, 1, "", "cipher_input_variables"], [90, 2, 1, "", "cipher_input_xor_linear_variables"], [90, 2, 1, "", "find_all_xor_linear_trails_with_fixed_weight"], [90, 2, 1, "", "find_all_xor_linear_trails_with_weight_at_most"], [90, 2, 1, "", "find_lowest_weight_xor_linear_trail"], [90, 2, 1, "", "find_one_xor_linear_trail"], [90, 2, 1, "", "find_one_xor_linear_trail_with_fixed_weight"], [90, 2, 1, "", "fix_variables_value_constraints"], [90, 2, 1, "", "fix_variables_value_xor_linear_constraints"], [90, 2, 1, "", "get_xor_probability_constraints"], [90, 3, 1, "", "model_constraints"], [90, 3, 1, "", "sboxes_ddt_templates"], [90, 3, 1, "", "sboxes_lat_templates"], [90, 2, 1, "", "solve"], [90, 2, 1, "", "update_constraints_for_equal_type"], [90, 2, 1, "", "update_constraints_for_not_equal_type"], [90, 2, 1, "", "weight_constraints"], [90, 2, 1, "", "weight_xor_linear_constraints"]], "cipher_modules.models.smt.utils": [[92, 0, 0, "-", "utils"]], "cipher_modules.models.smt.utils.utils": [[92, 4, 1, "", "get_component_hex_value"], [92, 4, 1, "", "smt_and"], [92, 4, 1, "", "smt_assert"], [92, 4, 1, "", "smt_carry"], [92, 4, 1, "", "smt_distinct"], [92, 4, 1, "", "smt_equivalent"], [92, 4, 1, "", "smt_implies"], [92, 4, 1, "", "smt_ite"], [92, 4, 1, "", "smt_lipmaa"], [92, 4, 1, "", "smt_not"], [92, 4, 1, "", "smt_or"], [92, 4, 1, "", "smt_xor"]], "cipher_modules.models": [[93, 0, 0, "-", "utils"]], "cipher_modules.models.utils": [[93, 4, 1, "", "add_arcs"], [93, 4, 1, "", "check_if_implemented_component"], [93, 4, 1, "", "convert_solver_solution_to_dictionary"], [93, 4, 1, "", "differential_checker_permutation"], [93, 4, 1, "", "differential_linear_checker_for_block_cipher_single_key"], [93, 4, 1, "", "differential_linear_checker_for_permutation"], [93, 4, 1, "", "differential_truncated_checker_permutation"], [93, 4, 1, "", "differential_truncated_checker_single_key"], [93, 4, 1, "", "extract_bit_positions"], [93, 4, 1, "", "extract_bits"], [93, 4, 1, "", "find_sign_for_one_xor_linear_trail"], [93, 4, 1, "", "find_sign_for_xor_linear_trails"], [93, 4, 1, "", "get_bit_bindings"], [93, 4, 1, "", "get_previous_output_bit_ids"], [93, 4, 1, "", "get_related_key_scenario_format_for_fixed_values"], [93, 4, 1, "", "get_single_key_scenario_format_for_fixed_values"], [93, 4, 1, "", "integer_to_bit_list"], [93, 4, 1, "", "print_components_values"], [93, 4, 1, "", "set_component_solution"], [93, 4, 1, "", "set_component_value_weight_sign"], [93, 4, 1, "", "set_fixed_variables"], [93, 4, 1, "", "shared_difference_paired_input_differential_checker_permutation"], [93, 4, 1, "", "shared_difference_paired_input_differential_linear_checker_permutation"], [93, 4, 1, "", "to_bias_for_correlation_measure"], [93, 4, 1, "", "to_bias_for_probability_measure"], [93, 4, 1, "", "to_bias_for_xor_linear_trail"], [93, 4, 1, "", "to_correlation_for_bias_measure"], [93, 4, 1, "", "to_correlation_for_probability_measure"], [93, 4, 1, "", "to_correlation_for_xor_linear_trail"], [93, 4, 1, "", "to_probability_for_bias_measure"], [93, 4, 1, "", "to_probability_for_correlation_measure"], [93, 4, 1, "", "to_probability_for_xor_linear_trail"], [93, 4, 1, "", "write_model_to_file"], [93, 4, 1, "", "write_solution_to_file"]], "cipher_modules.report": [[95, 1, 1, "", "Report"]], "cipher_modules.report.Report": [[95, 2, 1, "", "clean_reports"], [95, 2, 1, "", "create_heatmap_subplot"], [95, 2, 1, "", "save_as_DataFrame"], [95, 2, 1, "", "save_as_image"], [95, 2, 1, "", "save_as_json"], [95, 2, 1, "", "save_as_latex_table"], [95, 2, 1, "", "show"]], "cipher_modules.statistical_tests": [[96, 0, 0, "-", "dataset_generator"], [97, 0, 0, "-", "dieharder_statistical_tests"], [99, 0, 0, "-", "nist_statistical_tests"]], "cipher_modules.statistical_tests.dataset_generator": [[96, 1, 1, "", "DatasetGenerator"], [96, 1, 1, "", "DatasetType"], [96, 4, 1, "", "get_low_density_sequences"], [96, 4, 1, "", "set_testing_data_amount"]], "cipher_modules.statistical_tests.dataset_generator.DatasetGenerator": [[96, 2, 1, "", "generate_avalanche_dataset"], [96, 2, 1, "", "generate_cbc_dataset"], [96, 2, 1, "", "generate_correlation_dataset"], [96, 2, 1, "", "generate_high_density_dataset"], [96, 2, 1, "", "generate_low_density_dataset"], [96, 2, 1, "", "generate_random_dataset"], [96, 2, 1, "", "get_cipher_outputs_for_cbc_dataset"], [96, 2, 1, "", "get_cipher_outputs_for_correlation_dataset"], [96, 2, 1, "", "get_cipher_outputs_for_density_dataset"]], "cipher_modules.statistical_tests.dataset_generator.DatasetType": [[96, 5, 1, "", "avalanche"], [96, 5, 1, "", "cbc"], [96, 5, 1, "", "correlation"], [96, 5, 1, "", "high_density"], [96, 5, 1, "", "low_density"], [96, 5, 1, "", "random"]], "cipher_modules.statistical_tests.dieharder_statistical_tests": [[97, 1, 1, "", "DieharderTests"]], "cipher_modules.statistical_tests.dieharder_statistical_tests.DieharderTests": [[97, 2, 1, "", "dieharder_statistical_tests"]], "cipher_modules.statistical_tests.nist_statistical_tests": [[99, 1, 1, "", "NISTStatisticalTests"]], "cipher_modules.statistical_tests.nist_statistical_tests.NISTStatisticalTests": [[99, 2, 1, "", "nist_statistical_tests"]], "cipher_modules.tester": [[100, 4, 1, "", "test_against_reference_code"], [100, 4, 1, "", "test_vector_check"]], "ciphers.block_ciphers": [[101, 0, 0, "-", "aes_block_cipher"], [102, 0, 0, "-", "aradi_block_cipher"], [103, 0, 0, "-", "aradi_block_cipher_sbox"], [104, 0, 0, "-", "aradi_block_cipher_sbox_and_compact_linear_map"], [105, 0, 0, "-", "baksheesh_block_cipher"], [106, 0, 0, "-", "ballet_block_cipher"], [107, 0, 0, "-", "bea1_block_cipher"], [108, 0, 0, "-", "des_block_cipher"], [109, 0, 0, "-", "des_exact_key_length_block_cipher"], [110, 0, 0, "-", "hight_block_cipher"], [111, 0, 0, "-", "kasumi_block_cipher"], [112, 0, 0, "-", "lblock_block_cipher"], [113, 0, 0, "-", "lea_block_cipher"], [114, 0, 0, "-", "lowmc_block_cipher"], [115, 0, 0, "-", "lowmc_generate_matrices"], [116, 0, 0, "-", "midori_block_cipher"], [117, 0, 0, "-", "present_block_cipher"], [118, 0, 0, "-", "prince_block_cipher"], [119, 0, 0, "-", "prince_v2_block_cipher"], [120, 0, 0, "-", "qarmav2_block_cipher"], [121, 0, 0, "-", "qarmav2_with_mixcolumn_block_cipher"], [122, 0, 0, "-", "raiden_block_cipher"], [123, 0, 0, "-", "rc5_block_cipher"], [124, 0, 0, "-", "scarf_block_cipher"], [125, 0, 0, "-", "simeck_block_cipher"], [126, 0, 0, "-", "simeck_sbox_block_cipher"], [127, 0, 0, "-", "simon_block_cipher"], [128, 0, 0, "-", "simon_sbox_block_cipher"], [129, 0, 0, "-", "skinny_block_cipher"], [130, 0, 0, "-", "sparx_block_cipher"], [131, 0, 0, "-", "speck_block_cipher"], [132, 0, 0, "-", "speedy_block_cipher"], [133, 0, 0, "-", "tea_block_cipher"], [134, 0, 0, "-", "threefish_block_cipher"], [135, 0, 0, "-", "twine_block_cipher"], [136, 0, 0, "-", "twofish_block_cipher"], [137, 0, 0, "-", "ublock_block_cipher"], [138, 0, 0, "-", "xtea_block_cipher"]], "ciphers.block_ciphers.aes_block_cipher": [[101, 1, 1, "", "AESBlockCipher"]], "ciphers.block_ciphers.aes_block_cipher.AESBlockCipher": [[101, 2, 1, "", "add_AND_component"], [101, 2, 1, "", "add_FSR_component"], [101, 2, 1, "", "add_MODADD_component"], [101, 2, 1, "", "add_MODSUB_component"], [101, 2, 1, "", "add_NOT_component"], [101, 2, 1, "", "add_OR_component"], [101, 2, 1, "", "add_SBOX_component"], [101, 2, 1, "", "add_SHIFT_component"], [101, 2, 1, "", "add_XOR_component"], [101, 2, 1, "", "add_cipher_output_component"], [101, 2, 1, "", "add_concatenate_component"], [101, 2, 1, "", "add_constant_component"], [101, 2, 1, "", "add_intermediate_output_component"], [101, 2, 1, "", "add_linear_layer_component"], [101, 2, 1, "", "add_mix_column_component"], [101, 2, 1, "", "add_permutation_component"], [101, 2, 1, "", "add_reverse_component"], [101, 2, 1, "", "add_rotate_component"], [101, 2, 1, "", "add_round"], [101, 2, 1, "", "add_round_key_output_component"], [101, 2, 1, "", "add_round_output_component"], [101, 2, 1, "", "add_shift_rows_component"], [101, 2, 1, "", "add_sigma_component"], [101, 2, 1, "", "add_suffix_to_components"], [101, 2, 1, "", "add_theta_gaston_component"], [101, 2, 1, "", "add_theta_keccak_component"], [101, 2, 1, "", "add_theta_xoodoo_component"], [101, 2, 1, "", "add_variable_rotate_component"], [101, 2, 1, "", "add_variable_shift_component"], [101, 2, 1, "", "add_word_permutation_component"], [101, 2, 1, "", "as_python_dictionary"], [101, 2, 1, "", "cipher_inverse"], [101, 2, 1, "", "cipher_partial_inverse"], [101, 2, 1, "", "component_from"], [101, 2, 1, "", "convert_to_compound_xor_cipher"], [101, 2, 1, "", "create_constant_component"], [101, 2, 1, "", "create_key_sbox_components"], [101, 2, 1, "", "create_mix_column_components"], [101, 2, 1, "", "create_networx_graph_from_input_ids"], [101, 2, 1, "", "create_rotate_component"], [101, 2, 1, "", "create_round_key"], [101, 2, 1, "", "create_round_output_component"], [101, 2, 1, "", "create_sbox_components"], [101, 2, 1, "", "create_shift_row_components"], [101, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [101, 2, 1, "", "create_xor_components"], [101, 3, 1, "", "current_round"], [101, 3, 1, "", "current_round_number"], [101, 3, 1, "", "current_round_number_of_components"], [101, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [101, 2, 1, "", "evaluate"], [101, 2, 1, "", "evaluate_using_c"], [101, 2, 1, "", "evaluate_vectorized"], [101, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [101, 3, 1, "", "family_name"], [101, 3, 1, "", "file_name"], [101, 2, 1, "", "find_impossible_property"], [101, 2, 1, "", "generate_bit_based_c_code"], [101, 2, 1, "", "generate_evaluate_c_code_shared_library"], [101, 2, 1, "", "generate_word_based_c_code"], [101, 2, 1, "", "get_all_components"], [101, 2, 1, "", "get_all_components_ids"], [101, 2, 1, "", "get_all_inputs_bit_positions"], [101, 2, 1, "", "get_component_from_id"], [101, 2, 1, "", "get_components_in_round"], [101, 2, 1, "", "get_current_component_id"], [101, 2, 1, "", "get_model"], [101, 2, 1, "", "get_number_of_components_in_round"], [101, 2, 1, "", "get_partial_cipher"], [101, 2, 1, "", "get_round_from_component_id"], [101, 2, 1, "", "get_sizes_of_components_by_type"], [101, 3, 1, "", "id"], [101, 2, 1, "", "impossible_differential_search"], [101, 3, 1, "", "inputs"], [101, 3, 1, "", "inputs_bit_size"], [101, 2, 1, "", "inputs_size_to_dict"], [101, 2, 1, "", "is_algebraically_secure"], [101, 2, 1, "", "is_andrx"], [101, 2, 1, "", "is_arx"], [101, 2, 1, "", "is_power_of_2_word_based"], [101, 2, 1, "", "is_shift_arx"], [101, 2, 1, "", "is_spn"], [101, 2, 1, "", "make_cipher_id"], [101, 2, 1, "", "make_file_name"], [101, 3, 1, "", "number_of_rounds"], [101, 3, 1, "", "output_bit_size"], [101, 2, 1, "", "polynomial_system"], [101, 2, 1, "", "polynomial_system_at_round"], [101, 2, 1, "", "print"], [101, 2, 1, "", "print_as_python_dictionary"], [101, 2, 1, "", "print_as_python_dictionary_to_file"], [101, 2, 1, "", "print_evaluation_python_code"], [101, 2, 1, "", "print_evaluation_python_code_to_file"], [101, 2, 1, "", "print_input_information"], [101, 3, 1, "", "reference_code"], [101, 2, 1, "", "remove_key_schedule"], [101, 2, 1, "", "remove_round_component"], [101, 2, 1, "", "remove_round_component_from_id"], [101, 3, 1, "", "rounds"], [101, 3, 1, "", "rounds_as_list"], [101, 2, 1, "", "set_file_name"], [101, 2, 1, "", "set_id"], [101, 2, 1, "", "set_inputs"], [101, 2, 1, "", "sort_cipher"], [101, 2, 1, "", "test_against_reference_code"], [101, 2, 1, "", "test_vector_check"], [101, 3, 1, "", "type"], [101, 2, 1, "", "update_input_id_links_from_component_id"], [101, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.aradi_block_cipher": [[102, 1, 1, "", "AradiBlockCipher"], [102, 4, 1, "", "get_key_word_bit_indexes"]], "ciphers.block_ciphers.aradi_block_cipher.AradiBlockCipher": [[102, 2, 1, "", "add_AND_component"], [102, 2, 1, "", "add_FSR_component"], [102, 2, 1, "", "add_MODADD_component"], [102, 2, 1, "", "add_MODSUB_component"], [102, 2, 1, "", "add_NOT_component"], [102, 2, 1, "", "add_OR_component"], [102, 2, 1, "", "add_SBOX_component"], [102, 2, 1, "", "add_SHIFT_component"], [102, 2, 1, "", "add_XOR_component"], [102, 2, 1, "", "add_cipher_output_component"], [102, 2, 1, "", "add_concatenate_component"], [102, 2, 1, "", "add_constant_component"], [102, 2, 1, "", "add_intermediate_output_component"], [102, 2, 1, "", "add_linear_layer_component"], [102, 2, 1, "", "add_mix_column_component"], [102, 2, 1, "", "add_permutation_component"], [102, 2, 1, "", "add_reverse_component"], [102, 2, 1, "", "add_rotate_component"], [102, 2, 1, "", "add_round"], [102, 2, 1, "", "add_round_key_output_component"], [102, 2, 1, "", "add_round_output_component"], [102, 2, 1, "", "add_shift_rows_component"], [102, 2, 1, "", "add_sigma_component"], [102, 2, 1, "", "add_suffix_to_components"], [102, 2, 1, "", "add_theta_gaston_component"], [102, 2, 1, "", "add_theta_keccak_component"], [102, 2, 1, "", "add_theta_xoodoo_component"], [102, 2, 1, "", "add_variable_rotate_component"], [102, 2, 1, "", "add_variable_shift_component"], [102, 2, 1, "", "add_word_permutation_component"], [102, 2, 1, "", "as_python_dictionary"], [102, 2, 1, "", "cipher_inverse"], [102, 2, 1, "", "cipher_partial_inverse"], [102, 2, 1, "", "component_from"], [102, 2, 1, "", "convert_to_compound_xor_cipher"], [102, 2, 1, "", "create_networx_graph_from_input_ids"], [102, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [102, 3, 1, "", "current_round"], [102, 3, 1, "", "current_round_number"], [102, 3, 1, "", "current_round_number_of_components"], [102, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [102, 2, 1, "", "evaluate"], [102, 2, 1, "", "evaluate_using_c"], [102, 2, 1, "", "evaluate_vectorized"], [102, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [102, 3, 1, "", "family_name"], [102, 3, 1, "", "file_name"], [102, 2, 1, "", "find_impossible_property"], [102, 2, 1, "", "generate_bit_based_c_code"], [102, 2, 1, "", "generate_evaluate_c_code_shared_library"], [102, 2, 1, "", "generate_word_based_c_code"], [102, 2, 1, "", "get_all_components"], [102, 2, 1, "", "get_all_components_ids"], [102, 2, 1, "", "get_all_inputs_bit_positions"], [102, 2, 1, "", "get_component_from_id"], [102, 2, 1, "", "get_components_in_round"], [102, 2, 1, "", "get_current_component_id"], [102, 2, 1, "", "get_model"], [102, 2, 1, "", "get_number_of_components_in_round"], [102, 2, 1, "", "get_partial_cipher"], [102, 2, 1, "", "get_round_from_component_id"], [102, 2, 1, "", "get_round_key_id"], [102, 2, 1, "", "get_sizes_of_components_by_type"], [102, 3, 1, "", "id"], [102, 2, 1, "", "impossible_differential_search"], [102, 3, 1, "", "inputs"], [102, 3, 1, "", "inputs_bit_size"], [102, 2, 1, "", "inputs_size_to_dict"], [102, 2, 1, "", "is_algebraically_secure"], [102, 2, 1, "", "is_andrx"], [102, 2, 1, "", "is_arx"], [102, 2, 1, "", "is_power_of_2_word_based"], [102, 2, 1, "", "is_shift_arx"], [102, 2, 1, "", "is_spn"], [102, 2, 1, "", "l_function"], [102, 2, 1, "", "m_function"], [102, 2, 1, "", "make_cipher_id"], [102, 2, 1, "", "make_file_name"], [102, 3, 1, "", "number_of_rounds"], [102, 3, 1, "", "output_bit_size"], [102, 2, 1, "", "polynomial_system"], [102, 2, 1, "", "polynomial_system_at_round"], [102, 2, 1, "", "print"], [102, 2, 1, "", "print_as_python_dictionary"], [102, 2, 1, "", "print_as_python_dictionary_to_file"], [102, 2, 1, "", "print_evaluation_python_code"], [102, 2, 1, "", "print_evaluation_python_code_to_file"], [102, 2, 1, "", "print_input_information"], [102, 3, 1, "", "reference_code"], [102, 2, 1, "", "remove_key_schedule"], [102, 2, 1, "", "remove_round_component"], [102, 2, 1, "", "remove_round_component_from_id"], [102, 2, 1, "", "round_function"], [102, 3, 1, "", "rounds"], [102, 3, 1, "", "rounds_as_list"], [102, 2, 1, "", "set_file_name"], [102, 2, 1, "", "set_id"], [102, 2, 1, "", "set_inputs"], [102, 2, 1, "", "sort_cipher"], [102, 2, 1, "", "test_against_reference_code"], [102, 2, 1, "", "test_vector_check"], [102, 3, 1, "", "type"], [102, 2, 1, "", "update_input_id_links_from_component_id"], [102, 2, 1, "", "update_key"], [102, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.aradi_block_cipher_sbox": [[103, 1, 1, "", "AradiBlockCipherSBox"], [103, 4, 1, "", "get_key_word_bit_indexes"]], "ciphers.block_ciphers.aradi_block_cipher_sbox.AradiBlockCipherSBox": [[103, 2, 1, "", "add_AND_component"], [103, 2, 1, "", "add_FSR_component"], [103, 2, 1, "", "add_MODADD_component"], [103, 2, 1, "", "add_MODSUB_component"], [103, 2, 1, "", "add_NOT_component"], [103, 2, 1, "", "add_OR_component"], [103, 2, 1, "", "add_SBOX_component"], [103, 2, 1, "", "add_SHIFT_component"], [103, 2, 1, "", "add_XOR_component"], [103, 2, 1, "", "add_cipher_output_component"], [103, 2, 1, "", "add_concatenate_component"], [103, 2, 1, "", "add_constant_component"], [103, 2, 1, "", "add_intermediate_output_component"], [103, 2, 1, "", "add_linear_layer_component"], [103, 2, 1, "", "add_mix_column_component"], [103, 2, 1, "", "add_permutation_component"], [103, 2, 1, "", "add_reverse_component"], [103, 2, 1, "", "add_rotate_component"], [103, 2, 1, "", "add_round"], [103, 2, 1, "", "add_round_key_output_component"], [103, 2, 1, "", "add_round_output_component"], [103, 2, 1, "", "add_shift_rows_component"], [103, 2, 1, "", "add_sigma_component"], [103, 2, 1, "", "add_suffix_to_components"], [103, 2, 1, "", "add_theta_gaston_component"], [103, 2, 1, "", "add_theta_keccak_component"], [103, 2, 1, "", "add_theta_xoodoo_component"], [103, 2, 1, "", "add_variable_rotate_component"], [103, 2, 1, "", "add_variable_shift_component"], [103, 2, 1, "", "add_word_permutation_component"], [103, 2, 1, "", "as_python_dictionary"], [103, 2, 1, "", "cipher_inverse"], [103, 2, 1, "", "cipher_partial_inverse"], [103, 2, 1, "", "component_from"], [103, 2, 1, "", "convert_to_compound_xor_cipher"], [103, 2, 1, "", "create_networx_graph_from_input_ids"], [103, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [103, 3, 1, "", "current_round"], [103, 3, 1, "", "current_round_number"], [103, 3, 1, "", "current_round_number_of_components"], [103, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [103, 2, 1, "", "evaluate"], [103, 2, 1, "", "evaluate_using_c"], [103, 2, 1, "", "evaluate_vectorized"], [103, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [103, 3, 1, "", "family_name"], [103, 3, 1, "", "file_name"], [103, 2, 1, "", "find_impossible_property"], [103, 2, 1, "", "generate_bit_based_c_code"], [103, 2, 1, "", "generate_evaluate_c_code_shared_library"], [103, 2, 1, "", "generate_word_based_c_code"], [103, 2, 1, "", "get_all_components"], [103, 2, 1, "", "get_all_components_ids"], [103, 2, 1, "", "get_all_inputs_bit_positions"], [103, 2, 1, "", "get_component_from_id"], [103, 2, 1, "", "get_components_in_round"], [103, 2, 1, "", "get_current_component_id"], [103, 2, 1, "", "get_model"], [103, 2, 1, "", "get_number_of_components_in_round"], [103, 2, 1, "", "get_partial_cipher"], [103, 2, 1, "", "get_round_from_component_id"], [103, 2, 1, "", "get_round_key_id"], [103, 2, 1, "", "get_sizes_of_components_by_type"], [103, 3, 1, "", "id"], [103, 2, 1, "", "impossible_differential_search"], [103, 3, 1, "", "inputs"], [103, 3, 1, "", "inputs_bit_size"], [103, 2, 1, "", "inputs_size_to_dict"], [103, 2, 1, "", "is_algebraically_secure"], [103, 2, 1, "", "is_andrx"], [103, 2, 1, "", "is_arx"], [103, 2, 1, "", "is_power_of_2_word_based"], [103, 2, 1, "", "is_shift_arx"], [103, 2, 1, "", "is_spn"], [103, 2, 1, "", "l_function"], [103, 2, 1, "", "m_function"], [103, 2, 1, "", "make_cipher_id"], [103, 2, 1, "", "make_file_name"], [103, 3, 1, "", "number_of_rounds"], [103, 3, 1, "", "output_bit_size"], [103, 2, 1, "", "polynomial_system"], [103, 2, 1, "", "polynomial_system_at_round"], [103, 2, 1, "", "print"], [103, 2, 1, "", "print_as_python_dictionary"], [103, 2, 1, "", "print_as_python_dictionary_to_file"], [103, 2, 1, "", "print_evaluation_python_code"], [103, 2, 1, "", "print_evaluation_python_code_to_file"], [103, 2, 1, "", "print_input_information"], [103, 3, 1, "", "reference_code"], [103, 2, 1, "", "remove_key_schedule"], [103, 2, 1, "", "remove_round_component"], [103, 2, 1, "", "remove_round_component_from_id"], [103, 2, 1, "", "round_function"], [103, 3, 1, "", "rounds"], [103, 3, 1, "", "rounds_as_list"], [103, 2, 1, "", "set_file_name"], [103, 2, 1, "", "set_id"], [103, 2, 1, "", "set_inputs"], [103, 2, 1, "", "sort_cipher"], [103, 2, 1, "", "test_against_reference_code"], [103, 2, 1, "", "test_vector_check"], [103, 3, 1, "", "type"], [103, 2, 1, "", "update_input_id_links_from_component_id"], [103, 2, 1, "", "update_key"], [103, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.aradi_block_cipher_sbox_and_compact_linear_map": [[104, 1, 1, "", "AradiBlockCipherSBoxAndCompactLinearMap"], [104, 4, 1, "", "aradi_linear_layer_bitarray"], [104, 4, 1, "", "circular_shift_left_bitarray"], [104, 4, 1, "", "create_linear_layers"], [104, 4, 1, "", "get_key_word_bit_indexes"]], "ciphers.block_ciphers.aradi_block_cipher_sbox_and_compact_linear_map.AradiBlockCipherSBoxAndCompactLinearMap": [[104, 2, 1, "", "add_AND_component"], [104, 2, 1, "", "add_FSR_component"], [104, 2, 1, "", "add_MODADD_component"], [104, 2, 1, "", "add_MODSUB_component"], [104, 2, 1, "", "add_NOT_component"], [104, 2, 1, "", "add_OR_component"], [104, 2, 1, "", "add_SBOX_component"], [104, 2, 1, "", "add_SHIFT_component"], [104, 2, 1, "", "add_XOR_component"], [104, 2, 1, "", "add_cipher_output_component"], [104, 2, 1, "", "add_concatenate_component"], [104, 2, 1, "", "add_constant_component"], [104, 2, 1, "", "add_intermediate_output_component"], [104, 2, 1, "", "add_linear_layer_component"], [104, 2, 1, "", "add_mix_column_component"], [104, 2, 1, "", "add_permutation_component"], [104, 2, 1, "", "add_reverse_component"], [104, 2, 1, "", "add_rotate_component"], [104, 2, 1, "", "add_round"], [104, 2, 1, "", "add_round_key_output_component"], [104, 2, 1, "", "add_round_output_component"], [104, 2, 1, "", "add_shift_rows_component"], [104, 2, 1, "", "add_sigma_component"], [104, 2, 1, "", "add_suffix_to_components"], [104, 2, 1, "", "add_theta_gaston_component"], [104, 2, 1, "", "add_theta_keccak_component"], [104, 2, 1, "", "add_theta_xoodoo_component"], [104, 2, 1, "", "add_variable_rotate_component"], [104, 2, 1, "", "add_variable_shift_component"], [104, 2, 1, "", "add_word_permutation_component"], [104, 2, 1, "", "as_python_dictionary"], [104, 2, 1, "", "cipher_inverse"], [104, 2, 1, "", "cipher_partial_inverse"], [104, 2, 1, "", "component_from"], [104, 2, 1, "", "convert_to_compound_xor_cipher"], [104, 2, 1, "", "create_networx_graph_from_input_ids"], [104, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [104, 3, 1, "", "current_round"], [104, 3, 1, "", "current_round_number"], [104, 3, 1, "", "current_round_number_of_components"], [104, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [104, 2, 1, "", "evaluate"], [104, 2, 1, "", "evaluate_using_c"], [104, 2, 1, "", "evaluate_vectorized"], [104, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [104, 3, 1, "", "family_name"], [104, 3, 1, "", "file_name"], [104, 2, 1, "", "find_impossible_property"], [104, 2, 1, "", "generate_bit_based_c_code"], [104, 2, 1, "", "generate_evaluate_c_code_shared_library"], [104, 2, 1, "", "generate_word_based_c_code"], [104, 2, 1, "", "get_all_components"], [104, 2, 1, "", "get_all_components_ids"], [104, 2, 1, "", "get_all_inputs_bit_positions"], [104, 2, 1, "", "get_component_from_id"], [104, 2, 1, "", "get_components_in_round"], [104, 2, 1, "", "get_current_component_id"], [104, 2, 1, "", "get_model"], [104, 2, 1, "", "get_number_of_components_in_round"], [104, 2, 1, "", "get_partial_cipher"], [104, 2, 1, "", "get_round_from_component_id"], [104, 2, 1, "", "get_round_key_id"], [104, 2, 1, "", "get_sizes_of_components_by_type"], [104, 3, 1, "", "id"], [104, 2, 1, "", "impossible_differential_search"], [104, 3, 1, "", "inputs"], [104, 3, 1, "", "inputs_bit_size"], [104, 2, 1, "", "inputs_size_to_dict"], [104, 2, 1, "", "is_algebraically_secure"], [104, 2, 1, "", "is_andrx"], [104, 2, 1, "", "is_arx"], [104, 2, 1, "", "is_power_of_2_word_based"], [104, 2, 1, "", "is_shift_arx"], [104, 2, 1, "", "is_spn"], [104, 2, 1, "", "l_function"], [104, 2, 1, "", "m_function"], [104, 2, 1, "", "make_cipher_id"], [104, 2, 1, "", "make_file_name"], [104, 3, 1, "", "number_of_rounds"], [104, 3, 1, "", "output_bit_size"], [104, 2, 1, "", "polynomial_system"], [104, 2, 1, "", "polynomial_system_at_round"], [104, 2, 1, "", "print"], [104, 2, 1, "", "print_as_python_dictionary"], [104, 2, 1, "", "print_as_python_dictionary_to_file"], [104, 2, 1, "", "print_evaluation_python_code"], [104, 2, 1, "", "print_evaluation_python_code_to_file"], [104, 2, 1, "", "print_input_information"], [104, 3, 1, "", "reference_code"], [104, 2, 1, "", "remove_key_schedule"], [104, 2, 1, "", "remove_round_component"], [104, 2, 1, "", "remove_round_component_from_id"], [104, 2, 1, "", "round_function"], [104, 3, 1, "", "rounds"], [104, 3, 1, "", "rounds_as_list"], [104, 2, 1, "", "set_file_name"], [104, 2, 1, "", "set_id"], [104, 2, 1, "", "set_inputs"], [104, 2, 1, "", "sort_cipher"], [104, 2, 1, "", "test_against_reference_code"], [104, 2, 1, "", "test_vector_check"], [104, 3, 1, "", "type"], [104, 2, 1, "", "update_input_id_links_from_component_id"], [104, 2, 1, "", "update_key"], [104, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.baksheesh_block_cipher": [[105, 1, 1, "", "BaksheeshBlockCipher"]], "ciphers.block_ciphers.baksheesh_block_cipher.BaksheeshBlockCipher": [[105, 2, 1, "", "add_AND_component"], [105, 2, 1, "", "add_FSR_component"], [105, 2, 1, "", "add_MODADD_component"], [105, 2, 1, "", "add_MODSUB_component"], [105, 2, 1, "", "add_NOT_component"], [105, 2, 1, "", "add_OR_component"], [105, 2, 1, "", "add_SBOX_component"], [105, 2, 1, "", "add_SHIFT_component"], [105, 2, 1, "", "add_XOR_component"], [105, 2, 1, "", "add_cipher_output_component"], [105, 2, 1, "", "add_concatenate_component"], [105, 2, 1, "", "add_constant_component"], [105, 2, 1, "", "add_intermediate_output_component"], [105, 2, 1, "", "add_linear_layer_component"], [105, 2, 1, "", "add_mix_column_component"], [105, 2, 1, "", "add_permutation_component"], [105, 2, 1, "", "add_reverse_component"], [105, 2, 1, "", "add_rotate_component"], [105, 2, 1, "", "add_round"], [105, 2, 1, "", "add_round_key_output_component"], [105, 2, 1, "", "add_round_output_component"], [105, 2, 1, "", "add_shift_rows_component"], [105, 2, 1, "", "add_sigma_component"], [105, 2, 1, "", "add_suffix_to_components"], [105, 2, 1, "", "add_theta_gaston_component"], [105, 2, 1, "", "add_theta_keccak_component"], [105, 2, 1, "", "add_theta_xoodoo_component"], [105, 2, 1, "", "add_variable_rotate_component"], [105, 2, 1, "", "add_variable_shift_component"], [105, 2, 1, "", "add_word_permutation_component"], [105, 2, 1, "", "apply_bit_permutation"], [105, 2, 1, "", "apply_round_constants"], [105, 2, 1, "", "apply_sbox_layer"], [105, 2, 1, "", "as_python_dictionary"], [105, 2, 1, "", "cipher_inverse"], [105, 2, 1, "", "cipher_partial_inverse"], [105, 2, 1, "", "component_from"], [105, 2, 1, "", "convert_to_compound_xor_cipher"], [105, 2, 1, "", "create_networx_graph_from_input_ids"], [105, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [105, 3, 1, "", "current_round"], [105, 3, 1, "", "current_round_number"], [105, 3, 1, "", "current_round_number_of_components"], [105, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [105, 2, 1, "", "evaluate"], [105, 2, 1, "", "evaluate_using_c"], [105, 2, 1, "", "evaluate_vectorized"], [105, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [105, 3, 1, "", "family_name"], [105, 3, 1, "", "file_name"], [105, 2, 1, "", "find_impossible_property"], [105, 2, 1, "", "generate_bit_based_c_code"], [105, 2, 1, "", "generate_evaluate_c_code_shared_library"], [105, 2, 1, "", "generate_word_based_c_code"], [105, 2, 1, "", "get_all_components"], [105, 2, 1, "", "get_all_components_ids"], [105, 2, 1, "", "get_all_inputs_bit_positions"], [105, 2, 1, "", "get_component_from_id"], [105, 2, 1, "", "get_components_in_round"], [105, 2, 1, "", "get_current_component_id"], [105, 2, 1, "", "get_model"], [105, 2, 1, "", "get_number_of_components_in_round"], [105, 2, 1, "", "get_partial_cipher"], [105, 2, 1, "", "get_round_from_component_id"], [105, 2, 1, "", "get_sizes_of_components_by_type"], [105, 3, 1, "", "id"], [105, 2, 1, "", "impossible_differential_search"], [105, 3, 1, "", "inputs"], [105, 3, 1, "", "inputs_bit_size"], [105, 2, 1, "", "inputs_size_to_dict"], [105, 2, 1, "", "is_algebraically_secure"], [105, 2, 1, "", "is_andrx"], [105, 2, 1, "", "is_arx"], [105, 2, 1, "", "is_power_of_2_word_based"], [105, 2, 1, "", "is_shift_arx"], [105, 2, 1, "", "is_spn"], [105, 2, 1, "", "make_cipher_id"], [105, 2, 1, "", "make_file_name"], [105, 3, 1, "", "number_of_rounds"], [105, 3, 1, "", "output_bit_size"], [105, 2, 1, "", "polynomial_system"], [105, 2, 1, "", "polynomial_system_at_round"], [105, 2, 1, "", "print"], [105, 2, 1, "", "print_as_python_dictionary"], [105, 2, 1, "", "print_as_python_dictionary_to_file"], [105, 2, 1, "", "print_evaluation_python_code"], [105, 2, 1, "", "print_evaluation_python_code_to_file"], [105, 2, 1, "", "print_input_information"], [105, 3, 1, "", "reference_code"], [105, 2, 1, "", "remove_key_schedule"], [105, 2, 1, "", "remove_round_component"], [105, 2, 1, "", "remove_round_component_from_id"], [105, 3, 1, "", "rounds"], [105, 3, 1, "", "rounds_as_list"], [105, 2, 1, "", "set_file_name"], [105, 2, 1, "", "set_id"], [105, 2, 1, "", "set_inputs"], [105, 2, 1, "", "sort_cipher"], [105, 2, 1, "", "test_against_reference_code"], [105, 2, 1, "", "test_vector_check"], [105, 3, 1, "", "type"], [105, 2, 1, "", "update_input_id_links_from_component_id"], [105, 2, 1, "", "update_key"], [105, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.ballet_block_cipher": [[106, 1, 1, "", "BalletBlockCipher"]], "ciphers.block_ciphers.ballet_block_cipher.BalletBlockCipher": [[106, 2, 1, "", "add_AND_component"], [106, 2, 1, "", "add_FSR_component"], [106, 2, 1, "", "add_MODADD_component"], [106, 2, 1, "", "add_MODSUB_component"], [106, 2, 1, "", "add_NOT_component"], [106, 2, 1, "", "add_OR_component"], [106, 2, 1, "", "add_SBOX_component"], [106, 2, 1, "", "add_SHIFT_component"], [106, 2, 1, "", "add_XOR_component"], [106, 2, 1, "", "add_cipher_output_component"], [106, 2, 1, "", "add_concatenate_component"], [106, 2, 1, "", "add_constant_component"], [106, 2, 1, "", "add_intermediate_output_component"], [106, 2, 1, "", "add_linear_layer_component"], [106, 2, 1, "", "add_mix_column_component"], [106, 2, 1, "", "add_permutation_component"], [106, 2, 1, "", "add_reverse_component"], [106, 2, 1, "", "add_rotate_component"], [106, 2, 1, "", "add_round"], [106, 2, 1, "", "add_round_key_output_component"], [106, 2, 1, "", "add_round_output_component"], [106, 2, 1, "", "add_shift_rows_component"], [106, 2, 1, "", "add_sigma_component"], [106, 2, 1, "", "add_suffix_to_components"], [106, 2, 1, "", "add_theta_gaston_component"], [106, 2, 1, "", "add_theta_keccak_component"], [106, 2, 1, "", "add_theta_xoodoo_component"], [106, 2, 1, "", "add_variable_rotate_component"], [106, 2, 1, "", "add_variable_shift_component"], [106, 2, 1, "", "add_word_permutation_component"], [106, 2, 1, "", "as_python_dictionary"], [106, 2, 1, "", "check_parameters"], [106, 2, 1, "", "cipher_inverse"], [106, 2, 1, "", "cipher_partial_inverse"], [106, 2, 1, "", "component_from"], [106, 2, 1, "", "convert_to_compound_xor_cipher"], [106, 2, 1, "", "create_networx_graph_from_input_ids"], [106, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [106, 3, 1, "", "current_round"], [106, 3, 1, "", "current_round_number"], [106, 3, 1, "", "current_round_number_of_components"], [106, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [106, 2, 1, "", "evaluate"], [106, 2, 1, "", "evaluate_using_c"], [106, 2, 1, "", "evaluate_vectorized"], [106, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [106, 3, 1, "", "family_name"], [106, 3, 1, "", "file_name"], [106, 2, 1, "", "find_impossible_property"], [106, 2, 1, "", "generate_bit_based_c_code"], [106, 2, 1, "", "generate_evaluate_c_code_shared_library"], [106, 2, 1, "", "generate_word_based_c_code"], [106, 2, 1, "", "get_all_components"], [106, 2, 1, "", "get_all_components_ids"], [106, 2, 1, "", "get_all_inputs_bit_positions"], [106, 2, 1, "", "get_component_from_id"], [106, 2, 1, "", "get_components_in_round"], [106, 2, 1, "", "get_current_component_id"], [106, 2, 1, "", "get_model"], [106, 2, 1, "", "get_number_of_components_in_round"], [106, 2, 1, "", "get_partial_cipher"], [106, 2, 1, "", "get_round_from_component_id"], [106, 2, 1, "", "get_sizes_of_components_by_type"], [106, 3, 1, "", "id"], [106, 2, 1, "", "impossible_differential_search"], [106, 3, 1, "", "inputs"], [106, 3, 1, "", "inputs_bit_size"], [106, 2, 1, "", "inputs_size_to_dict"], [106, 2, 1, "", "is_algebraically_secure"], [106, 2, 1, "", "is_andrx"], [106, 2, 1, "", "is_arx"], [106, 2, 1, "", "is_power_of_2_word_based"], [106, 2, 1, "", "is_shift_arx"], [106, 2, 1, "", "is_spn"], [106, 2, 1, "", "key_schedule_n2n"], [106, 2, 1, "", "key_schedule_nn"], [106, 2, 1, "", "make_cipher_id"], [106, 2, 1, "", "make_file_name"], [106, 3, 1, "", "number_of_rounds"], [106, 3, 1, "", "output_bit_size"], [106, 2, 1, "", "polynomial_system"], [106, 2, 1, "", "polynomial_system_at_round"], [106, 2, 1, "", "print"], [106, 2, 1, "", "print_as_python_dictionary"], [106, 2, 1, "", "print_as_python_dictionary_to_file"], [106, 2, 1, "", "print_evaluation_python_code"], [106, 2, 1, "", "print_evaluation_python_code_to_file"], [106, 2, 1, "", "print_input_information"], [106, 3, 1, "", "reference_code"], [106, 2, 1, "", "remove_key_schedule"], [106, 2, 1, "", "remove_round_component"], [106, 2, 1, "", "remove_round_component_from_id"], [106, 2, 1, "", "round_function"], [106, 2, 1, "", "round_initialization"], [106, 3, 1, "", "rounds"], [106, 3, 1, "", "rounds_as_list"], [106, 2, 1, "", "set_file_name"], [106, 2, 1, "", "set_id"], [106, 2, 1, "", "set_inputs"], [106, 2, 1, "", "sort_cipher"], [106, 2, 1, "", "test_against_reference_code"], [106, 2, 1, "", "test_vector_check"], [106, 3, 1, "", "type"], [106, 2, 1, "", "update_input_id_links_from_component_id"], [106, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.bea1_block_cipher": [[107, 1, 1, "", "BEA1BlockCipher"]], "ciphers.block_ciphers.bea1_block_cipher.BEA1BlockCipher": [[107, 2, 1, "", "add_AND_component"], [107, 2, 1, "", "add_FSR_component"], [107, 2, 1, "", "add_MODADD_component"], [107, 2, 1, "", "add_MODSUB_component"], [107, 2, 1, "", "add_NOT_component"], [107, 2, 1, "", "add_OR_component"], [107, 2, 1, "", "add_SBOX_component"], [107, 2, 1, "", "add_SHIFT_component"], [107, 2, 1, "", "add_XOR_component"], [107, 2, 1, "", "add_cipher_output_component"], [107, 2, 1, "", "add_concatenate_component"], [107, 2, 1, "", "add_constant_component"], [107, 2, 1, "", "add_intermediate_output_component"], [107, 2, 1, "", "add_linear_layer_component"], [107, 2, 1, "", "add_mix_column_component"], [107, 2, 1, "", "add_permutation_component"], [107, 2, 1, "", "add_reverse_component"], [107, 2, 1, "", "add_rotate_component"], [107, 2, 1, "", "add_round"], [107, 2, 1, "", "add_round_key_output_component"], [107, 2, 1, "", "add_round_output_component"], [107, 2, 1, "", "add_shift_rows_component"], [107, 2, 1, "", "add_sigma_component"], [107, 2, 1, "", "add_suffix_to_components"], [107, 2, 1, "", "add_theta_gaston_component"], [107, 2, 1, "", "add_theta_keccak_component"], [107, 2, 1, "", "add_theta_xoodoo_component"], [107, 2, 1, "", "add_variable_rotate_component"], [107, 2, 1, "", "add_variable_shift_component"], [107, 2, 1, "", "add_word_permutation_component"], [107, 2, 1, "", "as_python_dictionary"], [107, 2, 1, "", "cipher_inverse"], [107, 2, 1, "", "cipher_partial_inverse"], [107, 2, 1, "", "component_from"], [107, 2, 1, "", "convert_to_compound_xor_cipher"], [107, 2, 1, "", "create_networx_graph_from_input_ids"], [107, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [107, 3, 1, "", "current_round"], [107, 3, 1, "", "current_round_number"], [107, 3, 1, "", "current_round_number_of_components"], [107, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [107, 2, 1, "", "evaluate"], [107, 2, 1, "", "evaluate_using_c"], [107, 2, 1, "", "evaluate_vectorized"], [107, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [107, 3, 1, "", "family_name"], [107, 3, 1, "", "file_name"], [107, 2, 1, "", "find_impossible_property"], [107, 2, 1, "", "generate_bit_based_c_code"], [107, 2, 1, "", "generate_evaluate_c_code_shared_library"], [107, 2, 1, "", "generate_word_based_c_code"], [107, 2, 1, "", "get_all_components"], [107, 2, 1, "", "get_all_components_ids"], [107, 2, 1, "", "get_all_inputs_bit_positions"], [107, 2, 1, "", "get_component_from_id"], [107, 2, 1, "", "get_components_in_round"], [107, 2, 1, "", "get_current_component_id"], [107, 2, 1, "", "get_model"], [107, 2, 1, "", "get_number_of_components_in_round"], [107, 2, 1, "", "get_partial_cipher"], [107, 2, 1, "", "get_round_from_component_id"], [107, 2, 1, "", "get_sizes_of_components_by_type"], [107, 3, 1, "", "id"], [107, 2, 1, "", "impossible_differential_search"], [107, 3, 1, "", "inputs"], [107, 3, 1, "", "inputs_bit_size"], [107, 2, 1, "", "inputs_size_to_dict"], [107, 2, 1, "", "is_algebraically_secure"], [107, 2, 1, "", "is_andrx"], [107, 2, 1, "", "is_arx"], [107, 2, 1, "", "is_power_of_2_word_based"], [107, 2, 1, "", "is_shift_arx"], [107, 2, 1, "", "is_spn"], [107, 2, 1, "", "make_cipher_id"], [107, 2, 1, "", "make_file_name"], [107, 3, 1, "", "number_of_rounds"], [107, 3, 1, "", "output_bit_size"], [107, 2, 1, "", "polynomial_system"], [107, 2, 1, "", "polynomial_system_at_round"], [107, 2, 1, "", "print"], [107, 2, 1, "", "print_as_python_dictionary"], [107, 2, 1, "", "print_as_python_dictionary_to_file"], [107, 2, 1, "", "print_evaluation_python_code"], [107, 2, 1, "", "print_evaluation_python_code_to_file"], [107, 2, 1, "", "print_input_information"], [107, 3, 1, "", "reference_code"], [107, 2, 1, "", "remove_key_schedule"], [107, 2, 1, "", "remove_round_component"], [107, 2, 1, "", "remove_round_component_from_id"], [107, 3, 1, "", "rounds"], [107, 3, 1, "", "rounds_as_list"], [107, 2, 1, "", "set_file_name"], [107, 2, 1, "", "set_id"], [107, 2, 1, "", "set_inputs"], [107, 2, 1, "", "sort_cipher"], [107, 2, 1, "", "test_against_reference_code"], [107, 2, 1, "", "test_vector_check"], [107, 3, 1, "", "type"], [107, 2, 1, "", "update_input_id_links_from_component_id"], [107, 2, 1, "", "xor_round_key"], [107, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.des_block_cipher": [[108, 1, 1, "", "DESBlockCipher"]], "ciphers.block_ciphers.des_block_cipher.DESBlockCipher": [[108, 2, 1, "", "add_AND_component"], [108, 2, 1, "", "add_FSR_component"], [108, 2, 1, "", "add_MODADD_component"], [108, 2, 1, "", "add_MODSUB_component"], [108, 2, 1, "", "add_NOT_component"], [108, 2, 1, "", "add_OR_component"], [108, 2, 1, "", "add_SBOX_component"], [108, 2, 1, "", "add_SHIFT_component"], [108, 2, 1, "", "add_XOR_component"], [108, 2, 1, "", "add_cipher_output_component"], [108, 2, 1, "", "add_concatenate_component"], [108, 2, 1, "", "add_constant_component"], [108, 2, 1, "", "add_intermediate_output_component"], [108, 2, 1, "", "add_linear_layer_component"], [108, 2, 1, "", "add_mix_column_component"], [108, 2, 1, "", "add_permutation_component"], [108, 2, 1, "", "add_reverse_component"], [108, 2, 1, "", "add_rotate_component"], [108, 2, 1, "", "add_round"], [108, 2, 1, "", "add_round_key_output_component"], [108, 2, 1, "", "add_round_output_component"], [108, 2, 1, "", "add_shift_rows_component"], [108, 2, 1, "", "add_sigma_component"], [108, 2, 1, "", "add_suffix_to_components"], [108, 2, 1, "", "add_theta_gaston_component"], [108, 2, 1, "", "add_theta_keccak_component"], [108, 2, 1, "", "add_theta_xoodoo_component"], [108, 2, 1, "", "add_variable_rotate_component"], [108, 2, 1, "", "add_variable_shift_component"], [108, 2, 1, "", "add_word_permutation_component"], [108, 2, 1, "", "as_python_dictionary"], [108, 2, 1, "", "cipher_inverse"], [108, 2, 1, "", "cipher_partial_inverse"], [108, 2, 1, "", "component_from"], [108, 2, 1, "", "convert_to_compound_xor_cipher"], [108, 2, 1, "", "create_networx_graph_from_input_ids"], [108, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [108, 3, 1, "", "current_round"], [108, 3, 1, "", "current_round_number"], [108, 3, 1, "", "current_round_number_of_components"], [108, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [108, 2, 1, "", "evaluate"], [108, 2, 1, "", "evaluate_using_c"], [108, 2, 1, "", "evaluate_vectorized"], [108, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [108, 3, 1, "", "family_name"], [108, 3, 1, "", "file_name"], [108, 2, 1, "", "find_impossible_property"], [108, 2, 1, "", "generate_bit_based_c_code"], [108, 2, 1, "", "generate_evaluate_c_code_shared_library"], [108, 2, 1, "", "generate_word_based_c_code"], [108, 2, 1, "", "get_all_components"], [108, 2, 1, "", "get_all_components_ids"], [108, 2, 1, "", "get_all_inputs_bit_positions"], [108, 2, 1, "", "get_component_from_id"], [108, 2, 1, "", "get_components_in_round"], [108, 2, 1, "", "get_current_component_id"], [108, 2, 1, "", "get_model"], [108, 2, 1, "", "get_number_of_components_in_round"], [108, 2, 1, "", "get_partial_cipher"], [108, 2, 1, "", "get_round_from_component_id"], [108, 2, 1, "", "get_sizes_of_components_by_type"], [108, 3, 1, "", "id"], [108, 2, 1, "", "impossible_differential_search"], [108, 3, 1, "", "inputs"], [108, 3, 1, "", "inputs_bit_size"], [108, 2, 1, "", "inputs_size_to_dict"], [108, 2, 1, "", "is_algebraically_secure"], [108, 2, 1, "", "is_andrx"], [108, 2, 1, "", "is_arx"], [108, 2, 1, "", "is_power_of_2_word_based"], [108, 2, 1, "", "is_shift_arx"], [108, 2, 1, "", "is_spn"], [108, 2, 1, "", "make_cipher_id"], [108, 2, 1, "", "make_file_name"], [108, 3, 1, "", "number_of_rounds"], [108, 3, 1, "", "output_bit_size"], [108, 2, 1, "", "polynomial_system"], [108, 2, 1, "", "polynomial_system_at_round"], [108, 2, 1, "", "print"], [108, 2, 1, "", "print_as_python_dictionary"], [108, 2, 1, "", "print_as_python_dictionary_to_file"], [108, 2, 1, "", "print_evaluation_python_code"], [108, 2, 1, "", "print_evaluation_python_code_to_file"], [108, 2, 1, "", "print_input_information"], [108, 3, 1, "", "reference_code"], [108, 2, 1, "", "remove_key_schedule"], [108, 2, 1, "", "remove_round_component"], [108, 2, 1, "", "remove_round_component_from_id"], [108, 3, 1, "", "rounds"], [108, 3, 1, "", "rounds_as_list"], [108, 2, 1, "", "set_file_name"], [108, 2, 1, "", "set_id"], [108, 2, 1, "", "set_inputs"], [108, 2, 1, "", "sort_cipher"], [108, 2, 1, "", "test_against_reference_code"], [108, 2, 1, "", "test_vector_check"], [108, 3, 1, "", "type"], [108, 2, 1, "", "update_input_id_links_from_component_id"], [108, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.des_exact_key_length_block_cipher": [[109, 1, 1, "", "DESExactKeyLengthBlockCipher"]], "ciphers.block_ciphers.des_exact_key_length_block_cipher.DESExactKeyLengthBlockCipher": [[109, 2, 1, "", "add_AND_component"], [109, 2, 1, "", "add_FSR_component"], [109, 2, 1, "", "add_MODADD_component"], [109, 2, 1, "", "add_MODSUB_component"], [109, 2, 1, "", "add_NOT_component"], [109, 2, 1, "", "add_OR_component"], [109, 2, 1, "", "add_SBOX_component"], [109, 2, 1, "", "add_SHIFT_component"], [109, 2, 1, "", "add_XOR_component"], [109, 2, 1, "", "add_cipher_output_component"], [109, 2, 1, "", "add_concatenate_component"], [109, 2, 1, "", "add_constant_component"], [109, 2, 1, "", "add_intermediate_output_component"], [109, 2, 1, "", "add_linear_layer_component"], [109, 2, 1, "", "add_mix_column_component"], [109, 2, 1, "", "add_permutation_component"], [109, 2, 1, "", "add_reverse_component"], [109, 2, 1, "", "add_rotate_component"], [109, 2, 1, "", "add_round"], [109, 2, 1, "", "add_round_key_output_component"], [109, 2, 1, "", "add_round_output_component"], [109, 2, 1, "", "add_shift_rows_component"], [109, 2, 1, "", "add_sigma_component"], [109, 2, 1, "", "add_suffix_to_components"], [109, 2, 1, "", "add_theta_gaston_component"], [109, 2, 1, "", "add_theta_keccak_component"], [109, 2, 1, "", "add_theta_xoodoo_component"], [109, 2, 1, "", "add_variable_rotate_component"], [109, 2, 1, "", "add_variable_shift_component"], [109, 2, 1, "", "add_word_permutation_component"], [109, 2, 1, "", "as_python_dictionary"], [109, 2, 1, "", "cipher_inverse"], [109, 2, 1, "", "cipher_partial_inverse"], [109, 2, 1, "", "component_from"], [109, 2, 1, "", "convert_to_compound_xor_cipher"], [109, 2, 1, "", "create_networx_graph_from_input_ids"], [109, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [109, 3, 1, "", "current_round"], [109, 3, 1, "", "current_round_number"], [109, 3, 1, "", "current_round_number_of_components"], [109, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [109, 2, 1, "", "evaluate"], [109, 2, 1, "", "evaluate_using_c"], [109, 2, 1, "", "evaluate_vectorized"], [109, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [109, 3, 1, "", "family_name"], [109, 3, 1, "", "file_name"], [109, 2, 1, "", "find_impossible_property"], [109, 2, 1, "", "generate_bit_based_c_code"], [109, 2, 1, "", "generate_evaluate_c_code_shared_library"], [109, 2, 1, "", "generate_word_based_c_code"], [109, 2, 1, "", "get_all_components"], [109, 2, 1, "", "get_all_components_ids"], [109, 2, 1, "", "get_all_inputs_bit_positions"], [109, 2, 1, "", "get_component_from_id"], [109, 2, 1, "", "get_components_in_round"], [109, 2, 1, "", "get_current_component_id"], [109, 2, 1, "", "get_model"], [109, 2, 1, "", "get_number_of_components_in_round"], [109, 2, 1, "", "get_partial_cipher"], [109, 2, 1, "", "get_round_from_component_id"], [109, 2, 1, "", "get_sizes_of_components_by_type"], [109, 3, 1, "", "id"], [109, 2, 1, "", "impossible_differential_search"], [109, 3, 1, "", "inputs"], [109, 3, 1, "", "inputs_bit_size"], [109, 2, 1, "", "inputs_size_to_dict"], [109, 2, 1, "", "is_algebraically_secure"], [109, 2, 1, "", "is_andrx"], [109, 2, 1, "", "is_arx"], [109, 2, 1, "", "is_power_of_2_word_based"], [109, 2, 1, "", "is_shift_arx"], [109, 2, 1, "", "is_spn"], [109, 2, 1, "", "make_cipher_id"], [109, 2, 1, "", "make_file_name"], [109, 3, 1, "", "number_of_rounds"], [109, 3, 1, "", "output_bit_size"], [109, 2, 1, "", "polynomial_system"], [109, 2, 1, "", "polynomial_system_at_round"], [109, 2, 1, "", "print"], [109, 2, 1, "", "print_as_python_dictionary"], [109, 2, 1, "", "print_as_python_dictionary_to_file"], [109, 2, 1, "", "print_evaluation_python_code"], [109, 2, 1, "", "print_evaluation_python_code_to_file"], [109, 2, 1, "", "print_input_information"], [109, 3, 1, "", "reference_code"], [109, 2, 1, "", "remove_key_schedule"], [109, 2, 1, "", "remove_round_component"], [109, 2, 1, "", "remove_round_component_from_id"], [109, 3, 1, "", "rounds"], [109, 3, 1, "", "rounds_as_list"], [109, 2, 1, "", "set_file_name"], [109, 2, 1, "", "set_id"], [109, 2, 1, "", "set_inputs"], [109, 2, 1, "", "sort_cipher"], [109, 2, 1, "", "test_against_reference_code"], [109, 2, 1, "", "test_vector_check"], [109, 3, 1, "", "type"], [109, 2, 1, "", "update_input_id_links_from_component_id"], [109, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.hight_block_cipher": [[110, 1, 1, "", "HightBlockCipher"], [110, 4, 1, "", "init_input"], [110, 4, 1, "", "temp_subkey_generation"], [110, 4, 1, "", "whitening_key_generation"]], "ciphers.block_ciphers.hight_block_cipher.HightBlockCipher": [[110, 2, 1, "", "add_AND_component"], [110, 2, 1, "", "add_FSR_component"], [110, 2, 1, "", "add_MODADD_component"], [110, 2, 1, "", "add_MODSUB_component"], [110, 2, 1, "", "add_NOT_component"], [110, 2, 1, "", "add_OR_component"], [110, 2, 1, "", "add_SBOX_component"], [110, 2, 1, "", "add_SHIFT_component"], [110, 2, 1, "", "add_XOR_component"], [110, 2, 1, "", "add_cipher_output_component"], [110, 2, 1, "", "add_concatenate_component"], [110, 2, 1, "", "add_constant_component"], [110, 2, 1, "", "add_intermediate_output_component"], [110, 2, 1, "", "add_intermediate_output_components"], [110, 2, 1, "", "add_linear_layer_component"], [110, 2, 1, "", "add_mix_column_component"], [110, 2, 1, "", "add_permutation_component"], [110, 2, 1, "", "add_reverse_component"], [110, 2, 1, "", "add_rotate_component"], [110, 2, 1, "", "add_round"], [110, 2, 1, "", "add_round_key_output_component"], [110, 2, 1, "", "add_round_output_component"], [110, 2, 1, "", "add_shift_rows_component"], [110, 2, 1, "", "add_sigma_component"], [110, 2, 1, "", "add_suffix_to_components"], [110, 2, 1, "", "add_theta_gaston_component"], [110, 2, 1, "", "add_theta_keccak_component"], [110, 2, 1, "", "add_theta_xoodoo_component"], [110, 2, 1, "", "add_variable_rotate_component"], [110, 2, 1, "", "add_variable_shift_component"], [110, 2, 1, "", "add_word_permutation_component"], [110, 2, 1, "", "as_python_dictionary"], [110, 2, 1, "", "cipher_inverse"], [110, 2, 1, "", "cipher_partial_inverse"], [110, 2, 1, "", "component_from"], [110, 2, 1, "", "convert_to_compound_xor_cipher"], [110, 2, 1, "", "create_networx_graph_from_input_ids"], [110, 2, 1, "", "create_sub_key"], [110, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [110, 3, 1, "", "current_round"], [110, 3, 1, "", "current_round_number"], [110, 3, 1, "", "current_round_number_of_components"], [110, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [110, 2, 1, "", "evaluate"], [110, 2, 1, "", "evaluate_using_c"], [110, 2, 1, "", "evaluate_vectorized"], [110, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [110, 3, 1, "", "family_name"], [110, 3, 1, "", "file_name"], [110, 2, 1, "", "final_transformation"], [110, 2, 1, "", "find_impossible_property"], [110, 2, 1, "", "generate_bit_based_c_code"], [110, 2, 1, "", "generate_evaluate_c_code_shared_library"], [110, 2, 1, "", "generate_word_based_c_code"], [110, 2, 1, "", "get_all_components"], [110, 2, 1, "", "get_all_components_ids"], [110, 2, 1, "", "get_all_inputs_bit_positions"], [110, 2, 1, "", "get_component_from_id"], [110, 2, 1, "", "get_components_in_round"], [110, 2, 1, "", "get_current_component_id"], [110, 2, 1, "", "get_model"], [110, 2, 1, "", "get_number_of_components_in_round"], [110, 2, 1, "", "get_numbers_of_rounds"], [110, 2, 1, "", "get_partial_cipher"], [110, 2, 1, "", "get_round_from_component_id"], [110, 2, 1, "", "get_sizes_of_components_by_type"], [110, 3, 1, "", "id"], [110, 2, 1, "", "impossible_differential_search"], [110, 2, 1, "", "initial_transformation"], [110, 3, 1, "", "inputs"], [110, 3, 1, "", "inputs_bit_size"], [110, 2, 1, "", "inputs_size_to_dict"], [110, 2, 1, "", "is_algebraically_secure"], [110, 2, 1, "", "is_andrx"], [110, 2, 1, "", "is_arx"], [110, 2, 1, "", "is_power_of_2_word_based"], [110, 2, 1, "", "is_shift_arx"], [110, 2, 1, "", "is_spn"], [110, 2, 1, "", "make_cipher_id"], [110, 2, 1, "", "make_file_name"], [110, 3, 1, "", "number_of_rounds"], [110, 3, 1, "", "output_bit_size"], [110, 2, 1, "", "polynomial_system"], [110, 2, 1, "", "polynomial_system_at_round"], [110, 2, 1, "", "print"], [110, 2, 1, "", "print_as_python_dictionary"], [110, 2, 1, "", "print_as_python_dictionary_to_file"], [110, 2, 1, "", "print_evaluation_python_code"], [110, 2, 1, "", "print_evaluation_python_code_to_file"], [110, 2, 1, "", "print_input_information"], [110, 3, 1, "", "reference_code"], [110, 2, 1, "", "remove_key_schedule"], [110, 2, 1, "", "remove_round_component"], [110, 2, 1, "", "remove_round_component_from_id"], [110, 2, 1, "", "round_function"], [110, 3, 1, "", "rounds"], [110, 3, 1, "", "rounds_as_list"], [110, 2, 1, "", "set_file_name"], [110, 2, 1, "", "set_id"], [110, 2, 1, "", "set_inputs"], [110, 2, 1, "", "sort_cipher"], [110, 2, 1, "", "test_against_reference_code"], [110, 2, 1, "", "test_vector_check"], [110, 3, 1, "", "type"], [110, 2, 1, "", "update_input_id_links_from_component_id"], [110, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.kasumi_block_cipher": [[111, 1, 1, "", "KasumiBlockCipher"]], "ciphers.block_ciphers.kasumi_block_cipher.KasumiBlockCipher": [[111, 2, 1, "", "add_AND_component"], [111, 2, 1, "", "add_FSR_component"], [111, 2, 1, "", "add_MODADD_component"], [111, 2, 1, "", "add_MODSUB_component"], [111, 2, 1, "", "add_NOT_component"], [111, 2, 1, "", "add_OR_component"], [111, 2, 1, "", "add_SBOX_component"], [111, 2, 1, "", "add_SHIFT_component"], [111, 2, 1, "", "add_XOR_component"], [111, 2, 1, "", "add_cipher_output_component"], [111, 2, 1, "", "add_concatenate_component"], [111, 2, 1, "", "add_constant_component"], [111, 2, 1, "", "add_intermediate_output_component"], [111, 2, 1, "", "add_linear_layer_component"], [111, 2, 1, "", "add_mix_column_component"], [111, 2, 1, "", "add_permutation_component"], [111, 2, 1, "", "add_reverse_component"], [111, 2, 1, "", "add_rotate_component"], [111, 2, 1, "", "add_round"], [111, 2, 1, "", "add_round_key_output_component"], [111, 2, 1, "", "add_round_output_component"], [111, 2, 1, "", "add_shift_rows_component"], [111, 2, 1, "", "add_sigma_component"], [111, 2, 1, "", "add_suffix_to_components"], [111, 2, 1, "", "add_theta_gaston_component"], [111, 2, 1, "", "add_theta_keccak_component"], [111, 2, 1, "", "add_theta_xoodoo_component"], [111, 2, 1, "", "add_variable_rotate_component"], [111, 2, 1, "", "add_variable_shift_component"], [111, 2, 1, "", "add_word_permutation_component"], [111, 2, 1, "", "as_python_dictionary"], [111, 2, 1, "", "cipher_inverse"], [111, 2, 1, "", "cipher_partial_inverse"], [111, 2, 1, "", "component_from"], [111, 2, 1, "", "convert_to_compound_xor_cipher"], [111, 2, 1, "", "create_networx_graph_from_input_ids"], [111, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [111, 3, 1, "", "current_round"], [111, 3, 1, "", "current_round_number"], [111, 3, 1, "", "current_round_number_of_components"], [111, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [111, 2, 1, "", "derived_key"], [111, 2, 1, "", "evaluate"], [111, 2, 1, "", "evaluate_using_c"], [111, 2, 1, "", "evaluate_vectorized"], [111, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [111, 3, 1, "", "family_name"], [111, 2, 1, "", "fi_function1"], [111, 3, 1, "", "file_name"], [111, 2, 1, "", "find_impossible_property"], [111, 2, 1, "", "fl_function"], [111, 2, 1, "", "fo_function"], [111, 2, 1, "", "generate_bit_based_c_code"], [111, 2, 1, "", "generate_evaluate_c_code_shared_library"], [111, 2, 1, "", "generate_word_based_c_code"], [111, 2, 1, "", "get_all_components"], [111, 2, 1, "", "get_all_components_ids"], [111, 2, 1, "", "get_all_inputs_bit_positions"], [111, 2, 1, "", "get_component_from_id"], [111, 2, 1, "", "get_components_in_round"], [111, 2, 1, "", "get_current_component_id"], [111, 2, 1, "", "get_model"], [111, 2, 1, "", "get_number_of_components_in_round"], [111, 2, 1, "", "get_partial_cipher"], [111, 2, 1, "", "get_round_from_component_id"], [111, 2, 1, "", "get_sizes_of_components_by_type"], [111, 3, 1, "", "id"], [111, 2, 1, "", "impossible_differential_search"], [111, 2, 1, "", "init_halves"], [111, 3, 1, "", "inputs"], [111, 3, 1, "", "inputs_bit_size"], [111, 2, 1, "", "inputs_size_to_dict"], [111, 2, 1, "", "is_algebraically_secure"], [111, 2, 1, "", "is_andrx"], [111, 2, 1, "", "is_arx"], [111, 2, 1, "", "is_power_of_2_word_based"], [111, 2, 1, "", "is_shift_arx"], [111, 2, 1, "", "is_spn"], [111, 2, 1, "", "make_cipher_id"], [111, 2, 1, "", "make_file_name"], [111, 3, 1, "", "number_of_rounds"], [111, 3, 1, "", "output_bit_size"], [111, 2, 1, "", "polynomial_system"], [111, 2, 1, "", "polynomial_system_at_round"], [111, 2, 1, "", "print"], [111, 2, 1, "", "print_as_python_dictionary"], [111, 2, 1, "", "print_as_python_dictionary_to_file"], [111, 2, 1, "", "print_evaluation_python_code"], [111, 2, 1, "", "print_evaluation_python_code_to_file"], [111, 2, 1, "", "print_input_information"], [111, 3, 1, "", "reference_code"], [111, 2, 1, "", "remove_key_schedule"], [111, 2, 1, "", "remove_round_component"], [111, 2, 1, "", "remove_round_component_from_id"], [111, 2, 1, "", "round_key"], [111, 3, 1, "", "rounds"], [111, 3, 1, "", "rounds_as_list"], [111, 2, 1, "", "set_file_name"], [111, 2, 1, "", "set_id"], [111, 2, 1, "", "set_inputs"], [111, 2, 1, "", "sort_cipher"], [111, 2, 1, "", "test_against_reference_code"], [111, 2, 1, "", "test_vector_check"], [111, 3, 1, "", "type"], [111, 2, 1, "", "update_input_id_links_from_component_id"], [111, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.lblock_block_cipher": [[112, 1, 1, "", "LBlockBlockCipher"]], "ciphers.block_ciphers.lblock_block_cipher.LBlockBlockCipher": [[112, 2, 1, "", "add_AND_component"], [112, 2, 1, "", "add_FSR_component"], [112, 2, 1, "", "add_MODADD_component"], [112, 2, 1, "", "add_MODSUB_component"], [112, 2, 1, "", "add_NOT_component"], [112, 2, 1, "", "add_OR_component"], [112, 2, 1, "", "add_SBOX_component"], [112, 2, 1, "", "add_SHIFT_component"], [112, 2, 1, "", "add_XOR_component"], [112, 2, 1, "", "add_cipher_output_component"], [112, 2, 1, "", "add_concatenate_component"], [112, 2, 1, "", "add_constant_component"], [112, 2, 1, "", "add_intermediate_output_component"], [112, 2, 1, "", "add_linear_layer_component"], [112, 2, 1, "", "add_mix_column_component"], [112, 2, 1, "", "add_permutation_component"], [112, 2, 1, "", "add_reverse_component"], [112, 2, 1, "", "add_rotate_component"], [112, 2, 1, "", "add_round"], [112, 2, 1, "", "add_round_key_output_component"], [112, 2, 1, "", "add_round_output_component"], [112, 2, 1, "", "add_shift_rows_component"], [112, 2, 1, "", "add_sigma_component"], [112, 2, 1, "", "add_suffix_to_components"], [112, 2, 1, "", "add_theta_gaston_component"], [112, 2, 1, "", "add_theta_keccak_component"], [112, 2, 1, "", "add_theta_xoodoo_component"], [112, 2, 1, "", "add_variable_rotate_component"], [112, 2, 1, "", "add_variable_shift_component"], [112, 2, 1, "", "add_word_permutation_component"], [112, 2, 1, "", "as_python_dictionary"], [112, 2, 1, "", "cipher_inverse"], [112, 2, 1, "", "cipher_partial_inverse"], [112, 2, 1, "", "component_from"], [112, 2, 1, "", "convert_to_compound_xor_cipher"], [112, 2, 1, "", "create_networx_graph_from_input_ids"], [112, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [112, 3, 1, "", "current_round"], [112, 3, 1, "", "current_round_number"], [112, 3, 1, "", "current_round_number_of_components"], [112, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [112, 2, 1, "", "evaluate"], [112, 2, 1, "", "evaluate_using_c"], [112, 2, 1, "", "evaluate_vectorized"], [112, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [112, 3, 1, "", "family_name"], [112, 3, 1, "", "file_name"], [112, 2, 1, "", "find_impossible_property"], [112, 2, 1, "", "generate_bit_based_c_code"], [112, 2, 1, "", "generate_evaluate_c_code_shared_library"], [112, 2, 1, "", "generate_word_based_c_code"], [112, 2, 1, "", "get_all_components"], [112, 2, 1, "", "get_all_components_ids"], [112, 2, 1, "", "get_all_inputs_bit_positions"], [112, 2, 1, "", "get_component_from_id"], [112, 2, 1, "", "get_components_in_round"], [112, 2, 1, "", "get_current_component_id"], [112, 2, 1, "", "get_model"], [112, 2, 1, "", "get_number_of_components_in_round"], [112, 2, 1, "", "get_partial_cipher"], [112, 2, 1, "", "get_round_from_component_id"], [112, 2, 1, "", "get_sizes_of_components_by_type"], [112, 3, 1, "", "id"], [112, 2, 1, "", "impossible_differential_search"], [112, 3, 1, "", "inputs"], [112, 3, 1, "", "inputs_bit_size"], [112, 2, 1, "", "inputs_size_to_dict"], [112, 2, 1, "", "is_algebraically_secure"], [112, 2, 1, "", "is_andrx"], [112, 2, 1, "", "is_arx"], [112, 2, 1, "", "is_power_of_2_word_based"], [112, 2, 1, "", "is_shift_arx"], [112, 2, 1, "", "is_spn"], [112, 2, 1, "", "make_cipher_id"], [112, 2, 1, "", "make_file_name"], [112, 3, 1, "", "number_of_rounds"], [112, 3, 1, "", "output_bit_size"], [112, 2, 1, "", "polynomial_system"], [112, 2, 1, "", "polynomial_system_at_round"], [112, 2, 1, "", "print"], [112, 2, 1, "", "print_as_python_dictionary"], [112, 2, 1, "", "print_as_python_dictionary_to_file"], [112, 2, 1, "", "print_evaluation_python_code"], [112, 2, 1, "", "print_evaluation_python_code_to_file"], [112, 2, 1, "", "print_input_information"], [112, 3, 1, "", "reference_code"], [112, 2, 1, "", "remove_key_schedule"], [112, 2, 1, "", "remove_round_component"], [112, 2, 1, "", "remove_round_component_from_id"], [112, 2, 1, "", "round_function"], [112, 3, 1, "", "rounds"], [112, 3, 1, "", "rounds_as_list"], [112, 2, 1, "", "set_file_name"], [112, 2, 1, "", "set_id"], [112, 2, 1, "", "set_inputs"], [112, 2, 1, "", "sort_cipher"], [112, 2, 1, "", "test_against_reference_code"], [112, 2, 1, "", "test_vector_check"], [112, 3, 1, "", "type"], [112, 2, 1, "", "update_input_id_links_from_component_id"], [112, 2, 1, "", "update_key"], [112, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.lea_block_cipher": [[113, 1, 1, "", "LeaBlockCipher"], [113, 4, 1, "", "format_output"], [113, 4, 1, "", "init_input"]], "ciphers.block_ciphers.lea_block_cipher.LeaBlockCipher": [[113, 2, 1, "", "add_AND_component"], [113, 2, 1, "", "add_FSR_component"], [113, 2, 1, "", "add_MODADD_component"], [113, 2, 1, "", "add_MODSUB_component"], [113, 2, 1, "", "add_NOT_component"], [113, 2, 1, "", "add_OR_component"], [113, 2, 1, "", "add_SBOX_component"], [113, 2, 1, "", "add_SHIFT_component"], [113, 2, 1, "", "add_XOR_component"], [113, 2, 1, "", "add_cipher_output_component"], [113, 2, 1, "", "add_concatenate_component"], [113, 2, 1, "", "add_constant_component"], [113, 2, 1, "", "add_intermediate_output_component"], [113, 2, 1, "", "add_intermediate_output_components"], [113, 2, 1, "", "add_linear_layer_component"], [113, 2, 1, "", "add_mix_column_component"], [113, 2, 1, "", "add_permutation_component"], [113, 2, 1, "", "add_reverse_component"], [113, 2, 1, "", "add_rotate_component"], [113, 2, 1, "", "add_round"], [113, 2, 1, "", "add_round_key_output_component"], [113, 2, 1, "", "add_round_output_component"], [113, 2, 1, "", "add_shift_rows_component"], [113, 2, 1, "", "add_sigma_component"], [113, 2, 1, "", "add_suffix_to_components"], [113, 2, 1, "", "add_theta_gaston_component"], [113, 2, 1, "", "add_theta_keccak_component"], [113, 2, 1, "", "add_theta_xoodoo_component"], [113, 2, 1, "", "add_variable_rotate_component"], [113, 2, 1, "", "add_variable_shift_component"], [113, 2, 1, "", "add_word_permutation_component"], [113, 2, 1, "", "as_python_dictionary"], [113, 2, 1, "", "cipher_inverse"], [113, 2, 1, "", "cipher_partial_inverse"], [113, 2, 1, "", "component_from"], [113, 2, 1, "", "convert_to_compound_xor_cipher"], [113, 2, 1, "", "create_networx_graph_from_input_ids"], [113, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [113, 3, 1, "", "current_round"], [113, 3, 1, "", "current_round_number"], [113, 3, 1, "", "current_round_number_of_components"], [113, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [113, 2, 1, "", "evaluate"], [113, 2, 1, "", "evaluate_using_c"], [113, 2, 1, "", "evaluate_vectorized"], [113, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [113, 3, 1, "", "family_name"], [113, 3, 1, "", "file_name"], [113, 2, 1, "", "find_impossible_property"], [113, 2, 1, "", "generate_bit_based_c_code"], [113, 2, 1, "", "generate_evaluate_c_code_shared_library"], [113, 2, 1, "", "generate_word_based_c_code"], [113, 2, 1, "", "get_all_components"], [113, 2, 1, "", "get_all_components_ids"], [113, 2, 1, "", "get_all_inputs_bit_positions"], [113, 2, 1, "", "get_component_from_id"], [113, 2, 1, "", "get_components_in_round"], [113, 2, 1, "", "get_current_component_id"], [113, 2, 1, "", "get_ith_key128"], [113, 2, 1, "", "get_ith_key192"], [113, 2, 1, "", "get_ith_key256"], [113, 2, 1, "", "get_model"], [113, 2, 1, "", "get_number_of_components_in_round"], [113, 2, 1, "", "get_numbers_of_rounds"], [113, 2, 1, "", "get_partial_cipher"], [113, 2, 1, "", "get_round_from_component_id"], [113, 2, 1, "", "get_sizes_of_components_by_type"], [113, 3, 1, "", "id"], [113, 2, 1, "", "impossible_differential_search"], [113, 3, 1, "", "inputs"], [113, 3, 1, "", "inputs_bit_size"], [113, 2, 1, "", "inputs_size_to_dict"], [113, 2, 1, "", "is_algebraically_secure"], [113, 2, 1, "", "is_andrx"], [113, 2, 1, "", "is_arx"], [113, 2, 1, "", "is_power_of_2_word_based"], [113, 2, 1, "", "is_shift_arx"], [113, 2, 1, "", "is_spn"], [113, 2, 1, "", "make_cipher_id"], [113, 2, 1, "", "make_file_name"], [113, 3, 1, "", "number_of_rounds"], [113, 3, 1, "", "output_bit_size"], [113, 2, 1, "", "polynomial_system"], [113, 2, 1, "", "polynomial_system_at_round"], [113, 2, 1, "", "print"], [113, 2, 1, "", "print_as_python_dictionary"], [113, 2, 1, "", "print_as_python_dictionary_to_file"], [113, 2, 1, "", "print_evaluation_python_code"], [113, 2, 1, "", "print_evaluation_python_code_to_file"], [113, 2, 1, "", "print_input_information"], [113, 3, 1, "", "reference_code"], [113, 2, 1, "", "remove_key_schedule"], [113, 2, 1, "", "remove_round_component"], [113, 2, 1, "", "remove_round_component_from_id"], [113, 2, 1, "", "round_function"], [113, 3, 1, "", "rounds"], [113, 3, 1, "", "rounds_as_list"], [113, 2, 1, "", "set_file_name"], [113, 2, 1, "", "set_id"], [113, 2, 1, "", "set_inputs"], [113, 2, 1, "", "sort_cipher"], [113, 2, 1, "", "test_against_reference_code"], [113, 2, 1, "", "test_vector_check"], [113, 3, 1, "", "type"], [113, 2, 1, "", "update_input_id_links_from_component_id"], [113, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.lowmc_block_cipher": [[114, 1, 1, "", "LowMCBlockCipher"]], "ciphers.block_ciphers.lowmc_block_cipher.LowMCBlockCipher": [[114, 2, 1, "", "add_AND_component"], [114, 2, 1, "", "add_FSR_component"], [114, 2, 1, "", "add_MODADD_component"], [114, 2, 1, "", "add_MODSUB_component"], [114, 2, 1, "", "add_NOT_component"], [114, 2, 1, "", "add_OR_component"], [114, 2, 1, "", "add_SBOX_component"], [114, 2, 1, "", "add_SHIFT_component"], [114, 2, 1, "", "add_XOR_component"], [114, 2, 1, "", "add_cipher_output_component"], [114, 2, 1, "", "add_concatenate_component"], [114, 2, 1, "", "add_constant_component"], [114, 2, 1, "", "add_intermediate_output_component"], [114, 2, 1, "", "add_linear_layer_component"], [114, 2, 1, "", "add_mix_column_component"], [114, 2, 1, "", "add_output_component"], [114, 2, 1, "", "add_permutation_component"], [114, 2, 1, "", "add_reverse_component"], [114, 2, 1, "", "add_rotate_component"], [114, 2, 1, "", "add_round"], [114, 2, 1, "", "add_round_constant"], [114, 2, 1, "", "add_round_key"], [114, 2, 1, "", "add_round_key_output_component"], [114, 2, 1, "", "add_round_output_component"], [114, 2, 1, "", "add_shift_rows_component"], [114, 2, 1, "", "add_sigma_component"], [114, 2, 1, "", "add_suffix_to_components"], [114, 2, 1, "", "add_theta_gaston_component"], [114, 2, 1, "", "add_theta_keccak_component"], [114, 2, 1, "", "add_theta_xoodoo_component"], [114, 2, 1, "", "add_variable_rotate_component"], [114, 2, 1, "", "add_variable_shift_component"], [114, 2, 1, "", "add_word_permutation_component"], [114, 2, 1, "", "as_python_dictionary"], [114, 2, 1, "", "cipher_inverse"], [114, 2, 1, "", "cipher_partial_inverse"], [114, 2, 1, "", "component_from"], [114, 2, 1, "", "convert_to_compound_xor_cipher"], [114, 2, 1, "", "create_networx_graph_from_input_ids"], [114, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [114, 3, 1, "", "current_round"], [114, 3, 1, "", "current_round_number"], [114, 3, 1, "", "current_round_number_of_components"], [114, 2, 1, "", "define_number_of_rounds"], [114, 2, 1, "", "define_number_of_sboxes"], [114, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [114, 2, 1, "", "evaluate"], [114, 2, 1, "", "evaluate_using_c"], [114, 2, 1, "", "evaluate_vectorized"], [114, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [114, 3, 1, "", "family_name"], [114, 3, 1, "", "file_name"], [114, 2, 1, "", "find_impossible_property"], [114, 2, 1, "", "generate_bit_based_c_code"], [114, 2, 1, "", "generate_evaluate_c_code_shared_library"], [114, 2, 1, "", "generate_word_based_c_code"], [114, 2, 1, "", "get_all_components"], [114, 2, 1, "", "get_all_components_ids"], [114, 2, 1, "", "get_all_inputs_bit_positions"], [114, 2, 1, "", "get_component_from_id"], [114, 2, 1, "", "get_components_in_round"], [114, 2, 1, "", "get_current_component_id"], [114, 2, 1, "", "get_model"], [114, 2, 1, "", "get_number_of_components_in_round"], [114, 2, 1, "", "get_partial_cipher"], [114, 2, 1, "", "get_round_from_component_id"], [114, 2, 1, "", "get_sizes_of_components_by_type"], [114, 3, 1, "", "id"], [114, 2, 1, "", "impossible_differential_search"], [114, 3, 1, "", "inputs"], [114, 3, 1, "", "inputs_bit_size"], [114, 2, 1, "", "inputs_size_to_dict"], [114, 2, 1, "", "is_algebraically_secure"], [114, 2, 1, "", "is_andrx"], [114, 2, 1, "", "is_arx"], [114, 2, 1, "", "is_power_of_2_word_based"], [114, 2, 1, "", "is_shift_arx"], [114, 2, 1, "", "is_spn"], [114, 2, 1, "", "linear_layer"], [114, 2, 1, "", "load_constants"], [114, 2, 1, "", "make_cipher_id"], [114, 2, 1, "", "make_file_name"], [114, 3, 1, "", "number_of_rounds"], [114, 3, 1, "", "output_bit_size"], [114, 2, 1, "", "polynomial_system"], [114, 2, 1, "", "polynomial_system_at_round"], [114, 2, 1, "", "print"], [114, 2, 1, "", "print_as_python_dictionary"], [114, 2, 1, "", "print_as_python_dictionary_to_file"], [114, 2, 1, "", "print_evaluation_python_code"], [114, 2, 1, "", "print_evaluation_python_code_to_file"], [114, 2, 1, "", "print_input_information"], [114, 3, 1, "", "reference_code"], [114, 2, 1, "", "remove_key_schedule"], [114, 2, 1, "", "remove_round_component"], [114, 2, 1, "", "remove_round_component_from_id"], [114, 3, 1, "", "rounds"], [114, 3, 1, "", "rounds_as_list"], [114, 2, 1, "", "sbox_layer"], [114, 2, 1, "", "set_file_name"], [114, 2, 1, "", "set_id"], [114, 2, 1, "", "set_inputs"], [114, 2, 1, "", "sort_cipher"], [114, 2, 1, "", "test_against_reference_code"], [114, 2, 1, "", "test_vector_check"], [114, 3, 1, "", "type"], [114, 2, 1, "", "update_input_id_links_from_component_id"], [114, 2, 1, "", "update_key_register"], [114, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.lowmc_generate_matrices": [[115, 4, 1, "", "grain_ssg"], [115, 4, 1, "", "instantiate_matrix"], [115, 4, 1, "", "main"], [115, 4, 1, "", "rank"], [115, 4, 1, "", "xor_matrix_values"]], "ciphers.block_ciphers.midori_block_cipher": [[116, 1, 1, "", "MidoriBlockCipher"]], "ciphers.block_ciphers.midori_block_cipher.MidoriBlockCipher": [[116, 2, 1, "", "add_AND_component"], [116, 2, 1, "", "add_FSR_component"], [116, 2, 1, "", "add_MODADD_component"], [116, 2, 1, "", "add_MODSUB_component"], [116, 2, 1, "", "add_NOT_component"], [116, 2, 1, "", "add_OR_component"], [116, 2, 1, "", "add_SBOX_component"], [116, 2, 1, "", "add_SHIFT_component"], [116, 2, 1, "", "add_XOR_component"], [116, 2, 1, "", "add_cipher_output_component"], [116, 2, 1, "", "add_concatenate_component"], [116, 2, 1, "", "add_constant_component"], [116, 2, 1, "", "add_intermediate_output_component"], [116, 2, 1, "", "add_linear_layer_component"], [116, 2, 1, "", "add_mix_column_component"], [116, 2, 1, "", "add_permutation_component"], [116, 2, 1, "", "add_reverse_component"], [116, 2, 1, "", "add_rotate_component"], [116, 2, 1, "", "add_round"], [116, 2, 1, "", "add_round_key_output_component"], [116, 2, 1, "", "add_round_output_component"], [116, 2, 1, "", "add_shift_rows_component"], [116, 2, 1, "", "add_sigma_component"], [116, 2, 1, "", "add_suffix_to_components"], [116, 2, 1, "", "add_theta_gaston_component"], [116, 2, 1, "", "add_theta_keccak_component"], [116, 2, 1, "", "add_theta_xoodoo_component"], [116, 2, 1, "", "add_variable_rotate_component"], [116, 2, 1, "", "add_variable_shift_component"], [116, 2, 1, "", "add_word_permutation_component"], [116, 2, 1, "", "as_python_dictionary"], [116, 2, 1, "", "cipher_inverse"], [116, 2, 1, "", "cipher_partial_inverse"], [116, 2, 1, "", "component_from"], [116, 2, 1, "", "convert_to_compound_xor_cipher"], [116, 2, 1, "", "create_networx_graph_from_input_ids"], [116, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [116, 3, 1, "", "current_round"], [116, 3, 1, "", "current_round_number"], [116, 3, 1, "", "current_round_number_of_components"], [116, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [116, 2, 1, "", "evaluate"], [116, 2, 1, "", "evaluate_using_c"], [116, 2, 1, "", "evaluate_vectorized"], [116, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [116, 3, 1, "", "family_name"], [116, 3, 1, "", "file_name"], [116, 2, 1, "", "find_impossible_property"], [116, 2, 1, "", "generate_bit_based_c_code"], [116, 2, 1, "", "generate_evaluate_c_code_shared_library"], [116, 2, 1, "", "generate_word_based_c_code"], [116, 2, 1, "", "get_all_components"], [116, 2, 1, "", "get_all_components_ids"], [116, 2, 1, "", "get_all_inputs_bit_positions"], [116, 2, 1, "", "get_component_from_id"], [116, 2, 1, "", "get_components_in_round"], [116, 2, 1, "", "get_current_component_id"], [116, 2, 1, "", "get_model"], [116, 2, 1, "", "get_number_of_components_in_round"], [116, 2, 1, "", "get_partial_cipher"], [116, 2, 1, "", "get_round_from_component_id"], [116, 2, 1, "", "get_sizes_of_components_by_type"], [116, 3, 1, "", "id"], [116, 2, 1, "", "impossible_differential_search"], [116, 3, 1, "", "inputs"], [116, 3, 1, "", "inputs_bit_size"], [116, 2, 1, "", "inputs_size_to_dict"], [116, 2, 1, "", "is_algebraically_secure"], [116, 2, 1, "", "is_andrx"], [116, 2, 1, "", "is_arx"], [116, 2, 1, "", "is_power_of_2_word_based"], [116, 2, 1, "", "is_shift_arx"], [116, 2, 1, "", "is_spn"], [116, 2, 1, "", "key_add"], [116, 2, 1, "", "make_cipher_id"], [116, 2, 1, "", "make_file_name"], [116, 2, 1, "", "mix_column"], [116, 3, 1, "", "number_of_rounds"], [116, 3, 1, "", "output_bit_size"], [116, 2, 1, "", "polynomial_system"], [116, 2, 1, "", "polynomial_system_at_round"], [116, 2, 1, "", "print"], [116, 2, 1, "", "print_as_python_dictionary"], [116, 2, 1, "", "print_as_python_dictionary_to_file"], [116, 2, 1, "", "print_evaluation_python_code"], [116, 2, 1, "", "print_evaluation_python_code_to_file"], [116, 2, 1, "", "print_input_information"], [116, 3, 1, "", "reference_code"], [116, 2, 1, "", "remove_key_schedule"], [116, 2, 1, "", "remove_round_component"], [116, 2, 1, "", "remove_round_component_from_id"], [116, 2, 1, "", "round_key"], [116, 3, 1, "", "rounds"], [116, 3, 1, "", "rounds_as_list"], [116, 2, 1, "", "set_file_name"], [116, 2, 1, "", "set_id"], [116, 2, 1, "", "set_inputs"], [116, 2, 1, "", "shuffle_cell"], [116, 2, 1, "", "sort_cipher"], [116, 2, 1, "", "sub_cell"], [116, 2, 1, "", "test_against_reference_code"], [116, 2, 1, "", "test_vector_check"], [116, 3, 1, "", "type"], [116, 2, 1, "", "update_input_id_links_from_component_id"], [116, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.present_block_cipher": [[117, 1, 1, "", "PresentBlockCipher"]], "ciphers.block_ciphers.present_block_cipher.PresentBlockCipher": [[117, 2, 1, "", "add_AND_component"], [117, 2, 1, "", "add_FSR_component"], [117, 2, 1, "", "add_MODADD_component"], [117, 2, 1, "", "add_MODSUB_component"], [117, 2, 1, "", "add_NOT_component"], [117, 2, 1, "", "add_OR_component"], [117, 2, 1, "", "add_SBOX_component"], [117, 2, 1, "", "add_SHIFT_component"], [117, 2, 1, "", "add_XOR_component"], [117, 2, 1, "", "add_cipher_output_component"], [117, 2, 1, "", "add_concatenate_component"], [117, 2, 1, "", "add_constant_component"], [117, 2, 1, "", "add_intermediate_output_component"], [117, 2, 1, "", "add_linear_layer_component"], [117, 2, 1, "", "add_mix_column_component"], [117, 2, 1, "", "add_permutation_component"], [117, 2, 1, "", "add_reverse_component"], [117, 2, 1, "", "add_rotate_component"], [117, 2, 1, "", "add_round"], [117, 2, 1, "", "add_round_key"], [117, 2, 1, "", "add_round_key_output_component"], [117, 2, 1, "", "add_round_output_component"], [117, 2, 1, "", "add_shift_rows_component"], [117, 2, 1, "", "add_sigma_component"], [117, 2, 1, "", "add_suffix_to_components"], [117, 2, 1, "", "add_theta_gaston_component"], [117, 2, 1, "", "add_theta_keccak_component"], [117, 2, 1, "", "add_theta_xoodoo_component"], [117, 2, 1, "", "add_variable_rotate_component"], [117, 2, 1, "", "add_variable_shift_component"], [117, 2, 1, "", "add_word_permutation_component"], [117, 2, 1, "", "as_python_dictionary"], [117, 2, 1, "", "cipher_inverse"], [117, 2, 1, "", "cipher_partial_inverse"], [117, 2, 1, "", "component_from"], [117, 2, 1, "", "convert_to_compound_xor_cipher"], [117, 2, 1, "", "create_networx_graph_from_input_ids"], [117, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [117, 3, 1, "", "current_round"], [117, 3, 1, "", "current_round_number"], [117, 3, 1, "", "current_round_number_of_components"], [117, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [117, 2, 1, "", "evaluate"], [117, 2, 1, "", "evaluate_using_c"], [117, 2, 1, "", "evaluate_vectorized"], [117, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [117, 3, 1, "", "family_name"], [117, 3, 1, "", "file_name"], [117, 2, 1, "", "find_impossible_property"], [117, 2, 1, "", "generate_bit_based_c_code"], [117, 2, 1, "", "generate_evaluate_c_code_shared_library"], [117, 2, 1, "", "generate_word_based_c_code"], [117, 2, 1, "", "get_all_components"], [117, 2, 1, "", "get_all_components_ids"], [117, 2, 1, "", "get_all_inputs_bit_positions"], [117, 2, 1, "", "get_component_from_id"], [117, 2, 1, "", "get_components_in_round"], [117, 2, 1, "", "get_current_component_id"], [117, 2, 1, "", "get_model"], [117, 2, 1, "", "get_number_of_components_in_round"], [117, 2, 1, "", "get_partial_cipher"], [117, 2, 1, "", "get_round_from_component_id"], [117, 2, 1, "", "get_sizes_of_components_by_type"], [117, 3, 1, "", "id"], [117, 2, 1, "", "impossible_differential_search"], [117, 3, 1, "", "inputs"], [117, 3, 1, "", "inputs_bit_size"], [117, 2, 1, "", "inputs_size_to_dict"], [117, 2, 1, "", "is_algebraically_secure"], [117, 2, 1, "", "is_andrx"], [117, 2, 1, "", "is_arx"], [117, 2, 1, "", "is_power_of_2_word_based"], [117, 2, 1, "", "is_shift_arx"], [117, 2, 1, "", "is_spn"], [117, 2, 1, "", "make_cipher_id"], [117, 2, 1, "", "make_file_name"], [117, 3, 1, "", "number_of_rounds"], [117, 3, 1, "", "output_bit_size"], [117, 2, 1, "", "permutation_layer"], [117, 2, 1, "", "polynomial_system"], [117, 2, 1, "", "polynomial_system_at_round"], [117, 2, 1, "", "print"], [117, 2, 1, "", "print_as_python_dictionary"], [117, 2, 1, "", "print_as_python_dictionary_to_file"], [117, 2, 1, "", "print_evaluation_python_code"], [117, 2, 1, "", "print_evaluation_python_code_to_file"], [117, 2, 1, "", "print_input_information"], [117, 3, 1, "", "reference_code"], [117, 2, 1, "", "remove_key_schedule"], [117, 2, 1, "", "remove_round_component"], [117, 2, 1, "", "remove_round_component_from_id"], [117, 3, 1, "", "rounds"], [117, 3, 1, "", "rounds_as_list"], [117, 2, 1, "", "sbox_layer"], [117, 2, 1, "", "set_file_name"], [117, 2, 1, "", "set_id"], [117, 2, 1, "", "set_inputs"], [117, 2, 1, "", "sort_cipher"], [117, 2, 1, "", "test_against_reference_code"], [117, 2, 1, "", "test_vector_check"], [117, 3, 1, "", "type"], [117, 2, 1, "", "update_input_id_links_from_component_id"], [117, 2, 1, "", "update_key_register"], [117, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.prince_block_cipher": [[118, 1, 1, "", "PrinceBlockCipher"], [118, 4, 1, "", "get_m_prime"], [118, 4, 1, "", "get_shift_rows_matrix"], [118, 4, 1, "", "get_shift_rows_matrix_inverse"]], "ciphers.block_ciphers.prince_block_cipher.PrinceBlockCipher": [[118, 2, 1, "", "add_AND_component"], [118, 2, 1, "", "add_FSR_component"], [118, 2, 1, "", "add_MODADD_component"], [118, 2, 1, "", "add_MODSUB_component"], [118, 2, 1, "", "add_NOT_component"], [118, 2, 1, "", "add_OR_component"], [118, 2, 1, "", "add_SBOX_component"], [118, 2, 1, "", "add_SHIFT_component"], [118, 2, 1, "", "add_XOR_component"], [118, 2, 1, "", "add_cipher_output_component"], [118, 2, 1, "", "add_concatenate_component"], [118, 2, 1, "", "add_constant_component"], [118, 2, 1, "", "add_intermediate_output_component"], [118, 2, 1, "", "add_linear_layer_component"], [118, 2, 1, "", "add_mix_column_component"], [118, 2, 1, "", "add_permutation_component"], [118, 2, 1, "", "add_reverse_component"], [118, 2, 1, "", "add_rotate_component"], [118, 2, 1, "", "add_round"], [118, 2, 1, "", "add_round_key_output_component"], [118, 2, 1, "", "add_round_output_component"], [118, 2, 1, "", "add_shift_rows_component"], [118, 2, 1, "", "add_sigma_component"], [118, 2, 1, "", "add_suffix_to_components"], [118, 2, 1, "", "add_theta_gaston_component"], [118, 2, 1, "", "add_theta_keccak_component"], [118, 2, 1, "", "add_theta_xoodoo_component"], [118, 2, 1, "", "add_variable_rotate_component"], [118, 2, 1, "", "add_variable_shift_component"], [118, 2, 1, "", "add_word_permutation_component"], [118, 2, 1, "", "as_python_dictionary"], [118, 2, 1, "", "cipher_inverse"], [118, 2, 1, "", "cipher_partial_inverse"], [118, 2, 1, "", "component_from"], [118, 2, 1, "", "convert_to_compound_xor_cipher"], [118, 2, 1, "", "create_networx_graph_from_input_ids"], [118, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [118, 3, 1, "", "current_round"], [118, 3, 1, "", "current_round_number"], [118, 3, 1, "", "current_round_number_of_components"], [118, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [118, 2, 1, "", "evaluate"], [118, 2, 1, "", "evaluate_using_c"], [118, 2, 1, "", "evaluate_vectorized"], [118, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [118, 3, 1, "", "family_name"], [118, 3, 1, "", "file_name"], [118, 2, 1, "", "find_impossible_property"], [118, 2, 1, "", "generate_bit_based_c_code"], [118, 2, 1, "", "generate_evaluate_c_code_shared_library"], [118, 2, 1, "", "generate_first_rounds"], [118, 2, 1, "", "generate_word_based_c_code"], [118, 2, 1, "", "get_all_components"], [118, 2, 1, "", "get_all_components_ids"], [118, 2, 1, "", "get_all_inputs_bit_positions"], [118, 2, 1, "", "get_component_from_id"], [118, 2, 1, "", "get_components_in_round"], [118, 2, 1, "", "get_current_component_id"], [118, 2, 1, "", "get_k0_prime"], [118, 2, 1, "", "get_last_rounds"], [118, 2, 1, "", "get_model"], [118, 2, 1, "", "get_number_of_components_in_round"], [118, 2, 1, "", "get_partial_cipher"], [118, 2, 1, "", "get_round_from_component_id"], [118, 2, 1, "", "get_sizes_of_components_by_type"], [118, 3, 1, "", "id"], [118, 2, 1, "", "impossible_differential_search"], [118, 3, 1, "", "inputs"], [118, 3, 1, "", "inputs_bit_size"], [118, 2, 1, "", "inputs_size_to_dict"], [118, 2, 1, "", "is_algebraically_secure"], [118, 2, 1, "", "is_andrx"], [118, 2, 1, "", "is_arx"], [118, 2, 1, "", "is_power_of_2_word_based"], [118, 2, 1, "", "is_shift_arx"], [118, 2, 1, "", "is_spn"], [118, 2, 1, "", "make_cipher_id"], [118, 2, 1, "", "make_file_name"], [118, 3, 1, "", "number_of_rounds"], [118, 3, 1, "", "output_bit_size"], [118, 2, 1, "", "polynomial_system"], [118, 2, 1, "", "polynomial_system_at_round"], [118, 2, 1, "", "pos_whitening"], [118, 2, 1, "", "pre_whitening"], [118, 2, 1, "", "prince_core"], [118, 2, 1, "", "print"], [118, 2, 1, "", "print_as_python_dictionary"], [118, 2, 1, "", "print_as_python_dictionary_to_file"], [118, 2, 1, "", "print_evaluation_python_code"], [118, 2, 1, "", "print_evaluation_python_code_to_file"], [118, 2, 1, "", "print_input_information"], [118, 3, 1, "", "reference_code"], [118, 2, 1, "", "remove_key_schedule"], [118, 2, 1, "", "remove_round_component"], [118, 2, 1, "", "remove_round_component_from_id"], [118, 3, 1, "", "rounds"], [118, 3, 1, "", "rounds_as_list"], [118, 2, 1, "", "set_file_name"], [118, 2, 1, "", "set_id"], [118, 2, 1, "", "set_inputs"], [118, 2, 1, "", "sort_cipher"], [118, 2, 1, "", "test_against_reference_code"], [118, 2, 1, "", "test_vector_check"], [118, 3, 1, "", "type"], [118, 2, 1, "", "update_input_id_links_from_component_id"], [118, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.prince_v2_block_cipher": [[119, 1, 1, "", "PrinceV2BlockCipher"], [119, 4, 1, "", "get_m_prime"], [119, 4, 1, "", "get_shift_rows_matrix"], [119, 4, 1, "", "get_shift_rows_matrix_inverse"]], "ciphers.block_ciphers.prince_v2_block_cipher.PrinceV2BlockCipher": [[119, 2, 1, "", "add_AND_component"], [119, 2, 1, "", "add_FSR_component"], [119, 2, 1, "", "add_MODADD_component"], [119, 2, 1, "", "add_MODSUB_component"], [119, 2, 1, "", "add_NOT_component"], [119, 2, 1, "", "add_OR_component"], [119, 2, 1, "", "add_SBOX_component"], [119, 2, 1, "", "add_SHIFT_component"], [119, 2, 1, "", "add_XOR_component"], [119, 2, 1, "", "add_cipher_output_component"], [119, 2, 1, "", "add_concatenate_component"], [119, 2, 1, "", "add_constant_component"], [119, 2, 1, "", "add_intermediate_output_component"], [119, 2, 1, "", "add_linear_layer_component"], [119, 2, 1, "", "add_mix_column_component"], [119, 2, 1, "", "add_permutation_component"], [119, 2, 1, "", "add_reverse_component"], [119, 2, 1, "", "add_rotate_component"], [119, 2, 1, "", "add_round"], [119, 2, 1, "", "add_round_key_output_component"], [119, 2, 1, "", "add_round_output_component"], [119, 2, 1, "", "add_shift_rows_component"], [119, 2, 1, "", "add_sigma_component"], [119, 2, 1, "", "add_suffix_to_components"], [119, 2, 1, "", "add_theta_gaston_component"], [119, 2, 1, "", "add_theta_keccak_component"], [119, 2, 1, "", "add_theta_xoodoo_component"], [119, 2, 1, "", "add_variable_rotate_component"], [119, 2, 1, "", "add_variable_shift_component"], [119, 2, 1, "", "add_word_permutation_component"], [119, 2, 1, "", "as_python_dictionary"], [119, 2, 1, "", "cipher_inverse"], [119, 2, 1, "", "cipher_partial_inverse"], [119, 2, 1, "", "component_from"], [119, 2, 1, "", "convert_to_compound_xor_cipher"], [119, 2, 1, "", "create_networx_graph_from_input_ids"], [119, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [119, 3, 1, "", "current_round"], [119, 3, 1, "", "current_round_number"], [119, 3, 1, "", "current_round_number_of_components"], [119, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [119, 2, 1, "", "evaluate"], [119, 2, 1, "", "evaluate_using_c"], [119, 2, 1, "", "evaluate_vectorized"], [119, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [119, 3, 1, "", "family_name"], [119, 3, 1, "", "file_name"], [119, 2, 1, "", "find_impossible_property"], [119, 2, 1, "", "generate_bit_based_c_code"], [119, 2, 1, "", "generate_evaluate_c_code_shared_library"], [119, 2, 1, "", "generate_first_rounds"], [119, 2, 1, "", "generate_word_based_c_code"], [119, 2, 1, "", "get_all_components"], [119, 2, 1, "", "get_all_components_ids"], [119, 2, 1, "", "get_all_inputs_bit_positions"], [119, 2, 1, "", "get_component_from_id"], [119, 2, 1, "", "get_components_in_round"], [119, 2, 1, "", "get_current_component_id"], [119, 2, 1, "", "get_last_rounds"], [119, 2, 1, "", "get_model"], [119, 2, 1, "", "get_number_of_components_in_round"], [119, 2, 1, "", "get_partial_cipher"], [119, 2, 1, "", "get_round_from_component_id"], [119, 2, 1, "", "get_sizes_of_components_by_type"], [119, 3, 1, "", "id"], [119, 2, 1, "", "impossible_differential_search"], [119, 3, 1, "", "inputs"], [119, 3, 1, "", "inputs_bit_size"], [119, 2, 1, "", "inputs_size_to_dict"], [119, 2, 1, "", "is_algebraically_secure"], [119, 2, 1, "", "is_andrx"], [119, 2, 1, "", "is_arx"], [119, 2, 1, "", "is_power_of_2_word_based"], [119, 2, 1, "", "is_shift_arx"], [119, 2, 1, "", "is_spn"], [119, 2, 1, "", "make_cipher_id"], [119, 2, 1, "", "make_file_name"], [119, 3, 1, "", "number_of_rounds"], [119, 3, 1, "", "output_bit_size"], [119, 2, 1, "", "polynomial_system"], [119, 2, 1, "", "polynomial_system_at_round"], [119, 2, 1, "", "pos_whitening"], [119, 2, 1, "", "pre_whitening"], [119, 2, 1, "", "prince_core"], [119, 2, 1, "", "print"], [119, 2, 1, "", "print_as_python_dictionary"], [119, 2, 1, "", "print_as_python_dictionary_to_file"], [119, 2, 1, "", "print_evaluation_python_code"], [119, 2, 1, "", "print_evaluation_python_code_to_file"], [119, 2, 1, "", "print_input_information"], [119, 3, 1, "", "reference_code"], [119, 2, 1, "", "remove_key_schedule"], [119, 2, 1, "", "remove_round_component"], [119, 2, 1, "", "remove_round_component_from_id"], [119, 3, 1, "", "rounds"], [119, 3, 1, "", "rounds_as_list"], [119, 2, 1, "", "set_file_name"], [119, 2, 1, "", "set_id"], [119, 2, 1, "", "set_inputs"], [119, 2, 1, "", "sort_cipher"], [119, 2, 1, "", "test_against_reference_code"], [119, 2, 1, "", "test_vector_check"], [119, 3, 1, "", "type"], [119, 2, 1, "", "update_input_id_links_from_component_id"], [119, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.qarmav2_block_cipher": [[120, 1, 1, "", "QARMAv2BlockCipher"]], "ciphers.block_ciphers.qarmav2_block_cipher.QARMAv2BlockCipher": [[120, 2, 1, "", "M_function"], [120, 2, 1, "", "add_AND_component"], [120, 2, 1, "", "add_FSR_component"], [120, 2, 1, "", "add_MODADD_component"], [120, 2, 1, "", "add_MODSUB_component"], [120, 2, 1, "", "add_NOT_component"], [120, 2, 1, "", "add_OR_component"], [120, 2, 1, "", "add_SBOX_component"], [120, 2, 1, "", "add_SHIFT_component"], [120, 2, 1, "", "add_XOR_component"], [120, 2, 1, "", "add_cipher_output_component"], [120, 2, 1, "", "add_concatenate_component"], [120, 2, 1, "", "add_constant_component"], [120, 2, 1, "", "add_intermediate_output_component"], [120, 2, 1, "", "add_linear_layer_component"], [120, 2, 1, "", "add_mix_column_component"], [120, 2, 1, "", "add_permutation_component"], [120, 2, 1, "", "add_reverse_component"], [120, 2, 1, "", "add_rotate_component"], [120, 2, 1, "", "add_round"], [120, 2, 1, "", "add_round_key_output_component"], [120, 2, 1, "", "add_round_output_component"], [120, 2, 1, "", "add_shift_rows_component"], [120, 2, 1, "", "add_sigma_component"], [120, 2, 1, "", "add_suffix_to_components"], [120, 2, 1, "", "add_theta_gaston_component"], [120, 2, 1, "", "add_theta_keccak_component"], [120, 2, 1, "", "add_theta_xoodoo_component"], [120, 2, 1, "", "add_variable_rotate_component"], [120, 2, 1, "", "add_variable_shift_component"], [120, 2, 1, "", "add_word_permutation_component"], [120, 2, 1, "", "as_python_dictionary"], [120, 2, 1, "", "cipher_inverse"], [120, 2, 1, "", "cipher_partial_inverse"], [120, 2, 1, "", "component_from"], [120, 2, 1, "", "constants_initialization"], [120, 2, 1, "", "constants_update"], [120, 2, 1, "", "convert_to_compound_xor_cipher"], [120, 2, 1, "", "create_networx_graph_from_input_ids"], [120, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [120, 3, 1, "", "current_round"], [120, 3, 1, "", "current_round_number"], [120, 3, 1, "", "current_round_number_of_components"], [120, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [120, 2, 1, "", "direct_round"], [120, 2, 1, "", "evaluate"], [120, 2, 1, "", "evaluate_using_c"], [120, 2, 1, "", "evaluate_vectorized"], [120, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [120, 3, 1, "", "family_name"], [120, 3, 1, "", "file_name"], [120, 2, 1, "", "find_impossible_property"], [120, 2, 1, "", "first_round_start"], [120, 2, 1, "", "generate_bit_based_c_code"], [120, 2, 1, "", "generate_evaluate_c_code_shared_library"], [120, 2, 1, "", "generate_word_based_c_code"], [120, 2, 1, "", "get_all_components"], [120, 2, 1, "", "get_all_components_ids"], [120, 2, 1, "", "get_all_inputs_bit_positions"], [120, 2, 1, "", "get_component_from_id"], [120, 2, 1, "", "get_components_in_round"], [120, 2, 1, "", "get_current_component_id"], [120, 2, 1, "", "get_model"], [120, 2, 1, "", "get_number_of_components_in_round"], [120, 2, 1, "", "get_partial_cipher"], [120, 2, 1, "", "get_round_from_component_id"], [120, 2, 1, "", "get_sizes_of_components_by_type"], [120, 3, 1, "", "id"], [120, 2, 1, "", "impossible_differential_search"], [120, 3, 1, "", "inputs"], [120, 3, 1, "", "inputs_bit_size"], [120, 2, 1, "", "inputs_size_to_dict"], [120, 2, 1, "", "inverse_round"], [120, 2, 1, "", "is_algebraically_secure"], [120, 2, 1, "", "is_andrx"], [120, 2, 1, "", "is_arx"], [120, 2, 1, "", "is_power_of_2_word_based"], [120, 2, 1, "", "is_shift_arx"], [120, 2, 1, "", "is_spn"], [120, 2, 1, "", "key_initialization"], [120, 2, 1, "", "key_update"], [120, 2, 1, "", "last_round_end"], [120, 2, 1, "", "majority_function"], [120, 2, 1, "", "make_cipher_id"], [120, 2, 1, "", "make_file_name"], [120, 3, 1, "", "number_of_rounds"], [120, 2, 1, "", "o_function"], [120, 3, 1, "", "output_bit_size"], [120, 2, 1, "", "polynomial_system"], [120, 2, 1, "", "polynomial_system_at_round"], [120, 2, 1, "", "print"], [120, 2, 1, "", "print_as_python_dictionary"], [120, 2, 1, "", "print_as_python_dictionary_to_file"], [120, 2, 1, "", "print_evaluation_python_code"], [120, 2, 1, "", "print_evaluation_python_code_to_file"], [120, 2, 1, "", "print_input_information"], [120, 3, 1, "", "reference_code"], [120, 2, 1, "", "reflector"], [120, 2, 1, "", "remove_key_schedule"], [120, 2, 1, "", "remove_round_component"], [120, 2, 1, "", "remove_round_component_from_id"], [120, 3, 1, "", "rounds"], [120, 3, 1, "", "rounds_as_list"], [120, 2, 1, "", "set_file_name"], [120, 2, 1, "", "set_id"], [120, 2, 1, "", "set_inputs"], [120, 2, 1, "", "sort_cipher"], [120, 2, 1, "", "state_masking"], [120, 2, 1, "", "state_rotation"], [120, 2, 1, "", "state_sboxing"], [120, 2, 1, "", "test_against_reference_code"], [120, 2, 1, "", "test_vector_check"], [120, 2, 1, "", "tweak_initialization"], [120, 2, 1, "", "tweak_update"], [120, 3, 1, "", "type"], [120, 2, 1, "", "update_input_id_links_from_component_id"], [120, 2, 1, "", "update_single_constant"], [120, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.qarmav2_with_mixcolumn_block_cipher": [[121, 1, 1, "", "QARMAv2MixColumnBlockCipher"]], "ciphers.block_ciphers.qarmav2_with_mixcolumn_block_cipher.QARMAv2MixColumnBlockCipher": [[121, 2, 1, "", "add_AND_component"], [121, 2, 1, "", "add_FSR_component"], [121, 2, 1, "", "add_MODADD_component"], [121, 2, 1, "", "add_MODSUB_component"], [121, 2, 1, "", "add_NOT_component"], [121, 2, 1, "", "add_OR_component"], [121, 2, 1, "", "add_SBOX_component"], [121, 2, 1, "", "add_SHIFT_component"], [121, 2, 1, "", "add_XOR_component"], [121, 2, 1, "", "add_cipher_output_component"], [121, 2, 1, "", "add_concatenate_component"], [121, 2, 1, "", "add_constant_component"], [121, 2, 1, "", "add_intermediate_output_component"], [121, 2, 1, "", "add_linear_layer_component"], [121, 2, 1, "", "add_mix_column_component"], [121, 2, 1, "", "add_permutation_component"], [121, 2, 1, "", "add_reverse_component"], [121, 2, 1, "", "add_rotate_component"], [121, 2, 1, "", "add_round"], [121, 2, 1, "", "add_round_key_output_component"], [121, 2, 1, "", "add_round_output_component"], [121, 2, 1, "", "add_shift_rows_component"], [121, 2, 1, "", "add_sigma_component"], [121, 2, 1, "", "add_suffix_to_components"], [121, 2, 1, "", "add_theta_gaston_component"], [121, 2, 1, "", "add_theta_keccak_component"], [121, 2, 1, "", "add_theta_xoodoo_component"], [121, 2, 1, "", "add_variable_rotate_component"], [121, 2, 1, "", "add_variable_shift_component"], [121, 2, 1, "", "add_word_permutation_component"], [121, 2, 1, "", "as_python_dictionary"], [121, 2, 1, "", "cipher_inverse"], [121, 2, 1, "", "cipher_partial_inverse"], [121, 2, 1, "", "component_from"], [121, 2, 1, "", "constants_initialization"], [121, 2, 1, "", "constants_update"], [121, 2, 1, "", "convert_to_compound_xor_cipher"], [121, 2, 1, "", "create_networx_graph_from_input_ids"], [121, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [121, 3, 1, "", "current_round"], [121, 3, 1, "", "current_round_number"], [121, 3, 1, "", "current_round_number_of_components"], [121, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [121, 2, 1, "", "direct_round"], [121, 2, 1, "", "evaluate"], [121, 2, 1, "", "evaluate_using_c"], [121, 2, 1, "", "evaluate_vectorized"], [121, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [121, 3, 1, "", "family_name"], [121, 3, 1, "", "file_name"], [121, 2, 1, "", "find_impossible_property"], [121, 2, 1, "", "first_round_start"], [121, 2, 1, "", "generate_bit_based_c_code"], [121, 2, 1, "", "generate_evaluate_c_code_shared_library"], [121, 2, 1, "", "generate_word_based_c_code"], [121, 2, 1, "", "get_all_components"], [121, 2, 1, "", "get_all_components_ids"], [121, 2, 1, "", "get_all_inputs_bit_positions"], [121, 2, 1, "", "get_component_from_id"], [121, 2, 1, "", "get_components_in_round"], [121, 2, 1, "", "get_current_component_id"], [121, 2, 1, "", "get_model"], [121, 2, 1, "", "get_number_of_components_in_round"], [121, 2, 1, "", "get_partial_cipher"], [121, 2, 1, "", "get_round_from_component_id"], [121, 2, 1, "", "get_sizes_of_components_by_type"], [121, 3, 1, "", "id"], [121, 2, 1, "", "impossible_differential_search"], [121, 3, 1, "", "inputs"], [121, 3, 1, "", "inputs_bit_size"], [121, 2, 1, "", "inputs_size_to_dict"], [121, 2, 1, "", "inverse_round"], [121, 2, 1, "", "is_algebraically_secure"], [121, 2, 1, "", "is_andrx"], [121, 2, 1, "", "is_arx"], [121, 2, 1, "", "is_power_of_2_word_based"], [121, 2, 1, "", "is_shift_arx"], [121, 2, 1, "", "is_spn"], [121, 2, 1, "", "key_initialization"], [121, 2, 1, "", "key_update"], [121, 2, 1, "", "last_round_end"], [121, 2, 1, "", "majority_function"], [121, 2, 1, "", "make_cipher_id"], [121, 2, 1, "", "make_file_name"], [121, 3, 1, "", "number_of_rounds"], [121, 2, 1, "", "o_function"], [121, 3, 1, "", "output_bit_size"], [121, 2, 1, "", "polynomial_system"], [121, 2, 1, "", "polynomial_system_at_round"], [121, 2, 1, "", "print"], [121, 2, 1, "", "print_as_python_dictionary"], [121, 2, 1, "", "print_as_python_dictionary_to_file"], [121, 2, 1, "", "print_evaluation_python_code"], [121, 2, 1, "", "print_evaluation_python_code_to_file"], [121, 2, 1, "", "print_input_information"], [121, 3, 1, "", "reference_code"], [121, 2, 1, "", "reflector"], [121, 2, 1, "", "remove_key_schedule"], [121, 2, 1, "", "remove_round_component"], [121, 2, 1, "", "remove_round_component_from_id"], [121, 3, 1, "", "rounds"], [121, 3, 1, "", "rounds_as_list"], [121, 2, 1, "", "set_file_name"], [121, 2, 1, "", "set_id"], [121, 2, 1, "", "set_inputs"], [121, 2, 1, "", "sort_cipher"], [121, 2, 1, "", "test_against_reference_code"], [121, 2, 1, "", "test_vector_check"], [121, 2, 1, "", "tweak_initialization"], [121, 3, 1, "", "type"], [121, 2, 1, "", "update_input_id_links_from_component_id"], [121, 2, 1, "", "update_single_constant"], [121, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.raiden_block_cipher": [[122, 1, 1, "", "RaidenBlockCipher"]], "ciphers.block_ciphers.raiden_block_cipher.RaidenBlockCipher": [[122, 2, 1, "", "add_AND_component"], [122, 2, 1, "", "add_FSR_component"], [122, 2, 1, "", "add_MODADD_component"], [122, 2, 1, "", "add_MODSUB_component"], [122, 2, 1, "", "add_NOT_component"], [122, 2, 1, "", "add_OR_component"], [122, 2, 1, "", "add_SBOX_component"], [122, 2, 1, "", "add_SHIFT_component"], [122, 2, 1, "", "add_XOR_component"], [122, 2, 1, "", "add_cipher_output_component"], [122, 2, 1, "", "add_concatenate_component"], [122, 2, 1, "", "add_constant_component"], [122, 2, 1, "", "add_intermediate_output_component"], [122, 2, 1, "", "add_linear_layer_component"], [122, 2, 1, "", "add_mix_column_component"], [122, 2, 1, "", "add_permutation_component"], [122, 2, 1, "", "add_reverse_component"], [122, 2, 1, "", "add_rotate_component"], [122, 2, 1, "", "add_round"], [122, 2, 1, "", "add_round_key_output_component"], [122, 2, 1, "", "add_round_output_component"], [122, 2, 1, "", "add_shift_rows_component"], [122, 2, 1, "", "add_sigma_component"], [122, 2, 1, "", "add_suffix_to_components"], [122, 2, 1, "", "add_theta_gaston_component"], [122, 2, 1, "", "add_theta_keccak_component"], [122, 2, 1, "", "add_theta_xoodoo_component"], [122, 2, 1, "", "add_variable_rotate_component"], [122, 2, 1, "", "add_variable_shift_component"], [122, 2, 1, "", "add_word_permutation_component"], [122, 2, 1, "", "as_python_dictionary"], [122, 2, 1, "", "cipher_inverse"], [122, 2, 1, "", "cipher_partial_inverse"], [122, 2, 1, "", "component_from"], [122, 2, 1, "", "convert_to_compound_xor_cipher"], [122, 2, 1, "", "create_networx_graph_from_input_ids"], [122, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [122, 3, 1, "", "current_round"], [122, 3, 1, "", "current_round_number"], [122, 3, 1, "", "current_round_number_of_components"], [122, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [122, 2, 1, "", "evaluate"], [122, 2, 1, "", "evaluate_using_c"], [122, 2, 1, "", "evaluate_vectorized"], [122, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [122, 3, 1, "", "family_name"], [122, 3, 1, "", "file_name"], [122, 2, 1, "", "find_impossible_property"], [122, 2, 1, "", "generate_bit_based_c_code"], [122, 2, 1, "", "generate_evaluate_c_code_shared_library"], [122, 2, 1, "", "generate_word_based_c_code"], [122, 2, 1, "", "get_all_components"], [122, 2, 1, "", "get_all_components_ids"], [122, 2, 1, "", "get_all_inputs_bit_positions"], [122, 2, 1, "", "get_component_from_id"], [122, 2, 1, "", "get_components_in_round"], [122, 2, 1, "", "get_current_component_id"], [122, 2, 1, "", "get_model"], [122, 2, 1, "", "get_number_of_components_in_round"], [122, 2, 1, "", "get_partial_cipher"], [122, 2, 1, "", "get_round_from_component_id"], [122, 2, 1, "", "get_sizes_of_components_by_type"], [122, 3, 1, "", "id"], [122, 2, 1, "", "impossible_differential_search"], [122, 3, 1, "", "inputs"], [122, 3, 1, "", "inputs_bit_size"], [122, 2, 1, "", "inputs_size_to_dict"], [122, 2, 1, "", "is_algebraically_secure"], [122, 2, 1, "", "is_andrx"], [122, 2, 1, "", "is_arx"], [122, 2, 1, "", "is_power_of_2_word_based"], [122, 2, 1, "", "is_shift_arx"], [122, 2, 1, "", "is_spn"], [122, 2, 1, "", "make_cipher_id"], [122, 2, 1, "", "make_file_name"], [122, 3, 1, "", "number_of_rounds"], [122, 3, 1, "", "output_bit_size"], [122, 2, 1, "", "polynomial_system"], [122, 2, 1, "", "polynomial_system_at_round"], [122, 2, 1, "", "print"], [122, 2, 1, "", "print_as_python_dictionary"], [122, 2, 1, "", "print_as_python_dictionary_to_file"], [122, 2, 1, "", "print_evaluation_python_code"], [122, 2, 1, "", "print_evaluation_python_code_to_file"], [122, 2, 1, "", "print_input_information"], [122, 3, 1, "", "reference_code"], [122, 2, 1, "", "remove_key_schedule"], [122, 2, 1, "", "remove_round_component"], [122, 2, 1, "", "remove_round_component_from_id"], [122, 3, 1, "", "rounds"], [122, 3, 1, "", "rounds_as_list"], [122, 2, 1, "", "set_file_name"], [122, 2, 1, "", "set_id"], [122, 2, 1, "", "set_inputs"], [122, 2, 1, "", "sort_cipher"], [122, 2, 1, "", "test_against_reference_code"], [122, 2, 1, "", "test_vector_check"], [122, 3, 1, "", "type"], [122, 2, 1, "", "update_input_id_links_from_component_id"], [122, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.rc5_block_cipher": [[123, 1, 1, "", "RC5BlockCipher"]], "ciphers.block_ciphers.rc5_block_cipher.RC5BlockCipher": [[123, 2, 1, "", "add_AND_component"], [123, 2, 1, "", "add_FSR_component"], [123, 2, 1, "", "add_MODADD_component"], [123, 2, 1, "", "add_MODSUB_component"], [123, 2, 1, "", "add_NOT_component"], [123, 2, 1, "", "add_OR_component"], [123, 2, 1, "", "add_SBOX_component"], [123, 2, 1, "", "add_SHIFT_component"], [123, 2, 1, "", "add_XOR_component"], [123, 2, 1, "", "add_cipher_output_component"], [123, 2, 1, "", "add_concatenate_component"], [123, 2, 1, "", "add_constant_component"], [123, 2, 1, "", "add_intermediate_output_component"], [123, 2, 1, "", "add_linear_layer_component"], [123, 2, 1, "", "add_mix_column_component"], [123, 2, 1, "", "add_permutation_component"], [123, 2, 1, "", "add_reverse_component"], [123, 2, 1, "", "add_rotate_component"], [123, 2, 1, "", "add_round"], [123, 2, 1, "", "add_round_key_output_component"], [123, 2, 1, "", "add_round_output_component"], [123, 2, 1, "", "add_shift_rows_component"], [123, 2, 1, "", "add_sigma_component"], [123, 2, 1, "", "add_suffix_to_components"], [123, 2, 1, "", "add_theta_gaston_component"], [123, 2, 1, "", "add_theta_keccak_component"], [123, 2, 1, "", "add_theta_xoodoo_component"], [123, 2, 1, "", "add_variable_rotate_component"], [123, 2, 1, "", "add_variable_shift_component"], [123, 2, 1, "", "add_word_permutation_component"], [123, 2, 1, "", "as_python_dictionary"], [123, 2, 1, "", "cipher_inverse"], [123, 2, 1, "", "cipher_partial_inverse"], [123, 2, 1, "", "component_from"], [123, 2, 1, "", "compute_magic_constants"], [123, 2, 1, "", "convert_to_compound_xor_cipher"], [123, 2, 1, "", "create_networx_graph_from_input_ids"], [123, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [123, 3, 1, "", "current_round"], [123, 3, 1, "", "current_round_number"], [123, 3, 1, "", "current_round_number_of_components"], [123, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [123, 2, 1, "", "evaluate"], [123, 2, 1, "", "evaluate_using_c"], [123, 2, 1, "", "evaluate_vectorized"], [123, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [123, 3, 1, "", "family_name"], [123, 3, 1, "", "file_name"], [123, 2, 1, "", "find_impossible_property"], [123, 2, 1, "", "first_round"], [123, 2, 1, "", "generate_bit_based_c_code"], [123, 2, 1, "", "generate_evaluate_c_code_shared_library"], [123, 2, 1, "", "generate_word_based_c_code"], [123, 2, 1, "", "get_all_components"], [123, 2, 1, "", "get_all_components_ids"], [123, 2, 1, "", "get_all_inputs_bit_positions"], [123, 2, 1, "", "get_component_from_id"], [123, 2, 1, "", "get_components_in_round"], [123, 2, 1, "", "get_current_component_id"], [123, 2, 1, "", "get_model"], [123, 2, 1, "", "get_number_of_components_in_round"], [123, 2, 1, "", "get_partial_cipher"], [123, 2, 1, "", "get_round_from_component_id"], [123, 2, 1, "", "get_sizes_of_components_by_type"], [123, 3, 1, "", "id"], [123, 2, 1, "", "impossible_differential_search"], [123, 3, 1, "", "inputs"], [123, 3, 1, "", "inputs_bit_size"], [123, 2, 1, "", "inputs_size_to_dict"], [123, 2, 1, "", "is_algebraically_secure"], [123, 2, 1, "", "is_andrx"], [123, 2, 1, "", "is_arx"], [123, 2, 1, "", "is_power_of_2_word_based"], [123, 2, 1, "", "is_shift_arx"], [123, 2, 1, "", "is_spn"], [123, 2, 1, "", "key_expansion"], [123, 2, 1, "", "make_cipher_id"], [123, 2, 1, "", "make_file_name"], [123, 3, 1, "", "number_of_rounds"], [123, 3, 1, "", "output_bit_size"], [123, 2, 1, "", "polynomial_system"], [123, 2, 1, "", "polynomial_system_at_round"], [123, 2, 1, "", "print"], [123, 2, 1, "", "print_as_python_dictionary"], [123, 2, 1, "", "print_as_python_dictionary_to_file"], [123, 2, 1, "", "print_evaluation_python_code"], [123, 2, 1, "", "print_evaluation_python_code_to_file"], [123, 2, 1, "", "print_input_information"], [123, 3, 1, "", "reference_code"], [123, 2, 1, "", "remove_key_schedule"], [123, 2, 1, "", "remove_round_component"], [123, 2, 1, "", "remove_round_component_from_id"], [123, 2, 1, "", "round_function"], [123, 3, 1, "", "rounds"], [123, 3, 1, "", "rounds_as_list"], [123, 2, 1, "", "set_file_name"], [123, 2, 1, "", "set_id"], [123, 2, 1, "", "set_inputs"], [123, 2, 1, "", "sort_cipher"], [123, 2, 1, "", "test_against_reference_code"], [123, 2, 1, "", "test_vector_check"], [123, 3, 1, "", "type"], [123, 2, 1, "", "update_input_id_links_from_component_id"], [123, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.scarf_block_cipher": [[124, 1, 1, "", "SCARFBlockCipher"]], "ciphers.block_ciphers.scarf_block_cipher.SCARFBlockCipher": [[124, 2, 1, "", "F_function"], [124, 2, 1, "", "add_AND_component"], [124, 2, 1, "", "add_FSR_component"], [124, 2, 1, "", "add_MODADD_component"], [124, 2, 1, "", "add_MODSUB_component"], [124, 2, 1, "", "add_NOT_component"], [124, 2, 1, "", "add_OR_component"], [124, 2, 1, "", "add_SBOX_component"], [124, 2, 1, "", "add_SHIFT_component"], [124, 2, 1, "", "add_XOR_component"], [124, 2, 1, "", "add_cipher_output_component"], [124, 2, 1, "", "add_concatenate_component"], [124, 2, 1, "", "add_constant_component"], [124, 2, 1, "", "add_intermediate_output_component"], [124, 2, 1, "", "add_linear_layer_component"], [124, 2, 1, "", "add_mix_column_component"], [124, 2, 1, "", "add_permutation_component"], [124, 2, 1, "", "add_reverse_component"], [124, 2, 1, "", "add_rotate_component"], [124, 2, 1, "", "add_round"], [124, 2, 1, "", "add_round_key_output_component"], [124, 2, 1, "", "add_round_output_component"], [124, 2, 1, "", "add_shift_rows_component"], [124, 2, 1, "", "add_sigma_component"], [124, 2, 1, "", "add_subkey"], [124, 2, 1, "", "add_suffix_to_components"], [124, 2, 1, "", "add_theta_gaston_component"], [124, 2, 1, "", "add_theta_keccak_component"], [124, 2, 1, "", "add_theta_xoodoo_component"], [124, 2, 1, "", "add_variable_rotate_component"], [124, 2, 1, "", "add_variable_shift_component"], [124, 2, 1, "", "add_word_permutation_component"], [124, 2, 1, "", "as_python_dictionary"], [124, 2, 1, "", "cipher_inverse"], [124, 2, 1, "", "cipher_partial_inverse"], [124, 2, 1, "", "component_from"], [124, 2, 1, "", "convert_to_compound_xor_cipher"], [124, 2, 1, "", "create_and_components"], [124, 2, 1, "", "create_networx_graph_from_input_ids"], [124, 2, 1, "", "create_rot_components"], [124, 2, 1, "", "create_sbox_components"], [124, 2, 1, "", "create_sigma_components"], [124, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [124, 3, 1, "", "current_round"], [124, 3, 1, "", "current_round_number"], [124, 3, 1, "", "current_round_number_of_components"], [124, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [124, 2, 1, "", "evaluate"], [124, 2, 1, "", "evaluate_using_c"], [124, 2, 1, "", "evaluate_vectorized"], [124, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [124, 3, 1, "", "family_name"], [124, 3, 1, "", "file_name"], [124, 2, 1, "", "find_impossible_property"], [124, 2, 1, "", "generate_bit_based_c_code"], [124, 2, 1, "", "generate_evaluate_c_code_shared_library"], [124, 2, 1, "", "generate_word_based_c_code"], [124, 2, 1, "", "get_all_components"], [124, 2, 1, "", "get_all_components_ids"], [124, 2, 1, "", "get_all_inputs_bit_positions"], [124, 2, 1, "", "get_component_from_id"], [124, 2, 1, "", "get_components_in_round"], [124, 2, 1, "", "get_current_component_id"], [124, 2, 1, "", "get_model"], [124, 2, 1, "", "get_number_of_components_in_round"], [124, 2, 1, "", "get_partial_cipher"], [124, 2, 1, "", "get_round_from_component_id"], [124, 2, 1, "", "get_sizes_of_components_by_type"], [124, 3, 1, "", "id"], [124, 2, 1, "", "impossible_differential_search"], [124, 3, 1, "", "inputs"], [124, 3, 1, "", "inputs_bit_size"], [124, 2, 1, "", "inputs_size_to_dict"], [124, 2, 1, "", "is_algebraically_secure"], [124, 2, 1, "", "is_andrx"], [124, 2, 1, "", "is_arx"], [124, 2, 1, "", "is_power_of_2_word_based"], [124, 2, 1, "", "is_shift_arx"], [124, 2, 1, "", "is_spn"], [124, 2, 1, "", "make_cipher_id"], [124, 2, 1, "", "make_file_name"], [124, 3, 1, "", "number_of_rounds"], [124, 3, 1, "", "output_bit_size"], [124, 2, 1, "", "polynomial_system"], [124, 2, 1, "", "polynomial_system_at_round"], [124, 2, 1, "", "print"], [124, 2, 1, "", "print_as_python_dictionary"], [124, 2, 1, "", "print_as_python_dictionary_to_file"], [124, 2, 1, "", "print_evaluation_python_code"], [124, 2, 1, "", "print_evaluation_python_code_to_file"], [124, 2, 1, "", "print_input_information"], [124, 3, 1, "", "reference_code"], [124, 2, 1, "", "remove_key_schedule"], [124, 2, 1, "", "remove_round_component"], [124, 2, 1, "", "remove_round_component_from_id"], [124, 3, 1, "", "rounds"], [124, 3, 1, "", "rounds_as_list"], [124, 2, 1, "", "set_file_name"], [124, 2, 1, "", "set_id"], [124, 2, 1, "", "set_inputs"], [124, 2, 1, "", "sort_cipher"], [124, 2, 1, "", "test_against_reference_code"], [124, 2, 1, "", "test_vector_check"], [124, 2, 1, "", "tweakey_schedule"], [124, 3, 1, "", "type"], [124, 2, 1, "", "update_input_id_links_from_component_id"], [124, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.simeck_block_cipher": [[125, 1, 1, "", "SimeckBlockCipher"]], "ciphers.block_ciphers.simeck_block_cipher.SimeckBlockCipher": [[125, 2, 1, "", "add_AND_component"], [125, 2, 1, "", "add_FSR_component"], [125, 2, 1, "", "add_MODADD_component"], [125, 2, 1, "", "add_MODSUB_component"], [125, 2, 1, "", "add_NOT_component"], [125, 2, 1, "", "add_OR_component"], [125, 2, 1, "", "add_SBOX_component"], [125, 2, 1, "", "add_SHIFT_component"], [125, 2, 1, "", "add_XOR_component"], [125, 2, 1, "", "add_cipher_output_component"], [125, 2, 1, "", "add_concatenate_component"], [125, 2, 1, "", "add_constant_component"], [125, 2, 1, "", "add_intermediate_output_component"], [125, 2, 1, "", "add_linear_layer_component"], [125, 2, 1, "", "add_mix_column_component"], [125, 2, 1, "", "add_permutation_component"], [125, 2, 1, "", "add_reverse_component"], [125, 2, 1, "", "add_rotate_component"], [125, 2, 1, "", "add_round"], [125, 2, 1, "", "add_round_key_output_component"], [125, 2, 1, "", "add_round_output_component"], [125, 2, 1, "", "add_shift_rows_component"], [125, 2, 1, "", "add_sigma_component"], [125, 2, 1, "", "add_suffix_to_components"], [125, 2, 1, "", "add_theta_gaston_component"], [125, 2, 1, "", "add_theta_keccak_component"], [125, 2, 1, "", "add_theta_xoodoo_component"], [125, 2, 1, "", "add_variable_rotate_component"], [125, 2, 1, "", "add_variable_shift_component"], [125, 2, 1, "", "add_word_permutation_component"], [125, 2, 1, "", "as_python_dictionary"], [125, 2, 1, "", "cipher_inverse"], [125, 2, 1, "", "cipher_partial_inverse"], [125, 2, 1, "", "component_from"], [125, 2, 1, "", "convert_to_compound_xor_cipher"], [125, 2, 1, "", "create_networx_graph_from_input_ids"], [125, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [125, 3, 1, "", "current_round"], [125, 3, 1, "", "current_round_number"], [125, 3, 1, "", "current_round_number_of_components"], [125, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [125, 2, 1, "", "evaluate"], [125, 2, 1, "", "evaluate_using_c"], [125, 2, 1, "", "evaluate_vectorized"], [125, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [125, 3, 1, "", "family_name"], [125, 2, 1, "", "feistel_function"], [125, 3, 1, "", "file_name"], [125, 2, 1, "", "find_impossible_property"], [125, 2, 1, "", "generate_bit_based_c_code"], [125, 2, 1, "", "generate_evaluate_c_code_shared_library"], [125, 2, 1, "", "generate_word_based_c_code"], [125, 2, 1, "", "get_all_components"], [125, 2, 1, "", "get_all_components_ids"], [125, 2, 1, "", "get_all_inputs_bit_positions"], [125, 2, 1, "", "get_component_from_id"], [125, 2, 1, "", "get_components_in_round"], [125, 2, 1, "", "get_current_component_id"], [125, 2, 1, "", "get_model"], [125, 2, 1, "", "get_number_of_components_in_round"], [125, 2, 1, "", "get_partial_cipher"], [125, 2, 1, "", "get_round_from_component_id"], [125, 2, 1, "", "get_sizes_of_components_by_type"], [125, 3, 1, "", "id"], [125, 2, 1, "", "impossible_differential_search"], [125, 3, 1, "", "inputs"], [125, 3, 1, "", "inputs_bit_size"], [125, 2, 1, "", "inputs_size_to_dict"], [125, 2, 1, "", "is_algebraically_secure"], [125, 2, 1, "", "is_andrx"], [125, 2, 1, "", "is_arx"], [125, 2, 1, "", "is_power_of_2_word_based"], [125, 2, 1, "", "is_shift_arx"], [125, 2, 1, "", "is_spn"], [125, 2, 1, "", "make_cipher_id"], [125, 2, 1, "", "make_file_name"], [125, 3, 1, "", "number_of_rounds"], [125, 3, 1, "", "output_bit_size"], [125, 2, 1, "", "polynomial_system"], [125, 2, 1, "", "polynomial_system_at_round"], [125, 2, 1, "", "print"], [125, 2, 1, "", "print_as_python_dictionary"], [125, 2, 1, "", "print_as_python_dictionary_to_file"], [125, 2, 1, "", "print_evaluation_python_code"], [125, 2, 1, "", "print_evaluation_python_code_to_file"], [125, 2, 1, "", "print_input_information"], [125, 3, 1, "", "reference_code"], [125, 2, 1, "", "remove_key_schedule"], [125, 2, 1, "", "remove_round_component"], [125, 2, 1, "", "remove_round_component_from_id"], [125, 3, 1, "", "rounds"], [125, 3, 1, "", "rounds_as_list"], [125, 2, 1, "", "set_file_name"], [125, 2, 1, "", "set_id"], [125, 2, 1, "", "set_inputs"], [125, 2, 1, "", "sort_cipher"], [125, 2, 1, "", "test_against_reference_code"], [125, 2, 1, "", "test_vector_check"], [125, 3, 1, "", "type"], [125, 2, 1, "", "update_input_id_links_from_component_id"], [125, 2, 1, "", "update_keys_buffer"], [125, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.simeck_sbox_block_cipher": [[126, 1, 1, "", "SimeckSboxBlockCipher"]], "ciphers.block_ciphers.simeck_sbox_block_cipher.SimeckSboxBlockCipher": [[126, 2, 1, "", "add_AND_component"], [126, 2, 1, "", "add_FSR_component"], [126, 2, 1, "", "add_MODADD_component"], [126, 2, 1, "", "add_MODSUB_component"], [126, 2, 1, "", "add_NOT_component"], [126, 2, 1, "", "add_OR_component"], [126, 2, 1, "", "add_SBOX_component"], [126, 2, 1, "", "add_SHIFT_component"], [126, 2, 1, "", "add_XOR_component"], [126, 2, 1, "", "add_cipher_output_component"], [126, 2, 1, "", "add_concatenate_component"], [126, 2, 1, "", "add_constant_component"], [126, 2, 1, "", "add_intermediate_output_component"], [126, 2, 1, "", "add_linear_layer_component"], [126, 2, 1, "", "add_mix_column_component"], [126, 2, 1, "", "add_permutation_component"], [126, 2, 1, "", "add_reverse_component"], [126, 2, 1, "", "add_rotate_component"], [126, 2, 1, "", "add_round"], [126, 2, 1, "", "add_round_key_output_component"], [126, 2, 1, "", "add_round_output_component"], [126, 2, 1, "", "add_shift_rows_component"], [126, 2, 1, "", "add_sigma_component"], [126, 2, 1, "", "add_suffix_to_components"], [126, 2, 1, "", "add_theta_gaston_component"], [126, 2, 1, "", "add_theta_keccak_component"], [126, 2, 1, "", "add_theta_xoodoo_component"], [126, 2, 1, "", "add_variable_rotate_component"], [126, 2, 1, "", "add_variable_shift_component"], [126, 2, 1, "", "add_word_permutation_component"], [126, 2, 1, "", "as_python_dictionary"], [126, 2, 1, "", "cipher_inverse"], [126, 2, 1, "", "cipher_partial_inverse"], [126, 2, 1, "", "component_from"], [126, 2, 1, "", "convert_to_compound_xor_cipher"], [126, 2, 1, "", "create_networx_graph_from_input_ids"], [126, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [126, 3, 1, "", "current_round"], [126, 3, 1, "", "current_round_number"], [126, 3, 1, "", "current_round_number_of_components"], [126, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [126, 2, 1, "", "evaluate"], [126, 2, 1, "", "evaluate_using_c"], [126, 2, 1, "", "evaluate_vectorized"], [126, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [126, 3, 1, "", "family_name"], [126, 2, 1, "", "feistel_function"], [126, 3, 1, "", "file_name"], [126, 2, 1, "", "find_impossible_property"], [126, 2, 1, "", "generate_bit_based_c_code"], [126, 2, 1, "", "generate_evaluate_c_code_shared_library"], [126, 2, 1, "", "generate_word_based_c_code"], [126, 2, 1, "", "get_all_components"], [126, 2, 1, "", "get_all_components_ids"], [126, 2, 1, "", "get_all_inputs_bit_positions"], [126, 2, 1, "", "get_component_from_id"], [126, 2, 1, "", "get_components_in_round"], [126, 2, 1, "", "get_current_component_id"], [126, 2, 1, "", "get_model"], [126, 2, 1, "", "get_number_of_components_in_round"], [126, 2, 1, "", "get_partial_cipher"], [126, 2, 1, "", "get_round_from_component_id"], [126, 2, 1, "", "get_sizes_of_components_by_type"], [126, 3, 1, "", "id"], [126, 2, 1, "", "impossible_differential_search"], [126, 3, 1, "", "inputs"], [126, 3, 1, "", "inputs_bit_size"], [126, 2, 1, "", "inputs_size_to_dict"], [126, 2, 1, "", "is_algebraically_secure"], [126, 2, 1, "", "is_andrx"], [126, 2, 1, "", "is_arx"], [126, 2, 1, "", "is_power_of_2_word_based"], [126, 2, 1, "", "is_shift_arx"], [126, 2, 1, "", "is_spn"], [126, 2, 1, "", "make_cipher_id"], [126, 2, 1, "", "make_file_name"], [126, 3, 1, "", "number_of_rounds"], [126, 3, 1, "", "output_bit_size"], [126, 2, 1, "", "polynomial_system"], [126, 2, 1, "", "polynomial_system_at_round"], [126, 2, 1, "", "print"], [126, 2, 1, "", "print_as_python_dictionary"], [126, 2, 1, "", "print_as_python_dictionary_to_file"], [126, 2, 1, "", "print_evaluation_python_code"], [126, 2, 1, "", "print_evaluation_python_code_to_file"], [126, 2, 1, "", "print_input_information"], [126, 3, 1, "", "reference_code"], [126, 2, 1, "", "remove_key_schedule"], [126, 2, 1, "", "remove_round_component"], [126, 2, 1, "", "remove_round_component_from_id"], [126, 3, 1, "", "rounds"], [126, 3, 1, "", "rounds_as_list"], [126, 2, 1, "", "set_file_name"], [126, 2, 1, "", "set_id"], [126, 2, 1, "", "set_inputs"], [126, 2, 1, "", "sort_cipher"], [126, 2, 1, "", "test_against_reference_code"], [126, 2, 1, "", "test_vector_check"], [126, 3, 1, "", "type"], [126, 2, 1, "", "update_input_id_links_from_component_id"], [126, 2, 1, "", "update_keys_buffer"], [126, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.simon_block_cipher": [[127, 1, 1, "", "SimonBlockCipher"]], "ciphers.block_ciphers.simon_block_cipher.SimonBlockCipher": [[127, 2, 1, "", "add_AND_component"], [127, 2, 1, "", "add_FSR_component"], [127, 2, 1, "", "add_MODADD_component"], [127, 2, 1, "", "add_MODSUB_component"], [127, 2, 1, "", "add_NOT_component"], [127, 2, 1, "", "add_OR_component"], [127, 2, 1, "", "add_SBOX_component"], [127, 2, 1, "", "add_SHIFT_component"], [127, 2, 1, "", "add_XOR_component"], [127, 2, 1, "", "add_cipher_output_component"], [127, 2, 1, "", "add_concatenate_component"], [127, 2, 1, "", "add_constant_component"], [127, 2, 1, "", "add_intermediate_output_component"], [127, 2, 1, "", "add_linear_layer_component"], [127, 2, 1, "", "add_mix_column_component"], [127, 2, 1, "", "add_permutation_component"], [127, 2, 1, "", "add_reverse_component"], [127, 2, 1, "", "add_rotate_component"], [127, 2, 1, "", "add_round"], [127, 2, 1, "", "add_round_key_output_component"], [127, 2, 1, "", "add_round_output_component"], [127, 2, 1, "", "add_shift_rows_component"], [127, 2, 1, "", "add_sigma_component"], [127, 2, 1, "", "add_suffix_to_components"], [127, 2, 1, "", "add_theta_gaston_component"], [127, 2, 1, "", "add_theta_keccak_component"], [127, 2, 1, "", "add_theta_xoodoo_component"], [127, 2, 1, "", "add_variable_rotate_component"], [127, 2, 1, "", "add_variable_shift_component"], [127, 2, 1, "", "add_word_permutation_component"], [127, 2, 1, "", "as_python_dictionary"], [127, 2, 1, "", "cipher_inverse"], [127, 2, 1, "", "cipher_partial_inverse"], [127, 2, 1, "", "component_from"], [127, 2, 1, "", "convert_to_compound_xor_cipher"], [127, 2, 1, "", "create_networx_graph_from_input_ids"], [127, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [127, 3, 1, "", "current_round"], [127, 3, 1, "", "current_round_number"], [127, 3, 1, "", "current_round_number_of_components"], [127, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [127, 2, 1, "", "evaluate"], [127, 2, 1, "", "evaluate_using_c"], [127, 2, 1, "", "evaluate_vectorized"], [127, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [127, 2, 1, "", "f"], [127, 3, 1, "", "family_name"], [127, 2, 1, "", "feistel_function"], [127, 3, 1, "", "file_name"], [127, 2, 1, "", "find_impossible_property"], [127, 2, 1, "", "generate_bit_based_c_code"], [127, 2, 1, "", "generate_evaluate_c_code_shared_library"], [127, 2, 1, "", "generate_round_key"], [127, 2, 1, "", "generate_word_based_c_code"], [127, 2, 1, "", "get_all_components"], [127, 2, 1, "", "get_all_components_ids"], [127, 2, 1, "", "get_all_inputs_bit_positions"], [127, 2, 1, "", "get_component_from_id"], [127, 2, 1, "", "get_components_in_round"], [127, 2, 1, "", "get_current_component_id"], [127, 2, 1, "", "get_model"], [127, 2, 1, "", "get_number_of_components_in_round"], [127, 2, 1, "", "get_partial_cipher"], [127, 2, 1, "", "get_round_from_component_id"], [127, 2, 1, "", "get_sizes_of_components_by_type"], [127, 3, 1, "", "id"], [127, 2, 1, "", "impossible_differential_search"], [127, 3, 1, "", "inputs"], [127, 3, 1, "", "inputs_bit_size"], [127, 2, 1, "", "inputs_size_to_dict"], [127, 2, 1, "", "is_algebraically_secure"], [127, 2, 1, "", "is_andrx"], [127, 2, 1, "", "is_arx"], [127, 2, 1, "", "is_power_of_2_word_based"], [127, 2, 1, "", "is_shift_arx"], [127, 2, 1, "", "is_spn"], [127, 2, 1, "", "make_cipher_id"], [127, 2, 1, "", "make_file_name"], [127, 3, 1, "", "number_of_rounds"], [127, 3, 1, "", "output_bit_size"], [127, 2, 1, "", "polynomial_system"], [127, 2, 1, "", "polynomial_system_at_round"], [127, 2, 1, "", "print"], [127, 2, 1, "", "print_as_python_dictionary"], [127, 2, 1, "", "print_as_python_dictionary_to_file"], [127, 2, 1, "", "print_evaluation_python_code"], [127, 2, 1, "", "print_evaluation_python_code_to_file"], [127, 2, 1, "", "print_input_information"], [127, 3, 1, "", "reference_code"], [127, 2, 1, "", "remove_key_schedule"], [127, 2, 1, "", "remove_round_component"], [127, 2, 1, "", "remove_round_component_from_id"], [127, 3, 1, "", "rounds"], [127, 3, 1, "", "rounds_as_list"], [127, 2, 1, "", "set_file_name"], [127, 2, 1, "", "set_id"], [127, 2, 1, "", "set_inputs"], [127, 2, 1, "", "sort_cipher"], [127, 2, 1, "", "test_against_reference_code"], [127, 2, 1, "", "test_vector_check"], [127, 3, 1, "", "type"], [127, 2, 1, "", "update_input_id_links_from_component_id"], [127, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.simon_sbox_block_cipher": [[128, 1, 1, "", "SimonSboxBlockCipher"]], "ciphers.block_ciphers.simon_sbox_block_cipher.SimonSboxBlockCipher": [[128, 2, 1, "", "add_AND_component"], [128, 2, 1, "", "add_FSR_component"], [128, 2, 1, "", "add_MODADD_component"], [128, 2, 1, "", "add_MODSUB_component"], [128, 2, 1, "", "add_NOT_component"], [128, 2, 1, "", "add_OR_component"], [128, 2, 1, "", "add_SBOX_component"], [128, 2, 1, "", "add_SHIFT_component"], [128, 2, 1, "", "add_XOR_component"], [128, 2, 1, "", "add_cipher_output_component"], [128, 2, 1, "", "add_concatenate_component"], [128, 2, 1, "", "add_constant_component"], [128, 2, 1, "", "add_intermediate_output_component"], [128, 2, 1, "", "add_linear_layer_component"], [128, 2, 1, "", "add_mix_column_component"], [128, 2, 1, "", "add_permutation_component"], [128, 2, 1, "", "add_reverse_component"], [128, 2, 1, "", "add_rotate_component"], [128, 2, 1, "", "add_round"], [128, 2, 1, "", "add_round_key_output_component"], [128, 2, 1, "", "add_round_output_component"], [128, 2, 1, "", "add_shift_rows_component"], [128, 2, 1, "", "add_sigma_component"], [128, 2, 1, "", "add_suffix_to_components"], [128, 2, 1, "", "add_theta_gaston_component"], [128, 2, 1, "", "add_theta_keccak_component"], [128, 2, 1, "", "add_theta_xoodoo_component"], [128, 2, 1, "", "add_variable_rotate_component"], [128, 2, 1, "", "add_variable_shift_component"], [128, 2, 1, "", "add_word_permutation_component"], [128, 2, 1, "", "as_python_dictionary"], [128, 2, 1, "", "cipher_inverse"], [128, 2, 1, "", "cipher_partial_inverse"], [128, 2, 1, "", "component_from"], [128, 2, 1, "", "convert_to_compound_xor_cipher"], [128, 2, 1, "", "create_networx_graph_from_input_ids"], [128, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [128, 3, 1, "", "current_round"], [128, 3, 1, "", "current_round_number"], [128, 3, 1, "", "current_round_number_of_components"], [128, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [128, 2, 1, "", "evaluate"], [128, 2, 1, "", "evaluate_using_c"], [128, 2, 1, "", "evaluate_vectorized"], [128, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [128, 2, 1, "", "f"], [128, 3, 1, "", "family_name"], [128, 2, 1, "", "feistel_function"], [128, 3, 1, "", "file_name"], [128, 2, 1, "", "find_impossible_property"], [128, 2, 1, "", "generate_bit_based_c_code"], [128, 2, 1, "", "generate_evaluate_c_code_shared_library"], [128, 2, 1, "", "generate_round_key"], [128, 2, 1, "", "generate_word_based_c_code"], [128, 2, 1, "", "get_all_components"], [128, 2, 1, "", "get_all_components_ids"], [128, 2, 1, "", "get_all_inputs_bit_positions"], [128, 2, 1, "", "get_component_from_id"], [128, 2, 1, "", "get_components_in_round"], [128, 2, 1, "", "get_current_component_id"], [128, 2, 1, "", "get_model"], [128, 2, 1, "", "get_number_of_components_in_round"], [128, 2, 1, "", "get_partial_cipher"], [128, 2, 1, "", "get_round_from_component_id"], [128, 2, 1, "", "get_sizes_of_components_by_type"], [128, 3, 1, "", "id"], [128, 2, 1, "", "impossible_differential_search"], [128, 3, 1, "", "inputs"], [128, 3, 1, "", "inputs_bit_size"], [128, 2, 1, "", "inputs_size_to_dict"], [128, 2, 1, "", "is_algebraically_secure"], [128, 2, 1, "", "is_andrx"], [128, 2, 1, "", "is_arx"], [128, 2, 1, "", "is_power_of_2_word_based"], [128, 2, 1, "", "is_shift_arx"], [128, 2, 1, "", "is_spn"], [128, 2, 1, "", "make_cipher_id"], [128, 2, 1, "", "make_file_name"], [128, 3, 1, "", "number_of_rounds"], [128, 3, 1, "", "output_bit_size"], [128, 2, 1, "", "polynomial_system"], [128, 2, 1, "", "polynomial_system_at_round"], [128, 2, 1, "", "print"], [128, 2, 1, "", "print_as_python_dictionary"], [128, 2, 1, "", "print_as_python_dictionary_to_file"], [128, 2, 1, "", "print_evaluation_python_code"], [128, 2, 1, "", "print_evaluation_python_code_to_file"], [128, 2, 1, "", "print_input_information"], [128, 3, 1, "", "reference_code"], [128, 2, 1, "", "remove_key_schedule"], [128, 2, 1, "", "remove_round_component"], [128, 2, 1, "", "remove_round_component_from_id"], [128, 3, 1, "", "rounds"], [128, 3, 1, "", "rounds_as_list"], [128, 2, 1, "", "set_file_name"], [128, 2, 1, "", "set_id"], [128, 2, 1, "", "set_inputs"], [128, 2, 1, "", "sort_cipher"], [128, 2, 1, "", "test_against_reference_code"], [128, 2, 1, "", "test_vector_check"], [128, 3, 1, "", "type"], [128, 2, 1, "", "update_input_id_links_from_component_id"], [128, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.skinny_block_cipher": [[129, 1, 1, "", "SkinnyBlockCipher"]], "ciphers.block_ciphers.skinny_block_cipher.SkinnyBlockCipher": [[129, 2, 1, "", "add_AND_component"], [129, 2, 1, "", "add_FSR_component"], [129, 2, 1, "", "add_MODADD_component"], [129, 2, 1, "", "add_MODSUB_component"], [129, 2, 1, "", "add_NOT_component"], [129, 2, 1, "", "add_OR_component"], [129, 2, 1, "", "add_SBOX_component"], [129, 2, 1, "", "add_SHIFT_component"], [129, 2, 1, "", "add_XOR_component"], [129, 2, 1, "", "add_cipher_output_component"], [129, 2, 1, "", "add_concatenate_component"], [129, 2, 1, "", "add_constant_component"], [129, 2, 1, "", "add_intermediate_output_component"], [129, 2, 1, "", "add_linear_layer_component"], [129, 2, 1, "", "add_mix_column_component"], [129, 2, 1, "", "add_permutation_component"], [129, 2, 1, "", "add_reverse_component"], [129, 2, 1, "", "add_rotate_component"], [129, 2, 1, "", "add_round"], [129, 2, 1, "", "add_round_key_output_component"], [129, 2, 1, "", "add_round_output_component"], [129, 2, 1, "", "add_shift_rows_component"], [129, 2, 1, "", "add_sigma_component"], [129, 2, 1, "", "add_suffix_to_components"], [129, 2, 1, "", "add_theta_gaston_component"], [129, 2, 1, "", "add_theta_keccak_component"], [129, 2, 1, "", "add_theta_xoodoo_component"], [129, 2, 1, "", "add_variable_rotate_component"], [129, 2, 1, "", "add_variable_shift_component"], [129, 2, 1, "", "add_word_permutation_component"], [129, 2, 1, "", "as_python_dictionary"], [129, 2, 1, "", "cipher_inverse"], [129, 2, 1, "", "cipher_partial_inverse"], [129, 2, 1, "", "component_from"], [129, 2, 1, "", "convert_to_compound_xor_cipher"], [129, 2, 1, "", "create_networx_graph_from_input_ids"], [129, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [129, 3, 1, "", "current_round"], [129, 3, 1, "", "current_round_number"], [129, 3, 1, "", "current_round_number_of_components"], [129, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [129, 2, 1, "", "evaluate"], [129, 2, 1, "", "evaluate_using_c"], [129, 2, 1, "", "evaluate_vectorized"], [129, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [129, 3, 1, "", "family_name"], [129, 3, 1, "", "file_name"], [129, 2, 1, "", "find_impossible_property"], [129, 2, 1, "", "generate_bit_based_c_code"], [129, 2, 1, "", "generate_evaluate_c_code_shared_library"], [129, 2, 1, "", "generate_word_based_c_code"], [129, 2, 1, "", "get_all_components"], [129, 2, 1, "", "get_all_components_ids"], [129, 2, 1, "", "get_all_inputs_bit_positions"], [129, 2, 1, "", "get_component_from_id"], [129, 2, 1, "", "get_components_in_round"], [129, 2, 1, "", "get_current_component_id"], [129, 2, 1, "", "get_model"], [129, 2, 1, "", "get_number_of_components_in_round"], [129, 2, 1, "", "get_partial_cipher"], [129, 2, 1, "", "get_round_from_component_id"], [129, 2, 1, "", "get_sizes_of_components_by_type"], [129, 3, 1, "", "id"], [129, 2, 1, "", "impossible_differential_search"], [129, 3, 1, "", "inputs"], [129, 3, 1, "", "inputs_bit_size"], [129, 2, 1, "", "inputs_size_to_dict"], [129, 2, 1, "", "is_algebraically_secure"], [129, 2, 1, "", "is_andrx"], [129, 2, 1, "", "is_arx"], [129, 2, 1, "", "is_power_of_2_word_based"], [129, 2, 1, "", "is_shift_arx"], [129, 2, 1, "", "is_spn"], [129, 2, 1, "", "key_initialization"], [129, 2, 1, "", "key_schedule"], [129, 2, 1, "", "make_cipher_id"], [129, 2, 1, "", "make_file_name"], [129, 3, 1, "", "number_of_rounds"], [129, 3, 1, "", "output_bit_size"], [129, 2, 1, "", "polynomial_system"], [129, 2, 1, "", "polynomial_system_at_round"], [129, 2, 1, "", "print"], [129, 2, 1, "", "print_as_python_dictionary"], [129, 2, 1, "", "print_as_python_dictionary_to_file"], [129, 2, 1, "", "print_evaluation_python_code"], [129, 2, 1, "", "print_evaluation_python_code_to_file"], [129, 2, 1, "", "print_input_information"], [129, 3, 1, "", "reference_code"], [129, 2, 1, "", "remove_key_schedule"], [129, 2, 1, "", "remove_round_component"], [129, 2, 1, "", "remove_round_component_from_id"], [129, 2, 1, "", "round_function"], [129, 3, 1, "", "rounds"], [129, 3, 1, "", "rounds_as_list"], [129, 2, 1, "", "set_file_name"], [129, 2, 1, "", "set_id"], [129, 2, 1, "", "set_inputs"], [129, 2, 1, "", "sort_cipher"], [129, 2, 1, "", "state_initialization"], [129, 2, 1, "", "test_against_reference_code"], [129, 2, 1, "", "test_vector_check"], [129, 3, 1, "", "type"], [129, 2, 1, "", "update_input_id_links_from_component_id"], [129, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.sparx_block_cipher": [[130, 1, 1, "", "SparxBlockCipher"], [130, 4, 1, "", "get_number_of_steps_from"]], "ciphers.block_ciphers.sparx_block_cipher.SparxBlockCipher": [[130, 2, 1, "", "K_4_128"], [130, 2, 1, "", "K_4_64"], [130, 2, 1, "", "K_8_256"], [130, 2, 1, "", "add_AND_component"], [130, 2, 1, "", "add_FSR_component"], [130, 2, 1, "", "add_MODADD_component"], [130, 2, 1, "", "add_MODSUB_component"], [130, 2, 1, "", "add_NOT_component"], [130, 2, 1, "", "add_OR_component"], [130, 2, 1, "", "add_SBOX_component"], [130, 2, 1, "", "add_SHIFT_component"], [130, 2, 1, "", "add_XOR_component"], [130, 2, 1, "", "add_cipher_output_component"], [130, 2, 1, "", "add_concatenate_component"], [130, 2, 1, "", "add_constant_component"], [130, 2, 1, "", "add_intermediate_output_component"], [130, 2, 1, "", "add_linear_layer_component"], [130, 2, 1, "", "add_mix_column_component"], [130, 2, 1, "", "add_permutation_component"], [130, 2, 1, "", "add_reverse_component"], [130, 2, 1, "", "add_rotate_component"], [130, 2, 1, "", "add_round"], [130, 2, 1, "", "add_round_key_output_component"], [130, 2, 1, "", "add_round_output_component"], [130, 2, 1, "", "add_shift_rows_component"], [130, 2, 1, "", "add_sigma_component"], [130, 2, 1, "", "add_suffix_to_components"], [130, 2, 1, "", "add_theta_gaston_component"], [130, 2, 1, "", "add_theta_keccak_component"], [130, 2, 1, "", "add_theta_xoodoo_component"], [130, 2, 1, "", "add_variable_rotate_component"], [130, 2, 1, "", "add_variable_shift_component"], [130, 2, 1, "", "add_word_permutation_component"], [130, 2, 1, "", "arx_box"], [130, 2, 1, "", "as_python_dictionary"], [130, 2, 1, "", "assign_functions_based_on"], [130, 2, 1, "", "cipher_inverse"], [130, 2, 1, "", "cipher_partial_inverse"], [130, 2, 1, "", "component_from"], [130, 2, 1, "", "convert_to_compound_xor_cipher"], [130, 2, 1, "", "create_networx_graph_from_input_ids"], [130, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [130, 3, 1, "", "current_round"], [130, 3, 1, "", "current_round_number"], [130, 3, 1, "", "current_round_number_of_components"], [130, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [130, 2, 1, "", "evaluate"], [130, 2, 1, "", "evaluate_using_c"], [130, 2, 1, "", "evaluate_vectorized"], [130, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [130, 3, 1, "", "family_name"], [130, 3, 1, "", "file_name"], [130, 2, 1, "", "find_impossible_property"], [130, 2, 1, "", "generate_bit_based_c_code"], [130, 2, 1, "", "generate_evaluate_c_code_shared_library"], [130, 2, 1, "", "generate_word_based_c_code"], [130, 2, 1, "", "get_all_components"], [130, 2, 1, "", "get_all_components_ids"], [130, 2, 1, "", "get_all_inputs_bit_positions"], [130, 2, 1, "", "get_component_from_id"], [130, 2, 1, "", "get_components_in_round"], [130, 2, 1, "", "get_current_component_id"], [130, 2, 1, "", "get_model"], [130, 2, 1, "", "get_number_of_components_in_round"], [130, 2, 1, "", "get_partial_cipher"], [130, 2, 1, "", "get_round_from_component_id"], [130, 2, 1, "", "get_sizes_of_components_by_type"], [130, 3, 1, "", "id"], [130, 2, 1, "", "impossible_differential_search"], [130, 3, 1, "", "inputs"], [130, 3, 1, "", "inputs_bit_size"], [130, 2, 1, "", "inputs_size_to_dict"], [130, 2, 1, "", "is_algebraically_secure"], [130, 2, 1, "", "is_andrx"], [130, 2, 1, "", "is_arx"], [130, 2, 1, "", "is_power_of_2_word_based"], [130, 2, 1, "", "is_shift_arx"], [130, 2, 1, "", "is_spn"], [130, 2, 1, "", "lambda_2"], [130, 2, 1, "", "lambda_4"], [130, 2, 1, "", "make_cipher_id"], [130, 2, 1, "", "make_file_name"], [130, 3, 1, "", "number_of_rounds"], [130, 3, 1, "", "output_bit_size"], [130, 2, 1, "", "polynomial_system"], [130, 2, 1, "", "polynomial_system_at_round"], [130, 2, 1, "", "print"], [130, 2, 1, "", "print_as_python_dictionary"], [130, 2, 1, "", "print_as_python_dictionary_to_file"], [130, 2, 1, "", "print_evaluation_python_code"], [130, 2, 1, "", "print_evaluation_python_code_to_file"], [130, 2, 1, "", "print_input_information"], [130, 3, 1, "", "reference_code"], [130, 2, 1, "", "remove_key_schedule"], [130, 2, 1, "", "remove_round_component"], [130, 2, 1, "", "remove_round_component_from_id"], [130, 3, 1, "", "rounds"], [130, 3, 1, "", "rounds_as_list"], [130, 2, 1, "", "set_file_name"], [130, 2, 1, "", "set_id"], [130, 2, 1, "", "set_inputs"], [130, 2, 1, "", "sort_cipher"], [130, 2, 1, "", "test_against_reference_code"], [130, 2, 1, "", "test_vector_check"], [130, 3, 1, "", "type"], [130, 2, 1, "", "update_input_id_links_from_component_id"], [130, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.speck_block_cipher": [[131, 1, 1, "", "SpeckBlockCipher"]], "ciphers.block_ciphers.speck_block_cipher.SpeckBlockCipher": [[131, 2, 1, "", "add_AND_component"], [131, 2, 1, "", "add_FSR_component"], [131, 2, 1, "", "add_MODADD_component"], [131, 2, 1, "", "add_MODSUB_component"], [131, 2, 1, "", "add_NOT_component"], [131, 2, 1, "", "add_OR_component"], [131, 2, 1, "", "add_SBOX_component"], [131, 2, 1, "", "add_SHIFT_component"], [131, 2, 1, "", "add_XOR_component"], [131, 2, 1, "", "add_cipher_output_component"], [131, 2, 1, "", "add_concatenate_component"], [131, 2, 1, "", "add_constant_component"], [131, 2, 1, "", "add_intermediate_output_component"], [131, 2, 1, "", "add_linear_layer_component"], [131, 2, 1, "", "add_mix_column_component"], [131, 2, 1, "", "add_output_component"], [131, 2, 1, "", "add_permutation_component"], [131, 2, 1, "", "add_reverse_component"], [131, 2, 1, "", "add_rotate_component"], [131, 2, 1, "", "add_round"], [131, 2, 1, "", "add_round_key_output_component"], [131, 2, 1, "", "add_round_output_component"], [131, 2, 1, "", "add_shift_rows_component"], [131, 2, 1, "", "add_sigma_component"], [131, 2, 1, "", "add_suffix_to_components"], [131, 2, 1, "", "add_theta_gaston_component"], [131, 2, 1, "", "add_theta_keccak_component"], [131, 2, 1, "", "add_theta_xoodoo_component"], [131, 2, 1, "", "add_variable_rotate_component"], [131, 2, 1, "", "add_variable_shift_component"], [131, 2, 1, "", "add_word_permutation_component"], [131, 2, 1, "", "as_python_dictionary"], [131, 2, 1, "", "cipher_inverse"], [131, 2, 1, "", "cipher_partial_inverse"], [131, 2, 1, "", "component_from"], [131, 2, 1, "", "convert_to_compound_xor_cipher"], [131, 2, 1, "", "create_networx_graph_from_input_ids"], [131, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [131, 3, 1, "", "current_round"], [131, 3, 1, "", "current_round_number"], [131, 3, 1, "", "current_round_number_of_components"], [131, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [131, 2, 1, "", "evaluate"], [131, 2, 1, "", "evaluate_using_c"], [131, 2, 1, "", "evaluate_vectorized"], [131, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [131, 3, 1, "", "family_name"], [131, 3, 1, "", "file_name"], [131, 2, 1, "", "find_impossible_property"], [131, 2, 1, "", "generate_bit_based_c_code"], [131, 2, 1, "", "generate_evaluate_c_code_shared_library"], [131, 2, 1, "", "generate_word_based_c_code"], [131, 2, 1, "", "get_all_components"], [131, 2, 1, "", "get_all_components_ids"], [131, 2, 1, "", "get_all_inputs_bit_positions"], [131, 2, 1, "", "get_component_from_id"], [131, 2, 1, "", "get_components_in_round"], [131, 2, 1, "", "get_current_component_id"], [131, 2, 1, "", "get_model"], [131, 2, 1, "", "get_number_of_components_in_round"], [131, 2, 1, "", "get_partial_cipher"], [131, 2, 1, "", "get_round_from_component_id"], [131, 2, 1, "", "get_sizes_of_components_by_type"], [131, 3, 1, "", "id"], [131, 2, 1, "", "impossible_differential_search"], [131, 3, 1, "", "inputs"], [131, 3, 1, "", "inputs_bit_size"], [131, 2, 1, "", "inputs_size_to_dict"], [131, 2, 1, "", "is_algebraically_secure"], [131, 2, 1, "", "is_andrx"], [131, 2, 1, "", "is_arx"], [131, 2, 1, "", "is_power_of_2_word_based"], [131, 2, 1, "", "is_shift_arx"], [131, 2, 1, "", "is_spn"], [131, 2, 1, "", "key_initialization"], [131, 2, 1, "", "make_cipher_id"], [131, 2, 1, "", "make_file_name"], [131, 3, 1, "", "number_of_rounds"], [131, 3, 1, "", "output_bit_size"], [131, 2, 1, "", "polynomial_system"], [131, 2, 1, "", "polynomial_system_at_round"], [131, 2, 1, "", "print"], [131, 2, 1, "", "print_as_python_dictionary"], [131, 2, 1, "", "print_as_python_dictionary_to_file"], [131, 2, 1, "", "print_evaluation_python_code"], [131, 2, 1, "", "print_evaluation_python_code_to_file"], [131, 2, 1, "", "print_input_information"], [131, 3, 1, "", "reference_code"], [131, 2, 1, "", "remove_key_schedule"], [131, 2, 1, "", "remove_round_component"], [131, 2, 1, "", "remove_round_component_from_id"], [131, 2, 1, "", "round_function"], [131, 2, 1, "", "round_initialization"], [131, 3, 1, "", "rounds"], [131, 3, 1, "", "rounds_as_list"], [131, 2, 1, "", "set_file_name"], [131, 2, 1, "", "set_id"], [131, 2, 1, "", "set_inputs"], [131, 2, 1, "", "sort_cipher"], [131, 2, 1, "", "test_against_reference_code"], [131, 2, 1, "", "test_vector_check"], [131, 3, 1, "", "type"], [131, 2, 1, "", "update_input_id_links_from_component_id"], [131, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.speedy_block_cipher": [[132, 1, 1, "", "SpeedyBlockCipher"]], "ciphers.block_ciphers.speedy_block_cipher.SpeedyBlockCipher": [[132, 2, 1, "", "add_AND_component"], [132, 2, 1, "", "add_FSR_component"], [132, 2, 1, "", "add_MODADD_component"], [132, 2, 1, "", "add_MODSUB_component"], [132, 2, 1, "", "add_NOT_component"], [132, 2, 1, "", "add_OR_component"], [132, 2, 1, "", "add_SBOX_component"], [132, 2, 1, "", "add_SHIFT_component"], [132, 2, 1, "", "add_XOR_component"], [132, 2, 1, "", "add_cipher_output_component"], [132, 2, 1, "", "add_concatenate_component"], [132, 2, 1, "", "add_constant_component"], [132, 2, 1, "", "add_intermediate_output_component"], [132, 2, 1, "", "add_linear_layer_component"], [132, 2, 1, "", "add_mix_column_component"], [132, 2, 1, "", "add_permutation_component"], [132, 2, 1, "", "add_reverse_component"], [132, 2, 1, "", "add_rotate_component"], [132, 2, 1, "", "add_round"], [132, 2, 1, "", "add_round_key_output_component"], [132, 2, 1, "", "add_round_output_component"], [132, 2, 1, "", "add_shift_rows_component"], [132, 2, 1, "", "add_sigma_component"], [132, 2, 1, "", "add_suffix_to_components"], [132, 2, 1, "", "add_theta_gaston_component"], [132, 2, 1, "", "add_theta_keccak_component"], [132, 2, 1, "", "add_theta_xoodoo_component"], [132, 2, 1, "", "add_variable_rotate_component"], [132, 2, 1, "", "add_variable_shift_component"], [132, 2, 1, "", "add_word_permutation_component"], [132, 2, 1, "", "as_python_dictionary"], [132, 2, 1, "", "cipher_inverse"], [132, 2, 1, "", "cipher_partial_inverse"], [132, 2, 1, "", "component_from"], [132, 2, 1, "", "convert_to_compound_xor_cipher"], [132, 2, 1, "", "create_networx_graph_from_input_ids"], [132, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [132, 3, 1, "", "current_round"], [132, 3, 1, "", "current_round_number"], [132, 3, 1, "", "current_round_number_of_components"], [132, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [132, 2, 1, "", "evaluate"], [132, 2, 1, "", "evaluate_using_c"], [132, 2, 1, "", "evaluate_vectorized"], [132, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [132, 3, 1, "", "family_name"], [132, 3, 1, "", "file_name"], [132, 2, 1, "", "find_impossible_property"], [132, 2, 1, "", "generate_bit_based_c_code"], [132, 2, 1, "", "generate_evaluate_c_code_shared_library"], [132, 2, 1, "", "generate_word_based_c_code"], [132, 2, 1, "", "get_all_components"], [132, 2, 1, "", "get_all_components_ids"], [132, 2, 1, "", "get_all_inputs_bit_positions"], [132, 2, 1, "", "get_component_from_id"], [132, 2, 1, "", "get_components_in_round"], [132, 2, 1, "", "get_current_component_id"], [132, 2, 1, "", "get_model"], [132, 2, 1, "", "get_number_of_components_in_round"], [132, 2, 1, "", "get_partial_cipher"], [132, 2, 1, "", "get_round_from_component_id"], [132, 2, 1, "", "get_sizes_of_components_by_type"], [132, 3, 1, "", "id"], [132, 2, 1, "", "impossible_differential_search"], [132, 3, 1, "", "inputs"], [132, 3, 1, "", "inputs_bit_size"], [132, 2, 1, "", "inputs_size_to_dict"], [132, 2, 1, "", "is_algebraically_secure"], [132, 2, 1, "", "is_andrx"], [132, 2, 1, "", "is_arx"], [132, 2, 1, "", "is_power_of_2_word_based"], [132, 2, 1, "", "is_shift_arx"], [132, 2, 1, "", "is_spn"], [132, 2, 1, "", "make_cipher_id"], [132, 2, 1, "", "make_file_name"], [132, 3, 1, "", "number_of_rounds"], [132, 3, 1, "", "output_bit_size"], [132, 2, 1, "", "polynomial_system"], [132, 2, 1, "", "polynomial_system_at_round"], [132, 2, 1, "", "print"], [132, 2, 1, "", "print_as_python_dictionary"], [132, 2, 1, "", "print_as_python_dictionary_to_file"], [132, 2, 1, "", "print_evaluation_python_code"], [132, 2, 1, "", "print_evaluation_python_code_to_file"], [132, 2, 1, "", "print_input_information"], [132, 3, 1, "", "reference_code"], [132, 2, 1, "", "remove_key_schedule"], [132, 2, 1, "", "remove_round_component"], [132, 2, 1, "", "remove_round_component_from_id"], [132, 3, 1, "", "rounds"], [132, 3, 1, "", "rounds_as_list"], [132, 2, 1, "", "set_file_name"], [132, 2, 1, "", "set_id"], [132, 2, 1, "", "set_inputs"], [132, 2, 1, "", "sort_cipher"], [132, 2, 1, "", "test_against_reference_code"], [132, 2, 1, "", "test_vector_check"], [132, 3, 1, "", "type"], [132, 2, 1, "", "update_input_id_links_from_component_id"], [132, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.tea_block_cipher": [[133, 1, 1, "", "TeaBlockCipher"]], "ciphers.block_ciphers.tea_block_cipher.TeaBlockCipher": [[133, 2, 1, "", "add_AND_component"], [133, 2, 1, "", "add_FSR_component"], [133, 2, 1, "", "add_MODADD_component"], [133, 2, 1, "", "add_MODSUB_component"], [133, 2, 1, "", "add_NOT_component"], [133, 2, 1, "", "add_OR_component"], [133, 2, 1, "", "add_SBOX_component"], [133, 2, 1, "", "add_SHIFT_component"], [133, 2, 1, "", "add_XOR_component"], [133, 2, 1, "", "add_cipher_output_component"], [133, 2, 1, "", "add_concatenate_component"], [133, 2, 1, "", "add_constant_component"], [133, 2, 1, "", "add_intermediate_output_component"], [133, 2, 1, "", "add_linear_layer_component"], [133, 2, 1, "", "add_mix_column_component"], [133, 2, 1, "", "add_permutation_component"], [133, 2, 1, "", "add_reverse_component"], [133, 2, 1, "", "add_rotate_component"], [133, 2, 1, "", "add_round"], [133, 2, 1, "", "add_round_key_output_component"], [133, 2, 1, "", "add_round_output_component"], [133, 2, 1, "", "add_shift_rows_component"], [133, 2, 1, "", "add_sigma_component"], [133, 2, 1, "", "add_suffix_to_components"], [133, 2, 1, "", "add_theta_gaston_component"], [133, 2, 1, "", "add_theta_keccak_component"], [133, 2, 1, "", "add_theta_xoodoo_component"], [133, 2, 1, "", "add_variable_rotate_component"], [133, 2, 1, "", "add_variable_shift_component"], [133, 2, 1, "", "add_word_permutation_component"], [133, 2, 1, "", "as_python_dictionary"], [133, 2, 1, "", "cipher_inverse"], [133, 2, 1, "", "cipher_partial_inverse"], [133, 2, 1, "", "component_from"], [133, 2, 1, "", "convert_to_compound_xor_cipher"], [133, 2, 1, "", "create_networx_graph_from_input_ids"], [133, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [133, 3, 1, "", "current_round"], [133, 3, 1, "", "current_round_number"], [133, 3, 1, "", "current_round_number_of_components"], [133, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [133, 2, 1, "", "evaluate"], [133, 2, 1, "", "evaluate_using_c"], [133, 2, 1, "", "evaluate_vectorized"], [133, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [133, 3, 1, "", "family_name"], [133, 3, 1, "", "file_name"], [133, 2, 1, "", "find_impossible_property"], [133, 2, 1, "", "generate_bit_based_c_code"], [133, 2, 1, "", "generate_evaluate_c_code_shared_library"], [133, 2, 1, "", "generate_word_based_c_code"], [133, 2, 1, "", "get_all_components"], [133, 2, 1, "", "get_all_components_ids"], [133, 2, 1, "", "get_all_inputs_bit_positions"], [133, 2, 1, "", "get_component_from_id"], [133, 2, 1, "", "get_components_in_round"], [133, 2, 1, "", "get_current_component_id"], [133, 2, 1, "", "get_model"], [133, 2, 1, "", "get_number_of_components_in_round"], [133, 2, 1, "", "get_partial_cipher"], [133, 2, 1, "", "get_round_from_component_id"], [133, 2, 1, "", "get_sizes_of_components_by_type"], [133, 3, 1, "", "id"], [133, 2, 1, "", "impossible_differential_search"], [133, 3, 1, "", "inputs"], [133, 3, 1, "", "inputs_bit_size"], [133, 2, 1, "", "inputs_size_to_dict"], [133, 2, 1, "", "is_algebraically_secure"], [133, 2, 1, "", "is_andrx"], [133, 2, 1, "", "is_arx"], [133, 2, 1, "", "is_power_of_2_word_based"], [133, 2, 1, "", "is_shift_arx"], [133, 2, 1, "", "is_spn"], [133, 2, 1, "", "make_cipher_id"], [133, 2, 1, "", "make_file_name"], [133, 3, 1, "", "number_of_rounds"], [133, 3, 1, "", "output_bit_size"], [133, 2, 1, "", "polynomial_system"], [133, 2, 1, "", "polynomial_system_at_round"], [133, 2, 1, "", "print"], [133, 2, 1, "", "print_as_python_dictionary"], [133, 2, 1, "", "print_as_python_dictionary_to_file"], [133, 2, 1, "", "print_evaluation_python_code"], [133, 2, 1, "", "print_evaluation_python_code_to_file"], [133, 2, 1, "", "print_input_information"], [133, 3, 1, "", "reference_code"], [133, 2, 1, "", "remove_key_schedule"], [133, 2, 1, "", "remove_round_component"], [133, 2, 1, "", "remove_round_component_from_id"], [133, 3, 1, "", "rounds"], [133, 3, 1, "", "rounds_as_list"], [133, 2, 1, "", "set_file_name"], [133, 2, 1, "", "set_id"], [133, 2, 1, "", "set_inputs"], [133, 2, 1, "", "sort_cipher"], [133, 2, 1, "", "test_against_reference_code"], [133, 2, 1, "", "test_vector_check"], [133, 3, 1, "", "type"], [133, 2, 1, "", "update_input_id_links_from_component_id"], [133, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.threefish_block_cipher": [[134, 1, 1, "", "ThreefishBlockCipher"]], "ciphers.block_ciphers.threefish_block_cipher.ThreefishBlockCipher": [[134, 2, 1, "", "add_AND_component"], [134, 2, 1, "", "add_FSR_component"], [134, 2, 1, "", "add_MODADD_component"], [134, 2, 1, "", "add_MODSUB_component"], [134, 2, 1, "", "add_NOT_component"], [134, 2, 1, "", "add_OR_component"], [134, 2, 1, "", "add_SBOX_component"], [134, 2, 1, "", "add_SHIFT_component"], [134, 2, 1, "", "add_XOR_component"], [134, 2, 1, "", "add_cipher_output_component"], [134, 2, 1, "", "add_concatenate_component"], [134, 2, 1, "", "add_constant_component"], [134, 2, 1, "", "add_intermediate_output_component"], [134, 2, 1, "", "add_linear_layer_component"], [134, 2, 1, "", "add_mix_column_component"], [134, 2, 1, "", "add_permutation_component"], [134, 2, 1, "", "add_reverse_component"], [134, 2, 1, "", "add_rotate_component"], [134, 2, 1, "", "add_round"], [134, 2, 1, "", "add_round_key_output_component"], [134, 2, 1, "", "add_round_output_component"], [134, 2, 1, "", "add_shift_rows_component"], [134, 2, 1, "", "add_sigma_component"], [134, 2, 1, "", "add_subkey"], [134, 2, 1, "", "add_suffix_to_components"], [134, 2, 1, "", "add_theta_gaston_component"], [134, 2, 1, "", "add_theta_keccak_component"], [134, 2, 1, "", "add_theta_xoodoo_component"], [134, 2, 1, "", "add_variable_rotate_component"], [134, 2, 1, "", "add_variable_shift_component"], [134, 2, 1, "", "add_word_permutation_component"], [134, 2, 1, "", "as_python_dictionary"], [134, 2, 1, "", "cipher_inverse"], [134, 2, 1, "", "cipher_partial_inverse"], [134, 2, 1, "", "component_from"], [134, 2, 1, "", "convert_to_compound_xor_cipher"], [134, 2, 1, "", "create_networx_graph_from_input_ids"], [134, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [134, 3, 1, "", "current_round"], [134, 3, 1, "", "current_round_number"], [134, 3, 1, "", "current_round_number_of_components"], [134, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [134, 2, 1, "", "evaluate"], [134, 2, 1, "", "evaluate_using_c"], [134, 2, 1, "", "evaluate_vectorized"], [134, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [134, 3, 1, "", "family_name"], [134, 3, 1, "", "file_name"], [134, 2, 1, "", "find_impossible_property"], [134, 2, 1, "", "generate_bit_based_c_code"], [134, 2, 1, "", "generate_evaluate_c_code_shared_library"], [134, 2, 1, "", "generate_word_based_c_code"], [134, 2, 1, "", "get_all_components"], [134, 2, 1, "", "get_all_components_ids"], [134, 2, 1, "", "get_all_inputs_bit_positions"], [134, 2, 1, "", "get_component_from_id"], [134, 2, 1, "", "get_components_in_round"], [134, 2, 1, "", "get_current_component_id"], [134, 2, 1, "", "get_model"], [134, 2, 1, "", "get_number_of_components_in_round"], [134, 2, 1, "", "get_partial_cipher"], [134, 2, 1, "", "get_round_from_component_id"], [134, 2, 1, "", "get_sizes_of_components_by_type"], [134, 3, 1, "", "id"], [134, 2, 1, "", "impossible_differential_search"], [134, 3, 1, "", "inputs"], [134, 3, 1, "", "inputs_bit_size"], [134, 2, 1, "", "inputs_size_to_dict"], [134, 2, 1, "", "is_algebraically_secure"], [134, 2, 1, "", "is_andrx"], [134, 2, 1, "", "is_arx"], [134, 2, 1, "", "is_power_of_2_word_based"], [134, 2, 1, "", "is_shift_arx"], [134, 2, 1, "", "is_spn"], [134, 2, 1, "", "make_cipher_id"], [134, 2, 1, "", "make_file_name"], [134, 2, 1, "", "mix"], [134, 3, 1, "", "number_of_rounds"], [134, 3, 1, "", "output_bit_size"], [134, 2, 1, "", "polynomial_system"], [134, 2, 1, "", "polynomial_system_at_round"], [134, 2, 1, "", "print"], [134, 2, 1, "", "print_as_python_dictionary"], [134, 2, 1, "", "print_as_python_dictionary_to_file"], [134, 2, 1, "", "print_evaluation_python_code"], [134, 2, 1, "", "print_evaluation_python_code_to_file"], [134, 2, 1, "", "print_input_information"], [134, 3, 1, "", "reference_code"], [134, 2, 1, "", "remove_key_schedule"], [134, 2, 1, "", "remove_round_component"], [134, 2, 1, "", "remove_round_component_from_id"], [134, 3, 1, "", "rounds"], [134, 3, 1, "", "rounds_as_list"], [134, 2, 1, "", "set_file_name"], [134, 2, 1, "", "set_id"], [134, 2, 1, "", "set_inputs"], [134, 2, 1, "", "sort_cipher"], [134, 2, 1, "", "subkey_schedule"], [134, 2, 1, "", "test_against_reference_code"], [134, 2, 1, "", "test_vector_check"], [134, 3, 1, "", "type"], [134, 2, 1, "", "update_input_id_links_from_component_id"], [134, 2, 1, "", "word_permutation"], [134, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.twine_block_cipher": [[135, 1, 1, "", "TwineBlockCipher"], [135, 4, 1, "", "get_word_bit_indexes"]], "ciphers.block_ciphers.twine_block_cipher.TwineBlockCipher": [[135, 2, 1, "", "add_AND_component"], [135, 2, 1, "", "add_FSR_component"], [135, 2, 1, "", "add_MODADD_component"], [135, 2, 1, "", "add_MODSUB_component"], [135, 2, 1, "", "add_NOT_component"], [135, 2, 1, "", "add_OR_component"], [135, 2, 1, "", "add_SBOX_component"], [135, 2, 1, "", "add_SHIFT_component"], [135, 2, 1, "", "add_XOR_component"], [135, 2, 1, "", "add_cipher_output_component"], [135, 2, 1, "", "add_concatenate_component"], [135, 2, 1, "", "add_constant_component"], [135, 2, 1, "", "add_intermediate_output_component"], [135, 2, 1, "", "add_linear_layer_component"], [135, 2, 1, "", "add_mix_column_component"], [135, 2, 1, "", "add_permutation_component"], [135, 2, 1, "", "add_reverse_component"], [135, 2, 1, "", "add_rotate_component"], [135, 2, 1, "", "add_round"], [135, 2, 1, "", "add_round_key_output_component"], [135, 2, 1, "", "add_round_output_component"], [135, 2, 1, "", "add_shift_rows_component"], [135, 2, 1, "", "add_sigma_component"], [135, 2, 1, "", "add_suffix_to_components"], [135, 2, 1, "", "add_theta_gaston_component"], [135, 2, 1, "", "add_theta_keccak_component"], [135, 2, 1, "", "add_theta_xoodoo_component"], [135, 2, 1, "", "add_variable_rotate_component"], [135, 2, 1, "", "add_variable_shift_component"], [135, 2, 1, "", "add_word_permutation_component"], [135, 2, 1, "", "as_python_dictionary"], [135, 2, 1, "", "cipher_inverse"], [135, 2, 1, "", "cipher_partial_inverse"], [135, 2, 1, "", "component_from"], [135, 2, 1, "", "convert_to_compound_xor_cipher"], [135, 2, 1, "", "create_networx_graph_from_input_ids"], [135, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [135, 3, 1, "", "current_round"], [135, 3, 1, "", "current_round_number"], [135, 3, 1, "", "current_round_number_of_components"], [135, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [135, 2, 1, "", "evaluate"], [135, 2, 1, "", "evaluate_using_c"], [135, 2, 1, "", "evaluate_vectorized"], [135, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [135, 3, 1, "", "family_name"], [135, 3, 1, "", "file_name"], [135, 2, 1, "", "find_impossible_property"], [135, 2, 1, "", "generate_bit_based_c_code"], [135, 2, 1, "", "generate_evaluate_c_code_shared_library"], [135, 2, 1, "", "generate_word_based_c_code"], [135, 2, 1, "", "get_all_components"], [135, 2, 1, "", "get_all_components_ids"], [135, 2, 1, "", "get_all_inputs_bit_positions"], [135, 2, 1, "", "get_component_from_id"], [135, 2, 1, "", "get_components_in_round"], [135, 2, 1, "", "get_current_component_id"], [135, 2, 1, "", "get_model"], [135, 2, 1, "", "get_number_of_components_in_round"], [135, 2, 1, "", "get_partial_cipher"], [135, 2, 1, "", "get_round_from_component_id"], [135, 2, 1, "", "get_sizes_of_components_by_type"], [135, 3, 1, "", "id"], [135, 2, 1, "", "impossible_differential_search"], [135, 3, 1, "", "inputs"], [135, 3, 1, "", "inputs_bit_size"], [135, 2, 1, "", "inputs_size_to_dict"], [135, 2, 1, "", "is_algebraically_secure"], [135, 2, 1, "", "is_andrx"], [135, 2, 1, "", "is_arx"], [135, 2, 1, "", "is_power_of_2_word_based"], [135, 2, 1, "", "is_shift_arx"], [135, 2, 1, "", "is_spn"], [135, 2, 1, "", "make_cipher_id"], [135, 2, 1, "", "make_file_name"], [135, 3, 1, "", "number_of_rounds"], [135, 3, 1, "", "output_bit_size"], [135, 2, 1, "", "polynomial_system"], [135, 2, 1, "", "polynomial_system_at_round"], [135, 2, 1, "", "print"], [135, 2, 1, "", "print_as_python_dictionary"], [135, 2, 1, "", "print_as_python_dictionary_to_file"], [135, 2, 1, "", "print_evaluation_python_code"], [135, 2, 1, "", "print_evaluation_python_code_to_file"], [135, 2, 1, "", "print_input_information"], [135, 3, 1, "", "reference_code"], [135, 2, 1, "", "remove_key_schedule"], [135, 2, 1, "", "remove_round_component"], [135, 2, 1, "", "remove_round_component_from_id"], [135, 2, 1, "", "round_function"], [135, 3, 1, "", "rounds"], [135, 3, 1, "", "rounds_as_list"], [135, 2, 1, "", "set_file_name"], [135, 2, 1, "", "set_id"], [135, 2, 1, "", "set_inputs"], [135, 2, 1, "", "sort_cipher"], [135, 2, 1, "", "test_against_reference_code"], [135, 2, 1, "", "test_vector_check"], [135, 3, 1, "", "type"], [135, 2, 1, "", "update_input_id_links_from_component_id"], [135, 2, 1, "", "update_key"], [135, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.twofish_block_cipher": [[136, 1, 1, "", "TwofishBlockCipher"]], "ciphers.block_ciphers.twofish_block_cipher.TwofishBlockCipher": [[136, 2, 1, "", "add_AND_component"], [136, 2, 1, "", "add_FSR_component"], [136, 2, 1, "", "add_MODADD_component"], [136, 2, 1, "", "add_MODSUB_component"], [136, 2, 1, "", "add_NOT_component"], [136, 2, 1, "", "add_OR_component"], [136, 2, 1, "", "add_SBOX_component"], [136, 2, 1, "", "add_SHIFT_component"], [136, 2, 1, "", "add_XOR_component"], [136, 2, 1, "", "add_cipher_output_component"], [136, 2, 1, "", "add_concatenate_component"], [136, 2, 1, "", "add_constant_component"], [136, 2, 1, "", "add_intermediate_output_component"], [136, 2, 1, "", "add_linear_layer_component"], [136, 2, 1, "", "add_mix_column_component"], [136, 2, 1, "", "add_permutation_component"], [136, 2, 1, "", "add_reverse_component"], [136, 2, 1, "", "add_rotate_component"], [136, 2, 1, "", "add_round"], [136, 2, 1, "", "add_round_key_output_component"], [136, 2, 1, "", "add_round_output_component"], [136, 2, 1, "", "add_shift_rows_component"], [136, 2, 1, "", "add_sigma_component"], [136, 2, 1, "", "add_suffix_to_components"], [136, 2, 1, "", "add_theta_gaston_component"], [136, 2, 1, "", "add_theta_keccak_component"], [136, 2, 1, "", "add_theta_xoodoo_component"], [136, 2, 1, "", "add_variable_rotate_component"], [136, 2, 1, "", "add_variable_shift_component"], [136, 2, 1, "", "add_word_permutation_component"], [136, 2, 1, "", "as_python_dictionary"], [136, 2, 1, "", "cipher_inverse"], [136, 2, 1, "", "cipher_partial_inverse"], [136, 2, 1, "", "component_from"], [136, 2, 1, "", "convert_to_compound_xor_cipher"], [136, 2, 1, "", "create_networx_graph_from_input_ids"], [136, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [136, 3, 1, "", "current_round"], [136, 3, 1, "", "current_round_number"], [136, 3, 1, "", "current_round_number_of_components"], [136, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [136, 2, 1, "", "evaluate"], [136, 2, 1, "", "evaluate_using_c"], [136, 2, 1, "", "evaluate_vectorized"], [136, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [136, 3, 1, "", "family_name"], [136, 3, 1, "", "file_name"], [136, 2, 1, "", "find_impossible_property"], [136, 2, 1, "", "generate_bit_based_c_code"], [136, 2, 1, "", "generate_evaluate_c_code_shared_library"], [136, 2, 1, "", "generate_word_based_c_code"], [136, 2, 1, "", "get_all_components"], [136, 2, 1, "", "get_all_components_ids"], [136, 2, 1, "", "get_all_inputs_bit_positions"], [136, 2, 1, "", "get_component_from_id"], [136, 2, 1, "", "get_components_in_round"], [136, 2, 1, "", "get_current_component_id"], [136, 2, 1, "", "get_model"], [136, 2, 1, "", "get_number_of_components_in_round"], [136, 2, 1, "", "get_partial_cipher"], [136, 2, 1, "", "get_round_from_component_id"], [136, 2, 1, "", "get_sizes_of_components_by_type"], [136, 2, 1, "", "h_function"], [136, 3, 1, "", "id"], [136, 2, 1, "", "impossible_differential_search"], [136, 3, 1, "", "inputs"], [136, 3, 1, "", "inputs_bit_size"], [136, 2, 1, "", "inputs_size_to_dict"], [136, 2, 1, "", "is_algebraically_secure"], [136, 2, 1, "", "is_andrx"], [136, 2, 1, "", "is_arx"], [136, 2, 1, "", "is_power_of_2_word_based"], [136, 2, 1, "", "is_shift_arx"], [136, 2, 1, "", "is_spn"], [136, 2, 1, "", "make_cipher_id"], [136, 2, 1, "", "make_file_name"], [136, 3, 1, "", "number_of_rounds"], [136, 3, 1, "", "output_bit_size"], [136, 2, 1, "", "polynomial_system"], [136, 2, 1, "", "polynomial_system_at_round"], [136, 2, 1, "", "print"], [136, 2, 1, "", "print_as_python_dictionary"], [136, 2, 1, "", "print_as_python_dictionary_to_file"], [136, 2, 1, "", "print_evaluation_python_code"], [136, 2, 1, "", "print_evaluation_python_code_to_file"], [136, 2, 1, "", "print_input_information"], [136, 3, 1, "", "reference_code"], [136, 2, 1, "", "remove_key_schedule"], [136, 2, 1, "", "remove_round_component"], [136, 2, 1, "", "remove_round_component_from_id"], [136, 3, 1, "", "rounds"], [136, 3, 1, "", "rounds_as_list"], [136, 2, 1, "", "set_file_name"], [136, 2, 1, "", "set_id"], [136, 2, 1, "", "set_inputs"], [136, 2, 1, "", "sort_cipher"], [136, 2, 1, "", "test_against_reference_code"], [136, 2, 1, "", "test_vector_check"], [136, 3, 1, "", "type"], [136, 2, 1, "", "update_input_id_links_from_component_id"], [136, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.ublock_block_cipher": [[137, 1, 1, "", "UblockBlockCipher"]], "ciphers.block_ciphers.ublock_block_cipher.UblockBlockCipher": [[137, 2, 1, "", "add_AND_component"], [137, 2, 1, "", "add_FSR_component"], [137, 2, 1, "", "add_MODADD_component"], [137, 2, 1, "", "add_MODSUB_component"], [137, 2, 1, "", "add_NOT_component"], [137, 2, 1, "", "add_OR_component"], [137, 2, 1, "", "add_SBOX_component"], [137, 2, 1, "", "add_SHIFT_component"], [137, 2, 1, "", "add_XOR_component"], [137, 2, 1, "", "add_cipher_output_component"], [137, 2, 1, "", "add_concatenate_component"], [137, 2, 1, "", "add_constant_component"], [137, 2, 1, "", "add_intermediate_output_component"], [137, 2, 1, "", "add_linear_layer_component"], [137, 2, 1, "", "add_mix_column_component"], [137, 2, 1, "", "add_permutation_component"], [137, 2, 1, "", "add_reverse_component"], [137, 2, 1, "", "add_rotate_component"], [137, 2, 1, "", "add_round"], [137, 2, 1, "", "add_round_key_output_component"], [137, 2, 1, "", "add_round_output_component"], [137, 2, 1, "", "add_shift_rows_component"], [137, 2, 1, "", "add_sigma_component"], [137, 2, 1, "", "add_suffix_to_components"], [137, 2, 1, "", "add_theta_gaston_component"], [137, 2, 1, "", "add_theta_keccak_component"], [137, 2, 1, "", "add_theta_xoodoo_component"], [137, 2, 1, "", "add_variable_rotate_component"], [137, 2, 1, "", "add_variable_shift_component"], [137, 2, 1, "", "add_word_permutation_component"], [137, 2, 1, "", "as_python_dictionary"], [137, 2, 1, "", "check_parameters"], [137, 2, 1, "", "cipher_inverse"], [137, 2, 1, "", "cipher_partial_inverse"], [137, 2, 1, "", "component_from"], [137, 2, 1, "", "convert_to_compound_xor_cipher"], [137, 2, 1, "", "create_networx_graph_from_input_ids"], [137, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [137, 3, 1, "", "current_round"], [137, 3, 1, "", "current_round_number"], [137, 3, 1, "", "current_round_number_of_components"], [137, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [137, 2, 1, "", "evaluate"], [137, 2, 1, "", "evaluate_using_c"], [137, 2, 1, "", "evaluate_vectorized"], [137, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [137, 3, 1, "", "family_name"], [137, 3, 1, "", "file_name"], [137, 2, 1, "", "find_impossible_property"], [137, 2, 1, "", "generate_bit_based_c_code"], [137, 2, 1, "", "generate_evaluate_c_code_shared_library"], [137, 2, 1, "", "generate_word_based_c_code"], [137, 2, 1, "", "get_all_components"], [137, 2, 1, "", "get_all_components_ids"], [137, 2, 1, "", "get_all_inputs_bit_positions"], [137, 2, 1, "", "get_component_from_id"], [137, 2, 1, "", "get_components_in_round"], [137, 2, 1, "", "get_current_component_id"], [137, 2, 1, "", "get_model"], [137, 2, 1, "", "get_number_of_components_in_round"], [137, 2, 1, "", "get_partial_cipher"], [137, 2, 1, "", "get_round_from_component_id"], [137, 2, 1, "", "get_sizes_of_components_by_type"], [137, 3, 1, "", "id"], [137, 2, 1, "", "impossible_differential_search"], [137, 3, 1, "", "inputs"], [137, 3, 1, "", "inputs_bit_size"], [137, 2, 1, "", "inputs_size_to_dict"], [137, 2, 1, "", "is_algebraically_secure"], [137, 2, 1, "", "is_andrx"], [137, 2, 1, "", "is_arx"], [137, 2, 1, "", "is_power_of_2_word_based"], [137, 2, 1, "", "is_shift_arx"], [137, 2, 1, "", "is_spn"], [137, 2, 1, "", "key_schedule"], [137, 2, 1, "", "make_cipher_id"], [137, 2, 1, "", "make_file_name"], [137, 3, 1, "", "number_of_rounds"], [137, 3, 1, "", "output_bit_size"], [137, 2, 1, "", "polynomial_system"], [137, 2, 1, "", "polynomial_system_at_round"], [137, 2, 1, "", "print"], [137, 2, 1, "", "print_as_python_dictionary"], [137, 2, 1, "", "print_as_python_dictionary_to_file"], [137, 2, 1, "", "print_evaluation_python_code"], [137, 2, 1, "", "print_evaluation_python_code_to_file"], [137, 2, 1, "", "print_input_information"], [137, 3, 1, "", "reference_code"], [137, 2, 1, "", "remove_key_schedule"], [137, 2, 1, "", "remove_round_component"], [137, 2, 1, "", "remove_round_component_from_id"], [137, 2, 1, "", "round_function"], [137, 2, 1, "", "round_initialization"], [137, 3, 1, "", "rounds"], [137, 3, 1, "", "rounds_as_list"], [137, 2, 1, "", "set_file_name"], [137, 2, 1, "", "set_id"], [137, 2, 1, "", "set_inputs"], [137, 2, 1, "", "sort_cipher"], [137, 2, 1, "", "test_against_reference_code"], [137, 2, 1, "", "test_vector_check"], [137, 3, 1, "", "type"], [137, 2, 1, "", "update_input_id_links_from_component_id"], [137, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.block_ciphers.xtea_block_cipher": [[138, 1, 1, "", "XTeaBlockCipher"]], "ciphers.block_ciphers.xtea_block_cipher.XTeaBlockCipher": [[138, 2, 1, "", "add_AND_component"], [138, 2, 1, "", "add_FSR_component"], [138, 2, 1, "", "add_MODADD_component"], [138, 2, 1, "", "add_MODSUB_component"], [138, 2, 1, "", "add_NOT_component"], [138, 2, 1, "", "add_OR_component"], [138, 2, 1, "", "add_SBOX_component"], [138, 2, 1, "", "add_SHIFT_component"], [138, 2, 1, "", "add_XOR_component"], [138, 2, 1, "", "add_cipher_output_component"], [138, 2, 1, "", "add_concatenate_component"], [138, 2, 1, "", "add_constant_component"], [138, 2, 1, "", "add_intermediate_output_component"], [138, 2, 1, "", "add_linear_layer_component"], [138, 2, 1, "", "add_mix_column_component"], [138, 2, 1, "", "add_permutation_component"], [138, 2, 1, "", "add_reverse_component"], [138, 2, 1, "", "add_rotate_component"], [138, 2, 1, "", "add_round"], [138, 2, 1, "", "add_round_key_output_component"], [138, 2, 1, "", "add_round_output_component"], [138, 2, 1, "", "add_shift_rows_component"], [138, 2, 1, "", "add_sigma_component"], [138, 2, 1, "", "add_suffix_to_components"], [138, 2, 1, "", "add_theta_gaston_component"], [138, 2, 1, "", "add_theta_keccak_component"], [138, 2, 1, "", "add_theta_xoodoo_component"], [138, 2, 1, "", "add_variable_rotate_component"], [138, 2, 1, "", "add_variable_shift_component"], [138, 2, 1, "", "add_word_permutation_component"], [138, 2, 1, "", "as_python_dictionary"], [138, 2, 1, "", "cipher_inverse"], [138, 2, 1, "", "cipher_partial_inverse"], [138, 2, 1, "", "component_from"], [138, 2, 1, "", "convert_to_compound_xor_cipher"], [138, 2, 1, "", "create_networx_graph_from_input_ids"], [138, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [138, 3, 1, "", "current_round"], [138, 3, 1, "", "current_round_number"], [138, 3, 1, "", "current_round_number_of_components"], [138, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [138, 2, 1, "", "evaluate"], [138, 2, 1, "", "evaluate_using_c"], [138, 2, 1, "", "evaluate_vectorized"], [138, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [138, 3, 1, "", "family_name"], [138, 3, 1, "", "file_name"], [138, 2, 1, "", "find_impossible_property"], [138, 2, 1, "", "generate_bit_based_c_code"], [138, 2, 1, "", "generate_evaluate_c_code_shared_library"], [138, 2, 1, "", "generate_word_based_c_code"], [138, 2, 1, "", "get_all_components"], [138, 2, 1, "", "get_all_components_ids"], [138, 2, 1, "", "get_all_inputs_bit_positions"], [138, 2, 1, "", "get_component_from_id"], [138, 2, 1, "", "get_components_in_round"], [138, 2, 1, "", "get_current_component_id"], [138, 2, 1, "", "get_model"], [138, 2, 1, "", "get_number_of_components_in_round"], [138, 2, 1, "", "get_partial_cipher"], [138, 2, 1, "", "get_round_from_component_id"], [138, 2, 1, "", "get_sizes_of_components_by_type"], [138, 3, 1, "", "id"], [138, 2, 1, "", "impossible_differential_search"], [138, 3, 1, "", "inputs"], [138, 3, 1, "", "inputs_bit_size"], [138, 2, 1, "", "inputs_size_to_dict"], [138, 2, 1, "", "is_algebraically_secure"], [138, 2, 1, "", "is_andrx"], [138, 2, 1, "", "is_arx"], [138, 2, 1, "", "is_power_of_2_word_based"], [138, 2, 1, "", "is_shift_arx"], [138, 2, 1, "", "is_spn"], [138, 2, 1, "", "make_cipher_id"], [138, 2, 1, "", "make_file_name"], [138, 3, 1, "", "number_of_rounds"], [138, 3, 1, "", "output_bit_size"], [138, 2, 1, "", "polynomial_system"], [138, 2, 1, "", "polynomial_system_at_round"], [138, 2, 1, "", "print"], [138, 2, 1, "", "print_as_python_dictionary"], [138, 2, 1, "", "print_as_python_dictionary_to_file"], [138, 2, 1, "", "print_evaluation_python_code"], [138, 2, 1, "", "print_evaluation_python_code_to_file"], [138, 2, 1, "", "print_input_information"], [138, 3, 1, "", "reference_code"], [138, 2, 1, "", "remove_key_schedule"], [138, 2, 1, "", "remove_round_component"], [138, 2, 1, "", "remove_round_component_from_id"], [138, 3, 1, "", "rounds"], [138, 3, 1, "", "rounds_as_list"], [138, 2, 1, "", "set_file_name"], [138, 2, 1, "", "set_id"], [138, 2, 1, "", "set_inputs"], [138, 2, 1, "", "sort_cipher"], [138, 2, 1, "", "test_against_reference_code"], [138, 2, 1, "", "test_vector_check"], [138, 3, 1, "", "type"], [138, 2, 1, "", "update_input_id_links_from_component_id"], [138, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions": [[139, 0, 0, "-", "blake2_hash_function"], [140, 0, 0, "-", "blake_hash_function"], [141, 0, 0, "-", "md5_hash_function"], [142, 0, 0, "-", "sha1_hash_function"], [143, 0, 0, "-", "sha2_hash_function"], [144, 0, 0, "-", "whirlpool_hash_function"]], "ciphers.hash_functions.blake2_hash_function": [[139, 1, 1, "", "Blake2HashFunction"]], "ciphers.hash_functions.blake2_hash_function.Blake2HashFunction": [[139, 2, 1, "", "add_AND_component"], [139, 2, 1, "", "add_FSR_component"], [139, 2, 1, "", "add_MODADD_component"], [139, 2, 1, "", "add_MODSUB_component"], [139, 2, 1, "", "add_NOT_component"], [139, 2, 1, "", "add_OR_component"], [139, 2, 1, "", "add_SBOX_component"], [139, 2, 1, "", "add_SHIFT_component"], [139, 2, 1, "", "add_XOR_component"], [139, 2, 1, "", "add_cipher_output_component"], [139, 2, 1, "", "add_concatenate_component"], [139, 2, 1, "", "add_constant_component"], [139, 2, 1, "", "add_intermediate_output_component"], [139, 2, 1, "", "add_linear_layer_component"], [139, 2, 1, "", "add_mix_column_component"], [139, 2, 1, "", "add_permutation_component"], [139, 2, 1, "", "add_reverse_component"], [139, 2, 1, "", "add_rotate_component"], [139, 2, 1, "", "add_round"], [139, 2, 1, "", "add_round_key_output_component"], [139, 2, 1, "", "add_round_output_component"], [139, 2, 1, "", "add_shift_rows_component"], [139, 2, 1, "", "add_sigma_component"], [139, 2, 1, "", "add_suffix_to_components"], [139, 2, 1, "", "add_theta_gaston_component"], [139, 2, 1, "", "add_theta_keccak_component"], [139, 2, 1, "", "add_theta_xoodoo_component"], [139, 2, 1, "", "add_variable_rotate_component"], [139, 2, 1, "", "add_variable_shift_component"], [139, 2, 1, "", "add_word_permutation_component"], [139, 2, 1, "", "as_python_dictionary"], [139, 2, 1, "", "cipher_inverse"], [139, 2, 1, "", "cipher_partial_inverse"], [139, 2, 1, "", "column_step"], [139, 2, 1, "", "component_from"], [139, 2, 1, "", "convert_to_compound_xor_cipher"], [139, 2, 1, "", "create_networx_graph_from_input_ids"], [139, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [139, 3, 1, "", "current_round"], [139, 3, 1, "", "current_round_number"], [139, 3, 1, "", "current_round_number_of_components"], [139, 2, 1, "", "define_number_of_rounds"], [139, 2, 1, "", "define_permutations"], [139, 2, 1, "", "define_rotation_amounts"], [139, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [139, 2, 1, "", "diagonal_step"], [139, 2, 1, "", "evaluate"], [139, 2, 1, "", "evaluate_using_c"], [139, 2, 1, "", "evaluate_vectorized"], [139, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [139, 3, 1, "", "family_name"], [139, 3, 1, "", "file_name"], [139, 2, 1, "", "find_impossible_property"], [139, 2, 1, "", "generate_bit_based_c_code"], [139, 2, 1, "", "generate_evaluate_c_code_shared_library"], [139, 2, 1, "", "generate_word_based_c_code"], [139, 2, 1, "", "get_all_components"], [139, 2, 1, "", "get_all_components_ids"], [139, 2, 1, "", "get_all_inputs_bit_positions"], [139, 2, 1, "", "get_component_from_id"], [139, 2, 1, "", "get_components_in_round"], [139, 2, 1, "", "get_current_component_id"], [139, 2, 1, "", "get_model"], [139, 2, 1, "", "get_number_of_components_in_round"], [139, 2, 1, "", "get_partial_cipher"], [139, 2, 1, "", "get_round_from_component_id"], [139, 2, 1, "", "get_sizes_of_components_by_type"], [139, 3, 1, "", "id"], [139, 2, 1, "", "impossible_differential_search"], [139, 3, 1, "", "inputs"], [139, 3, 1, "", "inputs_bit_size"], [139, 2, 1, "", "inputs_size_to_dict"], [139, 2, 1, "", "is_algebraically_secure"], [139, 2, 1, "", "is_andrx"], [139, 2, 1, "", "is_arx"], [139, 2, 1, "", "is_power_of_2_word_based"], [139, 2, 1, "", "is_shift_arx"], [139, 2, 1, "", "is_spn"], [139, 2, 1, "", "make_cipher_id"], [139, 2, 1, "", "make_file_name"], [139, 3, 1, "", "number_of_rounds"], [139, 3, 1, "", "output_bit_size"], [139, 2, 1, "", "polynomial_system"], [139, 2, 1, "", "polynomial_system_at_round"], [139, 2, 1, "", "print"], [139, 2, 1, "", "print_as_python_dictionary"], [139, 2, 1, "", "print_as_python_dictionary_to_file"], [139, 2, 1, "", "print_evaluation_python_code"], [139, 2, 1, "", "print_evaluation_python_code_to_file"], [139, 2, 1, "", "print_input_information"], [139, 3, 1, "", "reference_code"], [139, 2, 1, "", "remove_key_schedule"], [139, 2, 1, "", "remove_round_component"], [139, 2, 1, "", "remove_round_component_from_id"], [139, 3, 1, "", "rounds"], [139, 3, 1, "", "rounds_as_list"], [139, 2, 1, "", "set_file_name"], [139, 2, 1, "", "set_id"], [139, 2, 1, "", "set_inputs"], [139, 2, 1, "", "sort_cipher"], [139, 2, 1, "", "state_transformation"], [139, 2, 1, "", "test_against_reference_code"], [139, 2, 1, "", "test_vector_check"], [139, 3, 1, "", "type"], [139, 2, 1, "", "update_input_id_links_from_component_id"], [139, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions.blake_hash_function": [[140, 1, 1, "", "BlakeHashFunction"]], "ciphers.hash_functions.blake_hash_function.BlakeHashFunction": [[140, 2, 1, "", "add_AND_component"], [140, 2, 1, "", "add_FSR_component"], [140, 2, 1, "", "add_MODADD_component"], [140, 2, 1, "", "add_MODSUB_component"], [140, 2, 1, "", "add_NOT_component"], [140, 2, 1, "", "add_OR_component"], [140, 2, 1, "", "add_SBOX_component"], [140, 2, 1, "", "add_SHIFT_component"], [140, 2, 1, "", "add_XOR_component"], [140, 2, 1, "", "add_cipher_output_component"], [140, 2, 1, "", "add_concatenate_component"], [140, 2, 1, "", "add_constant_component"], [140, 2, 1, "", "add_intermediate_output_component"], [140, 2, 1, "", "add_linear_layer_component"], [140, 2, 1, "", "add_mix_column_component"], [140, 2, 1, "", "add_permutation_component"], [140, 2, 1, "", "add_reverse_component"], [140, 2, 1, "", "add_rotate_component"], [140, 2, 1, "", "add_round"], [140, 2, 1, "", "add_round_key_output_component"], [140, 2, 1, "", "add_round_output_component"], [140, 2, 1, "", "add_shift_rows_component"], [140, 2, 1, "", "add_sigma_component"], [140, 2, 1, "", "add_suffix_to_components"], [140, 2, 1, "", "add_theta_gaston_component"], [140, 2, 1, "", "add_theta_keccak_component"], [140, 2, 1, "", "add_theta_xoodoo_component"], [140, 2, 1, "", "add_variable_rotate_component"], [140, 2, 1, "", "add_variable_shift_component"], [140, 2, 1, "", "add_word_permutation_component"], [140, 2, 1, "", "as_python_dictionary"], [140, 2, 1, "", "cipher_inverse"], [140, 2, 1, "", "cipher_partial_inverse"], [140, 2, 1, "", "column_step"], [140, 2, 1, "", "component_from"], [140, 2, 1, "", "convert_to_compound_xor_cipher"], [140, 2, 1, "", "create_networx_graph_from_input_ids"], [140, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [140, 3, 1, "", "current_round"], [140, 3, 1, "", "current_round_number"], [140, 3, 1, "", "current_round_number_of_components"], [140, 2, 1, "", "define_constants"], [140, 2, 1, "", "define_number_of_rounds"], [140, 2, 1, "", "define_permutations"], [140, 2, 1, "", "define_rotation_amounts"], [140, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [140, 2, 1, "", "diagonal_step"], [140, 2, 1, "", "evaluate"], [140, 2, 1, "", "evaluate_using_c"], [140, 2, 1, "", "evaluate_vectorized"], [140, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [140, 3, 1, "", "family_name"], [140, 3, 1, "", "file_name"], [140, 2, 1, "", "find_impossible_property"], [140, 2, 1, "", "generate_bit_based_c_code"], [140, 2, 1, "", "generate_evaluate_c_code_shared_library"], [140, 2, 1, "", "generate_word_based_c_code"], [140, 2, 1, "", "get_all_components"], [140, 2, 1, "", "get_all_components_ids"], [140, 2, 1, "", "get_all_inputs_bit_positions"], [140, 2, 1, "", "get_component_from_id"], [140, 2, 1, "", "get_components_in_round"], [140, 2, 1, "", "get_current_component_id"], [140, 2, 1, "", "get_model"], [140, 2, 1, "", "get_number_of_components_in_round"], [140, 2, 1, "", "get_partial_cipher"], [140, 2, 1, "", "get_round_from_component_id"], [140, 2, 1, "", "get_sizes_of_components_by_type"], [140, 3, 1, "", "id"], [140, 2, 1, "", "impossible_differential_search"], [140, 3, 1, "", "inputs"], [140, 3, 1, "", "inputs_bit_size"], [140, 2, 1, "", "inputs_size_to_dict"], [140, 2, 1, "", "is_algebraically_secure"], [140, 2, 1, "", "is_andrx"], [140, 2, 1, "", "is_arx"], [140, 2, 1, "", "is_power_of_2_word_based"], [140, 2, 1, "", "is_shift_arx"], [140, 2, 1, "", "is_spn"], [140, 2, 1, "", "make_cipher_id"], [140, 2, 1, "", "make_file_name"], [140, 3, 1, "", "number_of_rounds"], [140, 3, 1, "", "output_bit_size"], [140, 2, 1, "", "polynomial_system"], [140, 2, 1, "", "polynomial_system_at_round"], [140, 2, 1, "", "print"], [140, 2, 1, "", "print_as_python_dictionary"], [140, 2, 1, "", "print_as_python_dictionary_to_file"], [140, 2, 1, "", "print_evaluation_python_code"], [140, 2, 1, "", "print_evaluation_python_code_to_file"], [140, 2, 1, "", "print_input_information"], [140, 3, 1, "", "reference_code"], [140, 2, 1, "", "remove_key_schedule"], [140, 2, 1, "", "remove_round_component"], [140, 2, 1, "", "remove_round_component_from_id"], [140, 3, 1, "", "rounds"], [140, 3, 1, "", "rounds_as_list"], [140, 2, 1, "", "set_file_name"], [140, 2, 1, "", "set_id"], [140, 2, 1, "", "set_inputs"], [140, 2, 1, "", "sort_cipher"], [140, 2, 1, "", "state_transformation"], [140, 2, 1, "", "test_against_reference_code"], [140, 2, 1, "", "test_vector_check"], [140, 3, 1, "", "type"], [140, 2, 1, "", "update_input_id_links_from_component_id"], [140, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions.md5_hash_function": [[141, 1, 1, "", "MD5HashFunction"]], "ciphers.hash_functions.md5_hash_function.MD5HashFunction": [[141, 2, 1, "", "F"], [141, 2, 1, "", "G"], [141, 2, 1, "", "H"], [141, 2, 1, "", "I"], [141, 2, 1, "", "add_AND_component"], [141, 2, 1, "", "add_FSR_component"], [141, 2, 1, "", "add_MODADD_component"], [141, 2, 1, "", "add_MODSUB_component"], [141, 2, 1, "", "add_NOT_component"], [141, 2, 1, "", "add_OR_component"], [141, 2, 1, "", "add_SBOX_component"], [141, 2, 1, "", "add_SHIFT_component"], [141, 2, 1, "", "add_XOR_component"], [141, 2, 1, "", "add_and_component_in_md5"], [141, 2, 1, "", "add_cipher_output_component"], [141, 2, 1, "", "add_concatenate_component"], [141, 2, 1, "", "add_constant_component"], [141, 2, 1, "", "add_intermediate_output_component"], [141, 2, 1, "", "add_linear_layer_component"], [141, 2, 1, "", "add_mix_column_component"], [141, 2, 1, "", "add_modadd_component_in_md5"], [141, 2, 1, "", "add_modadd_component_in_md5_for_x"], [141, 2, 1, "", "add_not_component_in_md5"], [141, 2, 1, "", "add_or_component_in_md5"], [141, 2, 1, "", "add_permutation_component"], [141, 2, 1, "", "add_reverse_component"], [141, 2, 1, "", "add_rotate_component"], [141, 2, 1, "", "add_rotate_component_in_md5"], [141, 2, 1, "", "add_round"], [141, 2, 1, "", "add_round_key_output_component"], [141, 2, 1, "", "add_round_output_component"], [141, 2, 1, "", "add_round_output_component_in_md5"], [141, 2, 1, "", "add_shift_rows_component"], [141, 2, 1, "", "add_sigma_component"], [141, 2, 1, "", "add_suffix_to_components"], [141, 2, 1, "", "add_theta_gaston_component"], [141, 2, 1, "", "add_theta_keccak_component"], [141, 2, 1, "", "add_theta_xoodoo_component"], [141, 2, 1, "", "add_variable_rotate_component"], [141, 2, 1, "", "add_variable_shift_component"], [141, 2, 1, "", "add_word_permutation_component"], [141, 2, 1, "", "add_xor_component_in_md5"], [141, 2, 1, "", "as_python_dictionary"], [141, 2, 1, "", "cipher_inverse"], [141, 2, 1, "", "cipher_partial_inverse"], [141, 2, 1, "", "component_from"], [141, 2, 1, "", "convert_to_compound_xor_cipher"], [141, 2, 1, "", "create_networx_graph_from_input_ids"], [141, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [141, 3, 1, "", "current_round"], [141, 3, 1, "", "current_round_number"], [141, 3, 1, "", "current_round_number_of_components"], [141, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [141, 2, 1, "", "evaluate"], [141, 2, 1, "", "evaluate_using_c"], [141, 2, 1, "", "evaluate_vectorized"], [141, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [141, 3, 1, "", "family_name"], [141, 3, 1, "", "file_name"], [141, 2, 1, "", "find_impossible_property"], [141, 2, 1, "", "generate_bit_based_c_code"], [141, 2, 1, "", "generate_evaluate_c_code_shared_library"], [141, 2, 1, "", "generate_word_based_c_code"], [141, 2, 1, "", "get_all_components"], [141, 2, 1, "", "get_all_components_ids"], [141, 2, 1, "", "get_all_inputs_bit_positions"], [141, 2, 1, "", "get_component_from_id"], [141, 2, 1, "", "get_components_in_round"], [141, 2, 1, "", "get_current_component_id"], [141, 2, 1, "", "get_model"], [141, 2, 1, "", "get_number_of_components_in_round"], [141, 2, 1, "", "get_partial_cipher"], [141, 2, 1, "", "get_round_from_component_id"], [141, 2, 1, "", "get_sizes_of_components_by_type"], [141, 3, 1, "", "id"], [141, 2, 1, "", "impossible_differential_search"], [141, 3, 1, "", "inputs"], [141, 3, 1, "", "inputs_bit_size"], [141, 2, 1, "", "inputs_size_to_dict"], [141, 2, 1, "", "is_algebraically_secure"], [141, 2, 1, "", "is_andrx"], [141, 2, 1, "", "is_arx"], [141, 2, 1, "", "is_power_of_2_word_based"], [141, 2, 1, "", "is_shift_arx"], [141, 2, 1, "", "is_spn"], [141, 2, 1, "", "make_cipher_id"], [141, 2, 1, "", "make_file_name"], [141, 2, 1, "", "md5_step"], [141, 3, 1, "", "number_of_rounds"], [141, 3, 1, "", "output_bit_size"], [141, 2, 1, "", "polynomial_system"], [141, 2, 1, "", "polynomial_system_at_round"], [141, 2, 1, "", "print"], [141, 2, 1, "", "print_as_python_dictionary"], [141, 2, 1, "", "print_as_python_dictionary_to_file"], [141, 2, 1, "", "print_evaluation_python_code"], [141, 2, 1, "", "print_evaluation_python_code_to_file"], [141, 2, 1, "", "print_input_information"], [141, 3, 1, "", "reference_code"], [141, 2, 1, "", "remove_key_schedule"], [141, 2, 1, "", "remove_round_component"], [141, 2, 1, "", "remove_round_component_from_id"], [141, 3, 1, "", "rounds"], [141, 3, 1, "", "rounds_as_list"], [141, 2, 1, "", "set_file_name"], [141, 2, 1, "", "set_id"], [141, 2, 1, "", "set_inputs"], [141, 2, 1, "", "sort_cipher"], [141, 2, 1, "", "test_against_reference_code"], [141, 2, 1, "", "test_vector_check"], [141, 3, 1, "", "type"], [141, 2, 1, "", "update_input_id_links_from_component_id"], [141, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions.sha1_hash_function": [[142, 1, 1, "", "SHA1HashFunction"]], "ciphers.hash_functions.sha1_hash_function.SHA1HashFunction": [[142, 2, 1, "", "add_AND_component"], [142, 2, 1, "", "add_FSR_component"], [142, 2, 1, "", "add_MODADD_component"], [142, 2, 1, "", "add_MODSUB_component"], [142, 2, 1, "", "add_NOT_component"], [142, 2, 1, "", "add_OR_component"], [142, 2, 1, "", "add_SBOX_component"], [142, 2, 1, "", "add_SHIFT_component"], [142, 2, 1, "", "add_XOR_component"], [142, 2, 1, "", "add_and_component_in_sha1"], [142, 2, 1, "", "add_cipher_output_component"], [142, 2, 1, "", "add_concatenate_component"], [142, 2, 1, "", "add_constant_component"], [142, 2, 1, "", "add_intermediate_output_component"], [142, 2, 1, "", "add_linear_layer_component"], [142, 2, 1, "", "add_mix_column_component"], [142, 2, 1, "", "add_modadd_component_in_sha1"], [142, 2, 1, "", "add_permutation_component"], [142, 2, 1, "", "add_reverse_component"], [142, 2, 1, "", "add_rotate_component"], [142, 2, 1, "", "add_rotate_component_in_sha1"], [142, 2, 1, "", "add_round"], [142, 2, 1, "", "add_round_key_output_component"], [142, 2, 1, "", "add_round_output_component"], [142, 2, 1, "", "add_round_output_component_in_sha1"], [142, 2, 1, "", "add_shift_rows_component"], [142, 2, 1, "", "add_sigma_component"], [142, 2, 1, "", "add_suffix_to_components"], [142, 2, 1, "", "add_theta_gaston_component"], [142, 2, 1, "", "add_theta_keccak_component"], [142, 2, 1, "", "add_theta_xoodoo_component"], [142, 2, 1, "", "add_variable_rotate_component"], [142, 2, 1, "", "add_variable_shift_component"], [142, 2, 1, "", "add_word_permutation_component"], [142, 2, 1, "", "as_python_dictionary"], [142, 2, 1, "", "cipher_inverse"], [142, 2, 1, "", "cipher_partial_inverse"], [142, 2, 1, "", "component_from"], [142, 2, 1, "", "compute_temp_and_s_30_b"], [142, 2, 1, "", "convert_to_compound_xor_cipher"], [142, 2, 1, "", "create_networx_graph_from_input_ids"], [142, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [142, 3, 1, "", "current_round"], [142, 3, 1, "", "current_round_number"], [142, 3, 1, "", "current_round_number_of_components"], [142, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [142, 2, 1, "", "evaluate"], [142, 2, 1, "", "evaluate_using_c"], [142, 2, 1, "", "evaluate_vectorized"], [142, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [142, 3, 1, "", "family_name"], [142, 3, 1, "", "file_name"], [142, 2, 1, "", "find_impossible_property"], [142, 2, 1, "", "generate_bit_based_c_code"], [142, 2, 1, "", "generate_evaluate_c_code_shared_library"], [142, 2, 1, "", "generate_word_based_c_code"], [142, 2, 1, "", "get_all_components"], [142, 2, 1, "", "get_all_components_ids"], [142, 2, 1, "", "get_all_inputs_bit_positions"], [142, 2, 1, "", "get_component_from_id"], [142, 2, 1, "", "get_components_in_round"], [142, 2, 1, "", "get_current_component_id"], [142, 2, 1, "", "get_model"], [142, 2, 1, "", "get_number_of_components_in_round"], [142, 2, 1, "", "get_partial_cipher"], [142, 2, 1, "", "get_round_from_component_id"], [142, 2, 1, "", "get_sizes_of_components_by_type"], [142, 3, 1, "", "id"], [142, 2, 1, "", "impossible_differential_search"], [142, 3, 1, "", "inputs"], [142, 3, 1, "", "inputs_bit_size"], [142, 2, 1, "", "inputs_size_to_dict"], [142, 2, 1, "", "is_algebraically_secure"], [142, 2, 1, "", "is_andrx"], [142, 2, 1, "", "is_arx"], [142, 2, 1, "", "is_power_of_2_word_based"], [142, 2, 1, "", "is_shift_arx"], [142, 2, 1, "", "is_spn"], [142, 2, 1, "", "make_cipher_id"], [142, 2, 1, "", "make_file_name"], [142, 3, 1, "", "number_of_rounds"], [142, 3, 1, "", "output_bit_size"], [142, 2, 1, "", "polynomial_system"], [142, 2, 1, "", "polynomial_system_at_round"], [142, 2, 1, "", "print"], [142, 2, 1, "", "print_as_python_dictionary"], [142, 2, 1, "", "print_as_python_dictionary_to_file"], [142, 2, 1, "", "print_evaluation_python_code"], [142, 2, 1, "", "print_evaluation_python_code_to_file"], [142, 2, 1, "", "print_input_information"], [142, 3, 1, "", "reference_code"], [142, 2, 1, "", "remove_key_schedule"], [142, 2, 1, "", "remove_round_component"], [142, 2, 1, "", "remove_round_component_from_id"], [142, 3, 1, "", "rounds"], [142, 2, 1, "", "rounds_0_19"], [142, 2, 1, "", "rounds_20_39"], [142, 2, 1, "", "rounds_40_59"], [142, 3, 1, "", "rounds_as_list"], [142, 2, 1, "", "schedule"], [142, 2, 1, "", "set_file_name"], [142, 2, 1, "", "set_id"], [142, 2, 1, "", "set_inputs"], [142, 2, 1, "", "sort_cipher"], [142, 2, 1, "", "test_against_reference_code"], [142, 2, 1, "", "test_vector_check"], [142, 3, 1, "", "type"], [142, 2, 1, "", "update_input_id_links_from_component_id"], [142, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions.sha2_hash_function": [[143, 1, 1, "", "SHA2HashFunction"]], "ciphers.hash_functions.sha2_hash_function.SHA2HashFunction": [[143, 2, 1, "", "add_AND_component"], [143, 2, 1, "", "add_FSR_component"], [143, 2, 1, "", "add_MODADD_component"], [143, 2, 1, "", "add_MODSUB_component"], [143, 2, 1, "", "add_NOT_component"], [143, 2, 1, "", "add_OR_component"], [143, 2, 1, "", "add_SBOX_component"], [143, 2, 1, "", "add_SHIFT_component"], [143, 2, 1, "", "add_XOR_component"], [143, 2, 1, "", "add_and_component_sha2"], [143, 2, 1, "", "add_cipher_output_component"], [143, 2, 1, "", "add_concatenate_component"], [143, 2, 1, "", "add_constant_component"], [143, 2, 1, "", "add_intermediate_output_component"], [143, 2, 1, "", "add_linear_layer_component"], [143, 2, 1, "", "add_mix_column_component"], [143, 2, 1, "", "add_modadd_component_sha2"], [143, 2, 1, "", "add_permutation_component"], [143, 2, 1, "", "add_reverse_component"], [143, 2, 1, "", "add_rotate_component"], [143, 2, 1, "", "add_rotate_component_sha2"], [143, 2, 1, "", "add_round"], [143, 2, 1, "", "add_round_key_output_component"], [143, 2, 1, "", "add_round_output_component"], [143, 2, 1, "", "add_round_output_component_sha2"], [143, 2, 1, "", "add_shift_rows_component"], [143, 2, 1, "", "add_sigma_component"], [143, 2, 1, "", "add_suffix_to_components"], [143, 2, 1, "", "add_theta_gaston_component"], [143, 2, 1, "", "add_theta_keccak_component"], [143, 2, 1, "", "add_theta_xoodoo_component"], [143, 2, 1, "", "add_variable_rotate_component"], [143, 2, 1, "", "add_variable_shift_component"], [143, 2, 1, "", "add_word_permutation_component"], [143, 2, 1, "", "add_xor_component_sha2"], [143, 2, 1, "", "as_python_dictionary"], [143, 2, 1, "", "cipher_inverse"], [143, 2, 1, "", "cipher_partial_inverse"], [143, 2, 1, "", "component_from"], [143, 2, 1, "", "compute_bsig0_bsig1"], [143, 2, 1, "", "compute_ch"], [143, 2, 1, "", "compute_maj"], [143, 2, 1, "", "compute_ssig0_ssig1"], [143, 2, 1, "", "convert_to_compound_xor_cipher"], [143, 2, 1, "", "create_networx_graph_from_input_ids"], [143, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [143, 3, 1, "", "current_round"], [143, 3, 1, "", "current_round_number"], [143, 3, 1, "", "current_round_number_of_components"], [143, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [143, 2, 1, "", "evaluate"], [143, 2, 1, "", "evaluate_using_c"], [143, 2, 1, "", "evaluate_vectorized"], [143, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [143, 3, 1, "", "family_name"], [143, 3, 1, "", "file_name"], [143, 2, 1, "", "find_impossible_property"], [143, 2, 1, "", "generate_bit_based_c_code"], [143, 2, 1, "", "generate_evaluate_c_code_shared_library"], [143, 2, 1, "", "generate_word_based_c_code"], [143, 2, 1, "", "get_all_components"], [143, 2, 1, "", "get_all_components_ids"], [143, 2, 1, "", "get_all_inputs_bit_positions"], [143, 2, 1, "", "get_component_from_id"], [143, 2, 1, "", "get_components_in_round"], [143, 2, 1, "", "get_current_component_id"], [143, 2, 1, "", "get_model"], [143, 2, 1, "", "get_number_of_components_in_round"], [143, 2, 1, "", "get_partial_cipher"], [143, 2, 1, "", "get_round_from_component_id"], [143, 2, 1, "", "get_sizes_of_components_by_type"], [143, 3, 1, "", "id"], [143, 2, 1, "", "impossible_differential_search"], [143, 3, 1, "", "inputs"], [143, 3, 1, "", "inputs_bit_size"], [143, 2, 1, "", "inputs_size_to_dict"], [143, 2, 1, "", "is_algebraically_secure"], [143, 2, 1, "", "is_andrx"], [143, 2, 1, "", "is_arx"], [143, 2, 1, "", "is_power_of_2_word_based"], [143, 2, 1, "", "is_shift_arx"], [143, 2, 1, "", "is_spn"], [143, 2, 1, "", "make_cipher_id"], [143, 2, 1, "", "make_file_name"], [143, 3, 1, "", "number_of_rounds"], [143, 3, 1, "", "output_bit_size"], [143, 2, 1, "", "polynomial_system"], [143, 2, 1, "", "polynomial_system_at_round"], [143, 2, 1, "", "print"], [143, 2, 1, "", "print_as_python_dictionary"], [143, 2, 1, "", "print_as_python_dictionary_to_file"], [143, 2, 1, "", "print_evaluation_python_code"], [143, 2, 1, "", "print_evaluation_python_code_to_file"], [143, 2, 1, "", "print_input_information"], [143, 3, 1, "", "reference_code"], [143, 2, 1, "", "remove_key_schedule"], [143, 2, 1, "", "remove_round_component"], [143, 2, 1, "", "remove_round_component_from_id"], [143, 2, 1, "", "round_function"], [143, 3, 1, "", "rounds"], [143, 3, 1, "", "rounds_as_list"], [143, 2, 1, "", "schedule"], [143, 2, 1, "", "set_file_name"], [143, 2, 1, "", "set_id"], [143, 2, 1, "", "set_inputs"], [143, 2, 1, "", "sort_cipher"], [143, 2, 1, "", "test_against_reference_code"], [143, 2, 1, "", "test_vector_check"], [143, 3, 1, "", "type"], [143, 2, 1, "", "update_input_id_links_from_component_id"], [143, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.hash_functions.whirlpool_hash_function": [[144, 1, 1, "", "WhirlpoolHashFunction"]], "ciphers.hash_functions.whirlpool_hash_function.WhirlpoolHashFunction": [[144, 2, 1, "", "add_AND_component"], [144, 2, 1, "", "add_FSR_component"], [144, 2, 1, "", "add_MODADD_component"], [144, 2, 1, "", "add_MODSUB_component"], [144, 2, 1, "", "add_NOT_component"], [144, 2, 1, "", "add_OR_component"], [144, 2, 1, "", "add_SBOX_component"], [144, 2, 1, "", "add_SHIFT_component"], [144, 2, 1, "", "add_XOR_component"], [144, 2, 1, "", "add_cipher_output_component"], [144, 2, 1, "", "add_concatenate_component"], [144, 2, 1, "", "add_constant_component"], [144, 2, 1, "", "add_intermediate_output_component"], [144, 2, 1, "", "add_linear_layer_component"], [144, 2, 1, "", "add_mix_column_component"], [144, 2, 1, "", "add_permutation_component"], [144, 2, 1, "", "add_reverse_component"], [144, 2, 1, "", "add_rotate_component"], [144, 2, 1, "", "add_round"], [144, 2, 1, "", "add_round_key_output_component"], [144, 2, 1, "", "add_round_output_component"], [144, 2, 1, "", "add_shift_rows_component"], [144, 2, 1, "", "add_sigma_component"], [144, 2, 1, "", "add_suffix_to_components"], [144, 2, 1, "", "add_theta_gaston_component"], [144, 2, 1, "", "add_theta_keccak_component"], [144, 2, 1, "", "add_theta_xoodoo_component"], [144, 2, 1, "", "add_variable_rotate_component"], [144, 2, 1, "", "add_variable_shift_component"], [144, 2, 1, "", "add_word_permutation_component"], [144, 2, 1, "", "as_python_dictionary"], [144, 2, 1, "", "cipher_inverse"], [144, 2, 1, "", "cipher_partial_inverse"], [144, 2, 1, "", "component_from"], [144, 2, 1, "", "convert_to_compound_xor_cipher"], [144, 2, 1, "", "create_mix_row_components"], [144, 2, 1, "", "create_networx_graph_from_input_ids"], [144, 2, 1, "", "create_round_constant_component"], [144, 2, 1, "", "create_sbox_component"], [144, 2, 1, "", "create_shift_column_components"], [144, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [144, 3, 1, "", "current_round"], [144, 3, 1, "", "current_round_number"], [144, 3, 1, "", "current_round_number_of_components"], [144, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [144, 2, 1, "", "evaluate"], [144, 2, 1, "", "evaluate_using_c"], [144, 2, 1, "", "evaluate_vectorized"], [144, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [144, 3, 1, "", "family_name"], [144, 3, 1, "", "file_name"], [144, 2, 1, "", "find_impossible_property"], [144, 2, 1, "", "generate_bit_based_c_code"], [144, 2, 1, "", "generate_evaluate_c_code_shared_library"], [144, 2, 1, "", "generate_word_based_c_code"], [144, 2, 1, "", "get_all_components"], [144, 2, 1, "", "get_all_components_ids"], [144, 2, 1, "", "get_all_inputs_bit_positions"], [144, 2, 1, "", "get_component_from_id"], [144, 2, 1, "", "get_components_in_round"], [144, 2, 1, "", "get_current_component_id"], [144, 2, 1, "", "get_model"], [144, 2, 1, "", "get_number_of_components_in_round"], [144, 2, 1, "", "get_partial_cipher"], [144, 2, 1, "", "get_round_from_component_id"], [144, 2, 1, "", "get_sizes_of_components_by_type"], [144, 3, 1, "", "id"], [144, 2, 1, "", "impossible_differential_search"], [144, 3, 1, "", "inputs"], [144, 3, 1, "", "inputs_bit_size"], [144, 2, 1, "", "inputs_size_to_dict"], [144, 2, 1, "", "is_algebraically_secure"], [144, 2, 1, "", "is_andrx"], [144, 2, 1, "", "is_arx"], [144, 2, 1, "", "is_power_of_2_word_based"], [144, 2, 1, "", "is_shift_arx"], [144, 2, 1, "", "is_spn"], [144, 2, 1, "", "make_cipher_id"], [144, 2, 1, "", "make_file_name"], [144, 3, 1, "", "number_of_rounds"], [144, 3, 1, "", "output_bit_size"], [144, 2, 1, "", "polynomial_system"], [144, 2, 1, "", "polynomial_system_at_round"], [144, 2, 1, "", "print"], [144, 2, 1, "", "print_as_python_dictionary"], [144, 2, 1, "", "print_as_python_dictionary_to_file"], [144, 2, 1, "", "print_evaluation_python_code"], [144, 2, 1, "", "print_evaluation_python_code_to_file"], [144, 2, 1, "", "print_input_information"], [144, 3, 1, "", "reference_code"], [144, 2, 1, "", "remove_key_schedule"], [144, 2, 1, "", "remove_round_component"], [144, 2, 1, "", "remove_round_component_from_id"], [144, 3, 1, "", "rounds"], [144, 3, 1, "", "rounds_as_list"], [144, 2, 1, "", "set_file_name"], [144, 2, 1, "", "set_id"], [144, 2, 1, "", "set_inputs"], [144, 2, 1, "", "sort_cipher"], [144, 2, 1, "", "test_against_reference_code"], [144, 2, 1, "", "test_vector_check"], [144, 3, 1, "", "type"], [144, 2, 1, "", "update_input_id_links_from_component_id"], [144, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations": [[145, 0, 0, "-", "ascon_permutation"], [146, 0, 0, "-", "ascon_sbox_sigma_no_matrix_permutation"], [147, 0, 0, "-", "ascon_sbox_sigma_permutation"], [148, 0, 0, "-", "chacha_permutation"], [149, 0, 0, "-", "gaston_permutation"], [150, 0, 0, "-", "gaston_sbox_permutation"], [151, 0, 0, "-", "gaston_sbox_theta_permutation"], [152, 0, 0, "-", "gift_permutation"], [153, 0, 0, "-", "gift_sbox_permutation"], [154, 0, 0, "-", "gimli_permutation"], [155, 0, 0, "-", "gimli_sbox_permutation"], [156, 0, 0, "-", "grain_core_permutation"], [157, 0, 0, "-", "keccak_invertible_permutation"], [158, 0, 0, "-", "keccak_permutation"], [159, 0, 0, "-", "keccak_sbox_permutation"], [160, 0, 0, "-", "photon_permutation"], [161, 0, 0, "-", "salsa_permutation"], [162, 0, 0, "-", "sparkle_permutation"], [163, 0, 0, "-", "spongent_pi_fsr_permutation"], [164, 0, 0, "-", "spongent_pi_permutation"], [165, 0, 0, "-", "spongent_pi_precomputation_permutation"], [166, 0, 0, "-", "tinyjambu_32bits_word_permutation"], [167, 0, 0, "-", "tinyjambu_fsr_32bits_word_permutation"], [168, 0, 0, "-", "tinyjambu_permutation"], [169, 0, 0, "-", "util"], [170, 0, 0, "-", "xoodoo_invertible_permutation"], [171, 0, 0, "-", "xoodoo_permutation"], [172, 0, 0, "-", "xoodoo_sbox_permutation"]], "ciphers.permutations.ascon_permutation": [[145, 1, 1, "", "AsconPermutation"]], "ciphers.permutations.ascon_permutation.AsconPermutation": [[145, 2, 1, "", "add_AND_component"], [145, 2, 1, "", "add_FSR_component"], [145, 2, 1, "", "add_MODADD_component"], [145, 2, 1, "", "add_MODSUB_component"], [145, 2, 1, "", "add_NOT_component"], [145, 2, 1, "", "add_OR_component"], [145, 2, 1, "", "add_SBOX_component"], [145, 2, 1, "", "add_SHIFT_component"], [145, 2, 1, "", "add_XOR_component"], [145, 2, 1, "", "add_cipher_output_component"], [145, 2, 1, "", "add_concatenate_component"], [145, 2, 1, "", "add_constant_component"], [145, 2, 1, "", "add_intermediate_output_component"], [145, 2, 1, "", "add_linear_layer_component"], [145, 2, 1, "", "add_mix_column_component"], [145, 2, 1, "", "add_permutation_component"], [145, 2, 1, "", "add_reverse_component"], [145, 2, 1, "", "add_rotate_component"], [145, 2, 1, "", "add_round"], [145, 2, 1, "", "add_round_key_output_component"], [145, 2, 1, "", "add_round_output_component"], [145, 2, 1, "", "add_shift_rows_component"], [145, 2, 1, "", "add_sigma_component"], [145, 2, 1, "", "add_suffix_to_components"], [145, 2, 1, "", "add_theta_gaston_component"], [145, 2, 1, "", "add_theta_keccak_component"], [145, 2, 1, "", "add_theta_xoodoo_component"], [145, 2, 1, "", "add_variable_rotate_component"], [145, 2, 1, "", "add_variable_shift_component"], [145, 2, 1, "", "add_word_permutation_component"], [145, 2, 1, "", "as_python_dictionary"], [145, 2, 1, "", "cipher_inverse"], [145, 2, 1, "", "cipher_partial_inverse"], [145, 2, 1, "", "component_from"], [145, 2, 1, "", "convert_to_compound_xor_cipher"], [145, 2, 1, "", "create_networx_graph_from_input_ids"], [145, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [145, 3, 1, "", "current_round"], [145, 3, 1, "", "current_round_number"], [145, 3, 1, "", "current_round_number_of_components"], [145, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [145, 2, 1, "", "evaluate"], [145, 2, 1, "", "evaluate_using_c"], [145, 2, 1, "", "evaluate_vectorized"], [145, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [145, 3, 1, "", "family_name"], [145, 3, 1, "", "file_name"], [145, 2, 1, "", "find_impossible_property"], [145, 2, 1, "", "generate_bit_based_c_code"], [145, 2, 1, "", "generate_evaluate_c_code_shared_library"], [145, 2, 1, "", "generate_word_based_c_code"], [145, 2, 1, "", "get_all_components"], [145, 2, 1, "", "get_all_components_ids"], [145, 2, 1, "", "get_all_inputs_bit_positions"], [145, 2, 1, "", "get_component_from_id"], [145, 2, 1, "", "get_components_in_round"], [145, 2, 1, "", "get_current_component_id"], [145, 2, 1, "", "get_model"], [145, 2, 1, "", "get_number_of_components_in_round"], [145, 2, 1, "", "get_partial_cipher"], [145, 2, 1, "", "get_round_from_component_id"], [145, 2, 1, "", "get_sizes_of_components_by_type"], [145, 3, 1, "", "id"], [145, 2, 1, "", "impossible_differential_search"], [145, 3, 1, "", "inputs"], [145, 3, 1, "", "inputs_bit_size"], [145, 2, 1, "", "inputs_size_to_dict"], [145, 2, 1, "", "is_algebraically_secure"], [145, 2, 1, "", "is_andrx"], [145, 2, 1, "", "is_arx"], [145, 2, 1, "", "is_power_of_2_word_based"], [145, 2, 1, "", "is_shift_arx"], [145, 2, 1, "", "is_spn"], [145, 2, 1, "", "make_cipher_id"], [145, 2, 1, "", "make_file_name"], [145, 3, 1, "", "number_of_rounds"], [145, 3, 1, "", "output_bit_size"], [145, 2, 1, "", "polynomial_system"], [145, 2, 1, "", "polynomial_system_at_round"], [145, 2, 1, "", "print"], [145, 2, 1, "", "print_as_python_dictionary"], [145, 2, 1, "", "print_as_python_dictionary_to_file"], [145, 2, 1, "", "print_evaluation_python_code"], [145, 2, 1, "", "print_evaluation_python_code_to_file"], [145, 2, 1, "", "print_input_information"], [145, 3, 1, "", "reference_code"], [145, 2, 1, "", "remove_key_schedule"], [145, 2, 1, "", "remove_round_component"], [145, 2, 1, "", "remove_round_component_from_id"], [145, 2, 1, "", "round_function"], [145, 3, 1, "", "rounds"], [145, 3, 1, "", "rounds_as_list"], [145, 2, 1, "", "set_file_name"], [145, 2, 1, "", "set_id"], [145, 2, 1, "", "set_inputs"], [145, 2, 1, "", "sort_cipher"], [145, 2, 1, "", "test_against_reference_code"], [145, 2, 1, "", "test_vector_check"], [145, 3, 1, "", "type"], [145, 2, 1, "", "update_input_id_links_from_component_id"], [145, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.ascon_sbox_sigma_no_matrix_permutation": [[146, 1, 1, "", "AsconSboxSigmaNoMatrixPermutation"]], "ciphers.permutations.ascon_sbox_sigma_no_matrix_permutation.AsconSboxSigmaNoMatrixPermutation": [[146, 2, 1, "", "add_AND_component"], [146, 2, 1, "", "add_FSR_component"], [146, 2, 1, "", "add_MODADD_component"], [146, 2, 1, "", "add_MODSUB_component"], [146, 2, 1, "", "add_NOT_component"], [146, 2, 1, "", "add_OR_component"], [146, 2, 1, "", "add_SBOX_component"], [146, 2, 1, "", "add_SHIFT_component"], [146, 2, 1, "", "add_XOR_component"], [146, 2, 1, "", "add_cipher_output_component"], [146, 2, 1, "", "add_concatenate_component"], [146, 2, 1, "", "add_constant_component"], [146, 2, 1, "", "add_intermediate_output_component"], [146, 2, 1, "", "add_linear_layer_component"], [146, 2, 1, "", "add_mix_column_component"], [146, 2, 1, "", "add_permutation_component"], [146, 2, 1, "", "add_reverse_component"], [146, 2, 1, "", "add_rotate_component"], [146, 2, 1, "", "add_round"], [146, 2, 1, "", "add_round_key_output_component"], [146, 2, 1, "", "add_round_output_component"], [146, 2, 1, "", "add_shift_rows_component"], [146, 2, 1, "", "add_sigma_component"], [146, 2, 1, "", "add_suffix_to_components"], [146, 2, 1, "", "add_theta_gaston_component"], [146, 2, 1, "", "add_theta_keccak_component"], [146, 2, 1, "", "add_theta_xoodoo_component"], [146, 2, 1, "", "add_variable_rotate_component"], [146, 2, 1, "", "add_variable_shift_component"], [146, 2, 1, "", "add_word_permutation_component"], [146, 2, 1, "", "as_python_dictionary"], [146, 2, 1, "", "cipher_inverse"], [146, 2, 1, "", "cipher_partial_inverse"], [146, 2, 1, "", "component_from"], [146, 2, 1, "", "convert_to_compound_xor_cipher"], [146, 2, 1, "", "create_networx_graph_from_input_ids"], [146, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [146, 3, 1, "", "current_round"], [146, 3, 1, "", "current_round_number"], [146, 3, 1, "", "current_round_number_of_components"], [146, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [146, 2, 1, "", "evaluate"], [146, 2, 1, "", "evaluate_using_c"], [146, 2, 1, "", "evaluate_vectorized"], [146, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [146, 3, 1, "", "family_name"], [146, 3, 1, "", "file_name"], [146, 2, 1, "", "find_impossible_property"], [146, 2, 1, "", "generate_bit_based_c_code"], [146, 2, 1, "", "generate_evaluate_c_code_shared_library"], [146, 2, 1, "", "generate_word_based_c_code"], [146, 2, 1, "", "get_all_components"], [146, 2, 1, "", "get_all_components_ids"], [146, 2, 1, "", "get_all_inputs_bit_positions"], [146, 2, 1, "", "get_component_from_id"], [146, 2, 1, "", "get_components_in_round"], [146, 2, 1, "", "get_current_component_id"], [146, 2, 1, "", "get_model"], [146, 2, 1, "", "get_number_of_components_in_round"], [146, 2, 1, "", "get_partial_cipher"], [146, 2, 1, "", "get_round_from_component_id"], [146, 2, 1, "", "get_sizes_of_components_by_type"], [146, 3, 1, "", "id"], [146, 2, 1, "", "impossible_differential_search"], [146, 3, 1, "", "inputs"], [146, 3, 1, "", "inputs_bit_size"], [146, 2, 1, "", "inputs_size_to_dict"], [146, 2, 1, "", "is_algebraically_secure"], [146, 2, 1, "", "is_andrx"], [146, 2, 1, "", "is_arx"], [146, 2, 1, "", "is_power_of_2_word_based"], [146, 2, 1, "", "is_shift_arx"], [146, 2, 1, "", "is_spn"], [146, 2, 1, "", "make_cipher_id"], [146, 2, 1, "", "make_file_name"], [146, 3, 1, "", "number_of_rounds"], [146, 3, 1, "", "output_bit_size"], [146, 2, 1, "", "polynomial_system"], [146, 2, 1, "", "polynomial_system_at_round"], [146, 2, 1, "", "print"], [146, 2, 1, "", "print_as_python_dictionary"], [146, 2, 1, "", "print_as_python_dictionary_to_file"], [146, 2, 1, "", "print_evaluation_python_code"], [146, 2, 1, "", "print_evaluation_python_code_to_file"], [146, 2, 1, "", "print_input_information"], [146, 3, 1, "", "reference_code"], [146, 2, 1, "", "remove_key_schedule"], [146, 2, 1, "", "remove_round_component"], [146, 2, 1, "", "remove_round_component_from_id"], [146, 2, 1, "", "round_function"], [146, 3, 1, "", "rounds"], [146, 3, 1, "", "rounds_as_list"], [146, 2, 1, "", "set_file_name"], [146, 2, 1, "", "set_id"], [146, 2, 1, "", "set_inputs"], [146, 2, 1, "", "sort_cipher"], [146, 2, 1, "", "test_against_reference_code"], [146, 2, 1, "", "test_vector_check"], [146, 3, 1, "", "type"], [146, 2, 1, "", "update_input_id_links_from_component_id"], [146, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.ascon_sbox_sigma_permutation": [[147, 1, 1, "", "AsconSboxSigmaPermutation"]], "ciphers.permutations.ascon_sbox_sigma_permutation.AsconSboxSigmaPermutation": [[147, 2, 1, "", "add_AND_component"], [147, 2, 1, "", "add_FSR_component"], [147, 2, 1, "", "add_MODADD_component"], [147, 2, 1, "", "add_MODSUB_component"], [147, 2, 1, "", "add_NOT_component"], [147, 2, 1, "", "add_OR_component"], [147, 2, 1, "", "add_SBOX_component"], [147, 2, 1, "", "add_SHIFT_component"], [147, 2, 1, "", "add_XOR_component"], [147, 2, 1, "", "add_cipher_output_component"], [147, 2, 1, "", "add_concatenate_component"], [147, 2, 1, "", "add_constant_component"], [147, 2, 1, "", "add_intermediate_output_component"], [147, 2, 1, "", "add_linear_layer_component"], [147, 2, 1, "", "add_mix_column_component"], [147, 2, 1, "", "add_permutation_component"], [147, 2, 1, "", "add_reverse_component"], [147, 2, 1, "", "add_rotate_component"], [147, 2, 1, "", "add_round"], [147, 2, 1, "", "add_round_key_output_component"], [147, 2, 1, "", "add_round_output_component"], [147, 2, 1, "", "add_shift_rows_component"], [147, 2, 1, "", "add_sigma_component"], [147, 2, 1, "", "add_suffix_to_components"], [147, 2, 1, "", "add_theta_gaston_component"], [147, 2, 1, "", "add_theta_keccak_component"], [147, 2, 1, "", "add_theta_xoodoo_component"], [147, 2, 1, "", "add_variable_rotate_component"], [147, 2, 1, "", "add_variable_shift_component"], [147, 2, 1, "", "add_word_permutation_component"], [147, 2, 1, "", "as_python_dictionary"], [147, 2, 1, "", "cipher_inverse"], [147, 2, 1, "", "cipher_partial_inverse"], [147, 2, 1, "", "component_from"], [147, 2, 1, "", "convert_to_compound_xor_cipher"], [147, 2, 1, "", "create_networx_graph_from_input_ids"], [147, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [147, 3, 1, "", "current_round"], [147, 3, 1, "", "current_round_number"], [147, 3, 1, "", "current_round_number_of_components"], [147, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [147, 2, 1, "", "evaluate"], [147, 2, 1, "", "evaluate_using_c"], [147, 2, 1, "", "evaluate_vectorized"], [147, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [147, 3, 1, "", "family_name"], [147, 3, 1, "", "file_name"], [147, 2, 1, "", "find_impossible_property"], [147, 2, 1, "", "generate_bit_based_c_code"], [147, 2, 1, "", "generate_evaluate_c_code_shared_library"], [147, 2, 1, "", "generate_word_based_c_code"], [147, 2, 1, "", "get_all_components"], [147, 2, 1, "", "get_all_components_ids"], [147, 2, 1, "", "get_all_inputs_bit_positions"], [147, 2, 1, "", "get_component_from_id"], [147, 2, 1, "", "get_components_in_round"], [147, 2, 1, "", "get_current_component_id"], [147, 2, 1, "", "get_model"], [147, 2, 1, "", "get_number_of_components_in_round"], [147, 2, 1, "", "get_partial_cipher"], [147, 2, 1, "", "get_round_from_component_id"], [147, 2, 1, "", "get_sizes_of_components_by_type"], [147, 3, 1, "", "id"], [147, 2, 1, "", "impossible_differential_search"], [147, 3, 1, "", "inputs"], [147, 3, 1, "", "inputs_bit_size"], [147, 2, 1, "", "inputs_size_to_dict"], [147, 2, 1, "", "is_algebraically_secure"], [147, 2, 1, "", "is_andrx"], [147, 2, 1, "", "is_arx"], [147, 2, 1, "", "is_power_of_2_word_based"], [147, 2, 1, "", "is_shift_arx"], [147, 2, 1, "", "is_spn"], [147, 2, 1, "", "make_cipher_id"], [147, 2, 1, "", "make_file_name"], [147, 3, 1, "", "number_of_rounds"], [147, 3, 1, "", "output_bit_size"], [147, 2, 1, "", "polynomial_system"], [147, 2, 1, "", "polynomial_system_at_round"], [147, 2, 1, "", "print"], [147, 2, 1, "", "print_as_python_dictionary"], [147, 2, 1, "", "print_as_python_dictionary_to_file"], [147, 2, 1, "", "print_evaluation_python_code"], [147, 2, 1, "", "print_evaluation_python_code_to_file"], [147, 2, 1, "", "print_input_information"], [147, 3, 1, "", "reference_code"], [147, 2, 1, "", "remove_key_schedule"], [147, 2, 1, "", "remove_round_component"], [147, 2, 1, "", "remove_round_component_from_id"], [147, 2, 1, "", "round_function"], [147, 3, 1, "", "rounds"], [147, 3, 1, "", "rounds_as_list"], [147, 2, 1, "", "set_file_name"], [147, 2, 1, "", "set_id"], [147, 2, 1, "", "set_inputs"], [147, 2, 1, "", "sort_cipher"], [147, 2, 1, "", "test_against_reference_code"], [147, 2, 1, "", "test_vector_check"], [147, 3, 1, "", "type"], [147, 2, 1, "", "update_input_id_links_from_component_id"], [147, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.chacha_permutation": [[148, 1, 1, "", "ChachaPermutation"]], "ciphers.permutations.chacha_permutation.ChachaPermutation": [[148, 2, 1, "", "add_AND_component"], [148, 2, 1, "", "add_FSR_component"], [148, 2, 1, "", "add_MODADD_component"], [148, 2, 1, "", "add_MODSUB_component"], [148, 2, 1, "", "add_NOT_component"], [148, 2, 1, "", "add_OR_component"], [148, 2, 1, "", "add_SBOX_component"], [148, 2, 1, "", "add_SHIFT_component"], [148, 2, 1, "", "add_XOR_component"], [148, 2, 1, "", "add_cipher_output_component"], [148, 2, 1, "", "add_concatenate_component"], [148, 2, 1, "", "add_constant_component"], [148, 2, 1, "", "add_intermediate_output_component"], [148, 2, 1, "", "add_linear_layer_component"], [148, 2, 1, "", "add_mix_column_component"], [148, 2, 1, "", "add_permutation_component"], [148, 2, 1, "", "add_reverse_component"], [148, 2, 1, "", "add_rotate_component"], [148, 2, 1, "", "add_round"], [148, 2, 1, "", "add_round_key_output_component"], [148, 2, 1, "", "add_round_output_component"], [148, 2, 1, "", "add_shift_rows_component"], [148, 2, 1, "", "add_sigma_component"], [148, 2, 1, "", "add_suffix_to_components"], [148, 2, 1, "", "add_theta_gaston_component"], [148, 2, 1, "", "add_theta_keccak_component"], [148, 2, 1, "", "add_theta_xoodoo_component"], [148, 2, 1, "", "add_variable_rotate_component"], [148, 2, 1, "", "add_variable_shift_component"], [148, 2, 1, "", "add_word_permutation_component"], [148, 2, 1, "", "as_python_dictionary"], [148, 2, 1, "", "bottom_half_quarter_round"], [148, 2, 1, "", "cipher_inverse"], [148, 2, 1, "", "cipher_partial_inverse"], [148, 2, 1, "", "component_from"], [148, 2, 1, "", "convert_to_compound_xor_cipher"], [148, 2, 1, "", "create_networx_graph_from_input_ids"], [148, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [148, 3, 1, "", "current_round"], [148, 3, 1, "", "current_round_number"], [148, 3, 1, "", "current_round_number_of_components"], [148, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [148, 2, 1, "", "evaluate"], [148, 2, 1, "", "evaluate_using_c"], [148, 2, 1, "", "evaluate_vectorized"], [148, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [148, 3, 1, "", "family_name"], [148, 3, 1, "", "file_name"], [148, 2, 1, "", "find_impossible_property"], [148, 2, 1, "", "generate_bit_based_c_code"], [148, 2, 1, "", "generate_evaluate_c_code_shared_library"], [148, 2, 1, "", "generate_word_based_c_code"], [148, 2, 1, "", "get_all_components"], [148, 2, 1, "", "get_all_components_ids"], [148, 2, 1, "", "get_all_inputs_bit_positions"], [148, 2, 1, "", "get_component_from_id"], [148, 2, 1, "", "get_components_in_round"], [148, 2, 1, "", "get_current_component_id"], [148, 2, 1, "", "get_model"], [148, 2, 1, "", "get_number_of_components_in_round"], [148, 2, 1, "", "get_partial_cipher"], [148, 2, 1, "", "get_round_from_component_id"], [148, 2, 1, "", "get_sizes_of_components_by_type"], [148, 3, 1, "", "id"], [148, 2, 1, "", "impossible_differential_search"], [148, 3, 1, "", "inputs"], [148, 3, 1, "", "inputs_bit_size"], [148, 2, 1, "", "inputs_size_to_dict"], [148, 2, 1, "", "is_algebraically_secure"], [148, 2, 1, "", "is_andrx"], [148, 2, 1, "", "is_arx"], [148, 2, 1, "", "is_power_of_2_word_based"], [148, 2, 1, "", "is_shift_arx"], [148, 2, 1, "", "is_spn"], [148, 2, 1, "", "make_cipher_id"], [148, 2, 1, "", "make_file_name"], [148, 3, 1, "", "number_of_rounds"], [148, 3, 1, "", "output_bit_size"], [148, 2, 1, "", "polynomial_system"], [148, 2, 1, "", "polynomial_system_at_round"], [148, 2, 1, "", "print"], [148, 2, 1, "", "print_as_python_dictionary"], [148, 2, 1, "", "print_as_python_dictionary_to_file"], [148, 2, 1, "", "print_evaluation_python_code"], [148, 2, 1, "", "print_evaluation_python_code_to_file"], [148, 2, 1, "", "print_input_information"], [148, 3, 1, "", "reference_code"], [148, 2, 1, "", "remove_key_schedule"], [148, 2, 1, "", "remove_round_component"], [148, 2, 1, "", "remove_round_component_from_id"], [148, 3, 1, "", "rounds"], [148, 3, 1, "", "rounds_as_list"], [148, 2, 1, "", "set_file_name"], [148, 2, 1, "", "set_id"], [148, 2, 1, "", "set_inputs"], [148, 2, 1, "", "sort_cipher"], [148, 2, 1, "", "test_against_reference_code"], [148, 2, 1, "", "test_vector_check"], [148, 2, 1, "", "top_half_quarter_round"], [148, 3, 1, "", "type"], [148, 2, 1, "", "update_input_id_links_from_component_id"], [148, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gaston_permutation": [[149, 1, 1, "", "GastonPermutation"]], "ciphers.permutations.gaston_permutation.GastonPermutation": [[149, 2, 1, "", "add_AND_component"], [149, 2, 1, "", "add_FSR_component"], [149, 2, 1, "", "add_MODADD_component"], [149, 2, 1, "", "add_MODSUB_component"], [149, 2, 1, "", "add_NOT_component"], [149, 2, 1, "", "add_OR_component"], [149, 2, 1, "", "add_SBOX_component"], [149, 2, 1, "", "add_SHIFT_component"], [149, 2, 1, "", "add_XOR_component"], [149, 2, 1, "", "add_cipher_output_component"], [149, 2, 1, "", "add_concatenate_component"], [149, 2, 1, "", "add_constant_component"], [149, 2, 1, "", "add_intermediate_output_component"], [149, 2, 1, "", "add_linear_layer_component"], [149, 2, 1, "", "add_mix_column_component"], [149, 2, 1, "", "add_permutation_component"], [149, 2, 1, "", "add_reverse_component"], [149, 2, 1, "", "add_rotate_component"], [149, 2, 1, "", "add_round"], [149, 2, 1, "", "add_round_key_output_component"], [149, 2, 1, "", "add_round_output_component"], [149, 2, 1, "", "add_shift_rows_component"], [149, 2, 1, "", "add_sigma_component"], [149, 2, 1, "", "add_suffix_to_components"], [149, 2, 1, "", "add_theta_gaston_component"], [149, 2, 1, "", "add_theta_keccak_component"], [149, 2, 1, "", "add_theta_xoodoo_component"], [149, 2, 1, "", "add_variable_rotate_component"], [149, 2, 1, "", "add_variable_shift_component"], [149, 2, 1, "", "add_word_permutation_component"], [149, 2, 1, "", "as_python_dictionary"], [149, 2, 1, "", "cipher_inverse"], [149, 2, 1, "", "cipher_partial_inverse"], [149, 2, 1, "", "component_from"], [149, 2, 1, "", "convert_to_compound_xor_cipher"], [149, 2, 1, "", "create_networx_graph_from_input_ids"], [149, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [149, 3, 1, "", "current_round"], [149, 3, 1, "", "current_round_number"], [149, 3, 1, "", "current_round_number_of_components"], [149, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [149, 2, 1, "", "evaluate"], [149, 2, 1, "", "evaluate_using_c"], [149, 2, 1, "", "evaluate_vectorized"], [149, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [149, 3, 1, "", "family_name"], [149, 3, 1, "", "file_name"], [149, 2, 1, "", "find_impossible_property"], [149, 2, 1, "", "gaston_chi"], [149, 2, 1, "", "gaston_iota"], [149, 2, 1, "", "gaston_rho_east"], [149, 2, 1, "", "gaston_rho_west"], [149, 2, 1, "", "gaston_round_function"], [149, 2, 1, "", "gaston_theta"], [149, 2, 1, "", "generate_bit_based_c_code"], [149, 2, 1, "", "generate_evaluate_c_code_shared_library"], [149, 2, 1, "", "generate_word_based_c_code"], [149, 2, 1, "", "get_all_components"], [149, 2, 1, "", "get_all_components_ids"], [149, 2, 1, "", "get_all_inputs_bit_positions"], [149, 2, 1, "", "get_component_from_id"], [149, 2, 1, "", "get_components_in_round"], [149, 2, 1, "", "get_current_component_id"], [149, 2, 1, "", "get_model"], [149, 2, 1, "", "get_number_of_components_in_round"], [149, 2, 1, "", "get_partial_cipher"], [149, 2, 1, "", "get_round_from_component_id"], [149, 2, 1, "", "get_sizes_of_components_by_type"], [149, 3, 1, "", "id"], [149, 2, 1, "", "impossible_differential_search"], [149, 3, 1, "", "inputs"], [149, 3, 1, "", "inputs_bit_size"], [149, 2, 1, "", "inputs_size_to_dict"], [149, 2, 1, "", "is_algebraically_secure"], [149, 2, 1, "", "is_andrx"], [149, 2, 1, "", "is_arx"], [149, 2, 1, "", "is_power_of_2_word_based"], [149, 2, 1, "", "is_shift_arx"], [149, 2, 1, "", "is_spn"], [149, 2, 1, "", "make_cipher_id"], [149, 2, 1, "", "make_file_name"], [149, 3, 1, "", "number_of_rounds"], [149, 3, 1, "", "output_bit_size"], [149, 2, 1, "", "polynomial_system"], [149, 2, 1, "", "polynomial_system_at_round"], [149, 2, 1, "", "print"], [149, 2, 1, "", "print_as_python_dictionary"], [149, 2, 1, "", "print_as_python_dictionary_to_file"], [149, 2, 1, "", "print_evaluation_python_code"], [149, 2, 1, "", "print_evaluation_python_code_to_file"], [149, 2, 1, "", "print_input_information"], [149, 3, 1, "", "reference_code"], [149, 2, 1, "", "remove_key_schedule"], [149, 2, 1, "", "remove_round_component"], [149, 2, 1, "", "remove_round_component_from_id"], [149, 3, 1, "", "rounds"], [149, 3, 1, "", "rounds_as_list"], [149, 2, 1, "", "set_file_name"], [149, 2, 1, "", "set_id"], [149, 2, 1, "", "set_inputs"], [149, 2, 1, "", "sort_cipher"], [149, 2, 1, "", "test_against_reference_code"], [149, 2, 1, "", "test_vector_check"], [149, 3, 1, "", "type"], [149, 2, 1, "", "update_input_id_links_from_component_id"], [149, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gaston_sbox_permutation": [[150, 1, 1, "", "GastonSboxPermutation"]], "ciphers.permutations.gaston_sbox_permutation.GastonSboxPermutation": [[150, 2, 1, "", "add_AND_component"], [150, 2, 1, "", "add_FSR_component"], [150, 2, 1, "", "add_MODADD_component"], [150, 2, 1, "", "add_MODSUB_component"], [150, 2, 1, "", "add_NOT_component"], [150, 2, 1, "", "add_OR_component"], [150, 2, 1, "", "add_SBOX_component"], [150, 2, 1, "", "add_SHIFT_component"], [150, 2, 1, "", "add_XOR_component"], [150, 2, 1, "", "add_cipher_output_component"], [150, 2, 1, "", "add_concatenate_component"], [150, 2, 1, "", "add_constant_component"], [150, 2, 1, "", "add_intermediate_output_component"], [150, 2, 1, "", "add_linear_layer_component"], [150, 2, 1, "", "add_mix_column_component"], [150, 2, 1, "", "add_permutation_component"], [150, 2, 1, "", "add_reverse_component"], [150, 2, 1, "", "add_rotate_component"], [150, 2, 1, "", "add_round"], [150, 2, 1, "", "add_round_key_output_component"], [150, 2, 1, "", "add_round_output_component"], [150, 2, 1, "", "add_shift_rows_component"], [150, 2, 1, "", "add_sigma_component"], [150, 2, 1, "", "add_suffix_to_components"], [150, 2, 1, "", "add_theta_gaston_component"], [150, 2, 1, "", "add_theta_keccak_component"], [150, 2, 1, "", "add_theta_xoodoo_component"], [150, 2, 1, "", "add_variable_rotate_component"], [150, 2, 1, "", "add_variable_shift_component"], [150, 2, 1, "", "add_word_permutation_component"], [150, 2, 1, "", "as_python_dictionary"], [150, 2, 1, "", "cipher_inverse"], [150, 2, 1, "", "cipher_partial_inverse"], [150, 2, 1, "", "component_from"], [150, 2, 1, "", "convert_to_compound_xor_cipher"], [150, 2, 1, "", "create_networx_graph_from_input_ids"], [150, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [150, 3, 1, "", "current_round"], [150, 3, 1, "", "current_round_number"], [150, 3, 1, "", "current_round_number_of_components"], [150, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [150, 2, 1, "", "evaluate"], [150, 2, 1, "", "evaluate_using_c"], [150, 2, 1, "", "evaluate_vectorized"], [150, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [150, 3, 1, "", "family_name"], [150, 3, 1, "", "file_name"], [150, 2, 1, "", "find_impossible_property"], [150, 2, 1, "", "gaston_chi_sbox"], [150, 2, 1, "", "gaston_iota"], [150, 2, 1, "", "gaston_rho_east"], [150, 2, 1, "", "gaston_rho_west"], [150, 2, 1, "", "gaston_round_function"], [150, 2, 1, "", "gaston_theta"], [150, 2, 1, "", "generate_bit_based_c_code"], [150, 2, 1, "", "generate_evaluate_c_code_shared_library"], [150, 2, 1, "", "generate_word_based_c_code"], [150, 2, 1, "", "get_all_components"], [150, 2, 1, "", "get_all_components_ids"], [150, 2, 1, "", "get_all_inputs_bit_positions"], [150, 2, 1, "", "get_component_from_id"], [150, 2, 1, "", "get_components_in_round"], [150, 2, 1, "", "get_current_component_id"], [150, 2, 1, "", "get_model"], [150, 2, 1, "", "get_number_of_components_in_round"], [150, 2, 1, "", "get_partial_cipher"], [150, 2, 1, "", "get_round_from_component_id"], [150, 2, 1, "", "get_sizes_of_components_by_type"], [150, 3, 1, "", "id"], [150, 2, 1, "", "impossible_differential_search"], [150, 3, 1, "", "inputs"], [150, 3, 1, "", "inputs_bit_size"], [150, 2, 1, "", "inputs_size_to_dict"], [150, 2, 1, "", "is_algebraically_secure"], [150, 2, 1, "", "is_andrx"], [150, 2, 1, "", "is_arx"], [150, 2, 1, "", "is_power_of_2_word_based"], [150, 2, 1, "", "is_shift_arx"], [150, 2, 1, "", "is_spn"], [150, 2, 1, "", "make_cipher_id"], [150, 2, 1, "", "make_file_name"], [150, 3, 1, "", "number_of_rounds"], [150, 3, 1, "", "output_bit_size"], [150, 2, 1, "", "polynomial_system"], [150, 2, 1, "", "polynomial_system_at_round"], [150, 2, 1, "", "print"], [150, 2, 1, "", "print_as_python_dictionary"], [150, 2, 1, "", "print_as_python_dictionary_to_file"], [150, 2, 1, "", "print_evaluation_python_code"], [150, 2, 1, "", "print_evaluation_python_code_to_file"], [150, 2, 1, "", "print_input_information"], [150, 3, 1, "", "reference_code"], [150, 2, 1, "", "remove_key_schedule"], [150, 2, 1, "", "remove_round_component"], [150, 2, 1, "", "remove_round_component_from_id"], [150, 3, 1, "", "rounds"], [150, 3, 1, "", "rounds_as_list"], [150, 2, 1, "", "set_file_name"], [150, 2, 1, "", "set_id"], [150, 2, 1, "", "set_inputs"], [150, 2, 1, "", "sort_cipher"], [150, 2, 1, "", "test_against_reference_code"], [150, 2, 1, "", "test_vector_check"], [150, 3, 1, "", "type"], [150, 2, 1, "", "update_input_id_links_from_component_id"], [150, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gaston_sbox_theta_permutation": [[151, 1, 1, "", "GastonSboxThetaPermutation"]], "ciphers.permutations.gaston_sbox_theta_permutation.GastonSboxThetaPermutation": [[151, 2, 1, "", "add_AND_component"], [151, 2, 1, "", "add_FSR_component"], [151, 2, 1, "", "add_MODADD_component"], [151, 2, 1, "", "add_MODSUB_component"], [151, 2, 1, "", "add_NOT_component"], [151, 2, 1, "", "add_OR_component"], [151, 2, 1, "", "add_SBOX_component"], [151, 2, 1, "", "add_SHIFT_component"], [151, 2, 1, "", "add_XOR_component"], [151, 2, 1, "", "add_cipher_output_component"], [151, 2, 1, "", "add_concatenate_component"], [151, 2, 1, "", "add_constant_component"], [151, 2, 1, "", "add_intermediate_output_component"], [151, 2, 1, "", "add_linear_layer_component"], [151, 2, 1, "", "add_mix_column_component"], [151, 2, 1, "", "add_permutation_component"], [151, 2, 1, "", "add_reverse_component"], [151, 2, 1, "", "add_rotate_component"], [151, 2, 1, "", "add_round"], [151, 2, 1, "", "add_round_key_output_component"], [151, 2, 1, "", "add_round_output_component"], [151, 2, 1, "", "add_shift_rows_component"], [151, 2, 1, "", "add_sigma_component"], [151, 2, 1, "", "add_suffix_to_components"], [151, 2, 1, "", "add_theta_gaston_component"], [151, 2, 1, "", "add_theta_keccak_component"], [151, 2, 1, "", "add_theta_xoodoo_component"], [151, 2, 1, "", "add_variable_rotate_component"], [151, 2, 1, "", "add_variable_shift_component"], [151, 2, 1, "", "add_word_permutation_component"], [151, 2, 1, "", "as_python_dictionary"], [151, 2, 1, "", "cipher_inverse"], [151, 2, 1, "", "cipher_partial_inverse"], [151, 2, 1, "", "component_from"], [151, 2, 1, "", "convert_to_compound_xor_cipher"], [151, 2, 1, "", "create_networx_graph_from_input_ids"], [151, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [151, 3, 1, "", "current_round"], [151, 3, 1, "", "current_round_number"], [151, 3, 1, "", "current_round_number_of_components"], [151, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [151, 2, 1, "", "evaluate"], [151, 2, 1, "", "evaluate_using_c"], [151, 2, 1, "", "evaluate_vectorized"], [151, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [151, 3, 1, "", "family_name"], [151, 3, 1, "", "file_name"], [151, 2, 1, "", "find_impossible_property"], [151, 2, 1, "", "gaston_chi_sbox"], [151, 2, 1, "", "gaston_iota"], [151, 2, 1, "", "gaston_rho_east"], [151, 2, 1, "", "gaston_rho_west"], [151, 2, 1, "", "gaston_round_function"], [151, 2, 1, "", "gaston_theta"], [151, 2, 1, "", "generate_bit_based_c_code"], [151, 2, 1, "", "generate_evaluate_c_code_shared_library"], [151, 2, 1, "", "generate_word_based_c_code"], [151, 2, 1, "", "get_all_components"], [151, 2, 1, "", "get_all_components_ids"], [151, 2, 1, "", "get_all_inputs_bit_positions"], [151, 2, 1, "", "get_component_from_id"], [151, 2, 1, "", "get_components_in_round"], [151, 2, 1, "", "get_current_component_id"], [151, 2, 1, "", "get_model"], [151, 2, 1, "", "get_number_of_components_in_round"], [151, 2, 1, "", "get_partial_cipher"], [151, 2, 1, "", "get_round_from_component_id"], [151, 2, 1, "", "get_sizes_of_components_by_type"], [151, 3, 1, "", "id"], [151, 2, 1, "", "impossible_differential_search"], [151, 3, 1, "", "inputs"], [151, 3, 1, "", "inputs_bit_size"], [151, 2, 1, "", "inputs_size_to_dict"], [151, 2, 1, "", "is_algebraically_secure"], [151, 2, 1, "", "is_andrx"], [151, 2, 1, "", "is_arx"], [151, 2, 1, "", "is_power_of_2_word_based"], [151, 2, 1, "", "is_shift_arx"], [151, 2, 1, "", "is_spn"], [151, 2, 1, "", "make_cipher_id"], [151, 2, 1, "", "make_file_name"], [151, 3, 1, "", "number_of_rounds"], [151, 3, 1, "", "output_bit_size"], [151, 2, 1, "", "polynomial_system"], [151, 2, 1, "", "polynomial_system_at_round"], [151, 2, 1, "", "print"], [151, 2, 1, "", "print_as_python_dictionary"], [151, 2, 1, "", "print_as_python_dictionary_to_file"], [151, 2, 1, "", "print_evaluation_python_code"], [151, 2, 1, "", "print_evaluation_python_code_to_file"], [151, 2, 1, "", "print_input_information"], [151, 3, 1, "", "reference_code"], [151, 2, 1, "", "remove_key_schedule"], [151, 2, 1, "", "remove_round_component"], [151, 2, 1, "", "remove_round_component_from_id"], [151, 3, 1, "", "rounds"], [151, 3, 1, "", "rounds_as_list"], [151, 2, 1, "", "set_file_name"], [151, 2, 1, "", "set_id"], [151, 2, 1, "", "set_inputs"], [151, 2, 1, "", "sort_cipher"], [151, 2, 1, "", "test_against_reference_code"], [151, 2, 1, "", "test_vector_check"], [151, 3, 1, "", "type"], [151, 2, 1, "", "update_input_id_links_from_component_id"], [151, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gift_permutation": [[152, 1, 1, "", "GiftPermutation"]], "ciphers.permutations.gift_permutation.GiftPermutation": [[152, 2, 1, "", "add_AND_component"], [152, 2, 1, "", "add_FSR_component"], [152, 2, 1, "", "add_MODADD_component"], [152, 2, 1, "", "add_MODSUB_component"], [152, 2, 1, "", "add_NOT_component"], [152, 2, 1, "", "add_OR_component"], [152, 2, 1, "", "add_SBOX_component"], [152, 2, 1, "", "add_SHIFT_component"], [152, 2, 1, "", "add_XOR_component"], [152, 2, 1, "", "add_cipher_output_component"], [152, 2, 1, "", "add_concatenate_component"], [152, 2, 1, "", "add_constant_component"], [152, 2, 1, "", "add_intermediate_output_component"], [152, 2, 1, "", "add_linear_layer_component"], [152, 2, 1, "", "add_mix_column_component"], [152, 2, 1, "", "add_permutation_component"], [152, 2, 1, "", "add_reverse_component"], [152, 2, 1, "", "add_rotate_component"], [152, 2, 1, "", "add_round"], [152, 2, 1, "", "add_round_key_output_component"], [152, 2, 1, "", "add_round_output_component"], [152, 2, 1, "", "add_shift_rows_component"], [152, 2, 1, "", "add_sigma_component"], [152, 2, 1, "", "add_suffix_to_components"], [152, 2, 1, "", "add_theta_gaston_component"], [152, 2, 1, "", "add_theta_keccak_component"], [152, 2, 1, "", "add_theta_xoodoo_component"], [152, 2, 1, "", "add_variable_rotate_component"], [152, 2, 1, "", "add_variable_shift_component"], [152, 2, 1, "", "add_word_permutation_component"], [152, 2, 1, "", "as_python_dictionary"], [152, 2, 1, "", "cipher_inverse"], [152, 2, 1, "", "cipher_partial_inverse"], [152, 2, 1, "", "component_from"], [152, 2, 1, "", "convert_to_compound_xor_cipher"], [152, 2, 1, "", "create_networx_graph_from_input_ids"], [152, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [152, 3, 1, "", "current_round"], [152, 3, 1, "", "current_round_number"], [152, 3, 1, "", "current_round_number_of_components"], [152, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [152, 2, 1, "", "evaluate"], [152, 2, 1, "", "evaluate_using_c"], [152, 2, 1, "", "evaluate_vectorized"], [152, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [152, 3, 1, "", "family_name"], [152, 3, 1, "", "file_name"], [152, 2, 1, "", "find_impossible_property"], [152, 2, 1, "", "generate_bit_based_c_code"], [152, 2, 1, "", "generate_evaluate_c_code_shared_library"], [152, 2, 1, "", "generate_word_based_c_code"], [152, 2, 1, "", "get_all_components"], [152, 2, 1, "", "get_all_components_ids"], [152, 2, 1, "", "get_all_inputs_bit_positions"], [152, 2, 1, "", "get_component_from_id"], [152, 2, 1, "", "get_components_in_round"], [152, 2, 1, "", "get_current_component_id"], [152, 2, 1, "", "get_model"], [152, 2, 1, "", "get_number_of_components_in_round"], [152, 2, 1, "", "get_partial_cipher"], [152, 2, 1, "", "get_round_from_component_id"], [152, 2, 1, "", "get_sizes_of_components_by_type"], [152, 3, 1, "", "id"], [152, 2, 1, "", "impossible_differential_search"], [152, 3, 1, "", "inputs"], [152, 3, 1, "", "inputs_bit_size"], [152, 2, 1, "", "inputs_size_to_dict"], [152, 2, 1, "", "is_algebraically_secure"], [152, 2, 1, "", "is_andrx"], [152, 2, 1, "", "is_arx"], [152, 2, 1, "", "is_power_of_2_word_based"], [152, 2, 1, "", "is_shift_arx"], [152, 2, 1, "", "is_spn"], [152, 2, 1, "", "key_schedule"], [152, 2, 1, "", "make_cipher_id"], [152, 2, 1, "", "make_file_name"], [152, 3, 1, "", "number_of_rounds"], [152, 3, 1, "", "output_bit_size"], [152, 2, 1, "", "polynomial_system"], [152, 2, 1, "", "polynomial_system_at_round"], [152, 2, 1, "", "print"], [152, 2, 1, "", "print_as_python_dictionary"], [152, 2, 1, "", "print_as_python_dictionary_to_file"], [152, 2, 1, "", "print_evaluation_python_code"], [152, 2, 1, "", "print_evaluation_python_code_to_file"], [152, 2, 1, "", "print_input_information"], [152, 3, 1, "", "reference_code"], [152, 2, 1, "", "remove_key_schedule"], [152, 2, 1, "", "remove_round_component"], [152, 2, 1, "", "remove_round_component_from_id"], [152, 2, 1, "", "round_function"], [152, 3, 1, "", "rounds"], [152, 3, 1, "", "rounds_as_list"], [152, 2, 1, "", "set_file_name"], [152, 2, 1, "", "set_id"], [152, 2, 1, "", "set_inputs"], [152, 2, 1, "", "sort_cipher"], [152, 2, 1, "", "test_against_reference_code"], [152, 2, 1, "", "test_vector_check"], [152, 3, 1, "", "type"], [152, 2, 1, "", "update_input_id_links_from_component_id"], [152, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gift_sbox_permutation": [[153, 1, 1, "", "GiftSboxPermutation"]], "ciphers.permutations.gift_sbox_permutation.GiftSboxPermutation": [[153, 2, 1, "", "add_AND_component"], [153, 2, 1, "", "add_FSR_component"], [153, 2, 1, "", "add_MODADD_component"], [153, 2, 1, "", "add_MODSUB_component"], [153, 2, 1, "", "add_NOT_component"], [153, 2, 1, "", "add_OR_component"], [153, 2, 1, "", "add_SBOX_component"], [153, 2, 1, "", "add_SHIFT_component"], [153, 2, 1, "", "add_XOR_component"], [153, 2, 1, "", "add_cipher_output_component"], [153, 2, 1, "", "add_concatenate_component"], [153, 2, 1, "", "add_constant_component"], [153, 2, 1, "", "add_intermediate_output_component"], [153, 2, 1, "", "add_linear_layer_component"], [153, 2, 1, "", "add_mix_column_component"], [153, 2, 1, "", "add_permutation_component"], [153, 2, 1, "", "add_reverse_component"], [153, 2, 1, "", "add_rotate_component"], [153, 2, 1, "", "add_round"], [153, 2, 1, "", "add_round_key_output_component"], [153, 2, 1, "", "add_round_output_component"], [153, 2, 1, "", "add_shift_rows_component"], [153, 2, 1, "", "add_sigma_component"], [153, 2, 1, "", "add_suffix_to_components"], [153, 2, 1, "", "add_theta_gaston_component"], [153, 2, 1, "", "add_theta_keccak_component"], [153, 2, 1, "", "add_theta_xoodoo_component"], [153, 2, 1, "", "add_variable_rotate_component"], [153, 2, 1, "", "add_variable_shift_component"], [153, 2, 1, "", "add_word_permutation_component"], [153, 2, 1, "", "as_python_dictionary"], [153, 2, 1, "", "cipher_inverse"], [153, 2, 1, "", "cipher_partial_inverse"], [153, 2, 1, "", "component_from"], [153, 2, 1, "", "convert_to_compound_xor_cipher"], [153, 2, 1, "", "create_networx_graph_from_input_ids"], [153, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [153, 3, 1, "", "current_round"], [153, 3, 1, "", "current_round_number"], [153, 3, 1, "", "current_round_number_of_components"], [153, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [153, 2, 1, "", "evaluate"], [153, 2, 1, "", "evaluate_using_c"], [153, 2, 1, "", "evaluate_vectorized"], [153, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [153, 3, 1, "", "family_name"], [153, 3, 1, "", "file_name"], [153, 2, 1, "", "find_impossible_property"], [153, 2, 1, "", "generate_bit_based_c_code"], [153, 2, 1, "", "generate_evaluate_c_code_shared_library"], [153, 2, 1, "", "generate_word_based_c_code"], [153, 2, 1, "", "get_all_components"], [153, 2, 1, "", "get_all_components_ids"], [153, 2, 1, "", "get_all_inputs_bit_positions"], [153, 2, 1, "", "get_component_from_id"], [153, 2, 1, "", "get_components_in_round"], [153, 2, 1, "", "get_current_component_id"], [153, 2, 1, "", "get_model"], [153, 2, 1, "", "get_number_of_components_in_round"], [153, 2, 1, "", "get_partial_cipher"], [153, 2, 1, "", "get_round_from_component_id"], [153, 2, 1, "", "get_sizes_of_components_by_type"], [153, 3, 1, "", "id"], [153, 2, 1, "", "impossible_differential_search"], [153, 3, 1, "", "inputs"], [153, 3, 1, "", "inputs_bit_size"], [153, 2, 1, "", "inputs_size_to_dict"], [153, 2, 1, "", "is_algebraically_secure"], [153, 2, 1, "", "is_andrx"], [153, 2, 1, "", "is_arx"], [153, 2, 1, "", "is_power_of_2_word_based"], [153, 2, 1, "", "is_shift_arx"], [153, 2, 1, "", "is_spn"], [153, 2, 1, "", "key_schedule"], [153, 2, 1, "", "make_cipher_id"], [153, 2, 1, "", "make_file_name"], [153, 3, 1, "", "number_of_rounds"], [153, 3, 1, "", "output_bit_size"], [153, 2, 1, "", "polynomial_system"], [153, 2, 1, "", "polynomial_system_at_round"], [153, 2, 1, "", "print"], [153, 2, 1, "", "print_as_python_dictionary"], [153, 2, 1, "", "print_as_python_dictionary_to_file"], [153, 2, 1, "", "print_evaluation_python_code"], [153, 2, 1, "", "print_evaluation_python_code_to_file"], [153, 2, 1, "", "print_input_information"], [153, 3, 1, "", "reference_code"], [153, 2, 1, "", "remove_key_schedule"], [153, 2, 1, "", "remove_round_component"], [153, 2, 1, "", "remove_round_component_from_id"], [153, 2, 1, "", "round_function"], [153, 3, 1, "", "rounds"], [153, 3, 1, "", "rounds_as_list"], [153, 2, 1, "", "set_file_name"], [153, 2, 1, "", "set_id"], [153, 2, 1, "", "set_inputs"], [153, 2, 1, "", "sort_cipher"], [153, 2, 1, "", "test_against_reference_code"], [153, 2, 1, "", "test_vector_check"], [153, 3, 1, "", "type"], [153, 2, 1, "", "update_input_id_links_from_component_id"], [153, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gimli_permutation": [[154, 1, 1, "", "GimliPermutation"], [154, 4, 1, "", "big_swap"], [154, 4, 1, "", "small_swap"]], "ciphers.permutations.gimli_permutation.GimliPermutation": [[154, 2, 1, "", "add_AND_component"], [154, 2, 1, "", "add_FSR_component"], [154, 2, 1, "", "add_MODADD_component"], [154, 2, 1, "", "add_MODSUB_component"], [154, 2, 1, "", "add_NOT_component"], [154, 2, 1, "", "add_OR_component"], [154, 2, 1, "", "add_SBOX_component"], [154, 2, 1, "", "add_SHIFT_component"], [154, 2, 1, "", "add_XOR_component"], [154, 2, 1, "", "add_cipher_output_component"], [154, 2, 1, "", "add_concatenate_component"], [154, 2, 1, "", "add_constant_component"], [154, 2, 1, "", "add_intermediate_output_component"], [154, 2, 1, "", "add_linear_layer_component"], [154, 2, 1, "", "add_mix_column_component"], [154, 2, 1, "", "add_permutation_component"], [154, 2, 1, "", "add_reverse_component"], [154, 2, 1, "", "add_rotate_component"], [154, 2, 1, "", "add_round"], [154, 2, 1, "", "add_round_key_output_component"], [154, 2, 1, "", "add_round_output_component"], [154, 2, 1, "", "add_shift_rows_component"], [154, 2, 1, "", "add_sigma_component"], [154, 2, 1, "", "add_suffix_to_components"], [154, 2, 1, "", "add_theta_gaston_component"], [154, 2, 1, "", "add_theta_keccak_component"], [154, 2, 1, "", "add_theta_xoodoo_component"], [154, 2, 1, "", "add_variable_rotate_component"], [154, 2, 1, "", "add_variable_shift_component"], [154, 2, 1, "", "add_word_permutation_component"], [154, 2, 1, "", "as_python_dictionary"], [154, 2, 1, "", "cipher_inverse"], [154, 2, 1, "", "cipher_partial_inverse"], [154, 2, 1, "", "component_from"], [154, 2, 1, "", "convert_to_compound_xor_cipher"], [154, 2, 1, "", "create_networx_graph_from_input_ids"], [154, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [154, 3, 1, "", "current_round"], [154, 3, 1, "", "current_round_number"], [154, 3, 1, "", "current_round_number_of_components"], [154, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [154, 2, 1, "", "evaluate"], [154, 2, 1, "", "evaluate_using_c"], [154, 2, 1, "", "evaluate_vectorized"], [154, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [154, 3, 1, "", "family_name"], [154, 3, 1, "", "file_name"], [154, 2, 1, "", "find_impossible_property"], [154, 2, 1, "", "generate_bit_based_c_code"], [154, 2, 1, "", "generate_evaluate_c_code_shared_library"], [154, 2, 1, "", "generate_word_based_c_code"], [154, 2, 1, "", "get_all_components"], [154, 2, 1, "", "get_all_components_ids"], [154, 2, 1, "", "get_all_inputs_bit_positions"], [154, 2, 1, "", "get_component_from_id"], [154, 2, 1, "", "get_components_in_round"], [154, 2, 1, "", "get_current_component_id"], [154, 2, 1, "", "get_model"], [154, 2, 1, "", "get_number_of_components_in_round"], [154, 2, 1, "", "get_partial_cipher"], [154, 2, 1, "", "get_round_from_component_id"], [154, 2, 1, "", "get_sizes_of_components_by_type"], [154, 3, 1, "", "id"], [154, 2, 1, "", "impossible_differential_search"], [154, 3, 1, "", "inputs"], [154, 3, 1, "", "inputs_bit_size"], [154, 2, 1, "", "inputs_size_to_dict"], [154, 2, 1, "", "is_algebraically_secure"], [154, 2, 1, "", "is_andrx"], [154, 2, 1, "", "is_arx"], [154, 2, 1, "", "is_power_of_2_word_based"], [154, 2, 1, "", "is_shift_arx"], [154, 2, 1, "", "is_spn"], [154, 2, 1, "", "make_cipher_id"], [154, 2, 1, "", "make_file_name"], [154, 3, 1, "", "number_of_rounds"], [154, 3, 1, "", "output_bit_size"], [154, 2, 1, "", "polynomial_system"], [154, 2, 1, "", "polynomial_system_at_round"], [154, 2, 1, "", "print"], [154, 2, 1, "", "print_as_python_dictionary"], [154, 2, 1, "", "print_as_python_dictionary_to_file"], [154, 2, 1, "", "print_evaluation_python_code"], [154, 2, 1, "", "print_evaluation_python_code_to_file"], [154, 2, 1, "", "print_input_information"], [154, 3, 1, "", "reference_code"], [154, 2, 1, "", "remove_key_schedule"], [154, 2, 1, "", "remove_round_component"], [154, 2, 1, "", "remove_round_component_from_id"], [154, 2, 1, "", "round_constant"], [154, 2, 1, "", "round_function"], [154, 3, 1, "", "rounds"], [154, 3, 1, "", "rounds_as_list"], [154, 2, 1, "", "set_file_name"], [154, 2, 1, "", "set_id"], [154, 2, 1, "", "set_inputs"], [154, 2, 1, "", "sort_cipher"], [154, 2, 1, "", "sp_box"], [154, 2, 1, "", "test_against_reference_code"], [154, 2, 1, "", "test_vector_check"], [154, 3, 1, "", "type"], [154, 2, 1, "", "update_input_id_links_from_component_id"], [154, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.gimli_sbox_permutation": [[155, 1, 1, "", "GimliSboxPermutation"], [155, 4, 1, "", "big_swap"], [155, 4, 1, "", "small_swap"]], "ciphers.permutations.gimli_sbox_permutation.GimliSboxPermutation": [[155, 2, 1, "", "add_AND_component"], [155, 2, 1, "", "add_FSR_component"], [155, 2, 1, "", "add_MODADD_component"], [155, 2, 1, "", "add_MODSUB_component"], [155, 2, 1, "", "add_NOT_component"], [155, 2, 1, "", "add_OR_component"], [155, 2, 1, "", "add_SBOX_component"], [155, 2, 1, "", "add_SHIFT_component"], [155, 2, 1, "", "add_XOR_component"], [155, 2, 1, "", "add_cipher_output_component"], [155, 2, 1, "", "add_concatenate_component"], [155, 2, 1, "", "add_constant_component"], [155, 2, 1, "", "add_intermediate_output_component"], [155, 2, 1, "", "add_linear_layer_component"], [155, 2, 1, "", "add_mix_column_component"], [155, 2, 1, "", "add_permutation_component"], [155, 2, 1, "", "add_reverse_component"], [155, 2, 1, "", "add_rotate_component"], [155, 2, 1, "", "add_round"], [155, 2, 1, "", "add_round_key_output_component"], [155, 2, 1, "", "add_round_output_component"], [155, 2, 1, "", "add_shift_rows_component"], [155, 2, 1, "", "add_sigma_component"], [155, 2, 1, "", "add_suffix_to_components"], [155, 2, 1, "", "add_theta_gaston_component"], [155, 2, 1, "", "add_theta_keccak_component"], [155, 2, 1, "", "add_theta_xoodoo_component"], [155, 2, 1, "", "add_variable_rotate_component"], [155, 2, 1, "", "add_variable_shift_component"], [155, 2, 1, "", "add_word_permutation_component"], [155, 2, 1, "", "as_python_dictionary"], [155, 2, 1, "", "cipher_inverse"], [155, 2, 1, "", "cipher_partial_inverse"], [155, 2, 1, "", "component_from"], [155, 2, 1, "", "convert_to_compound_xor_cipher"], [155, 2, 1, "", "create_networx_graph_from_input_ids"], [155, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [155, 3, 1, "", "current_round"], [155, 3, 1, "", "current_round_number"], [155, 3, 1, "", "current_round_number_of_components"], [155, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [155, 2, 1, "", "evaluate"], [155, 2, 1, "", "evaluate_using_c"], [155, 2, 1, "", "evaluate_vectorized"], [155, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [155, 3, 1, "", "family_name"], [155, 3, 1, "", "file_name"], [155, 2, 1, "", "find_impossible_property"], [155, 2, 1, "", "generate_bit_based_c_code"], [155, 2, 1, "", "generate_evaluate_c_code_shared_library"], [155, 2, 1, "", "generate_word_based_c_code"], [155, 2, 1, "", "get_all_components"], [155, 2, 1, "", "get_all_components_ids"], [155, 2, 1, "", "get_all_inputs_bit_positions"], [155, 2, 1, "", "get_component_from_id"], [155, 2, 1, "", "get_components_in_round"], [155, 2, 1, "", "get_current_component_id"], [155, 2, 1, "", "get_model"], [155, 2, 1, "", "get_number_of_components_in_round"], [155, 2, 1, "", "get_partial_cipher"], [155, 2, 1, "", "get_round_from_component_id"], [155, 2, 1, "", "get_sizes_of_components_by_type"], [155, 3, 1, "", "id"], [155, 2, 1, "", "impossible_differential_search"], [155, 3, 1, "", "inputs"], [155, 3, 1, "", "inputs_bit_size"], [155, 2, 1, "", "inputs_size_to_dict"], [155, 2, 1, "", "is_algebraically_secure"], [155, 2, 1, "", "is_andrx"], [155, 2, 1, "", "is_arx"], [155, 2, 1, "", "is_power_of_2_word_based"], [155, 2, 1, "", "is_shift_arx"], [155, 2, 1, "", "is_spn"], [155, 2, 1, "", "make_cipher_id"], [155, 2, 1, "", "make_file_name"], [155, 3, 1, "", "number_of_rounds"], [155, 3, 1, "", "output_bit_size"], [155, 2, 1, "", "polynomial_system"], [155, 2, 1, "", "polynomial_system_at_round"], [155, 2, 1, "", "print"], [155, 2, 1, "", "print_as_python_dictionary"], [155, 2, 1, "", "print_as_python_dictionary_to_file"], [155, 2, 1, "", "print_evaluation_python_code"], [155, 2, 1, "", "print_evaluation_python_code_to_file"], [155, 2, 1, "", "print_input_information"], [155, 3, 1, "", "reference_code"], [155, 2, 1, "", "remove_key_schedule"], [155, 2, 1, "", "remove_round_component"], [155, 2, 1, "", "remove_round_component_from_id"], [155, 2, 1, "", "round_constant"], [155, 2, 1, "", "round_function"], [155, 3, 1, "", "rounds"], [155, 3, 1, "", "rounds_as_list"], [155, 2, 1, "", "set_file_name"], [155, 2, 1, "", "set_id"], [155, 2, 1, "", "set_inputs"], [155, 2, 1, "", "sort_cipher"], [155, 2, 1, "", "sp_box"], [155, 2, 1, "", "test_against_reference_code"], [155, 2, 1, "", "test_vector_check"], [155, 3, 1, "", "type"], [155, 2, 1, "", "update_input_id_links_from_component_id"], [155, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.grain_core_permutation": [[156, 1, 1, "", "GrainCorePermutation"]], "ciphers.permutations.grain_core_permutation.GrainCorePermutation": [[156, 2, 1, "", "add_AND_component"], [156, 2, 1, "", "add_FSR_component"], [156, 2, 1, "", "add_MODADD_component"], [156, 2, 1, "", "add_MODSUB_component"], [156, 2, 1, "", "add_NOT_component"], [156, 2, 1, "", "add_OR_component"], [156, 2, 1, "", "add_SBOX_component"], [156, 2, 1, "", "add_SHIFT_component"], [156, 2, 1, "", "add_XOR_component"], [156, 2, 1, "", "add_cipher_output_component"], [156, 2, 1, "", "add_concatenate_component"], [156, 2, 1, "", "add_constant_component"], [156, 2, 1, "", "add_intermediate_output_component"], [156, 2, 1, "", "add_linear_layer_component"], [156, 2, 1, "", "add_mix_column_component"], [156, 2, 1, "", "add_permutation_component"], [156, 2, 1, "", "add_reverse_component"], [156, 2, 1, "", "add_rotate_component"], [156, 2, 1, "", "add_round"], [156, 2, 1, "", "add_round_key_output_component"], [156, 2, 1, "", "add_round_output_component"], [156, 2, 1, "", "add_shift_rows_component"], [156, 2, 1, "", "add_sigma_component"], [156, 2, 1, "", "add_suffix_to_components"], [156, 2, 1, "", "add_theta_gaston_component"], [156, 2, 1, "", "add_theta_keccak_component"], [156, 2, 1, "", "add_theta_xoodoo_component"], [156, 2, 1, "", "add_variable_rotate_component"], [156, 2, 1, "", "add_variable_shift_component"], [156, 2, 1, "", "add_word_permutation_component"], [156, 2, 1, "", "as_python_dictionary"], [156, 2, 1, "", "cipher_inverse"], [156, 2, 1, "", "cipher_partial_inverse"], [156, 2, 1, "", "component_from"], [156, 2, 1, "", "convert_to_compound_xor_cipher"], [156, 2, 1, "", "create_networx_graph_from_input_ids"], [156, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [156, 3, 1, "", "current_round"], [156, 3, 1, "", "current_round_number"], [156, 3, 1, "", "current_round_number_of_components"], [156, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [156, 2, 1, "", "evaluate"], [156, 2, 1, "", "evaluate_using_c"], [156, 2, 1, "", "evaluate_vectorized"], [156, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [156, 3, 1, "", "family_name"], [156, 3, 1, "", "file_name"], [156, 2, 1, "", "find_impossible_property"], [156, 2, 1, "", "generate_bit_based_c_code"], [156, 2, 1, "", "generate_evaluate_c_code_shared_library"], [156, 2, 1, "", "generate_word_based_c_code"], [156, 2, 1, "", "get_all_components"], [156, 2, 1, "", "get_all_components_ids"], [156, 2, 1, "", "get_all_inputs_bit_positions"], [156, 2, 1, "", "get_component_from_id"], [156, 2, 1, "", "get_components_in_round"], [156, 2, 1, "", "get_current_component_id"], [156, 2, 1, "", "get_model"], [156, 2, 1, "", "get_number_of_components_in_round"], [156, 2, 1, "", "get_partial_cipher"], [156, 2, 1, "", "get_round_from_component_id"], [156, 2, 1, "", "get_sizes_of_components_by_type"], [156, 3, 1, "", "id"], [156, 2, 1, "", "impossible_differential_search"], [156, 3, 1, "", "inputs"], [156, 3, 1, "", "inputs_bit_size"], [156, 2, 1, "", "inputs_size_to_dict"], [156, 2, 1, "", "is_algebraically_secure"], [156, 2, 1, "", "is_andrx"], [156, 2, 1, "", "is_arx"], [156, 2, 1, "", "is_power_of_2_word_based"], [156, 2, 1, "", "is_shift_arx"], [156, 2, 1, "", "is_spn"], [156, 2, 1, "", "make_cipher_id"], [156, 2, 1, "", "make_file_name"], [156, 3, 1, "", "number_of_rounds"], [156, 3, 1, "", "output_bit_size"], [156, 2, 1, "", "polynomial_system"], [156, 2, 1, "", "polynomial_system_at_round"], [156, 2, 1, "", "print"], [156, 2, 1, "", "print_as_python_dictionary"], [156, 2, 1, "", "print_as_python_dictionary_to_file"], [156, 2, 1, "", "print_evaluation_python_code"], [156, 2, 1, "", "print_evaluation_python_code_to_file"], [156, 2, 1, "", "print_input_information"], [156, 3, 1, "", "reference_code"], [156, 2, 1, "", "remove_key_schedule"], [156, 2, 1, "", "remove_round_component"], [156, 2, 1, "", "remove_round_component_from_id"], [156, 3, 1, "", "rounds"], [156, 3, 1, "", "rounds_as_list"], [156, 2, 1, "", "set_file_name"], [156, 2, 1, "", "set_id"], [156, 2, 1, "", "set_inputs"], [156, 2, 1, "", "sort_cipher"], [156, 2, 1, "", "test_against_reference_code"], [156, 2, 1, "", "test_vector_check"], [156, 3, 1, "", "type"], [156, 2, 1, "", "update_input_id_links_from_component_id"], [156, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.keccak_invertible_permutation": [[157, 1, 1, "", "KeccakInvertiblePermutation"]], "ciphers.permutations.keccak_invertible_permutation.KeccakInvertiblePermutation": [[157, 2, 1, "", "add_AND_component"], [157, 2, 1, "", "add_FSR_component"], [157, 2, 1, "", "add_MODADD_component"], [157, 2, 1, "", "add_MODSUB_component"], [157, 2, 1, "", "add_NOT_component"], [157, 2, 1, "", "add_OR_component"], [157, 2, 1, "", "add_SBOX_component"], [157, 2, 1, "", "add_SHIFT_component"], [157, 2, 1, "", "add_XOR_component"], [157, 2, 1, "", "add_cipher_output_component"], [157, 2, 1, "", "add_concatenate_component"], [157, 2, 1, "", "add_constant_component"], [157, 2, 1, "", "add_intermediate_output_component"], [157, 2, 1, "", "add_linear_layer_component"], [157, 2, 1, "", "add_mix_column_component"], [157, 2, 1, "", "add_output_component"], [157, 2, 1, "", "add_permutation_component"], [157, 2, 1, "", "add_reverse_component"], [157, 2, 1, "", "add_rotate_component"], [157, 2, 1, "", "add_round"], [157, 2, 1, "", "add_round_key_output_component"], [157, 2, 1, "", "add_round_output_component"], [157, 2, 1, "", "add_shift_rows_component"], [157, 2, 1, "", "add_sigma_component"], [157, 2, 1, "", "add_suffix_to_components"], [157, 2, 1, "", "add_theta_gaston_component"], [157, 2, 1, "", "add_theta_keccak_component"], [157, 2, 1, "", "add_theta_xoodoo_component"], [157, 2, 1, "", "add_variable_rotate_component"], [157, 2, 1, "", "add_variable_shift_component"], [157, 2, 1, "", "add_word_permutation_component"], [157, 2, 1, "", "as_python_dictionary"], [157, 2, 1, "", "chi_definition"], [157, 2, 1, "", "cipher_inverse"], [157, 2, 1, "", "cipher_partial_inverse"], [157, 2, 1, "", "component_from"], [157, 2, 1, "", "convert_to_compound_xor_cipher"], [157, 2, 1, "", "create_networx_graph_from_input_ids"], [157, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [157, 3, 1, "", "current_round"], [157, 3, 1, "", "current_round_number"], [157, 3, 1, "", "current_round_number_of_components"], [157, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [157, 2, 1, "", "evaluate"], [157, 2, 1, "", "evaluate_using_c"], [157, 2, 1, "", "evaluate_vectorized"], [157, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [157, 3, 1, "", "family_name"], [157, 3, 1, "", "file_name"], [157, 2, 1, "", "find_impossible_property"], [157, 2, 1, "", "generate_bit_based_c_code"], [157, 2, 1, "", "generate_evaluate_c_code_shared_library"], [157, 2, 1, "", "generate_word_based_c_code"], [157, 2, 1, "", "get_all_components"], [157, 2, 1, "", "get_all_components_ids"], [157, 2, 1, "", "get_all_inputs_bit_positions"], [157, 2, 1, "", "get_ci"], [157, 2, 1, "", "get_component_from_id"], [157, 2, 1, "", "get_components_in_round"], [157, 2, 1, "", "get_current_component_id"], [157, 2, 1, "", "get_model"], [157, 2, 1, "", "get_number_of_components_in_round"], [157, 2, 1, "", "get_partial_cipher"], [157, 2, 1, "", "get_round_from_component_id"], [157, 2, 1, "", "get_sizes_of_components_by_type"], [157, 3, 1, "", "id"], [157, 2, 1, "", "impossible_differential_search"], [157, 3, 1, "", "inputs"], [157, 3, 1, "", "inputs_bit_size"], [157, 2, 1, "", "inputs_size_to_dict"], [157, 2, 1, "", "iota_definition"], [157, 2, 1, "", "is_algebraically_secure"], [157, 2, 1, "", "is_andrx"], [157, 2, 1, "", "is_arx"], [157, 2, 1, "", "is_power_of_2_word_based"], [157, 2, 1, "", "is_shift_arx"], [157, 2, 1, "", "is_spn"], [157, 2, 1, "", "make_cipher_id"], [157, 2, 1, "", "make_file_name"], [157, 3, 1, "", "number_of_rounds"], [157, 3, 1, "", "output_bit_size"], [157, 2, 1, "", "polynomial_system"], [157, 2, 1, "", "polynomial_system_at_round"], [157, 2, 1, "", "print"], [157, 2, 1, "", "print_as_python_dictionary"], [157, 2, 1, "", "print_as_python_dictionary_to_file"], [157, 2, 1, "", "print_evaluation_python_code"], [157, 2, 1, "", "print_evaluation_python_code_to_file"], [157, 2, 1, "", "print_input_information"], [157, 3, 1, "", "reference_code"], [157, 2, 1, "", "remove_key_schedule"], [157, 2, 1, "", "remove_round_component"], [157, 2, 1, "", "remove_round_component_from_id"], [157, 2, 1, "", "rho_and_pi_definition"], [157, 2, 1, "", "round_function"], [157, 3, 1, "", "rounds"], [157, 3, 1, "", "rounds_as_list"], [157, 2, 1, "", "set_file_name"], [157, 2, 1, "", "set_id"], [157, 2, 1, "", "set_inputs"], [157, 2, 1, "", "sort_cipher"], [157, 2, 1, "", "state_initialization"], [157, 2, 1, "", "test_against_reference_code"], [157, 2, 1, "", "test_vector_check"], [157, 2, 1, "", "theta_definition"], [157, 3, 1, "", "type"], [157, 2, 1, "", "update_input_id_links_from_component_id"], [157, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.keccak_permutation": [[158, 1, 1, "", "KeccakPermutation"]], "ciphers.permutations.keccak_permutation.KeccakPermutation": [[158, 2, 1, "", "add_AND_component"], [158, 2, 1, "", "add_FSR_component"], [158, 2, 1, "", "add_MODADD_component"], [158, 2, 1, "", "add_MODSUB_component"], [158, 2, 1, "", "add_NOT_component"], [158, 2, 1, "", "add_OR_component"], [158, 2, 1, "", "add_SBOX_component"], [158, 2, 1, "", "add_SHIFT_component"], [158, 2, 1, "", "add_XOR_component"], [158, 2, 1, "", "add_cipher_output_component"], [158, 2, 1, "", "add_concatenate_component"], [158, 2, 1, "", "add_constant_component"], [158, 2, 1, "", "add_intermediate_output_component"], [158, 2, 1, "", "add_linear_layer_component"], [158, 2, 1, "", "add_mix_column_component"], [158, 2, 1, "", "add_output_component"], [158, 2, 1, "", "add_permutation_component"], [158, 2, 1, "", "add_reverse_component"], [158, 2, 1, "", "add_rotate_component"], [158, 2, 1, "", "add_round"], [158, 2, 1, "", "add_round_key_output_component"], [158, 2, 1, "", "add_round_output_component"], [158, 2, 1, "", "add_round_output_linear"], [158, 2, 1, "", "add_round_output_nonlinear"], [158, 2, 1, "", "add_shift_rows_component"], [158, 2, 1, "", "add_sigma_component"], [158, 2, 1, "", "add_suffix_to_components"], [158, 2, 1, "", "add_theta_gaston_component"], [158, 2, 1, "", "add_theta_keccak_component"], [158, 2, 1, "", "add_theta_xoodoo_component"], [158, 2, 1, "", "add_variable_rotate_component"], [158, 2, 1, "", "add_variable_shift_component"], [158, 2, 1, "", "add_word_permutation_component"], [158, 2, 1, "", "as_python_dictionary"], [158, 2, 1, "", "chi_definition"], [158, 2, 1, "", "cipher_inverse"], [158, 2, 1, "", "cipher_partial_inverse"], [158, 2, 1, "", "component_from"], [158, 2, 1, "", "convert_to_compound_xor_cipher"], [158, 2, 1, "", "create_networx_graph_from_input_ids"], [158, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [158, 3, 1, "", "current_round"], [158, 3, 1, "", "current_round_number"], [158, 3, 1, "", "current_round_number_of_components"], [158, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [158, 2, 1, "", "evaluate"], [158, 2, 1, "", "evaluate_using_c"], [158, 2, 1, "", "evaluate_vectorized"], [158, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [158, 3, 1, "", "family_name"], [158, 3, 1, "", "file_name"], [158, 2, 1, "", "find_impossible_property"], [158, 2, 1, "", "generate_bit_based_c_code"], [158, 2, 1, "", "generate_evaluate_c_code_shared_library"], [158, 2, 1, "", "generate_word_based_c_code"], [158, 2, 1, "", "get_all_components"], [158, 2, 1, "", "get_all_components_ids"], [158, 2, 1, "", "get_all_inputs_bit_positions"], [158, 2, 1, "", "get_ci"], [158, 2, 1, "", "get_component_from_id"], [158, 2, 1, "", "get_components_in_round"], [158, 2, 1, "", "get_current_component_id"], [158, 2, 1, "", "get_model"], [158, 2, 1, "", "get_number_of_components_in_round"], [158, 2, 1, "", "get_partial_cipher"], [158, 2, 1, "", "get_round_from_component_id"], [158, 2, 1, "", "get_sizes_of_components_by_type"], [158, 3, 1, "", "id"], [158, 2, 1, "", "impossible_differential_search"], [158, 3, 1, "", "inputs"], [158, 3, 1, "", "inputs_bit_size"], [158, 2, 1, "", "inputs_size_to_dict"], [158, 2, 1, "", "iota_definition"], [158, 2, 1, "", "is_algebraically_secure"], [158, 2, 1, "", "is_andrx"], [158, 2, 1, "", "is_arx"], [158, 2, 1, "", "is_power_of_2_word_based"], [158, 2, 1, "", "is_shift_arx"], [158, 2, 1, "", "is_spn"], [158, 2, 1, "", "make_cipher_id"], [158, 2, 1, "", "make_file_name"], [158, 3, 1, "", "number_of_rounds"], [158, 3, 1, "", "output_bit_size"], [158, 2, 1, "", "polynomial_system"], [158, 2, 1, "", "polynomial_system_at_round"], [158, 2, 1, "", "print"], [158, 2, 1, "", "print_as_python_dictionary"], [158, 2, 1, "", "print_as_python_dictionary_to_file"], [158, 2, 1, "", "print_evaluation_python_code"], [158, 2, 1, "", "print_evaluation_python_code_to_file"], [158, 2, 1, "", "print_input_information"], [158, 3, 1, "", "reference_code"], [158, 2, 1, "", "remove_key_schedule"], [158, 2, 1, "", "remove_round_component"], [158, 2, 1, "", "remove_round_component_from_id"], [158, 2, 1, "", "rho_and_pi_definition"], [158, 2, 1, "", "round_function"], [158, 3, 1, "", "rounds"], [158, 3, 1, "", "rounds_as_list"], [158, 2, 1, "", "set_file_name"], [158, 2, 1, "", "set_id"], [158, 2, 1, "", "set_inputs"], [158, 2, 1, "", "sort_cipher"], [158, 2, 1, "", "state_initialization"], [158, 2, 1, "", "test_against_reference_code"], [158, 2, 1, "", "test_vector_check"], [158, 2, 1, "", "theta_definition"], [158, 3, 1, "", "type"], [158, 2, 1, "", "update_input_id_links_from_component_id"], [158, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.keccak_sbox_permutation": [[159, 1, 1, "", "KeccakSboxPermutation"]], "ciphers.permutations.keccak_sbox_permutation.KeccakSboxPermutation": [[159, 2, 1, "", "add_AND_component"], [159, 2, 1, "", "add_FSR_component"], [159, 2, 1, "", "add_MODADD_component"], [159, 2, 1, "", "add_MODSUB_component"], [159, 2, 1, "", "add_NOT_component"], [159, 2, 1, "", "add_OR_component"], [159, 2, 1, "", "add_SBOX_component"], [159, 2, 1, "", "add_SHIFT_component"], [159, 2, 1, "", "add_XOR_component"], [159, 2, 1, "", "add_cipher_output_component"], [159, 2, 1, "", "add_concatenate_component"], [159, 2, 1, "", "add_constant_component"], [159, 2, 1, "", "add_intermediate_output_component"], [159, 2, 1, "", "add_linear_layer_component"], [159, 2, 1, "", "add_mix_column_component"], [159, 2, 1, "", "add_output_component"], [159, 2, 1, "", "add_permutation_component"], [159, 2, 1, "", "add_reverse_component"], [159, 2, 1, "", "add_rotate_component"], [159, 2, 1, "", "add_round"], [159, 2, 1, "", "add_round_key_output_component"], [159, 2, 1, "", "add_round_output_component"], [159, 2, 1, "", "add_shift_rows_component"], [159, 2, 1, "", "add_sigma_component"], [159, 2, 1, "", "add_suffix_to_components"], [159, 2, 1, "", "add_theta_gaston_component"], [159, 2, 1, "", "add_theta_keccak_component"], [159, 2, 1, "", "add_theta_xoodoo_component"], [159, 2, 1, "", "add_variable_rotate_component"], [159, 2, 1, "", "add_variable_shift_component"], [159, 2, 1, "", "add_word_permutation_component"], [159, 2, 1, "", "as_python_dictionary"], [159, 2, 1, "", "chi_definition"], [159, 2, 1, "", "cipher_inverse"], [159, 2, 1, "", "cipher_partial_inverse"], [159, 2, 1, "", "component_from"], [159, 2, 1, "", "convert_to_compound_xor_cipher"], [159, 2, 1, "", "create_networx_graph_from_input_ids"], [159, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [159, 3, 1, "", "current_round"], [159, 3, 1, "", "current_round_number"], [159, 3, 1, "", "current_round_number_of_components"], [159, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [159, 2, 1, "", "evaluate"], [159, 2, 1, "", "evaluate_using_c"], [159, 2, 1, "", "evaluate_vectorized"], [159, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [159, 3, 1, "", "family_name"], [159, 3, 1, "", "file_name"], [159, 2, 1, "", "find_impossible_property"], [159, 2, 1, "", "generate_bit_based_c_code"], [159, 2, 1, "", "generate_evaluate_c_code_shared_library"], [159, 2, 1, "", "generate_word_based_c_code"], [159, 2, 1, "", "get_all_components"], [159, 2, 1, "", "get_all_components_ids"], [159, 2, 1, "", "get_all_inputs_bit_positions"], [159, 2, 1, "", "get_ci"], [159, 2, 1, "", "get_component_from_id"], [159, 2, 1, "", "get_components_in_round"], [159, 2, 1, "", "get_current_component_id"], [159, 2, 1, "", "get_model"], [159, 2, 1, "", "get_number_of_components_in_round"], [159, 2, 1, "", "get_partial_cipher"], [159, 2, 1, "", "get_round_from_component_id"], [159, 2, 1, "", "get_sizes_of_components_by_type"], [159, 3, 1, "", "id"], [159, 2, 1, "", "impossible_differential_search"], [159, 3, 1, "", "inputs"], [159, 3, 1, "", "inputs_bit_size"], [159, 2, 1, "", "inputs_size_to_dict"], [159, 2, 1, "", "iota_definition"], [159, 2, 1, "", "is_algebraically_secure"], [159, 2, 1, "", "is_andrx"], [159, 2, 1, "", "is_arx"], [159, 2, 1, "", "is_power_of_2_word_based"], [159, 2, 1, "", "is_shift_arx"], [159, 2, 1, "", "is_spn"], [159, 2, 1, "", "make_cipher_id"], [159, 2, 1, "", "make_file_name"], [159, 3, 1, "", "number_of_rounds"], [159, 3, 1, "", "output_bit_size"], [159, 2, 1, "", "polynomial_system"], [159, 2, 1, "", "polynomial_system_at_round"], [159, 2, 1, "", "print"], [159, 2, 1, "", "print_as_python_dictionary"], [159, 2, 1, "", "print_as_python_dictionary_to_file"], [159, 2, 1, "", "print_evaluation_python_code"], [159, 2, 1, "", "print_evaluation_python_code_to_file"], [159, 2, 1, "", "print_input_information"], [159, 3, 1, "", "reference_code"], [159, 2, 1, "", "remove_key_schedule"], [159, 2, 1, "", "remove_round_component"], [159, 2, 1, "", "remove_round_component_from_id"], [159, 2, 1, "", "rho_and_pi_definition"], [159, 2, 1, "", "round_function"], [159, 3, 1, "", "rounds"], [159, 3, 1, "", "rounds_as_list"], [159, 2, 1, "", "set_file_name"], [159, 2, 1, "", "set_id"], [159, 2, 1, "", "set_inputs"], [159, 2, 1, "", "sort_cipher"], [159, 2, 1, "", "state_initialization"], [159, 2, 1, "", "test_against_reference_code"], [159, 2, 1, "", "test_vector_check"], [159, 2, 1, "", "theta_definition"], [159, 3, 1, "", "type"], [159, 2, 1, "", "update_input_id_links_from_component_id"], [159, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.photon_permutation": [[160, 1, 1, "", "PhotonPermutation"]], "ciphers.permutations.photon_permutation.PhotonPermutation": [[160, 2, 1, "", "add_AND_component"], [160, 2, 1, "", "add_FSR_component"], [160, 2, 1, "", "add_MODADD_component"], [160, 2, 1, "", "add_MODSUB_component"], [160, 2, 1, "", "add_NOT_component"], [160, 2, 1, "", "add_OR_component"], [160, 2, 1, "", "add_SBOX_component"], [160, 2, 1, "", "add_SHIFT_component"], [160, 2, 1, "", "add_XOR_component"], [160, 2, 1, "", "add_cipher_output_component"], [160, 2, 1, "", "add_concatenate_component"], [160, 2, 1, "", "add_constant_component"], [160, 2, 1, "", "add_intermediate_output_component"], [160, 2, 1, "", "add_linear_layer_component"], [160, 2, 1, "", "add_mix_column_component"], [160, 2, 1, "", "add_permutation_component"], [160, 2, 1, "", "add_reverse_component"], [160, 2, 1, "", "add_rotate_component"], [160, 2, 1, "", "add_round"], [160, 2, 1, "", "add_round_key_output_component"], [160, 2, 1, "", "add_round_output_component"], [160, 2, 1, "", "add_shift_rows_component"], [160, 2, 1, "", "add_sigma_component"], [160, 2, 1, "", "add_suffix_to_components"], [160, 2, 1, "", "add_theta_gaston_component"], [160, 2, 1, "", "add_theta_keccak_component"], [160, 2, 1, "", "add_theta_xoodoo_component"], [160, 2, 1, "", "add_variable_rotate_component"], [160, 2, 1, "", "add_variable_shift_component"], [160, 2, 1, "", "add_word_permutation_component"], [160, 2, 1, "", "as_python_dictionary"], [160, 2, 1, "", "cipher_inverse"], [160, 2, 1, "", "cipher_partial_inverse"], [160, 2, 1, "", "component_from"], [160, 2, 1, "", "convert_to_compound_xor_cipher"], [160, 2, 1, "", "create_networx_graph_from_input_ids"], [160, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [160, 3, 1, "", "current_round"], [160, 3, 1, "", "current_round_number"], [160, 3, 1, "", "current_round_number_of_components"], [160, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [160, 2, 1, "", "evaluate"], [160, 2, 1, "", "evaluate_using_c"], [160, 2, 1, "", "evaluate_vectorized"], [160, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [160, 3, 1, "", "family_name"], [160, 3, 1, "", "file_name"], [160, 2, 1, "", "find_impossible_property"], [160, 2, 1, "", "generate_bit_based_c_code"], [160, 2, 1, "", "generate_evaluate_c_code_shared_library"], [160, 2, 1, "", "generate_word_based_c_code"], [160, 2, 1, "", "get_all_components"], [160, 2, 1, "", "get_all_components_ids"], [160, 2, 1, "", "get_all_inputs_bit_positions"], [160, 2, 1, "", "get_component_from_id"], [160, 2, 1, "", "get_components_in_round"], [160, 2, 1, "", "get_current_component_id"], [160, 2, 1, "", "get_model"], [160, 2, 1, "", "get_number_of_components_in_round"], [160, 2, 1, "", "get_partial_cipher"], [160, 2, 1, "", "get_round_from_component_id"], [160, 2, 1, "", "get_sizes_of_components_by_type"], [160, 3, 1, "", "id"], [160, 2, 1, "", "impossible_differential_search"], [160, 3, 1, "", "inputs"], [160, 3, 1, "", "inputs_bit_size"], [160, 2, 1, "", "inputs_size_to_dict"], [160, 2, 1, "", "is_algebraically_secure"], [160, 2, 1, "", "is_andrx"], [160, 2, 1, "", "is_arx"], [160, 2, 1, "", "is_power_of_2_word_based"], [160, 2, 1, "", "is_shift_arx"], [160, 2, 1, "", "is_spn"], [160, 2, 1, "", "make_cipher_id"], [160, 2, 1, "", "make_file_name"], [160, 3, 1, "", "number_of_rounds"], [160, 3, 1, "", "output_bit_size"], [160, 2, 1, "", "polynomial_system"], [160, 2, 1, "", "polynomial_system_at_round"], [160, 2, 1, "", "print"], [160, 2, 1, "", "print_as_python_dictionary"], [160, 2, 1, "", "print_as_python_dictionary_to_file"], [160, 2, 1, "", "print_evaluation_python_code"], [160, 2, 1, "", "print_evaluation_python_code_to_file"], [160, 2, 1, "", "print_input_information"], [160, 3, 1, "", "reference_code"], [160, 2, 1, "", "remove_key_schedule"], [160, 2, 1, "", "remove_round_component"], [160, 2, 1, "", "remove_round_component_from_id"], [160, 2, 1, "", "round_function"], [160, 3, 1, "", "rounds"], [160, 3, 1, "", "rounds_as_list"], [160, 2, 1, "", "set_file_name"], [160, 2, 1, "", "set_id"], [160, 2, 1, "", "set_inputs"], [160, 2, 1, "", "sort_cipher"], [160, 2, 1, "", "test_against_reference_code"], [160, 2, 1, "", "test_vector_check"], [160, 3, 1, "", "type"], [160, 2, 1, "", "update_input_id_links_from_component_id"], [160, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.salsa_permutation": [[161, 1, 1, "", "SalsaPermutation"]], "ciphers.permutations.salsa_permutation.SalsaPermutation": [[161, 2, 1, "", "add_AND_component"], [161, 2, 1, "", "add_FSR_component"], [161, 2, 1, "", "add_MODADD_component"], [161, 2, 1, "", "add_MODSUB_component"], [161, 2, 1, "", "add_NOT_component"], [161, 2, 1, "", "add_OR_component"], [161, 2, 1, "", "add_SBOX_component"], [161, 2, 1, "", "add_SHIFT_component"], [161, 2, 1, "", "add_XOR_component"], [161, 2, 1, "", "add_cipher_output_component"], [161, 2, 1, "", "add_concatenate_component"], [161, 2, 1, "", "add_constant_component"], [161, 2, 1, "", "add_intermediate_output_component"], [161, 2, 1, "", "add_linear_layer_component"], [161, 2, 1, "", "add_mix_column_component"], [161, 2, 1, "", "add_permutation_component"], [161, 2, 1, "", "add_reverse_component"], [161, 2, 1, "", "add_rotate_component"], [161, 2, 1, "", "add_round"], [161, 2, 1, "", "add_round_key_output_component"], [161, 2, 1, "", "add_round_output_component"], [161, 2, 1, "", "add_shift_rows_component"], [161, 2, 1, "", "add_sigma_component"], [161, 2, 1, "", "add_suffix_to_components"], [161, 2, 1, "", "add_theta_gaston_component"], [161, 2, 1, "", "add_theta_keccak_component"], [161, 2, 1, "", "add_theta_xoodoo_component"], [161, 2, 1, "", "add_variable_rotate_component"], [161, 2, 1, "", "add_variable_shift_component"], [161, 2, 1, "", "add_word_permutation_component"], [161, 2, 1, "", "as_python_dictionary"], [161, 2, 1, "", "bottom_half_quarter_round"], [161, 2, 1, "", "cipher_inverse"], [161, 2, 1, "", "cipher_partial_inverse"], [161, 2, 1, "", "component_from"], [161, 2, 1, "", "convert_to_compound_xor_cipher"], [161, 2, 1, "", "create_networx_graph_from_input_ids"], [161, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [161, 3, 1, "", "current_round"], [161, 3, 1, "", "current_round_number"], [161, 3, 1, "", "current_round_number_of_components"], [161, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [161, 2, 1, "", "evaluate"], [161, 2, 1, "", "evaluate_using_c"], [161, 2, 1, "", "evaluate_vectorized"], [161, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [161, 3, 1, "", "family_name"], [161, 3, 1, "", "file_name"], [161, 2, 1, "", "find_impossible_property"], [161, 2, 1, "", "generate_bit_based_c_code"], [161, 2, 1, "", "generate_evaluate_c_code_shared_library"], [161, 2, 1, "", "generate_word_based_c_code"], [161, 2, 1, "", "get_all_components"], [161, 2, 1, "", "get_all_components_ids"], [161, 2, 1, "", "get_all_inputs_bit_positions"], [161, 2, 1, "", "get_component_from_id"], [161, 2, 1, "", "get_components_in_round"], [161, 2, 1, "", "get_current_component_id"], [161, 2, 1, "", "get_model"], [161, 2, 1, "", "get_number_of_components_in_round"], [161, 2, 1, "", "get_partial_cipher"], [161, 2, 1, "", "get_round_from_component_id"], [161, 2, 1, "", "get_sizes_of_components_by_type"], [161, 3, 1, "", "id"], [161, 2, 1, "", "impossible_differential_search"], [161, 3, 1, "", "inputs"], [161, 3, 1, "", "inputs_bit_size"], [161, 2, 1, "", "inputs_size_to_dict"], [161, 2, 1, "", "is_algebraically_secure"], [161, 2, 1, "", "is_andrx"], [161, 2, 1, "", "is_arx"], [161, 2, 1, "", "is_power_of_2_word_based"], [161, 2, 1, "", "is_shift_arx"], [161, 2, 1, "", "is_spn"], [161, 2, 1, "", "make_cipher_id"], [161, 2, 1, "", "make_file_name"], [161, 3, 1, "", "number_of_rounds"], [161, 3, 1, "", "output_bit_size"], [161, 2, 1, "", "polynomial_system"], [161, 2, 1, "", "polynomial_system_at_round"], [161, 2, 1, "", "print"], [161, 2, 1, "", "print_as_python_dictionary"], [161, 2, 1, "", "print_as_python_dictionary_to_file"], [161, 2, 1, "", "print_evaluation_python_code"], [161, 2, 1, "", "print_evaluation_python_code_to_file"], [161, 2, 1, "", "print_input_information"], [161, 3, 1, "", "reference_code"], [161, 2, 1, "", "remove_key_schedule"], [161, 2, 1, "", "remove_round_component"], [161, 2, 1, "", "remove_round_component_from_id"], [161, 3, 1, "", "rounds"], [161, 3, 1, "", "rounds_as_list"], [161, 2, 1, "", "set_file_name"], [161, 2, 1, "", "set_id"], [161, 2, 1, "", "set_inputs"], [161, 2, 1, "", "sort_cipher"], [161, 2, 1, "", "test_against_reference_code"], [161, 2, 1, "", "test_vector_check"], [161, 2, 1, "", "top_half_quarter_round"], [161, 3, 1, "", "type"], [161, 2, 1, "", "update_input_id_links_from_component_id"], [161, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.sparkle_permutation": [[162, 1, 1, "", "SparklePermutation"]], "ciphers.permutations.sparkle_permutation.SparklePermutation": [[162, 2, 1, "", "add_AND_component"], [162, 2, 1, "", "add_FSR_component"], [162, 2, 1, "", "add_MODADD_component"], [162, 2, 1, "", "add_MODSUB_component"], [162, 2, 1, "", "add_NOT_component"], [162, 2, 1, "", "add_OR_component"], [162, 2, 1, "", "add_SBOX_component"], [162, 2, 1, "", "add_SHIFT_component"], [162, 2, 1, "", "add_XOR_component"], [162, 2, 1, "", "add_cipher_output_component"], [162, 2, 1, "", "add_concatenate_component"], [162, 2, 1, "", "add_constant_component"], [162, 2, 1, "", "add_intermediate_output_component"], [162, 2, 1, "", "add_linear_layer_component"], [162, 2, 1, "", "add_mix_column_component"], [162, 2, 1, "", "add_permutation_component"], [162, 2, 1, "", "add_reverse_component"], [162, 2, 1, "", "add_rotate_component"], [162, 2, 1, "", "add_round"], [162, 2, 1, "", "add_round_key_output_component"], [162, 2, 1, "", "add_round_output_component"], [162, 2, 1, "", "add_shift_rows_component"], [162, 2, 1, "", "add_sigma_component"], [162, 2, 1, "", "add_suffix_to_components"], [162, 2, 1, "", "add_theta_gaston_component"], [162, 2, 1, "", "add_theta_keccak_component"], [162, 2, 1, "", "add_theta_xoodoo_component"], [162, 2, 1, "", "add_variable_rotate_component"], [162, 2, 1, "", "add_variable_shift_component"], [162, 2, 1, "", "add_word_permutation_component"], [162, 2, 1, "", "alzette"], [162, 2, 1, "", "alzette_round"], [162, 2, 1, "", "as_python_dictionary"], [162, 2, 1, "", "cipher_inverse"], [162, 2, 1, "", "cipher_partial_inverse"], [162, 2, 1, "", "component_from"], [162, 2, 1, "", "convert_to_compound_xor_cipher"], [162, 2, 1, "", "create_networx_graph_from_input_ids"], [162, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [162, 3, 1, "", "current_round"], [162, 3, 1, "", "current_round_number"], [162, 3, 1, "", "current_round_number_of_components"], [162, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [162, 2, 1, "", "ell_function"], [162, 2, 1, "", "evaluate"], [162, 2, 1, "", "evaluate_using_c"], [162, 2, 1, "", "evaluate_vectorized"], [162, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [162, 3, 1, "", "family_name"], [162, 3, 1, "", "file_name"], [162, 2, 1, "", "find_impossible_property"], [162, 2, 1, "", "generate_bit_based_c_code"], [162, 2, 1, "", "generate_evaluate_c_code_shared_library"], [162, 2, 1, "", "generate_word_based_c_code"], [162, 2, 1, "", "get_all_components"], [162, 2, 1, "", "get_all_components_ids"], [162, 2, 1, "", "get_all_inputs_bit_positions"], [162, 2, 1, "", "get_component_from_id"], [162, 2, 1, "", "get_components_in_round"], [162, 2, 1, "", "get_current_component_id"], [162, 2, 1, "", "get_model"], [162, 2, 1, "", "get_number_of_components_in_round"], [162, 2, 1, "", "get_partial_cipher"], [162, 2, 1, "", "get_round_from_component_id"], [162, 2, 1, "", "get_sizes_of_components_by_type"], [162, 3, 1, "", "id"], [162, 2, 1, "", "impossible_differential_search"], [162, 3, 1, "", "inputs"], [162, 3, 1, "", "inputs_bit_size"], [162, 2, 1, "", "inputs_size_to_dict"], [162, 2, 1, "", "is_algebraically_secure"], [162, 2, 1, "", "is_andrx"], [162, 2, 1, "", "is_arx"], [162, 2, 1, "", "is_power_of_2_word_based"], [162, 2, 1, "", "is_shift_arx"], [162, 2, 1, "", "is_spn"], [162, 2, 1, "", "linear_layer"], [162, 2, 1, "", "make_cipher_id"], [162, 2, 1, "", "make_file_name"], [162, 3, 1, "", "number_of_rounds"], [162, 3, 1, "", "output_bit_size"], [162, 2, 1, "", "polynomial_system"], [162, 2, 1, "", "polynomial_system_at_round"], [162, 2, 1, "", "print"], [162, 2, 1, "", "print_as_python_dictionary"], [162, 2, 1, "", "print_as_python_dictionary_to_file"], [162, 2, 1, "", "print_evaluation_python_code"], [162, 2, 1, "", "print_evaluation_python_code_to_file"], [162, 2, 1, "", "print_input_information"], [162, 3, 1, "", "reference_code"], [162, 2, 1, "", "remove_key_schedule"], [162, 2, 1, "", "remove_round_component"], [162, 2, 1, "", "remove_round_component_from_id"], [162, 2, 1, "", "round_function"], [162, 3, 1, "", "rounds"], [162, 3, 1, "", "rounds_as_list"], [162, 2, 1, "", "set_file_name"], [162, 2, 1, "", "set_id"], [162, 2, 1, "", "set_inputs"], [162, 2, 1, "", "sort_cipher"], [162, 2, 1, "", "test_against_reference_code"], [162, 2, 1, "", "test_vector_check"], [162, 3, 1, "", "type"], [162, 2, 1, "", "update_input_id_links_from_component_id"], [162, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.spongent_pi_fsr_permutation": [[163, 1, 1, "", "SpongentPiFSRPermutation"]], "ciphers.permutations.spongent_pi_fsr_permutation.SpongentPiFSRPermutation": [[163, 2, 1, "", "add_AND_component"], [163, 2, 1, "", "add_FSR_component"], [163, 2, 1, "", "add_MODADD_component"], [163, 2, 1, "", "add_MODSUB_component"], [163, 2, 1, "", "add_NOT_component"], [163, 2, 1, "", "add_OR_component"], [163, 2, 1, "", "add_SBOX_component"], [163, 2, 1, "", "add_SHIFT_component"], [163, 2, 1, "", "add_XOR_component"], [163, 2, 1, "", "add_cipher_output_component"], [163, 2, 1, "", "add_concatenate_component"], [163, 2, 1, "", "add_constant_component"], [163, 2, 1, "", "add_intermediate_output_component"], [163, 2, 1, "", "add_linear_layer_component"], [163, 2, 1, "", "add_mix_column_component"], [163, 2, 1, "", "add_permutation_component"], [163, 2, 1, "", "add_reverse_component"], [163, 2, 1, "", "add_rotate_component"], [163, 2, 1, "", "add_round"], [163, 2, 1, "", "add_round_key_output_component"], [163, 2, 1, "", "add_round_output_component"], [163, 2, 1, "", "add_shift_rows_component"], [163, 2, 1, "", "add_sigma_component"], [163, 2, 1, "", "add_suffix_to_components"], [163, 2, 1, "", "add_theta_gaston_component"], [163, 2, 1, "", "add_theta_keccak_component"], [163, 2, 1, "", "add_theta_xoodoo_component"], [163, 2, 1, "", "add_variable_rotate_component"], [163, 2, 1, "", "add_variable_shift_component"], [163, 2, 1, "", "add_word_permutation_component"], [163, 2, 1, "", "as_python_dictionary"], [163, 2, 1, "", "cipher_inverse"], [163, 2, 1, "", "cipher_partial_inverse"], [163, 2, 1, "", "component_from"], [163, 2, 1, "", "convert_to_compound_xor_cipher"], [163, 2, 1, "", "create_networx_graph_from_input_ids"], [163, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [163, 3, 1, "", "current_round"], [163, 3, 1, "", "current_round_number"], [163, 3, 1, "", "current_round_number_of_components"], [163, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [163, 2, 1, "", "evaluate"], [163, 2, 1, "", "evaluate_using_c"], [163, 2, 1, "", "evaluate_vectorized"], [163, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [163, 3, 1, "", "family_name"], [163, 3, 1, "", "file_name"], [163, 2, 1, "", "find_impossible_property"], [163, 2, 1, "", "generate_bit_based_c_code"], [163, 2, 1, "", "generate_evaluate_c_code_shared_library"], [163, 2, 1, "", "generate_word_based_c_code"], [163, 2, 1, "", "get_all_components"], [163, 2, 1, "", "get_all_components_ids"], [163, 2, 1, "", "get_all_inputs_bit_positions"], [163, 2, 1, "", "get_component_from_id"], [163, 2, 1, "", "get_components_in_round"], [163, 2, 1, "", "get_current_component_id"], [163, 2, 1, "", "get_model"], [163, 2, 1, "", "get_number_of_components_in_round"], [163, 2, 1, "", "get_partial_cipher"], [163, 2, 1, "", "get_round_from_component_id"], [163, 2, 1, "", "get_sizes_of_components_by_type"], [163, 2, 1, "", "icounter_update"], [163, 3, 1, "", "id"], [163, 2, 1, "", "impossible_differential_search"], [163, 3, 1, "", "inputs"], [163, 3, 1, "", "inputs_bit_size"], [163, 2, 1, "", "inputs_size_to_dict"], [163, 2, 1, "", "is_algebraically_secure"], [163, 2, 1, "", "is_andrx"], [163, 2, 1, "", "is_arx"], [163, 2, 1, "", "is_power_of_2_word_based"], [163, 2, 1, "", "is_shift_arx"], [163, 2, 1, "", "is_spn"], [163, 2, 1, "", "make_cipher_id"], [163, 2, 1, "", "make_file_name"], [163, 3, 1, "", "number_of_rounds"], [163, 3, 1, "", "output_bit_size"], [163, 2, 1, "", "polynomial_system"], [163, 2, 1, "", "polynomial_system_at_round"], [163, 2, 1, "", "print"], [163, 2, 1, "", "print_as_python_dictionary"], [163, 2, 1, "", "print_as_python_dictionary_to_file"], [163, 2, 1, "", "print_evaluation_python_code"], [163, 2, 1, "", "print_evaluation_python_code_to_file"], [163, 2, 1, "", "print_input_information"], [163, 3, 1, "", "reference_code"], [163, 2, 1, "", "remove_key_schedule"], [163, 2, 1, "", "remove_round_component"], [163, 2, 1, "", "remove_round_component_from_id"], [163, 2, 1, "", "round_function"], [163, 3, 1, "", "rounds"], [163, 3, 1, "", "rounds_as_list"], [163, 2, 1, "", "set_file_name"], [163, 2, 1, "", "set_id"], [163, 2, 1, "", "set_inputs"], [163, 2, 1, "", "sort_cipher"], [163, 2, 1, "", "test_against_reference_code"], [163, 2, 1, "", "test_vector_check"], [163, 3, 1, "", "type"], [163, 2, 1, "", "update_input_id_links_from_component_id"], [163, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.spongent_pi_permutation": [[164, 1, 1, "", "SpongentPiPermutation"]], "ciphers.permutations.spongent_pi_permutation.SpongentPiPermutation": [[164, 2, 1, "", "add_AND_component"], [164, 2, 1, "", "add_FSR_component"], [164, 2, 1, "", "add_MODADD_component"], [164, 2, 1, "", "add_MODSUB_component"], [164, 2, 1, "", "add_NOT_component"], [164, 2, 1, "", "add_OR_component"], [164, 2, 1, "", "add_SBOX_component"], [164, 2, 1, "", "add_SHIFT_component"], [164, 2, 1, "", "add_XOR_component"], [164, 2, 1, "", "add_cipher_output_component"], [164, 2, 1, "", "add_concatenate_component"], [164, 2, 1, "", "add_constant_component"], [164, 2, 1, "", "add_intermediate_output_component"], [164, 2, 1, "", "add_linear_layer_component"], [164, 2, 1, "", "add_mix_column_component"], [164, 2, 1, "", "add_permutation_component"], [164, 2, 1, "", "add_reverse_component"], [164, 2, 1, "", "add_rotate_component"], [164, 2, 1, "", "add_round"], [164, 2, 1, "", "add_round_key_output_component"], [164, 2, 1, "", "add_round_output_component"], [164, 2, 1, "", "add_shift_rows_component"], [164, 2, 1, "", "add_sigma_component"], [164, 2, 1, "", "add_suffix_to_components"], [164, 2, 1, "", "add_theta_gaston_component"], [164, 2, 1, "", "add_theta_keccak_component"], [164, 2, 1, "", "add_theta_xoodoo_component"], [164, 2, 1, "", "add_variable_rotate_component"], [164, 2, 1, "", "add_variable_shift_component"], [164, 2, 1, "", "add_word_permutation_component"], [164, 2, 1, "", "as_python_dictionary"], [164, 2, 1, "", "cipher_inverse"], [164, 2, 1, "", "cipher_partial_inverse"], [164, 2, 1, "", "component_from"], [164, 2, 1, "", "convert_to_compound_xor_cipher"], [164, 2, 1, "", "create_networx_graph_from_input_ids"], [164, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [164, 3, 1, "", "current_round"], [164, 3, 1, "", "current_round_number"], [164, 3, 1, "", "current_round_number_of_components"], [164, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [164, 2, 1, "", "evaluate"], [164, 2, 1, "", "evaluate_using_c"], [164, 2, 1, "", "evaluate_vectorized"], [164, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [164, 3, 1, "", "family_name"], [164, 3, 1, "", "file_name"], [164, 2, 1, "", "find_impossible_property"], [164, 2, 1, "", "generate_bit_based_c_code"], [164, 2, 1, "", "generate_evaluate_c_code_shared_library"], [164, 2, 1, "", "generate_word_based_c_code"], [164, 2, 1, "", "get_all_components"], [164, 2, 1, "", "get_all_components_ids"], [164, 2, 1, "", "get_all_inputs_bit_positions"], [164, 2, 1, "", "get_component_from_id"], [164, 2, 1, "", "get_components_in_round"], [164, 2, 1, "", "get_current_component_id"], [164, 2, 1, "", "get_model"], [164, 2, 1, "", "get_number_of_components_in_round"], [164, 2, 1, "", "get_partial_cipher"], [164, 2, 1, "", "get_round_from_component_id"], [164, 2, 1, "", "get_sizes_of_components_by_type"], [164, 2, 1, "", "icounter_update"], [164, 3, 1, "", "id"], [164, 2, 1, "", "impossible_differential_search"], [164, 3, 1, "", "inputs"], [164, 3, 1, "", "inputs_bit_size"], [164, 2, 1, "", "inputs_size_to_dict"], [164, 2, 1, "", "is_algebraically_secure"], [164, 2, 1, "", "is_andrx"], [164, 2, 1, "", "is_arx"], [164, 2, 1, "", "is_power_of_2_word_based"], [164, 2, 1, "", "is_shift_arx"], [164, 2, 1, "", "is_spn"], [164, 2, 1, "", "make_cipher_id"], [164, 2, 1, "", "make_file_name"], [164, 3, 1, "", "number_of_rounds"], [164, 3, 1, "", "output_bit_size"], [164, 2, 1, "", "polynomial_system"], [164, 2, 1, "", "polynomial_system_at_round"], [164, 2, 1, "", "print"], [164, 2, 1, "", "print_as_python_dictionary"], [164, 2, 1, "", "print_as_python_dictionary_to_file"], [164, 2, 1, "", "print_evaluation_python_code"], [164, 2, 1, "", "print_evaluation_python_code_to_file"], [164, 2, 1, "", "print_input_information"], [164, 3, 1, "", "reference_code"], [164, 2, 1, "", "remove_key_schedule"], [164, 2, 1, "", "remove_round_component"], [164, 2, 1, "", "remove_round_component_from_id"], [164, 2, 1, "", "round_function"], [164, 3, 1, "", "rounds"], [164, 3, 1, "", "rounds_as_list"], [164, 2, 1, "", "set_file_name"], [164, 2, 1, "", "set_id"], [164, 2, 1, "", "set_inputs"], [164, 2, 1, "", "sort_cipher"], [164, 2, 1, "", "test_against_reference_code"], [164, 2, 1, "", "test_vector_check"], [164, 3, 1, "", "type"], [164, 2, 1, "", "update_input_id_links_from_component_id"], [164, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.spongent_pi_precomputation_permutation": [[165, 1, 1, "", "SpongentPiPrecomputationPermutation"]], "ciphers.permutations.spongent_pi_precomputation_permutation.SpongentPiPrecomputationPermutation": [[165, 2, 1, "", "add_AND_component"], [165, 2, 1, "", "add_FSR_component"], [165, 2, 1, "", "add_MODADD_component"], [165, 2, 1, "", "add_MODSUB_component"], [165, 2, 1, "", "add_NOT_component"], [165, 2, 1, "", "add_OR_component"], [165, 2, 1, "", "add_SBOX_component"], [165, 2, 1, "", "add_SHIFT_component"], [165, 2, 1, "", "add_XOR_component"], [165, 2, 1, "", "add_cipher_output_component"], [165, 2, 1, "", "add_concatenate_component"], [165, 2, 1, "", "add_constant_component"], [165, 2, 1, "", "add_intermediate_output_component"], [165, 2, 1, "", "add_linear_layer_component"], [165, 2, 1, "", "add_mix_column_component"], [165, 2, 1, "", "add_permutation_component"], [165, 2, 1, "", "add_reverse_component"], [165, 2, 1, "", "add_rotate_component"], [165, 2, 1, "", "add_round"], [165, 2, 1, "", "add_round_key_output_component"], [165, 2, 1, "", "add_round_output_component"], [165, 2, 1, "", "add_shift_rows_component"], [165, 2, 1, "", "add_sigma_component"], [165, 2, 1, "", "add_suffix_to_components"], [165, 2, 1, "", "add_theta_gaston_component"], [165, 2, 1, "", "add_theta_keccak_component"], [165, 2, 1, "", "add_theta_xoodoo_component"], [165, 2, 1, "", "add_variable_rotate_component"], [165, 2, 1, "", "add_variable_shift_component"], [165, 2, 1, "", "add_word_permutation_component"], [165, 2, 1, "", "as_python_dictionary"], [165, 2, 1, "", "cipher_inverse"], [165, 2, 1, "", "cipher_partial_inverse"], [165, 2, 1, "", "component_from"], [165, 2, 1, "", "convert_to_compound_xor_cipher"], [165, 2, 1, "", "create_networx_graph_from_input_ids"], [165, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [165, 3, 1, "", "current_round"], [165, 3, 1, "", "current_round_number"], [165, 3, 1, "", "current_round_number_of_components"], [165, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [165, 2, 1, "", "evaluate"], [165, 2, 1, "", "evaluate_using_c"], [165, 2, 1, "", "evaluate_vectorized"], [165, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [165, 3, 1, "", "family_name"], [165, 3, 1, "", "file_name"], [165, 2, 1, "", "find_impossible_property"], [165, 2, 1, "", "generate_bit_based_c_code"], [165, 2, 1, "", "generate_evaluate_c_code_shared_library"], [165, 2, 1, "", "generate_word_based_c_code"], [165, 2, 1, "", "get_all_components"], [165, 2, 1, "", "get_all_components_ids"], [165, 2, 1, "", "get_all_inputs_bit_positions"], [165, 2, 1, "", "get_component_from_id"], [165, 2, 1, "", "get_components_in_round"], [165, 2, 1, "", "get_current_component_id"], [165, 2, 1, "", "get_model"], [165, 2, 1, "", "get_number_of_components_in_round"], [165, 2, 1, "", "get_partial_cipher"], [165, 2, 1, "", "get_round_from_component_id"], [165, 2, 1, "", "get_sizes_of_components_by_type"], [165, 3, 1, "", "id"], [165, 2, 1, "", "impossible_differential_search"], [165, 3, 1, "", "inputs"], [165, 3, 1, "", "inputs_bit_size"], [165, 2, 1, "", "inputs_size_to_dict"], [165, 2, 1, "", "is_algebraically_secure"], [165, 2, 1, "", "is_andrx"], [165, 2, 1, "", "is_arx"], [165, 2, 1, "", "is_power_of_2_word_based"], [165, 2, 1, "", "is_shift_arx"], [165, 2, 1, "", "is_spn"], [165, 2, 1, "", "make_cipher_id"], [165, 2, 1, "", "make_file_name"], [165, 3, 1, "", "number_of_rounds"], [165, 3, 1, "", "output_bit_size"], [165, 2, 1, "", "polynomial_system"], [165, 2, 1, "", "polynomial_system_at_round"], [165, 2, 1, "", "print"], [165, 2, 1, "", "print_as_python_dictionary"], [165, 2, 1, "", "print_as_python_dictionary_to_file"], [165, 2, 1, "", "print_evaluation_python_code"], [165, 2, 1, "", "print_evaluation_python_code_to_file"], [165, 2, 1, "", "print_input_information"], [165, 3, 1, "", "reference_code"], [165, 2, 1, "", "remove_key_schedule"], [165, 2, 1, "", "remove_round_component"], [165, 2, 1, "", "remove_round_component_from_id"], [165, 2, 1, "", "round_function"], [165, 3, 1, "", "rounds"], [165, 3, 1, "", "rounds_as_list"], [165, 2, 1, "", "set_file_name"], [165, 2, 1, "", "set_id"], [165, 2, 1, "", "set_inputs"], [165, 2, 1, "", "sort_cipher"], [165, 2, 1, "", "test_against_reference_code"], [165, 2, 1, "", "test_vector_check"], [165, 3, 1, "", "type"], [165, 2, 1, "", "update_input_id_links_from_component_id"], [165, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.tinyjambu_32bits_word_permutation": [[166, 1, 1, "", "TinyJambuWordBasedPermutation"]], "ciphers.permutations.tinyjambu_32bits_word_permutation.TinyJambuWordBasedPermutation": [[166, 2, 1, "", "add_AND_component"], [166, 2, 1, "", "add_FSR_component"], [166, 2, 1, "", "add_MODADD_component"], [166, 2, 1, "", "add_MODSUB_component"], [166, 2, 1, "", "add_NOT_component"], [166, 2, 1, "", "add_OR_component"], [166, 2, 1, "", "add_SBOX_component"], [166, 2, 1, "", "add_SHIFT_component"], [166, 2, 1, "", "add_XOR_component"], [166, 2, 1, "", "add_cipher_output_component"], [166, 2, 1, "", "add_concatenate_component"], [166, 2, 1, "", "add_constant_component"], [166, 2, 1, "", "add_intermediate_output_component"], [166, 2, 1, "", "add_linear_layer_component"], [166, 2, 1, "", "add_mix_column_component"], [166, 2, 1, "", "add_permutation_component"], [166, 2, 1, "", "add_reverse_component"], [166, 2, 1, "", "add_rotate_component"], [166, 2, 1, "", "add_round"], [166, 2, 1, "", "add_round_key_output_component"], [166, 2, 1, "", "add_round_output_component"], [166, 2, 1, "", "add_shift_rows_component"], [166, 2, 1, "", "add_sigma_component"], [166, 2, 1, "", "add_suffix_to_components"], [166, 2, 1, "", "add_theta_gaston_component"], [166, 2, 1, "", "add_theta_keccak_component"], [166, 2, 1, "", "add_theta_xoodoo_component"], [166, 2, 1, "", "add_variable_rotate_component"], [166, 2, 1, "", "add_variable_shift_component"], [166, 2, 1, "", "add_word_permutation_component"], [166, 2, 1, "", "as_python_dictionary"], [166, 2, 1, "", "cipher_inverse"], [166, 2, 1, "", "cipher_partial_inverse"], [166, 2, 1, "", "component_from"], [166, 2, 1, "", "convert_to_compound_xor_cipher"], [166, 2, 1, "", "create_networx_graph_from_input_ids"], [166, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [166, 3, 1, "", "current_round"], [166, 3, 1, "", "current_round_number"], [166, 3, 1, "", "current_round_number_of_components"], [166, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [166, 2, 1, "", "evaluate"], [166, 2, 1, "", "evaluate_using_c"], [166, 2, 1, "", "evaluate_vectorized"], [166, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [166, 3, 1, "", "family_name"], [166, 3, 1, "", "file_name"], [166, 2, 1, "", "find_impossible_property"], [166, 2, 1, "", "generate_bit_based_c_code"], [166, 2, 1, "", "generate_evaluate_c_code_shared_library"], [166, 2, 1, "", "generate_word_based_c_code"], [166, 2, 1, "", "get_all_components"], [166, 2, 1, "", "get_all_components_ids"], [166, 2, 1, "", "get_all_inputs_bit_positions"], [166, 2, 1, "", "get_component_from_id"], [166, 2, 1, "", "get_components_in_round"], [166, 2, 1, "", "get_current_component_id"], [166, 2, 1, "", "get_model"], [166, 2, 1, "", "get_number_of_components_in_round"], [166, 2, 1, "", "get_partial_cipher"], [166, 2, 1, "", "get_round_from_component_id"], [166, 2, 1, "", "get_sizes_of_components_by_type"], [166, 3, 1, "", "id"], [166, 2, 1, "", "impossible_differential_search"], [166, 3, 1, "", "inputs"], [166, 3, 1, "", "inputs_bit_size"], [166, 2, 1, "", "inputs_size_to_dict"], [166, 2, 1, "", "is_algebraically_secure"], [166, 2, 1, "", "is_andrx"], [166, 2, 1, "", "is_arx"], [166, 2, 1, "", "is_power_of_2_word_based"], [166, 2, 1, "", "is_shift_arx"], [166, 2, 1, "", "is_spn"], [166, 2, 1, "", "make_cipher_id"], [166, 2, 1, "", "make_file_name"], [166, 3, 1, "", "number_of_rounds"], [166, 3, 1, "", "output_bit_size"], [166, 2, 1, "", "polynomial_system"], [166, 2, 1, "", "polynomial_system_at_round"], [166, 2, 1, "", "print"], [166, 2, 1, "", "print_as_python_dictionary"], [166, 2, 1, "", "print_as_python_dictionary_to_file"], [166, 2, 1, "", "print_evaluation_python_code"], [166, 2, 1, "", "print_evaluation_python_code_to_file"], [166, 2, 1, "", "print_input_information"], [166, 3, 1, "", "reference_code"], [166, 2, 1, "", "remove_key_schedule"], [166, 2, 1, "", "remove_round_component"], [166, 2, 1, "", "remove_round_component_from_id"], [166, 2, 1, "", "round_function"], [166, 3, 1, "", "rounds"], [166, 3, 1, "", "rounds_as_list"], [166, 2, 1, "", "set_file_name"], [166, 2, 1, "", "set_id"], [166, 2, 1, "", "set_inputs"], [166, 2, 1, "", "sort_cipher"], [166, 2, 1, "", "test_against_reference_code"], [166, 2, 1, "", "test_vector_check"], [166, 3, 1, "", "type"], [166, 2, 1, "", "update_input_id_links_from_component_id"], [166, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.tinyjambu_fsr_32bits_word_permutation": [[167, 1, 1, "", "TinyJambuFSRWordBasedPermutation"]], "ciphers.permutations.tinyjambu_fsr_32bits_word_permutation.TinyJambuFSRWordBasedPermutation": [[167, 2, 1, "", "add_AND_component"], [167, 2, 1, "", "add_FSR_component"], [167, 2, 1, "", "add_MODADD_component"], [167, 2, 1, "", "add_MODSUB_component"], [167, 2, 1, "", "add_NOT_component"], [167, 2, 1, "", "add_OR_component"], [167, 2, 1, "", "add_SBOX_component"], [167, 2, 1, "", "add_SHIFT_component"], [167, 2, 1, "", "add_XOR_component"], [167, 2, 1, "", "add_cipher_output_component"], [167, 2, 1, "", "add_concatenate_component"], [167, 2, 1, "", "add_constant_component"], [167, 2, 1, "", "add_intermediate_output_component"], [167, 2, 1, "", "add_linear_layer_component"], [167, 2, 1, "", "add_mix_column_component"], [167, 2, 1, "", "add_permutation_component"], [167, 2, 1, "", "add_reverse_component"], [167, 2, 1, "", "add_rotate_component"], [167, 2, 1, "", "add_round"], [167, 2, 1, "", "add_round_key_output_component"], [167, 2, 1, "", "add_round_output_component"], [167, 2, 1, "", "add_shift_rows_component"], [167, 2, 1, "", "add_sigma_component"], [167, 2, 1, "", "add_suffix_to_components"], [167, 2, 1, "", "add_theta_gaston_component"], [167, 2, 1, "", "add_theta_keccak_component"], [167, 2, 1, "", "add_theta_xoodoo_component"], [167, 2, 1, "", "add_variable_rotate_component"], [167, 2, 1, "", "add_variable_shift_component"], [167, 2, 1, "", "add_word_permutation_component"], [167, 2, 1, "", "as_python_dictionary"], [167, 2, 1, "", "cipher_inverse"], [167, 2, 1, "", "cipher_partial_inverse"], [167, 2, 1, "", "component_from"], [167, 2, 1, "", "convert_to_compound_xor_cipher"], [167, 2, 1, "", "create_networx_graph_from_input_ids"], [167, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [167, 3, 1, "", "current_round"], [167, 3, 1, "", "current_round_number"], [167, 3, 1, "", "current_round_number_of_components"], [167, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [167, 2, 1, "", "evaluate"], [167, 2, 1, "", "evaluate_using_c"], [167, 2, 1, "", "evaluate_vectorized"], [167, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [167, 3, 1, "", "family_name"], [167, 3, 1, "", "file_name"], [167, 2, 1, "", "find_impossible_property"], [167, 2, 1, "", "generate_bit_based_c_code"], [167, 2, 1, "", "generate_evaluate_c_code_shared_library"], [167, 2, 1, "", "generate_word_based_c_code"], [167, 2, 1, "", "get_all_components"], [167, 2, 1, "", "get_all_components_ids"], [167, 2, 1, "", "get_all_inputs_bit_positions"], [167, 2, 1, "", "get_component_from_id"], [167, 2, 1, "", "get_components_in_round"], [167, 2, 1, "", "get_current_component_id"], [167, 2, 1, "", "get_model"], [167, 2, 1, "", "get_number_of_components_in_round"], [167, 2, 1, "", "get_partial_cipher"], [167, 2, 1, "", "get_round_from_component_id"], [167, 2, 1, "", "get_sizes_of_components_by_type"], [167, 3, 1, "", "id"], [167, 2, 1, "", "impossible_differential_search"], [167, 3, 1, "", "inputs"], [167, 3, 1, "", "inputs_bit_size"], [167, 2, 1, "", "inputs_size_to_dict"], [167, 2, 1, "", "is_algebraically_secure"], [167, 2, 1, "", "is_andrx"], [167, 2, 1, "", "is_arx"], [167, 2, 1, "", "is_power_of_2_word_based"], [167, 2, 1, "", "is_shift_arx"], [167, 2, 1, "", "is_spn"], [167, 2, 1, "", "make_cipher_id"], [167, 2, 1, "", "make_file_name"], [167, 3, 1, "", "number_of_rounds"], [167, 3, 1, "", "output_bit_size"], [167, 2, 1, "", "polynomial_system"], [167, 2, 1, "", "polynomial_system_at_round"], [167, 2, 1, "", "print"], [167, 2, 1, "", "print_as_python_dictionary"], [167, 2, 1, "", "print_as_python_dictionary_to_file"], [167, 2, 1, "", "print_evaluation_python_code"], [167, 2, 1, "", "print_evaluation_python_code_to_file"], [167, 2, 1, "", "print_input_information"], [167, 3, 1, "", "reference_code"], [167, 2, 1, "", "remove_key_schedule"], [167, 2, 1, "", "remove_round_component"], [167, 2, 1, "", "remove_round_component_from_id"], [167, 2, 1, "", "round_function"], [167, 3, 1, "", "rounds"], [167, 3, 1, "", "rounds_as_list"], [167, 2, 1, "", "set_file_name"], [167, 2, 1, "", "set_id"], [167, 2, 1, "", "set_inputs"], [167, 2, 1, "", "sort_cipher"], [167, 2, 1, "", "test_against_reference_code"], [167, 2, 1, "", "test_vector_check"], [167, 3, 1, "", "type"], [167, 2, 1, "", "update_input_id_links_from_component_id"], [167, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.tinyjambu_permutation": [[168, 1, 1, "", "TinyJambuPermutation"]], "ciphers.permutations.tinyjambu_permutation.TinyJambuPermutation": [[168, 2, 1, "", "add_AND_component"], [168, 2, 1, "", "add_FSR_component"], [168, 2, 1, "", "add_MODADD_component"], [168, 2, 1, "", "add_MODSUB_component"], [168, 2, 1, "", "add_NOT_component"], [168, 2, 1, "", "add_OR_component"], [168, 2, 1, "", "add_SBOX_component"], [168, 2, 1, "", "add_SHIFT_component"], [168, 2, 1, "", "add_XOR_component"], [168, 2, 1, "", "add_cipher_output_component"], [168, 2, 1, "", "add_concatenate_component"], [168, 2, 1, "", "add_constant_component"], [168, 2, 1, "", "add_intermediate_output_component"], [168, 2, 1, "", "add_linear_layer_component"], [168, 2, 1, "", "add_mix_column_component"], [168, 2, 1, "", "add_permutation_component"], [168, 2, 1, "", "add_reverse_component"], [168, 2, 1, "", "add_rotate_component"], [168, 2, 1, "", "add_round"], [168, 2, 1, "", "add_round_key_output_component"], [168, 2, 1, "", "add_round_output_component"], [168, 2, 1, "", "add_shift_rows_component"], [168, 2, 1, "", "add_sigma_component"], [168, 2, 1, "", "add_suffix_to_components"], [168, 2, 1, "", "add_theta_gaston_component"], [168, 2, 1, "", "add_theta_keccak_component"], [168, 2, 1, "", "add_theta_xoodoo_component"], [168, 2, 1, "", "add_variable_rotate_component"], [168, 2, 1, "", "add_variable_shift_component"], [168, 2, 1, "", "add_word_permutation_component"], [168, 2, 1, "", "as_python_dictionary"], [168, 2, 1, "", "cipher_inverse"], [168, 2, 1, "", "cipher_partial_inverse"], [168, 2, 1, "", "component_from"], [168, 2, 1, "", "convert_to_compound_xor_cipher"], [168, 2, 1, "", "create_networx_graph_from_input_ids"], [168, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [168, 3, 1, "", "current_round"], [168, 3, 1, "", "current_round_number"], [168, 3, 1, "", "current_round_number_of_components"], [168, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [168, 2, 1, "", "evaluate"], [168, 2, 1, "", "evaluate_using_c"], [168, 2, 1, "", "evaluate_vectorized"], [168, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [168, 3, 1, "", "family_name"], [168, 3, 1, "", "file_name"], [168, 2, 1, "", "find_impossible_property"], [168, 2, 1, "", "generate_bit_based_c_code"], [168, 2, 1, "", "generate_evaluate_c_code_shared_library"], [168, 2, 1, "", "generate_word_based_c_code"], [168, 2, 1, "", "get_all_components"], [168, 2, 1, "", "get_all_components_ids"], [168, 2, 1, "", "get_all_inputs_bit_positions"], [168, 2, 1, "", "get_component_from_id"], [168, 2, 1, "", "get_components_in_round"], [168, 2, 1, "", "get_current_component_id"], [168, 2, 1, "", "get_model"], [168, 2, 1, "", "get_number_of_components_in_round"], [168, 2, 1, "", "get_partial_cipher"], [168, 2, 1, "", "get_round_from_component_id"], [168, 2, 1, "", "get_sizes_of_components_by_type"], [168, 3, 1, "", "id"], [168, 2, 1, "", "impossible_differential_search"], [168, 3, 1, "", "inputs"], [168, 3, 1, "", "inputs_bit_size"], [168, 2, 1, "", "inputs_size_to_dict"], [168, 2, 1, "", "is_algebraically_secure"], [168, 2, 1, "", "is_andrx"], [168, 2, 1, "", "is_arx"], [168, 2, 1, "", "is_power_of_2_word_based"], [168, 2, 1, "", "is_shift_arx"], [168, 2, 1, "", "is_spn"], [168, 2, 1, "", "make_cipher_id"], [168, 2, 1, "", "make_file_name"], [168, 3, 1, "", "number_of_rounds"], [168, 3, 1, "", "output_bit_size"], [168, 2, 1, "", "polynomial_system"], [168, 2, 1, "", "polynomial_system_at_round"], [168, 2, 1, "", "print"], [168, 2, 1, "", "print_as_python_dictionary"], [168, 2, 1, "", "print_as_python_dictionary_to_file"], [168, 2, 1, "", "print_evaluation_python_code"], [168, 2, 1, "", "print_evaluation_python_code_to_file"], [168, 2, 1, "", "print_input_information"], [168, 3, 1, "", "reference_code"], [168, 2, 1, "", "remove_key_schedule"], [168, 2, 1, "", "remove_round_component"], [168, 2, 1, "", "remove_round_component_from_id"], [168, 2, 1, "", "round_function"], [168, 3, 1, "", "rounds"], [168, 3, 1, "", "rounds_as_list"], [168, 2, 1, "", "set_file_name"], [168, 2, 1, "", "set_id"], [168, 2, 1, "", "set_inputs"], [168, 2, 1, "", "sort_cipher"], [168, 2, 1, "", "test_against_reference_code"], [168, 2, 1, "", "test_vector_check"], [168, 3, 1, "", "type"], [168, 2, 1, "", "update_input_id_links_from_component_id"], [168, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.util": [[169, 4, 1, "", "add_intermediate_output_component_latin_dances_permutations"], [169, 4, 1, "", "get_input_bit_positions_latin_dances"], [169, 4, 1, "", "half_like_round_function_latin_dances"], [169, 4, 1, "", "init_latin_dances_cipher"], [169, 4, 1, "", "init_state_latin_dances"], [169, 4, 1, "", "print_state_ids"], [169, 4, 1, "", "sub_quarter_round_latin_dances"]], "ciphers.permutations.xoodoo_invertible_permutation": [[170, 1, 1, "", "XoodooInvertiblePermutation"]], "ciphers.permutations.xoodoo_invertible_permutation.XoodooInvertiblePermutation": [[170, 2, 1, "", "add_AND_component"], [170, 2, 1, "", "add_FSR_component"], [170, 2, 1, "", "add_MODADD_component"], [170, 2, 1, "", "add_MODSUB_component"], [170, 2, 1, "", "add_NOT_component"], [170, 2, 1, "", "add_OR_component"], [170, 2, 1, "", "add_SBOX_component"], [170, 2, 1, "", "add_SHIFT_component"], [170, 2, 1, "", "add_XOR_component"], [170, 2, 1, "", "add_cipher_output_component"], [170, 2, 1, "", "add_concatenate_component"], [170, 2, 1, "", "add_constant_component"], [170, 2, 1, "", "add_intermediate_output_component"], [170, 2, 1, "", "add_linear_layer_component"], [170, 2, 1, "", "add_mix_column_component"], [170, 2, 1, "", "add_output_component"], [170, 2, 1, "", "add_permutation_component"], [170, 2, 1, "", "add_reverse_component"], [170, 2, 1, "", "add_rotate_component"], [170, 2, 1, "", "add_round"], [170, 2, 1, "", "add_round_key_output_component"], [170, 2, 1, "", "add_round_output_component"], [170, 2, 1, "", "add_shift_rows_component"], [170, 2, 1, "", "add_sigma_component"], [170, 2, 1, "", "add_suffix_to_components"], [170, 2, 1, "", "add_theta_gaston_component"], [170, 2, 1, "", "add_theta_keccak_component"], [170, 2, 1, "", "add_theta_xoodoo_component"], [170, 2, 1, "", "add_variable_rotate_component"], [170, 2, 1, "", "add_variable_shift_component"], [170, 2, 1, "", "add_word_permutation_component"], [170, 2, 1, "", "apply_sbox_to_each_3bit_column"], [170, 2, 1, "", "as_python_dictionary"], [170, 2, 1, "", "chi_definition"], [170, 2, 1, "", "cipher_inverse"], [170, 2, 1, "", "cipher_partial_inverse"], [170, 2, 1, "", "component_from"], [170, 2, 1, "", "convert_to_compound_xor_cipher"], [170, 2, 1, "", "create_networx_graph_from_input_ids"], [170, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [170, 3, 1, "", "current_round"], [170, 3, 1, "", "current_round_number"], [170, 3, 1, "", "current_round_number_of_components"], [170, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [170, 2, 1, "", "evaluate"], [170, 2, 1, "", "evaluate_using_c"], [170, 2, 1, "", "evaluate_vectorized"], [170, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [170, 3, 1, "", "family_name"], [170, 3, 1, "", "file_name"], [170, 2, 1, "", "find_impossible_property"], [170, 2, 1, "", "generate_bit_based_c_code"], [170, 2, 1, "", "generate_evaluate_c_code_shared_library"], [170, 2, 1, "", "generate_word_based_c_code"], [170, 2, 1, "", "get_all_components"], [170, 2, 1, "", "get_all_components_ids"], [170, 2, 1, "", "get_all_inputs_bit_positions"], [170, 2, 1, "", "get_component_from_id"], [170, 2, 1, "", "get_components_in_round"], [170, 2, 1, "", "get_current_component_id"], [170, 2, 1, "", "get_model"], [170, 2, 1, "", "get_number_of_components_in_round"], [170, 2, 1, "", "get_partial_cipher"], [170, 2, 1, "", "get_round_from_component_id"], [170, 2, 1, "", "get_sizes_of_components_by_type"], [170, 3, 1, "", "id"], [170, 2, 1, "", "impossible_differential_search"], [170, 3, 1, "", "inputs"], [170, 3, 1, "", "inputs_bit_size"], [170, 2, 1, "", "inputs_size_to_dict"], [170, 2, 1, "", "iota_definition"], [170, 2, 1, "", "is_algebraically_secure"], [170, 2, 1, "", "is_andrx"], [170, 2, 1, "", "is_arx"], [170, 2, 1, "", "is_power_of_2_word_based"], [170, 2, 1, "", "is_shift_arx"], [170, 2, 1, "", "is_spn"], [170, 2, 1, "", "make_cipher_id"], [170, 2, 1, "", "make_file_name"], [170, 3, 1, "", "number_of_rounds"], [170, 3, 1, "", "output_bit_size"], [170, 2, 1, "", "polynomial_system"], [170, 2, 1, "", "polynomial_system_at_round"], [170, 2, 1, "", "print"], [170, 2, 1, "", "print_as_python_dictionary"], [170, 2, 1, "", "print_as_python_dictionary_to_file"], [170, 2, 1, "", "print_evaluation_python_code"], [170, 2, 1, "", "print_evaluation_python_code_to_file"], [170, 2, 1, "", "print_input_information"], [170, 3, 1, "", "reference_code"], [170, 2, 1, "", "remove_key_schedule"], [170, 2, 1, "", "remove_round_component"], [170, 2, 1, "", "remove_round_component_from_id"], [170, 2, 1, "", "rhoeast_definition"], [170, 2, 1, "", "rhowest_definition"], [170, 2, 1, "", "rotate_x_z"], [170, 2, 1, "", "round_function"], [170, 3, 1, "", "rounds"], [170, 3, 1, "", "rounds_as_list"], [170, 2, 1, "", "set_file_name"], [170, 2, 1, "", "set_id"], [170, 2, 1, "", "set_inputs"], [170, 2, 1, "", "sort_cipher"], [170, 2, 1, "", "test_against_reference_code"], [170, 2, 1, "", "test_vector_check"], [170, 2, 1, "", "theta_definition"], [170, 3, 1, "", "type"], [170, 2, 1, "", "update_input_id_links_from_component_id"], [170, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.xoodoo_permutation": [[171, 1, 1, "", "XoodooPermutation"]], "ciphers.permutations.xoodoo_permutation.XoodooPermutation": [[171, 2, 1, "", "add_AND_component"], [171, 2, 1, "", "add_FSR_component"], [171, 2, 1, "", "add_MODADD_component"], [171, 2, 1, "", "add_MODSUB_component"], [171, 2, 1, "", "add_NOT_component"], [171, 2, 1, "", "add_OR_component"], [171, 2, 1, "", "add_SBOX_component"], [171, 2, 1, "", "add_SHIFT_component"], [171, 2, 1, "", "add_XOR_component"], [171, 2, 1, "", "add_cipher_output_component"], [171, 2, 1, "", "add_concatenate_component"], [171, 2, 1, "", "add_constant_component"], [171, 2, 1, "", "add_intermediate_output_component"], [171, 2, 1, "", "add_linear_layer_component"], [171, 2, 1, "", "add_mix_column_component"], [171, 2, 1, "", "add_output_component"], [171, 2, 1, "", "add_permutation_component"], [171, 2, 1, "", "add_reverse_component"], [171, 2, 1, "", "add_rotate_component"], [171, 2, 1, "", "add_round"], [171, 2, 1, "", "add_round_key_output_component"], [171, 2, 1, "", "add_round_output_component"], [171, 2, 1, "", "add_round_output_linear"], [171, 2, 1, "", "add_round_output_nonlinear"], [171, 2, 1, "", "add_shift_rows_component"], [171, 2, 1, "", "add_sigma_component"], [171, 2, 1, "", "add_suffix_to_components"], [171, 2, 1, "", "add_theta_gaston_component"], [171, 2, 1, "", "add_theta_keccak_component"], [171, 2, 1, "", "add_theta_xoodoo_component"], [171, 2, 1, "", "add_variable_rotate_component"], [171, 2, 1, "", "add_variable_shift_component"], [171, 2, 1, "", "add_word_permutation_component"], [171, 2, 1, "", "as_python_dictionary"], [171, 2, 1, "", "chi_definition"], [171, 2, 1, "", "cipher_inverse"], [171, 2, 1, "", "cipher_partial_inverse"], [171, 2, 1, "", "component_from"], [171, 2, 1, "", "convert_to_compound_xor_cipher"], [171, 2, 1, "", "create_networx_graph_from_input_ids"], [171, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [171, 3, 1, "", "current_round"], [171, 3, 1, "", "current_round_number"], [171, 3, 1, "", "current_round_number_of_components"], [171, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [171, 2, 1, "", "evaluate"], [171, 2, 1, "", "evaluate_using_c"], [171, 2, 1, "", "evaluate_vectorized"], [171, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [171, 3, 1, "", "family_name"], [171, 3, 1, "", "file_name"], [171, 2, 1, "", "find_impossible_property"], [171, 2, 1, "", "generate_bit_based_c_code"], [171, 2, 1, "", "generate_evaluate_c_code_shared_library"], [171, 2, 1, "", "generate_word_based_c_code"], [171, 2, 1, "", "get_all_components"], [171, 2, 1, "", "get_all_components_ids"], [171, 2, 1, "", "get_all_inputs_bit_positions"], [171, 2, 1, "", "get_component_from_id"], [171, 2, 1, "", "get_components_in_round"], [171, 2, 1, "", "get_current_component_id"], [171, 2, 1, "", "get_model"], [171, 2, 1, "", "get_number_of_components_in_round"], [171, 2, 1, "", "get_partial_cipher"], [171, 2, 1, "", "get_round_from_component_id"], [171, 2, 1, "", "get_sizes_of_components_by_type"], [171, 3, 1, "", "id"], [171, 2, 1, "", "impossible_differential_search"], [171, 3, 1, "", "inputs"], [171, 3, 1, "", "inputs_bit_size"], [171, 2, 1, "", "inputs_size_to_dict"], [171, 2, 1, "", "iota_definition"], [171, 2, 1, "", "is_algebraically_secure"], [171, 2, 1, "", "is_andrx"], [171, 2, 1, "", "is_arx"], [171, 2, 1, "", "is_power_of_2_word_based"], [171, 2, 1, "", "is_shift_arx"], [171, 2, 1, "", "is_spn"], [171, 2, 1, "", "make_cipher_id"], [171, 2, 1, "", "make_file_name"], [171, 3, 1, "", "number_of_rounds"], [171, 3, 1, "", "output_bit_size"], [171, 2, 1, "", "polynomial_system"], [171, 2, 1, "", "polynomial_system_at_round"], [171, 2, 1, "", "print"], [171, 2, 1, "", "print_as_python_dictionary"], [171, 2, 1, "", "print_as_python_dictionary_to_file"], [171, 2, 1, "", "print_evaluation_python_code"], [171, 2, 1, "", "print_evaluation_python_code_to_file"], [171, 2, 1, "", "print_input_information"], [171, 3, 1, "", "reference_code"], [171, 2, 1, "", "remove_key_schedule"], [171, 2, 1, "", "remove_round_component"], [171, 2, 1, "", "remove_round_component_from_id"], [171, 2, 1, "", "rhoeast_definition"], [171, 2, 1, "", "rhowest_definition"], [171, 2, 1, "", "rotate_x_z"], [171, 2, 1, "", "round_function"], [171, 3, 1, "", "rounds"], [171, 3, 1, "", "rounds_as_list"], [171, 2, 1, "", "set_file_name"], [171, 2, 1, "", "set_id"], [171, 2, 1, "", "set_inputs"], [171, 2, 1, "", "sort_cipher"], [171, 2, 1, "", "test_against_reference_code"], [171, 2, 1, "", "test_vector_check"], [171, 2, 1, "", "theta_definition"], [171, 3, 1, "", "type"], [171, 2, 1, "", "update_input_id_links_from_component_id"], [171, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.permutations.xoodoo_sbox_permutation": [[172, 1, 1, "", "XoodooSboxPermutation"]], "ciphers.permutations.xoodoo_sbox_permutation.XoodooSboxPermutation": [[172, 2, 1, "", "add_AND_component"], [172, 2, 1, "", "add_FSR_component"], [172, 2, 1, "", "add_MODADD_component"], [172, 2, 1, "", "add_MODSUB_component"], [172, 2, 1, "", "add_NOT_component"], [172, 2, 1, "", "add_OR_component"], [172, 2, 1, "", "add_SBOX_component"], [172, 2, 1, "", "add_SHIFT_component"], [172, 2, 1, "", "add_XOR_component"], [172, 2, 1, "", "add_cipher_output_component"], [172, 2, 1, "", "add_concatenate_component"], [172, 2, 1, "", "add_constant_component"], [172, 2, 1, "", "add_intermediate_output_component"], [172, 2, 1, "", "add_linear_layer_component"], [172, 2, 1, "", "add_mix_column_component"], [172, 2, 1, "", "add_output_component"], [172, 2, 1, "", "add_permutation_component"], [172, 2, 1, "", "add_reverse_component"], [172, 2, 1, "", "add_rotate_component"], [172, 2, 1, "", "add_round"], [172, 2, 1, "", "add_round_key_output_component"], [172, 2, 1, "", "add_round_output_component"], [172, 2, 1, "", "add_shift_rows_component"], [172, 2, 1, "", "add_sigma_component"], [172, 2, 1, "", "add_suffix_to_components"], [172, 2, 1, "", "add_theta_gaston_component"], [172, 2, 1, "", "add_theta_keccak_component"], [172, 2, 1, "", "add_theta_xoodoo_component"], [172, 2, 1, "", "add_variable_rotate_component"], [172, 2, 1, "", "add_variable_shift_component"], [172, 2, 1, "", "add_word_permutation_component"], [172, 2, 1, "", "apply_sbox_to_each_3bit_column"], [172, 2, 1, "", "as_python_dictionary"], [172, 2, 1, "", "chi_definition"], [172, 2, 1, "", "cipher_inverse"], [172, 2, 1, "", "cipher_partial_inverse"], [172, 2, 1, "", "component_from"], [172, 2, 1, "", "convert_to_compound_xor_cipher"], [172, 2, 1, "", "create_networx_graph_from_input_ids"], [172, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [172, 3, 1, "", "current_round"], [172, 3, 1, "", "current_round_number"], [172, 3, 1, "", "current_round_number_of_components"], [172, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [172, 2, 1, "", "evaluate"], [172, 2, 1, "", "evaluate_using_c"], [172, 2, 1, "", "evaluate_vectorized"], [172, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [172, 3, 1, "", "family_name"], [172, 3, 1, "", "file_name"], [172, 2, 1, "", "find_impossible_property"], [172, 2, 1, "", "generate_bit_based_c_code"], [172, 2, 1, "", "generate_evaluate_c_code_shared_library"], [172, 2, 1, "", "generate_word_based_c_code"], [172, 2, 1, "", "get_all_components"], [172, 2, 1, "", "get_all_components_ids"], [172, 2, 1, "", "get_all_inputs_bit_positions"], [172, 2, 1, "", "get_component_from_id"], [172, 2, 1, "", "get_components_in_round"], [172, 2, 1, "", "get_current_component_id"], [172, 2, 1, "", "get_model"], [172, 2, 1, "", "get_number_of_components_in_round"], [172, 2, 1, "", "get_partial_cipher"], [172, 2, 1, "", "get_round_from_component_id"], [172, 2, 1, "", "get_sizes_of_components_by_type"], [172, 3, 1, "", "id"], [172, 2, 1, "", "impossible_differential_search"], [172, 3, 1, "", "inputs"], [172, 3, 1, "", "inputs_bit_size"], [172, 2, 1, "", "inputs_size_to_dict"], [172, 2, 1, "", "iota_definition"], [172, 2, 1, "", "is_algebraically_secure"], [172, 2, 1, "", "is_andrx"], [172, 2, 1, "", "is_arx"], [172, 2, 1, "", "is_power_of_2_word_based"], [172, 2, 1, "", "is_shift_arx"], [172, 2, 1, "", "is_spn"], [172, 2, 1, "", "make_cipher_id"], [172, 2, 1, "", "make_file_name"], [172, 3, 1, "", "number_of_rounds"], [172, 3, 1, "", "output_bit_size"], [172, 2, 1, "", "polynomial_system"], [172, 2, 1, "", "polynomial_system_at_round"], [172, 2, 1, "", "print"], [172, 2, 1, "", "print_as_python_dictionary"], [172, 2, 1, "", "print_as_python_dictionary_to_file"], [172, 2, 1, "", "print_evaluation_python_code"], [172, 2, 1, "", "print_evaluation_python_code_to_file"], [172, 2, 1, "", "print_input_information"], [172, 3, 1, "", "reference_code"], [172, 2, 1, "", "remove_key_schedule"], [172, 2, 1, "", "remove_round_component"], [172, 2, 1, "", "remove_round_component_from_id"], [172, 2, 1, "", "rhoeast_definition"], [172, 2, 1, "", "rhowest_definition"], [172, 2, 1, "", "rotate_x_z"], [172, 2, 1, "", "round_function"], [172, 3, 1, "", "rounds"], [172, 3, 1, "", "rounds_as_list"], [172, 2, 1, "", "set_file_name"], [172, 2, 1, "", "set_id"], [172, 2, 1, "", "set_inputs"], [172, 2, 1, "", "sort_cipher"], [172, 2, 1, "", "test_against_reference_code"], [172, 2, 1, "", "test_vector_check"], [172, 2, 1, "", "theta_definition"], [172, 3, 1, "", "type"], [172, 2, 1, "", "update_input_id_links_from_component_id"], [172, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers": [[173, 0, 0, "-", "a5_1_stream_cipher"], [174, 0, 0, "-", "a5_2_stream_cipher"], [175, 0, 0, "-", "bivium_stream_cipher"], [176, 0, 0, "-", "bluetooth_stream_cipher_e0"], [177, 0, 0, "-", "chacha_stream_cipher"], [178, 0, 0, "-", "snow3g_stream_cipher"], [179, 0, 0, "-", "trivium_stream_cipher"], [180, 0, 0, "-", "zuc_stream_cipher"]], "ciphers.stream_ciphers.a5_1_stream_cipher": [[173, 1, 1, "", "A51StreamCipher"]], "ciphers.stream_ciphers.a5_1_stream_cipher.A51StreamCipher": [[173, 2, 1, "", "add_AND_component"], [173, 2, 1, "", "add_FSR_component"], [173, 2, 1, "", "add_MODADD_component"], [173, 2, 1, "", "add_MODSUB_component"], [173, 2, 1, "", "add_NOT_component"], [173, 2, 1, "", "add_OR_component"], [173, 2, 1, "", "add_SBOX_component"], [173, 2, 1, "", "add_SHIFT_component"], [173, 2, 1, "", "add_XOR_component"], [173, 2, 1, "", "add_cipher_output_component"], [173, 2, 1, "", "add_concatenate_component"], [173, 2, 1, "", "add_constant_component"], [173, 2, 1, "", "add_intermediate_output_component"], [173, 2, 1, "", "add_linear_layer_component"], [173, 2, 1, "", "add_mix_column_component"], [173, 2, 1, "", "add_permutation_component"], [173, 2, 1, "", "add_reverse_component"], [173, 2, 1, "", "add_rotate_component"], [173, 2, 1, "", "add_round"], [173, 2, 1, "", "add_round_key_output_component"], [173, 2, 1, "", "add_round_output_component"], [173, 2, 1, "", "add_shift_rows_component"], [173, 2, 1, "", "add_sigma_component"], [173, 2, 1, "", "add_suffix_to_components"], [173, 2, 1, "", "add_theta_gaston_component"], [173, 2, 1, "", "add_theta_keccak_component"], [173, 2, 1, "", "add_theta_xoodoo_component"], [173, 2, 1, "", "add_variable_rotate_component"], [173, 2, 1, "", "add_variable_shift_component"], [173, 2, 1, "", "add_word_permutation_component"], [173, 2, 1, "", "as_python_dictionary"], [173, 2, 1, "", "cipher_inverse"], [173, 2, 1, "", "cipher_partial_inverse"], [173, 2, 1, "", "component_from"], [173, 2, 1, "", "convert_to_compound_xor_cipher"], [173, 2, 1, "", "create_networx_graph_from_input_ids"], [173, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [173, 3, 1, "", "current_round"], [173, 3, 1, "", "current_round_number"], [173, 3, 1, "", "current_round_number_of_components"], [173, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [173, 2, 1, "", "evaluate"], [173, 2, 1, "", "evaluate_using_c"], [173, 2, 1, "", "evaluate_vectorized"], [173, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [173, 3, 1, "", "family_name"], [173, 3, 1, "", "file_name"], [173, 2, 1, "", "find_impossible_property"], [173, 2, 1, "", "generate_bit_based_c_code"], [173, 2, 1, "", "generate_evaluate_c_code_shared_library"], [173, 2, 1, "", "generate_word_based_c_code"], [173, 2, 1, "", "get_all_components"], [173, 2, 1, "", "get_all_components_ids"], [173, 2, 1, "", "get_all_inputs_bit_positions"], [173, 2, 1, "", "get_component_from_id"], [173, 2, 1, "", "get_components_in_round"], [173, 2, 1, "", "get_current_component_id"], [173, 2, 1, "", "get_model"], [173, 2, 1, "", "get_number_of_components_in_round"], [173, 2, 1, "", "get_partial_cipher"], [173, 2, 1, "", "get_round_from_component_id"], [173, 2, 1, "", "get_sizes_of_components_by_type"], [173, 3, 1, "", "id"], [173, 2, 1, "", "impossible_differential_search"], [173, 3, 1, "", "inputs"], [173, 3, 1, "", "inputs_bit_size"], [173, 2, 1, "", "inputs_size_to_dict"], [173, 2, 1, "", "is_algebraically_secure"], [173, 2, 1, "", "is_andrx"], [173, 2, 1, "", "is_arx"], [173, 2, 1, "", "is_power_of_2_word_based"], [173, 2, 1, "", "is_shift_arx"], [173, 2, 1, "", "is_spn"], [173, 2, 1, "", "make_cipher_id"], [173, 2, 1, "", "make_file_name"], [173, 3, 1, "", "number_of_rounds"], [173, 3, 1, "", "output_bit_size"], [173, 2, 1, "", "polynomial_system"], [173, 2, 1, "", "polynomial_system_at_round"], [173, 2, 1, "", "print"], [173, 2, 1, "", "print_as_python_dictionary"], [173, 2, 1, "", "print_as_python_dictionary_to_file"], [173, 2, 1, "", "print_evaluation_python_code"], [173, 2, 1, "", "print_evaluation_python_code_to_file"], [173, 2, 1, "", "print_input_information"], [173, 3, 1, "", "reference_code"], [173, 2, 1, "", "regs_initialization"], [173, 2, 1, "", "remove_key_schedule"], [173, 2, 1, "", "remove_round_component"], [173, 2, 1, "", "remove_round_component_from_id"], [173, 2, 1, "", "round_function"], [173, 3, 1, "", "rounds"], [173, 3, 1, "", "rounds_as_list"], [173, 2, 1, "", "set_file_name"], [173, 2, 1, "", "set_id"], [173, 2, 1, "", "set_inputs"], [173, 2, 1, "", "sort_cipher"], [173, 2, 1, "", "test_against_reference_code"], [173, 2, 1, "", "test_vector_check"], [173, 3, 1, "", "type"], [173, 2, 1, "", "update_input_id_links_from_component_id"], [173, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.a5_2_stream_cipher": [[174, 1, 1, "", "A52StreamCipher"]], "ciphers.stream_ciphers.a5_2_stream_cipher.A52StreamCipher": [[174, 2, 1, "", "add_AND_component"], [174, 2, 1, "", "add_FSR_component"], [174, 2, 1, "", "add_MODADD_component"], [174, 2, 1, "", "add_MODSUB_component"], [174, 2, 1, "", "add_NOT_component"], [174, 2, 1, "", "add_OR_component"], [174, 2, 1, "", "add_SBOX_component"], [174, 2, 1, "", "add_SHIFT_component"], [174, 2, 1, "", "add_XOR_component"], [174, 2, 1, "", "add_cipher_output_component"], [174, 2, 1, "", "add_concatenate_component"], [174, 2, 1, "", "add_constant_component"], [174, 2, 1, "", "add_intermediate_output_component"], [174, 2, 1, "", "add_linear_layer_component"], [174, 2, 1, "", "add_mix_column_component"], [174, 2, 1, "", "add_permutation_component"], [174, 2, 1, "", "add_reverse_component"], [174, 2, 1, "", "add_rotate_component"], [174, 2, 1, "", "add_round"], [174, 2, 1, "", "add_round_key_output_component"], [174, 2, 1, "", "add_round_output_component"], [174, 2, 1, "", "add_shift_rows_component"], [174, 2, 1, "", "add_sigma_component"], [174, 2, 1, "", "add_suffix_to_components"], [174, 2, 1, "", "add_theta_gaston_component"], [174, 2, 1, "", "add_theta_keccak_component"], [174, 2, 1, "", "add_theta_xoodoo_component"], [174, 2, 1, "", "add_variable_rotate_component"], [174, 2, 1, "", "add_variable_shift_component"], [174, 2, 1, "", "add_word_permutation_component"], [174, 2, 1, "", "as_python_dictionary"], [174, 2, 1, "", "cipher_inverse"], [174, 2, 1, "", "cipher_partial_inverse"], [174, 2, 1, "", "component_from"], [174, 2, 1, "", "convert_to_compound_xor_cipher"], [174, 2, 1, "", "create_networx_graph_from_input_ids"], [174, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [174, 3, 1, "", "current_round"], [174, 3, 1, "", "current_round_number"], [174, 3, 1, "", "current_round_number_of_components"], [174, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [174, 2, 1, "", "evaluate"], [174, 2, 1, "", "evaluate_using_c"], [174, 2, 1, "", "evaluate_vectorized"], [174, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [174, 3, 1, "", "family_name"], [174, 3, 1, "", "file_name"], [174, 2, 1, "", "find_impossible_property"], [174, 2, 1, "", "generate_bit_based_c_code"], [174, 2, 1, "", "generate_evaluate_c_code_shared_library"], [174, 2, 1, "", "generate_word_based_c_code"], [174, 2, 1, "", "get_all_components"], [174, 2, 1, "", "get_all_components_ids"], [174, 2, 1, "", "get_all_inputs_bit_positions"], [174, 2, 1, "", "get_component_from_id"], [174, 2, 1, "", "get_components_in_round"], [174, 2, 1, "", "get_current_component_id"], [174, 2, 1, "", "get_model"], [174, 2, 1, "", "get_number_of_components_in_round"], [174, 2, 1, "", "get_partial_cipher"], [174, 2, 1, "", "get_round_from_component_id"], [174, 2, 1, "", "get_sizes_of_components_by_type"], [174, 3, 1, "", "id"], [174, 2, 1, "", "impossible_differential_search"], [174, 3, 1, "", "inputs"], [174, 3, 1, "", "inputs_bit_size"], [174, 2, 1, "", "inputs_size_to_dict"], [174, 2, 1, "", "is_algebraically_secure"], [174, 2, 1, "", "is_andrx"], [174, 2, 1, "", "is_arx"], [174, 2, 1, "", "is_power_of_2_word_based"], [174, 2, 1, "", "is_shift_arx"], [174, 2, 1, "", "is_spn"], [174, 2, 1, "", "make_cipher_id"], [174, 2, 1, "", "make_file_name"], [174, 3, 1, "", "number_of_rounds"], [174, 3, 1, "", "output_bit_size"], [174, 2, 1, "", "polynomial_system"], [174, 2, 1, "", "polynomial_system_at_round"], [174, 2, 1, "", "print"], [174, 2, 1, "", "print_as_python_dictionary"], [174, 2, 1, "", "print_as_python_dictionary_to_file"], [174, 2, 1, "", "print_evaluation_python_code"], [174, 2, 1, "", "print_evaluation_python_code_to_file"], [174, 2, 1, "", "print_input_information"], [174, 3, 1, "", "reference_code"], [174, 2, 1, "", "remove_key_schedule"], [174, 2, 1, "", "remove_round_component"], [174, 2, 1, "", "remove_round_component_from_id"], [174, 3, 1, "", "rounds"], [174, 3, 1, "", "rounds_as_list"], [174, 2, 1, "", "set_file_name"], [174, 2, 1, "", "set_id"], [174, 2, 1, "", "set_inputs"], [174, 2, 1, "", "sort_cipher"], [174, 2, 1, "", "test_against_reference_code"], [174, 2, 1, "", "test_vector_check"], [174, 3, 1, "", "type"], [174, 2, 1, "", "update_input_id_links_from_component_id"], [174, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.bivium_stream_cipher": [[175, 1, 1, "", "BiviumStreamCipher"]], "ciphers.stream_ciphers.bivium_stream_cipher.BiviumStreamCipher": [[175, 2, 1, "", "add_AND_component"], [175, 2, 1, "", "add_FSR_component"], [175, 2, 1, "", "add_MODADD_component"], [175, 2, 1, "", "add_MODSUB_component"], [175, 2, 1, "", "add_NOT_component"], [175, 2, 1, "", "add_OR_component"], [175, 2, 1, "", "add_SBOX_component"], [175, 2, 1, "", "add_SHIFT_component"], [175, 2, 1, "", "add_XOR_component"], [175, 2, 1, "", "add_cipher_output_component"], [175, 2, 1, "", "add_concatenate_component"], [175, 2, 1, "", "add_constant_component"], [175, 2, 1, "", "add_intermediate_output_component"], [175, 2, 1, "", "add_linear_layer_component"], [175, 2, 1, "", "add_mix_column_component"], [175, 2, 1, "", "add_permutation_component"], [175, 2, 1, "", "add_reverse_component"], [175, 2, 1, "", "add_rotate_component"], [175, 2, 1, "", "add_round"], [175, 2, 1, "", "add_round_key_output_component"], [175, 2, 1, "", "add_round_output_component"], [175, 2, 1, "", "add_shift_rows_component"], [175, 2, 1, "", "add_sigma_component"], [175, 2, 1, "", "add_suffix_to_components"], [175, 2, 1, "", "add_theta_gaston_component"], [175, 2, 1, "", "add_theta_keccak_component"], [175, 2, 1, "", "add_theta_xoodoo_component"], [175, 2, 1, "", "add_variable_rotate_component"], [175, 2, 1, "", "add_variable_shift_component"], [175, 2, 1, "", "add_word_permutation_component"], [175, 2, 1, "", "as_python_dictionary"], [175, 2, 1, "", "bivium_key_stream"], [175, 2, 1, "", "bivium_state_initialization"], [175, 2, 1, "", "cipher_inverse"], [175, 2, 1, "", "cipher_partial_inverse"], [175, 2, 1, "", "component_from"], [175, 2, 1, "", "convert_to_compound_xor_cipher"], [175, 2, 1, "", "create_networx_graph_from_input_ids"], [175, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [175, 3, 1, "", "current_round"], [175, 3, 1, "", "current_round_number"], [175, 3, 1, "", "current_round_number_of_components"], [175, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [175, 2, 1, "", "evaluate"], [175, 2, 1, "", "evaluate_using_c"], [175, 2, 1, "", "evaluate_vectorized"], [175, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [175, 3, 1, "", "family_name"], [175, 3, 1, "", "file_name"], [175, 2, 1, "", "find_impossible_property"], [175, 2, 1, "", "generate_bit_based_c_code"], [175, 2, 1, "", "generate_evaluate_c_code_shared_library"], [175, 2, 1, "", "generate_word_based_c_code"], [175, 2, 1, "", "get_all_components"], [175, 2, 1, "", "get_all_components_ids"], [175, 2, 1, "", "get_all_inputs_bit_positions"], [175, 2, 1, "", "get_component_from_id"], [175, 2, 1, "", "get_components_in_round"], [175, 2, 1, "", "get_current_component_id"], [175, 2, 1, "", "get_model"], [175, 2, 1, "", "get_number_of_components_in_round"], [175, 2, 1, "", "get_partial_cipher"], [175, 2, 1, "", "get_round_from_component_id"], [175, 2, 1, "", "get_sizes_of_components_by_type"], [175, 3, 1, "", "id"], [175, 2, 1, "", "impossible_differential_search"], [175, 3, 1, "", "inputs"], [175, 3, 1, "", "inputs_bit_size"], [175, 2, 1, "", "inputs_size_to_dict"], [175, 2, 1, "", "is_algebraically_secure"], [175, 2, 1, "", "is_andrx"], [175, 2, 1, "", "is_arx"], [175, 2, 1, "", "is_power_of_2_word_based"], [175, 2, 1, "", "is_shift_arx"], [175, 2, 1, "", "is_spn"], [175, 2, 1, "", "make_cipher_id"], [175, 2, 1, "", "make_file_name"], [175, 3, 1, "", "number_of_rounds"], [175, 3, 1, "", "output_bit_size"], [175, 2, 1, "", "polynomial_system"], [175, 2, 1, "", "polynomial_system_at_round"], [175, 2, 1, "", "print"], [175, 2, 1, "", "print_as_python_dictionary"], [175, 2, 1, "", "print_as_python_dictionary_to_file"], [175, 2, 1, "", "print_evaluation_python_code"], [175, 2, 1, "", "print_evaluation_python_code_to_file"], [175, 2, 1, "", "print_input_information"], [175, 3, 1, "", "reference_code"], [175, 2, 1, "", "remove_key_schedule"], [175, 2, 1, "", "remove_round_component"], [175, 2, 1, "", "remove_round_component_from_id"], [175, 3, 1, "", "rounds"], [175, 3, 1, "", "rounds_as_list"], [175, 2, 1, "", "set_file_name"], [175, 2, 1, "", "set_id"], [175, 2, 1, "", "set_inputs"], [175, 2, 1, "", "sort_cipher"], [175, 2, 1, "", "test_against_reference_code"], [175, 2, 1, "", "test_vector_check"], [175, 3, 1, "", "type"], [175, 2, 1, "", "update_input_id_links_from_component_id"], [175, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.bluetooth_stream_cipher_e0": [[176, 1, 1, "", "BluetoothStreamCipherE0"]], "ciphers.stream_ciphers.bluetooth_stream_cipher_e0.BluetoothStreamCipherE0": [[176, 2, 1, "", "add_AND_component"], [176, 2, 1, "", "add_FSR_component"], [176, 2, 1, "", "add_MODADD_component"], [176, 2, 1, "", "add_MODSUB_component"], [176, 2, 1, "", "add_NOT_component"], [176, 2, 1, "", "add_OR_component"], [176, 2, 1, "", "add_SBOX_component"], [176, 2, 1, "", "add_SHIFT_component"], [176, 2, 1, "", "add_XOR_component"], [176, 2, 1, "", "add_cipher_output_component"], [176, 2, 1, "", "add_concatenate_component"], [176, 2, 1, "", "add_constant_component"], [176, 2, 1, "", "add_intermediate_output_component"], [176, 2, 1, "", "add_linear_layer_component"], [176, 2, 1, "", "add_mix_column_component"], [176, 2, 1, "", "add_permutation_component"], [176, 2, 1, "", "add_reverse_component"], [176, 2, 1, "", "add_rotate_component"], [176, 2, 1, "", "add_round"], [176, 2, 1, "", "add_round_key_output_component"], [176, 2, 1, "", "add_round_output_component"], [176, 2, 1, "", "add_shift_rows_component"], [176, 2, 1, "", "add_sigma_component"], [176, 2, 1, "", "add_suffix_to_components"], [176, 2, 1, "", "add_theta_gaston_component"], [176, 2, 1, "", "add_theta_keccak_component"], [176, 2, 1, "", "add_theta_xoodoo_component"], [176, 2, 1, "", "add_variable_rotate_component"], [176, 2, 1, "", "add_variable_shift_component"], [176, 2, 1, "", "add_word_permutation_component"], [176, 2, 1, "", "as_python_dictionary"], [176, 2, 1, "", "cipher_inverse"], [176, 2, 1, "", "cipher_partial_inverse"], [176, 2, 1, "", "component_from"], [176, 2, 1, "", "convert_to_compound_xor_cipher"], [176, 2, 1, "", "create_networx_graph_from_input_ids"], [176, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [176, 3, 1, "", "current_round"], [176, 3, 1, "", "current_round_number"], [176, 3, 1, "", "current_round_number_of_components"], [176, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [176, 2, 1, "", "e0_keystream"], [176, 2, 1, "", "e0_nonlinear_function"], [176, 2, 1, "", "evaluate"], [176, 2, 1, "", "evaluate_using_c"], [176, 2, 1, "", "evaluate_vectorized"], [176, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [176, 3, 1, "", "family_name"], [176, 3, 1, "", "file_name"], [176, 2, 1, "", "find_impossible_property"], [176, 2, 1, "", "generate_bit_based_c_code"], [176, 2, 1, "", "generate_evaluate_c_code_shared_library"], [176, 2, 1, "", "generate_word_based_c_code"], [176, 2, 1, "", "get_all_components"], [176, 2, 1, "", "get_all_components_ids"], [176, 2, 1, "", "get_all_inputs_bit_positions"], [176, 2, 1, "", "get_component_from_id"], [176, 2, 1, "", "get_components_in_round"], [176, 2, 1, "", "get_current_component_id"], [176, 2, 1, "", "get_model"], [176, 2, 1, "", "get_number_of_components_in_round"], [176, 2, 1, "", "get_partial_cipher"], [176, 2, 1, "", "get_round_from_component_id"], [176, 2, 1, "", "get_sizes_of_components_by_type"], [176, 3, 1, "", "id"], [176, 2, 1, "", "impossible_differential_search"], [176, 3, 1, "", "inputs"], [176, 3, 1, "", "inputs_bit_size"], [176, 2, 1, "", "inputs_size_to_dict"], [176, 2, 1, "", "is_algebraically_secure"], [176, 2, 1, "", "is_andrx"], [176, 2, 1, "", "is_arx"], [176, 2, 1, "", "is_power_of_2_word_based"], [176, 2, 1, "", "is_shift_arx"], [176, 2, 1, "", "is_spn"], [176, 2, 1, "", "make_cipher_id"], [176, 2, 1, "", "make_file_name"], [176, 3, 1, "", "number_of_rounds"], [176, 3, 1, "", "output_bit_size"], [176, 2, 1, "", "polynomial_system"], [176, 2, 1, "", "polynomial_system_at_round"], [176, 2, 1, "", "print"], [176, 2, 1, "", "print_as_python_dictionary"], [176, 2, 1, "", "print_as_python_dictionary_to_file"], [176, 2, 1, "", "print_evaluation_python_code"], [176, 2, 1, "", "print_evaluation_python_code_to_file"], [176, 2, 1, "", "print_input_information"], [176, 3, 1, "", "reference_code"], [176, 2, 1, "", "remove_key_schedule"], [176, 2, 1, "", "remove_round_component"], [176, 2, 1, "", "remove_round_component_from_id"], [176, 3, 1, "", "rounds"], [176, 3, 1, "", "rounds_as_list"], [176, 2, 1, "", "set_file_name"], [176, 2, 1, "", "set_id"], [176, 2, 1, "", "set_inputs"], [176, 2, 1, "", "sort_cipher"], [176, 2, 1, "", "test_against_reference_code"], [176, 2, 1, "", "test_vector_check"], [176, 3, 1, "", "type"], [176, 2, 1, "", "update_input_id_links_from_component_id"], [176, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.chacha_stream_cipher": [[177, 1, 1, "", "ChachaStreamCipher"], [177, 4, 1, "", "init_state_plaintext"]], "ciphers.stream_ciphers.chacha_stream_cipher.ChachaStreamCipher": [[177, 2, 1, "", "add_AND_component"], [177, 2, 1, "", "add_FSR_component"], [177, 2, 1, "", "add_MODADD_component"], [177, 2, 1, "", "add_MODSUB_component"], [177, 2, 1, "", "add_NOT_component"], [177, 2, 1, "", "add_OR_component"], [177, 2, 1, "", "add_SBOX_component"], [177, 2, 1, "", "add_SHIFT_component"], [177, 2, 1, "", "add_XOR_component"], [177, 2, 1, "", "add_cipher_output_component"], [177, 2, 1, "", "add_concatenate_component"], [177, 2, 1, "", "add_constant_component"], [177, 2, 1, "", "add_intermediate_output_component"], [177, 2, 1, "", "add_linear_layer_component"], [177, 2, 1, "", "add_mix_column_component"], [177, 2, 1, "", "add_permutation_component"], [177, 2, 1, "", "add_reverse_component"], [177, 2, 1, "", "add_rotate_component"], [177, 2, 1, "", "add_round"], [177, 2, 1, "", "add_round_key_output_component"], [177, 2, 1, "", "add_round_output_component"], [177, 2, 1, "", "add_shift_rows_component"], [177, 2, 1, "", "add_sigma_component"], [177, 2, 1, "", "add_suffix_to_components"], [177, 2, 1, "", "add_theta_gaston_component"], [177, 2, 1, "", "add_theta_keccak_component"], [177, 2, 1, "", "add_theta_xoodoo_component"], [177, 2, 1, "", "add_variable_rotate_component"], [177, 2, 1, "", "add_variable_shift_component"], [177, 2, 1, "", "add_word_permutation_component"], [177, 2, 1, "", "as_python_dictionary"], [177, 2, 1, "", "bottom_half_quarter_round"], [177, 2, 1, "", "cipher_inverse"], [177, 2, 1, "", "cipher_partial_inverse"], [177, 2, 1, "", "component_from"], [177, 2, 1, "", "convert_to_compound_xor_cipher"], [177, 2, 1, "", "create_networx_graph_from_input_ids"], [177, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [177, 3, 1, "", "current_round"], [177, 3, 1, "", "current_round_number"], [177, 3, 1, "", "current_round_number_of_components"], [177, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [177, 2, 1, "", "evaluate"], [177, 2, 1, "", "evaluate_using_c"], [177, 2, 1, "", "evaluate_vectorized"], [177, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [177, 3, 1, "", "family_name"], [177, 3, 1, "", "file_name"], [177, 2, 1, "", "find_impossible_property"], [177, 2, 1, "", "generate_bit_based_c_code"], [177, 2, 1, "", "generate_evaluate_c_code_shared_library"], [177, 2, 1, "", "generate_word_based_c_code"], [177, 2, 1, "", "get_all_components"], [177, 2, 1, "", "get_all_components_ids"], [177, 2, 1, "", "get_all_inputs_bit_positions"], [177, 2, 1, "", "get_component_from_id"], [177, 2, 1, "", "get_components_in_round"], [177, 2, 1, "", "get_current_component_id"], [177, 2, 1, "", "get_model"], [177, 2, 1, "", "get_number_of_components_in_round"], [177, 2, 1, "", "get_partial_cipher"], [177, 2, 1, "", "get_round_from_component_id"], [177, 2, 1, "", "get_sizes_of_components_by_type"], [177, 3, 1, "", "id"], [177, 2, 1, "", "impossible_differential_search"], [177, 3, 1, "", "inputs"], [177, 3, 1, "", "inputs_bit_size"], [177, 2, 1, "", "inputs_size_to_dict"], [177, 2, 1, "", "is_algebraically_secure"], [177, 2, 1, "", "is_andrx"], [177, 2, 1, "", "is_arx"], [177, 2, 1, "", "is_power_of_2_word_based"], [177, 2, 1, "", "is_shift_arx"], [177, 2, 1, "", "is_spn"], [177, 2, 1, "", "make_cipher_id"], [177, 2, 1, "", "make_file_name"], [177, 3, 1, "", "number_of_rounds"], [177, 3, 1, "", "output_bit_size"], [177, 2, 1, "", "polynomial_system"], [177, 2, 1, "", "polynomial_system_at_round"], [177, 2, 1, "", "print"], [177, 2, 1, "", "print_as_python_dictionary"], [177, 2, 1, "", "print_as_python_dictionary_to_file"], [177, 2, 1, "", "print_evaluation_python_code"], [177, 2, 1, "", "print_evaluation_python_code_to_file"], [177, 2, 1, "", "print_input_information"], [177, 3, 1, "", "reference_code"], [177, 2, 1, "", "remove_key_schedule"], [177, 2, 1, "", "remove_round_component"], [177, 2, 1, "", "remove_round_component_from_id"], [177, 3, 1, "", "rounds"], [177, 3, 1, "", "rounds_as_list"], [177, 2, 1, "", "set_file_name"], [177, 2, 1, "", "set_id"], [177, 2, 1, "", "set_inputs"], [177, 2, 1, "", "sort_cipher"], [177, 2, 1, "", "test_against_reference_code"], [177, 2, 1, "", "test_vector_check"], [177, 2, 1, "", "top_half_quarter_round"], [177, 3, 1, "", "type"], [177, 2, 1, "", "update_input_id_links_from_component_id"], [177, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.snow3g_stream_cipher": [[178, 1, 1, "", "Snow3GStreamCipher"]], "ciphers.stream_ciphers.snow3g_stream_cipher.Snow3GStreamCipher": [[178, 2, 1, "", "DIValpha"], [178, 2, 1, "", "MULalpha"], [178, 2, 1, "", "MULx"], [178, 2, 1, "", "MULxPOW"], [178, 2, 1, "", "S1"], [178, 2, 1, "", "S2"], [178, 2, 1, "", "add_AND_component"], [178, 2, 1, "", "add_FSR_component"], [178, 2, 1, "", "add_MODADD_component"], [178, 2, 1, "", "add_MODSUB_component"], [178, 2, 1, "", "add_NOT_component"], [178, 2, 1, "", "add_OR_component"], [178, 2, 1, "", "add_SBOX_component"], [178, 2, 1, "", "add_SHIFT_component"], [178, 2, 1, "", "add_XOR_component"], [178, 2, 1, "", "add_cipher_output_component"], [178, 2, 1, "", "add_concatenate_component"], [178, 2, 1, "", "add_constant_component"], [178, 2, 1, "", "add_intermediate_output_component"], [178, 2, 1, "", "add_linear_layer_component"], [178, 2, 1, "", "add_mix_column_component"], [178, 2, 1, "", "add_permutation_component"], [178, 2, 1, "", "add_reverse_component"], [178, 2, 1, "", "add_rotate_component"], [178, 2, 1, "", "add_round"], [178, 2, 1, "", "add_round_key_output_component"], [178, 2, 1, "", "add_round_output_component"], [178, 2, 1, "", "add_shift_rows_component"], [178, 2, 1, "", "add_sigma_component"], [178, 2, 1, "", "add_suffix_to_components"], [178, 2, 1, "", "add_theta_gaston_component"], [178, 2, 1, "", "add_theta_keccak_component"], [178, 2, 1, "", "add_theta_xoodoo_component"], [178, 2, 1, "", "add_variable_rotate_component"], [178, 2, 1, "", "add_variable_shift_component"], [178, 2, 1, "", "add_word_permutation_component"], [178, 2, 1, "", "as_python_dictionary"], [178, 2, 1, "", "cipher_inverse"], [178, 2, 1, "", "cipher_partial_inverse"], [178, 2, 1, "", "clock_fsm"], [178, 2, 1, "", "clock_lfsr"], [178, 2, 1, "", "clock_lfsr_initialization_mode"], [178, 2, 1, "", "component_from"], [178, 2, 1, "", "convert_to_compound_xor_cipher"], [178, 2, 1, "", "create_alpha_state"], [178, 2, 1, "", "create_networx_graph_from_input_ids"], [178, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [178, 3, 1, "", "current_round"], [178, 3, 1, "", "current_round_number"], [178, 3, 1, "", "current_round_number_of_components"], [178, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [178, 2, 1, "", "evaluate"], [178, 2, 1, "", "evaluate_using_c"], [178, 2, 1, "", "evaluate_vectorized"], [178, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [178, 3, 1, "", "family_name"], [178, 3, 1, "", "file_name"], [178, 2, 1, "", "find_impossible_property"], [178, 2, 1, "", "generate_bit_based_c_code"], [178, 2, 1, "", "generate_evaluate_c_code_shared_library"], [178, 2, 1, "", "generate_word_based_c_code"], [178, 2, 1, "", "get_all_components"], [178, 2, 1, "", "get_all_components_ids"], [178, 2, 1, "", "get_all_inputs_bit_positions"], [178, 2, 1, "", "get_component_from_id"], [178, 2, 1, "", "get_components_in_round"], [178, 2, 1, "", "get_current_component_id"], [178, 2, 1, "", "get_model"], [178, 2, 1, "", "get_number_of_components_in_round"], [178, 2, 1, "", "get_partial_cipher"], [178, 2, 1, "", "get_round_from_component_id"], [178, 2, 1, "", "get_sizes_of_components_by_type"], [178, 3, 1, "", "id"], [178, 2, 1, "", "impossible_differential_search"], [178, 2, 1, "", "initial_filling_lfsr_fsm"], [178, 3, 1, "", "inputs"], [178, 3, 1, "", "inputs_bit_size"], [178, 2, 1, "", "inputs_size_to_dict"], [178, 2, 1, "", "is_algebraically_secure"], [178, 2, 1, "", "is_andrx"], [178, 2, 1, "", "is_arx"], [178, 2, 1, "", "is_power_of_2_word_based"], [178, 2, 1, "", "is_shift_arx"], [178, 2, 1, "", "is_spn"], [178, 2, 1, "", "make_cipher_id"], [178, 2, 1, "", "make_file_name"], [178, 3, 1, "", "number_of_rounds"], [178, 3, 1, "", "output_bit_size"], [178, 2, 1, "", "polynomial_system"], [178, 2, 1, "", "polynomial_system_at_round"], [178, 2, 1, "", "print"], [178, 2, 1, "", "print_as_python_dictionary"], [178, 2, 1, "", "print_as_python_dictionary_to_file"], [178, 2, 1, "", "print_evaluation_python_code"], [178, 2, 1, "", "print_evaluation_python_code_to_file"], [178, 2, 1, "", "print_input_information"], [178, 3, 1, "", "reference_code"], [178, 2, 1, "", "remove_key_schedule"], [178, 2, 1, "", "remove_round_component"], [178, 2, 1, "", "remove_round_component_from_id"], [178, 3, 1, "", "rounds"], [178, 3, 1, "", "rounds_as_list"], [178, 2, 1, "", "set_file_name"], [178, 2, 1, "", "set_id"], [178, 2, 1, "", "set_inputs"], [178, 2, 1, "", "snow3g_key_stream"], [178, 2, 1, "", "snow3g_state_initialization"], [178, 2, 1, "", "sort_cipher"], [178, 2, 1, "", "test_against_reference_code"], [178, 2, 1, "", "test_vector_check"], [178, 3, 1, "", "type"], [178, 2, 1, "", "update_input_id_links_from_component_id"], [178, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.trivium_stream_cipher": [[179, 1, 1, "", "TriviumStreamCipher"]], "ciphers.stream_ciphers.trivium_stream_cipher.TriviumStreamCipher": [[179, 2, 1, "", "add_AND_component"], [179, 2, 1, "", "add_FSR_component"], [179, 2, 1, "", "add_MODADD_component"], [179, 2, 1, "", "add_MODSUB_component"], [179, 2, 1, "", "add_NOT_component"], [179, 2, 1, "", "add_OR_component"], [179, 2, 1, "", "add_SBOX_component"], [179, 2, 1, "", "add_SHIFT_component"], [179, 2, 1, "", "add_XOR_component"], [179, 2, 1, "", "add_cipher_output_component"], [179, 2, 1, "", "add_concatenate_component"], [179, 2, 1, "", "add_constant_component"], [179, 2, 1, "", "add_intermediate_output_component"], [179, 2, 1, "", "add_linear_layer_component"], [179, 2, 1, "", "add_mix_column_component"], [179, 2, 1, "", "add_permutation_component"], [179, 2, 1, "", "add_reverse_component"], [179, 2, 1, "", "add_rotate_component"], [179, 2, 1, "", "add_round"], [179, 2, 1, "", "add_round_key_output_component"], [179, 2, 1, "", "add_round_output_component"], [179, 2, 1, "", "add_shift_rows_component"], [179, 2, 1, "", "add_sigma_component"], [179, 2, 1, "", "add_suffix_to_components"], [179, 2, 1, "", "add_theta_gaston_component"], [179, 2, 1, "", "add_theta_keccak_component"], [179, 2, 1, "", "add_theta_xoodoo_component"], [179, 2, 1, "", "add_variable_rotate_component"], [179, 2, 1, "", "add_variable_shift_component"], [179, 2, 1, "", "add_word_permutation_component"], [179, 2, 1, "", "as_python_dictionary"], [179, 2, 1, "", "cipher_inverse"], [179, 2, 1, "", "cipher_partial_inverse"], [179, 2, 1, "", "component_from"], [179, 2, 1, "", "convert_to_compound_xor_cipher"], [179, 2, 1, "", "create_networx_graph_from_input_ids"], [179, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [179, 3, 1, "", "current_round"], [179, 3, 1, "", "current_round_number"], [179, 3, 1, "", "current_round_number_of_components"], [179, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [179, 2, 1, "", "evaluate"], [179, 2, 1, "", "evaluate_using_c"], [179, 2, 1, "", "evaluate_vectorized"], [179, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [179, 3, 1, "", "family_name"], [179, 3, 1, "", "file_name"], [179, 2, 1, "", "find_impossible_property"], [179, 2, 1, "", "generate_bit_based_c_code"], [179, 2, 1, "", "generate_evaluate_c_code_shared_library"], [179, 2, 1, "", "generate_word_based_c_code"], [179, 2, 1, "", "get_all_components"], [179, 2, 1, "", "get_all_components_ids"], [179, 2, 1, "", "get_all_inputs_bit_positions"], [179, 2, 1, "", "get_component_from_id"], [179, 2, 1, "", "get_components_in_round"], [179, 2, 1, "", "get_current_component_id"], [179, 2, 1, "", "get_keystream_bit_len"], [179, 2, 1, "", "get_model"], [179, 2, 1, "", "get_number_of_components_in_round"], [179, 2, 1, "", "get_partial_cipher"], [179, 2, 1, "", "get_round_from_component_id"], [179, 2, 1, "", "get_sizes_of_components_by_type"], [179, 3, 1, "", "id"], [179, 2, 1, "", "impossible_differential_search"], [179, 3, 1, "", "inputs"], [179, 3, 1, "", "inputs_bit_size"], [179, 2, 1, "", "inputs_size_to_dict"], [179, 2, 1, "", "is_algebraically_secure"], [179, 2, 1, "", "is_andrx"], [179, 2, 1, "", "is_arx"], [179, 2, 1, "", "is_power_of_2_word_based"], [179, 2, 1, "", "is_shift_arx"], [179, 2, 1, "", "is_spn"], [179, 2, 1, "", "make_cipher_id"], [179, 2, 1, "", "make_file_name"], [179, 3, 1, "", "number_of_rounds"], [179, 3, 1, "", "output_bit_size"], [179, 2, 1, "", "polynomial_system"], [179, 2, 1, "", "polynomial_system_at_round"], [179, 2, 1, "", "print"], [179, 2, 1, "", "print_as_python_dictionary"], [179, 2, 1, "", "print_as_python_dictionary_to_file"], [179, 2, 1, "", "print_evaluation_python_code"], [179, 2, 1, "", "print_evaluation_python_code_to_file"], [179, 2, 1, "", "print_input_information"], [179, 3, 1, "", "reference_code"], [179, 2, 1, "", "remove_key_schedule"], [179, 2, 1, "", "remove_round_component"], [179, 2, 1, "", "remove_round_component_from_id"], [179, 3, 1, "", "rounds"], [179, 3, 1, "", "rounds_as_list"], [179, 2, 1, "", "set_file_name"], [179, 2, 1, "", "set_id"], [179, 2, 1, "", "set_inputs"], [179, 2, 1, "", "sort_cipher"], [179, 2, 1, "", "test_against_reference_code"], [179, 2, 1, "", "test_vector_check"], [179, 2, 1, "", "trivium_key_stream"], [179, 2, 1, "", "trivium_state_initialization"], [179, 3, 1, "", "type"], [179, 2, 1, "", "update_input_id_links_from_component_id"], [179, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.stream_ciphers.zuc_stream_cipher": [[180, 1, 1, "", "ZucStreamCipher"]], "ciphers.stream_ciphers.zuc_stream_cipher.ZucStreamCipher": [[180, 2, 1, "", "add_AND_component"], [180, 2, 1, "", "add_FSR_component"], [180, 2, 1, "", "add_MODADD_component"], [180, 2, 1, "", "add_MODSUB_component"], [180, 2, 1, "", "add_NOT_component"], [180, 2, 1, "", "add_OR_component"], [180, 2, 1, "", "add_SBOX_component"], [180, 2, 1, "", "add_SHIFT_component"], [180, 2, 1, "", "add_XOR_component"], [180, 2, 1, "", "add_cipher_output_component"], [180, 2, 1, "", "add_concatenate_component"], [180, 2, 1, "", "add_constant_component"], [180, 2, 1, "", "add_intermediate_output_component"], [180, 2, 1, "", "add_linear_layer_component"], [180, 2, 1, "", "add_mix_column_component"], [180, 2, 1, "", "add_permutation_component"], [180, 2, 1, "", "add_reverse_component"], [180, 2, 1, "", "add_rotate_component"], [180, 2, 1, "", "add_round"], [180, 2, 1, "", "add_round_key_output_component"], [180, 2, 1, "", "add_round_output_component"], [180, 2, 1, "", "add_shift_rows_component"], [180, 2, 1, "", "add_sigma_component"], [180, 2, 1, "", "add_suffix_to_components"], [180, 2, 1, "", "add_theta_gaston_component"], [180, 2, 1, "", "add_theta_keccak_component"], [180, 2, 1, "", "add_theta_xoodoo_component"], [180, 2, 1, "", "add_variable_rotate_component"], [180, 2, 1, "", "add_variable_shift_component"], [180, 2, 1, "", "add_word_permutation_component"], [180, 2, 1, "", "as_python_dictionary"], [180, 2, 1, "", "cipher_inverse"], [180, 2, 1, "", "cipher_partial_inverse"], [180, 2, 1, "", "clocking_lfsr"], [180, 2, 1, "", "component_from"], [180, 2, 1, "", "convert_to_compound_xor_cipher"], [180, 2, 1, "", "create_networx_graph_from_input_ids"], [180, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [180, 3, 1, "", "current_round"], [180, 3, 1, "", "current_round_number"], [180, 3, 1, "", "current_round_number_of_components"], [180, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [180, 2, 1, "", "evaluate"], [180, 2, 1, "", "evaluate_using_c"], [180, 2, 1, "", "evaluate_vectorized"], [180, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [180, 3, 1, "", "family_name"], [180, 3, 1, "", "file_name"], [180, 2, 1, "", "find_impossible_property"], [180, 2, 1, "", "generate_bit_based_c_code"], [180, 2, 1, "", "generate_evaluate_c_code_shared_library"], [180, 2, 1, "", "generate_word_based_c_code"], [180, 2, 1, "", "get_all_components"], [180, 2, 1, "", "get_all_components_ids"], [180, 2, 1, "", "get_all_inputs_bit_positions"], [180, 2, 1, "", "get_component_from_id"], [180, 2, 1, "", "get_components_in_round"], [180, 2, 1, "", "get_current_component_id"], [180, 2, 1, "", "get_model"], [180, 2, 1, "", "get_number_of_components_in_round"], [180, 2, 1, "", "get_partial_cipher"], [180, 2, 1, "", "get_round_from_component_id"], [180, 2, 1, "", "get_sizes_of_components_by_type"], [180, 3, 1, "", "id"], [180, 2, 1, "", "impossible_differential_search"], [180, 3, 1, "", "inputs"], [180, 3, 1, "", "inputs_bit_size"], [180, 2, 1, "", "inputs_size_to_dict"], [180, 2, 1, "", "is_algebraically_secure"], [180, 2, 1, "", "is_andrx"], [180, 2, 1, "", "is_arx"], [180, 2, 1, "", "is_power_of_2_word_based"], [180, 2, 1, "", "is_shift_arx"], [180, 2, 1, "", "is_spn"], [180, 2, 1, "", "key_loading_to_lfsr"], [180, 2, 1, "", "key_stream"], [180, 2, 1, "", "lfsr_S_high_16bits"], [180, 2, 1, "", "lfsr_S_low_16bits"], [180, 2, 1, "", "lfsr_with_initialization_mode"], [180, 2, 1, "", "linear_layer_rotation"], [180, 2, 1, "", "linear_transform_L1"], [180, 2, 1, "", "linear_transform_L2"], [180, 2, 1, "", "make_cipher_id"], [180, 2, 1, "", "make_file_name"], [180, 3, 1, "", "number_of_rounds"], [180, 3, 1, "", "output_bit_size"], [180, 2, 1, "", "polynomial_system"], [180, 2, 1, "", "polynomial_system_at_round"], [180, 2, 1, "", "print"], [180, 2, 1, "", "print_as_python_dictionary"], [180, 2, 1, "", "print_as_python_dictionary_to_file"], [180, 2, 1, "", "print_evaluation_python_code"], [180, 2, 1, "", "print_evaluation_python_code_to_file"], [180, 2, 1, "", "print_input_information"], [180, 3, 1, "", "reference_code"], [180, 2, 1, "", "remove_key_schedule"], [180, 2, 1, "", "remove_round_component"], [180, 2, 1, "", "remove_round_component_from_id"], [180, 3, 1, "", "rounds"], [180, 3, 1, "", "rounds_as_list"], [180, 2, 1, "", "s_box_layer"], [180, 2, 1, "", "set_file_name"], [180, 2, 1, "", "set_id"], [180, 2, 1, "", "set_inputs"], [180, 2, 1, "", "sort_cipher"], [180, 2, 1, "", "state_initialization"], [180, 2, 1, "", "test_against_reference_code"], [180, 2, 1, "", "test_vector_check"], [180, 3, 1, "", "type"], [180, 2, 1, "", "update_input_id_links_from_component_id"], [180, 2, 1, "", "zero_correlation_linear_search"], [180, 2, 1, "", "zuc_nonlinear_F"]], "ciphers.toys": [[181, 0, 0, "-", "constant_block_cipher"], [182, 0, 0, "-", "fancy_block_cipher"], [183, 0, 0, "-", "identity_block_cipher"], [184, 0, 0, "-", "toy_cipherfour"], [185, 0, 0, "-", "toyfeistel"], [186, 0, 0, "-", "toyspn1"], [187, 0, 0, "-", "toyspn2"]], "ciphers.toys.constant_block_cipher": [[181, 1, 1, "", "ConstantBlockCipher"]], "ciphers.toys.constant_block_cipher.ConstantBlockCipher": [[181, 2, 1, "", "add_AND_component"], [181, 2, 1, "", "add_FSR_component"], [181, 2, 1, "", "add_MODADD_component"], [181, 2, 1, "", "add_MODSUB_component"], [181, 2, 1, "", "add_NOT_component"], [181, 2, 1, "", "add_OR_component"], [181, 2, 1, "", "add_SBOX_component"], [181, 2, 1, "", "add_SHIFT_component"], [181, 2, 1, "", "add_XOR_component"], [181, 2, 1, "", "add_cipher_output_component"], [181, 2, 1, "", "add_concatenate_component"], [181, 2, 1, "", "add_constant_component"], [181, 2, 1, "", "add_intermediate_output_component"], [181, 2, 1, "", "add_linear_layer_component"], [181, 2, 1, "", "add_mix_column_component"], [181, 2, 1, "", "add_permutation_component"], [181, 2, 1, "", "add_reverse_component"], [181, 2, 1, "", "add_rotate_component"], [181, 2, 1, "", "add_round"], [181, 2, 1, "", "add_round_key_output_component"], [181, 2, 1, "", "add_round_output_component"], [181, 2, 1, "", "add_shift_rows_component"], [181, 2, 1, "", "add_sigma_component"], [181, 2, 1, "", "add_suffix_to_components"], [181, 2, 1, "", "add_theta_gaston_component"], [181, 2, 1, "", "add_theta_keccak_component"], [181, 2, 1, "", "add_theta_xoodoo_component"], [181, 2, 1, "", "add_variable_rotate_component"], [181, 2, 1, "", "add_variable_shift_component"], [181, 2, 1, "", "add_word_permutation_component"], [181, 2, 1, "", "as_python_dictionary"], [181, 2, 1, "", "cipher_inverse"], [181, 2, 1, "", "cipher_partial_inverse"], [181, 2, 1, "", "component_from"], [181, 2, 1, "", "convert_to_compound_xor_cipher"], [181, 2, 1, "", "create_networx_graph_from_input_ids"], [181, 2, 1, "", "create_rounds"], [181, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [181, 3, 1, "", "current_round"], [181, 3, 1, "", "current_round_number"], [181, 3, 1, "", "current_round_number_of_components"], [181, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [181, 2, 1, "", "evaluate"], [181, 2, 1, "", "evaluate_using_c"], [181, 2, 1, "", "evaluate_vectorized"], [181, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [181, 3, 1, "", "family_name"], [181, 3, 1, "", "file_name"], [181, 2, 1, "", "find_impossible_property"], [181, 2, 1, "", "generate_bit_based_c_code"], [181, 2, 1, "", "generate_evaluate_c_code_shared_library"], [181, 2, 1, "", "generate_word_based_c_code"], [181, 2, 1, "", "get_all_components"], [181, 2, 1, "", "get_all_components_ids"], [181, 2, 1, "", "get_all_inputs_bit_positions"], [181, 2, 1, "", "get_component_from_id"], [181, 2, 1, "", "get_components_in_round"], [181, 2, 1, "", "get_current_component_id"], [181, 2, 1, "", "get_model"], [181, 2, 1, "", "get_number_of_components_in_round"], [181, 2, 1, "", "get_partial_cipher"], [181, 2, 1, "", "get_round_from_component_id"], [181, 2, 1, "", "get_sizes_of_components_by_type"], [181, 3, 1, "", "id"], [181, 2, 1, "", "impossible_differential_search"], [181, 3, 1, "", "inputs"], [181, 3, 1, "", "inputs_bit_size"], [181, 2, 1, "", "inputs_size_to_dict"], [181, 2, 1, "", "is_algebraically_secure"], [181, 2, 1, "", "is_andrx"], [181, 2, 1, "", "is_arx"], [181, 2, 1, "", "is_power_of_2_word_based"], [181, 2, 1, "", "is_shift_arx"], [181, 2, 1, "", "is_spn"], [181, 2, 1, "", "make_cipher_id"], [181, 2, 1, "", "make_file_name"], [181, 3, 1, "", "number_of_rounds"], [181, 3, 1, "", "output_bit_size"], [181, 2, 1, "", "polynomial_system"], [181, 2, 1, "", "polynomial_system_at_round"], [181, 2, 1, "", "print"], [181, 2, 1, "", "print_as_python_dictionary"], [181, 2, 1, "", "print_as_python_dictionary_to_file"], [181, 2, 1, "", "print_evaluation_python_code"], [181, 2, 1, "", "print_evaluation_python_code_to_file"], [181, 2, 1, "", "print_input_information"], [181, 3, 1, "", "reference_code"], [181, 2, 1, "", "remove_key_schedule"], [181, 2, 1, "", "remove_round_component"], [181, 2, 1, "", "remove_round_component_from_id"], [181, 3, 1, "", "rounds"], [181, 3, 1, "", "rounds_as_list"], [181, 2, 1, "", "set_file_name"], [181, 2, 1, "", "set_id"], [181, 2, 1, "", "set_inputs"], [181, 2, 1, "", "sort_cipher"], [181, 2, 1, "", "test_against_reference_code"], [181, 2, 1, "", "test_vector_check"], [181, 3, 1, "", "type"], [181, 2, 1, "", "update_input_id_links_from_component_id"], [181, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.toys.fancy_block_cipher": [[182, 1, 1, "", "FancyBlockCipher"]], "ciphers.toys.fancy_block_cipher.FancyBlockCipher": [[182, 2, 1, "", "add_AND_component"], [182, 2, 1, "", "add_FSR_component"], [182, 2, 1, "", "add_MODADD_component"], [182, 2, 1, "", "add_MODSUB_component"], [182, 2, 1, "", "add_NOT_component"], [182, 2, 1, "", "add_OR_component"], [182, 2, 1, "", "add_SBOX_component"], [182, 2, 1, "", "add_SHIFT_component"], [182, 2, 1, "", "add_XOR_component"], [182, 2, 1, "", "add_and_component_to_even_round"], [182, 2, 1, "", "add_cipher_output_component"], [182, 2, 1, "", "add_concatenate_component"], [182, 2, 1, "", "add_constant_component"], [182, 2, 1, "", "add_intermediate_output_component"], [182, 2, 1, "", "add_linear_layer_component"], [182, 2, 1, "", "add_mix_column_component"], [182, 2, 1, "", "add_permutation_component"], [182, 2, 1, "", "add_reverse_component"], [182, 2, 1, "", "add_rotate_component"], [182, 2, 1, "", "add_round"], [182, 2, 1, "", "add_round_key_output_component"], [182, 2, 1, "", "add_round_output_component"], [182, 2, 1, "", "add_sbox_components_layer_in_even_rounds"], [182, 2, 1, "", "add_shift_rows_component"], [182, 2, 1, "", "add_sigma_component"], [182, 2, 1, "", "add_suffix_to_components"], [182, 2, 1, "", "add_theta_gaston_component"], [182, 2, 1, "", "add_theta_keccak_component"], [182, 2, 1, "", "add_theta_xoodoo_component"], [182, 2, 1, "", "add_variable_rotate_component"], [182, 2, 1, "", "add_variable_shift_component"], [182, 2, 1, "", "add_word_permutation_component"], [182, 2, 1, "", "add_xor_component_to_even_round"], [182, 2, 1, "", "as_python_dictionary"], [182, 2, 1, "", "cipher_inverse"], [182, 2, 1, "", "cipher_partial_inverse"], [182, 2, 1, "", "collect_input_id_links"], [182, 2, 1, "", "component_from"], [182, 2, 1, "", "convert_to_compound_xor_cipher"], [182, 2, 1, "", "create_networx_graph_from_input_ids"], [182, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [182, 3, 1, "", "current_round"], [182, 3, 1, "", "current_round_number"], [182, 3, 1, "", "current_round_number_of_components"], [182, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [182, 2, 1, "", "evaluate"], [182, 2, 1, "", "evaluate_using_c"], [182, 2, 1, "", "evaluate_vectorized"], [182, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [182, 3, 1, "", "family_name"], [182, 3, 1, "", "file_name"], [182, 2, 1, "", "find_impossible_property"], [182, 2, 1, "", "generate_bit_based_c_code"], [182, 2, 1, "", "generate_evaluate_c_code_shared_library"], [182, 2, 1, "", "generate_word_based_c_code"], [182, 2, 1, "", "get_all_components"], [182, 2, 1, "", "get_all_components_ids"], [182, 2, 1, "", "get_all_inputs_bit_positions"], [182, 2, 1, "", "get_component_from_id"], [182, 2, 1, "", "get_components_in_round"], [182, 2, 1, "", "get_current_component_id"], [182, 2, 1, "", "get_model"], [182, 2, 1, "", "get_number_of_components_in_round"], [182, 2, 1, "", "get_partial_cipher"], [182, 2, 1, "", "get_round_from_component_id"], [182, 2, 1, "", "get_sizes_of_components_by_type"], [182, 3, 1, "", "id"], [182, 2, 1, "", "impossible_differential_search"], [182, 3, 1, "", "inputs"], [182, 3, 1, "", "inputs_bit_size"], [182, 2, 1, "", "inputs_size_to_dict"], [182, 2, 1, "", "is_algebraically_secure"], [182, 2, 1, "", "is_andrx"], [182, 2, 1, "", "is_arx"], [182, 2, 1, "", "is_power_of_2_word_based"], [182, 2, 1, "", "is_shift_arx"], [182, 2, 1, "", "is_spn"], [182, 2, 1, "", "make_cipher_id"], [182, 2, 1, "", "make_file_name"], [182, 3, 1, "", "number_of_rounds"], [182, 3, 1, "", "output_bit_size"], [182, 2, 1, "", "polynomial_system"], [182, 2, 1, "", "polynomial_system_at_round"], [182, 2, 1, "", "print"], [182, 2, 1, "", "print_as_python_dictionary"], [182, 2, 1, "", "print_as_python_dictionary_to_file"], [182, 2, 1, "", "print_evaluation_python_code"], [182, 2, 1, "", "print_evaluation_python_code_to_file"], [182, 2, 1, "", "print_input_information"], [182, 3, 1, "", "reference_code"], [182, 2, 1, "", "remove_key_schedule"], [182, 2, 1, "", "remove_round_component"], [182, 2, 1, "", "remove_round_component_from_id"], [182, 3, 1, "", "rounds"], [182, 3, 1, "", "rounds_as_list"], [182, 2, 1, "", "set_file_name"], [182, 2, 1, "", "set_id"], [182, 2, 1, "", "set_inputs"], [182, 2, 1, "", "sort_cipher"], [182, 2, 1, "", "test_against_reference_code"], [182, 2, 1, "", "test_vector_check"], [182, 3, 1, "", "type"], [182, 2, 1, "", "update_input_id_links_from_component_id"], [182, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.toys.identity_block_cipher": [[183, 1, 1, "", "IdentityBlockCipher"]], "ciphers.toys.identity_block_cipher.IdentityBlockCipher": [[183, 2, 1, "", "add_AND_component"], [183, 2, 1, "", "add_FSR_component"], [183, 2, 1, "", "add_MODADD_component"], [183, 2, 1, "", "add_MODSUB_component"], [183, 2, 1, "", "add_NOT_component"], [183, 2, 1, "", "add_OR_component"], [183, 2, 1, "", "add_SBOX_component"], [183, 2, 1, "", "add_SHIFT_component"], [183, 2, 1, "", "add_XOR_component"], [183, 2, 1, "", "add_cipher_output_component"], [183, 2, 1, "", "add_concatenate_component"], [183, 2, 1, "", "add_constant_component"], [183, 2, 1, "", "add_intermediate_output_component"], [183, 2, 1, "", "add_linear_layer_component"], [183, 2, 1, "", "add_mix_column_component"], [183, 2, 1, "", "add_permutation_component"], [183, 2, 1, "", "add_reverse_component"], [183, 2, 1, "", "add_rotate_component"], [183, 2, 1, "", "add_round"], [183, 2, 1, "", "add_round_key_output_component"], [183, 2, 1, "", "add_round_output_component"], [183, 2, 1, "", "add_shift_rows_component"], [183, 2, 1, "", "add_sigma_component"], [183, 2, 1, "", "add_suffix_to_components"], [183, 2, 1, "", "add_theta_gaston_component"], [183, 2, 1, "", "add_theta_keccak_component"], [183, 2, 1, "", "add_theta_xoodoo_component"], [183, 2, 1, "", "add_variable_rotate_component"], [183, 2, 1, "", "add_variable_shift_component"], [183, 2, 1, "", "add_word_permutation_component"], [183, 2, 1, "", "as_python_dictionary"], [183, 2, 1, "", "cipher_inverse"], [183, 2, 1, "", "cipher_partial_inverse"], [183, 2, 1, "", "component_from"], [183, 2, 1, "", "convert_to_compound_xor_cipher"], [183, 2, 1, "", "create_networx_graph_from_input_ids"], [183, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [183, 3, 1, "", "current_round"], [183, 3, 1, "", "current_round_number"], [183, 3, 1, "", "current_round_number_of_components"], [183, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [183, 2, 1, "", "evaluate"], [183, 2, 1, "", "evaluate_using_c"], [183, 2, 1, "", "evaluate_vectorized"], [183, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [183, 3, 1, "", "family_name"], [183, 3, 1, "", "file_name"], [183, 2, 1, "", "find_impossible_property"], [183, 2, 1, "", "generate_bit_based_c_code"], [183, 2, 1, "", "generate_evaluate_c_code_shared_library"], [183, 2, 1, "", "generate_word_based_c_code"], [183, 2, 1, "", "get_all_components"], [183, 2, 1, "", "get_all_components_ids"], [183, 2, 1, "", "get_all_inputs_bit_positions"], [183, 2, 1, "", "get_component_from_id"], [183, 2, 1, "", "get_components_in_round"], [183, 2, 1, "", "get_current_component_id"], [183, 2, 1, "", "get_model"], [183, 2, 1, "", "get_number_of_components_in_round"], [183, 2, 1, "", "get_partial_cipher"], [183, 2, 1, "", "get_round_from_component_id"], [183, 2, 1, "", "get_sizes_of_components_by_type"], [183, 3, 1, "", "id"], [183, 2, 1, "", "impossible_differential_search"], [183, 3, 1, "", "inputs"], [183, 3, 1, "", "inputs_bit_size"], [183, 2, 1, "", "inputs_size_to_dict"], [183, 2, 1, "", "is_algebraically_secure"], [183, 2, 1, "", "is_andrx"], [183, 2, 1, "", "is_arx"], [183, 2, 1, "", "is_power_of_2_word_based"], [183, 2, 1, "", "is_shift_arx"], [183, 2, 1, "", "is_spn"], [183, 2, 1, "", "make_cipher_id"], [183, 2, 1, "", "make_file_name"], [183, 3, 1, "", "number_of_rounds"], [183, 3, 1, "", "output_bit_size"], [183, 2, 1, "", "polynomial_system"], [183, 2, 1, "", "polynomial_system_at_round"], [183, 2, 1, "", "print"], [183, 2, 1, "", "print_as_python_dictionary"], [183, 2, 1, "", "print_as_python_dictionary_to_file"], [183, 2, 1, "", "print_evaluation_python_code"], [183, 2, 1, "", "print_evaluation_python_code_to_file"], [183, 2, 1, "", "print_input_information"], [183, 3, 1, "", "reference_code"], [183, 2, 1, "", "remove_key_schedule"], [183, 2, 1, "", "remove_round_component"], [183, 2, 1, "", "remove_round_component_from_id"], [183, 3, 1, "", "rounds"], [183, 3, 1, "", "rounds_as_list"], [183, 2, 1, "", "set_file_name"], [183, 2, 1, "", "set_id"], [183, 2, 1, "", "set_inputs"], [183, 2, 1, "", "sort_cipher"], [183, 2, 1, "", "test_against_reference_code"], [183, 2, 1, "", "test_vector_check"], [183, 3, 1, "", "type"], [183, 2, 1, "", "update_input_id_links_from_component_id"], [183, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.toys.toy_cipherfour": [[184, 1, 1, "", "ToyCipherFour"]], "ciphers.toys.toy_cipherfour.ToyCipherFour": [[184, 2, 1, "", "add_AND_component"], [184, 2, 1, "", "add_FSR_component"], [184, 2, 1, "", "add_MODADD_component"], [184, 2, 1, "", "add_MODSUB_component"], [184, 2, 1, "", "add_NOT_component"], [184, 2, 1, "", "add_OR_component"], [184, 2, 1, "", "add_SBOX_component"], [184, 2, 1, "", "add_SHIFT_component"], [184, 2, 1, "", "add_XOR_component"], [184, 2, 1, "", "add_cipher_output_component"], [184, 2, 1, "", "add_concatenate_component"], [184, 2, 1, "", "add_constant_component"], [184, 2, 1, "", "add_intermediate_output_component"], [184, 2, 1, "", "add_linear_layer_component"], [184, 2, 1, "", "add_mix_column_component"], [184, 2, 1, "", "add_permutation_component"], [184, 2, 1, "", "add_reverse_component"], [184, 2, 1, "", "add_rotate_component"], [184, 2, 1, "", "add_round"], [184, 2, 1, "", "add_round_key_output_component"], [184, 2, 1, "", "add_round_output_component"], [184, 2, 1, "", "add_shift_rows_component"], [184, 2, 1, "", "add_sigma_component"], [184, 2, 1, "", "add_suffix_to_components"], [184, 2, 1, "", "add_theta_gaston_component"], [184, 2, 1, "", "add_theta_keccak_component"], [184, 2, 1, "", "add_theta_xoodoo_component"], [184, 2, 1, "", "add_variable_rotate_component"], [184, 2, 1, "", "add_variable_shift_component"], [184, 2, 1, "", "add_word_permutation_component"], [184, 2, 1, "", "as_python_dictionary"], [184, 2, 1, "", "cipher_inverse"], [184, 2, 1, "", "cipher_partial_inverse"], [184, 2, 1, "", "component_from"], [184, 2, 1, "", "convert_to_compound_xor_cipher"], [184, 2, 1, "", "create_networx_graph_from_input_ids"], [184, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [184, 3, 1, "", "current_round"], [184, 3, 1, "", "current_round_number"], [184, 3, 1, "", "current_round_number_of_components"], [184, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [184, 2, 1, "", "evaluate"], [184, 2, 1, "", "evaluate_using_c"], [184, 2, 1, "", "evaluate_vectorized"], [184, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [184, 3, 1, "", "family_name"], [184, 3, 1, "", "file_name"], [184, 2, 1, "", "find_impossible_property"], [184, 2, 1, "", "generate_bit_based_c_code"], [184, 2, 1, "", "generate_evaluate_c_code_shared_library"], [184, 2, 1, "", "generate_word_based_c_code"], [184, 2, 1, "", "get_all_components"], [184, 2, 1, "", "get_all_components_ids"], [184, 2, 1, "", "get_all_inputs_bit_positions"], [184, 2, 1, "", "get_component_from_id"], [184, 2, 1, "", "get_components_in_round"], [184, 2, 1, "", "get_current_component_id"], [184, 2, 1, "", "get_model"], [184, 2, 1, "", "get_number_of_components_in_round"], [184, 2, 1, "", "get_partial_cipher"], [184, 2, 1, "", "get_round_from_component_id"], [184, 2, 1, "", "get_sizes_of_components_by_type"], [184, 3, 1, "", "id"], [184, 2, 1, "", "impossible_differential_search"], [184, 3, 1, "", "inputs"], [184, 3, 1, "", "inputs_bit_size"], [184, 2, 1, "", "inputs_size_to_dict"], [184, 2, 1, "", "is_algebraically_secure"], [184, 2, 1, "", "is_andrx"], [184, 2, 1, "", "is_arx"], [184, 2, 1, "", "is_power_of_2_word_based"], [184, 2, 1, "", "is_shift_arx"], [184, 2, 1, "", "is_spn"], [184, 2, 1, "", "make_cipher_id"], [184, 2, 1, "", "make_file_name"], [184, 3, 1, "", "number_of_rounds"], [184, 3, 1, "", "output_bit_size"], [184, 2, 1, "", "permutation_layer"], [184, 2, 1, "", "polynomial_system"], [184, 2, 1, "", "polynomial_system_at_round"], [184, 2, 1, "", "print"], [184, 2, 1, "", "print_as_python_dictionary"], [184, 2, 1, "", "print_as_python_dictionary_to_file"], [184, 2, 1, "", "print_evaluation_python_code"], [184, 2, 1, "", "print_evaluation_python_code_to_file"], [184, 2, 1, "", "print_input_information"], [184, 3, 1, "", "reference_code"], [184, 2, 1, "", "remove_key_schedule"], [184, 2, 1, "", "remove_round_component"], [184, 2, 1, "", "remove_round_component_from_id"], [184, 3, 1, "", "rounds"], [184, 3, 1, "", "rounds_as_list"], [184, 2, 1, "", "set_file_name"], [184, 2, 1, "", "set_id"], [184, 2, 1, "", "set_inputs"], [184, 2, 1, "", "sort_cipher"], [184, 2, 1, "", "test_against_reference_code"], [184, 2, 1, "", "test_vector_check"], [184, 3, 1, "", "type"], [184, 2, 1, "", "update_input_id_links_from_component_id"], [184, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.toys.toyfeistel": [[185, 1, 1, "", "ToyFeistel"]], "ciphers.toys.toyfeistel.ToyFeistel": [[185, 2, 1, "", "add_AND_component"], [185, 2, 1, "", "add_FSR_component"], [185, 2, 1, "", "add_MODADD_component"], [185, 2, 1, "", "add_MODSUB_component"], [185, 2, 1, "", "add_NOT_component"], [185, 2, 1, "", "add_OR_component"], [185, 2, 1, "", "add_SBOX_component"], [185, 2, 1, "", "add_SHIFT_component"], [185, 2, 1, "", "add_XOR_component"], [185, 2, 1, "", "add_cipher_output_component"], [185, 2, 1, "", "add_concatenate_component"], [185, 2, 1, "", "add_constant_component"], [185, 2, 1, "", "add_intermediate_output_component"], [185, 2, 1, "", "add_linear_layer_component"], [185, 2, 1, "", "add_mix_column_component"], [185, 2, 1, "", "add_permutation_component"], [185, 2, 1, "", "add_reverse_component"], [185, 2, 1, "", "add_rotate_component"], [185, 2, 1, "", "add_round"], [185, 2, 1, "", "add_round_key_output_component"], [185, 2, 1, "", "add_round_output_component"], [185, 2, 1, "", "add_shift_rows_component"], [185, 2, 1, "", "add_sigma_component"], [185, 2, 1, "", "add_suffix_to_components"], [185, 2, 1, "", "add_theta_gaston_component"], [185, 2, 1, "", "add_theta_keccak_component"], [185, 2, 1, "", "add_theta_xoodoo_component"], [185, 2, 1, "", "add_variable_rotate_component"], [185, 2, 1, "", "add_variable_shift_component"], [185, 2, 1, "", "add_word_permutation_component"], [185, 2, 1, "", "as_python_dictionary"], [185, 2, 1, "", "cipher_inverse"], [185, 2, 1, "", "cipher_partial_inverse"], [185, 2, 1, "", "component_from"], [185, 2, 1, "", "convert_to_compound_xor_cipher"], [185, 2, 1, "", "create_networx_graph_from_input_ids"], [185, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [185, 3, 1, "", "current_round"], [185, 3, 1, "", "current_round_number"], [185, 3, 1, "", "current_round_number_of_components"], [185, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [185, 2, 1, "", "evaluate"], [185, 2, 1, "", "evaluate_using_c"], [185, 2, 1, "", "evaluate_vectorized"], [185, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [185, 3, 1, "", "family_name"], [185, 3, 1, "", "file_name"], [185, 2, 1, "", "find_impossible_property"], [185, 2, 1, "", "generate_bit_based_c_code"], [185, 2, 1, "", "generate_evaluate_c_code_shared_library"], [185, 2, 1, "", "generate_word_based_c_code"], [185, 2, 1, "", "get_all_components"], [185, 2, 1, "", "get_all_components_ids"], [185, 2, 1, "", "get_all_inputs_bit_positions"], [185, 2, 1, "", "get_component_from_id"], [185, 2, 1, "", "get_components_in_round"], [185, 2, 1, "", "get_current_component_id"], [185, 2, 1, "", "get_model"], [185, 2, 1, "", "get_number_of_components_in_round"], [185, 2, 1, "", "get_partial_cipher"], [185, 2, 1, "", "get_round_from_component_id"], [185, 2, 1, "", "get_sizes_of_components_by_type"], [185, 3, 1, "", "id"], [185, 2, 1, "", "impossible_differential_search"], [185, 3, 1, "", "inputs"], [185, 3, 1, "", "inputs_bit_size"], [185, 2, 1, "", "inputs_size_to_dict"], [185, 2, 1, "", "is_algebraically_secure"], [185, 2, 1, "", "is_andrx"], [185, 2, 1, "", "is_arx"], [185, 2, 1, "", "is_power_of_2_word_based"], [185, 2, 1, "", "is_shift_arx"], [185, 2, 1, "", "is_spn"], [185, 2, 1, "", "make_cipher_id"], [185, 2, 1, "", "make_file_name"], [185, 3, 1, "", "number_of_rounds"], [185, 3, 1, "", "output_bit_size"], [185, 2, 1, "", "polynomial_system"], [185, 2, 1, "", "polynomial_system_at_round"], [185, 2, 1, "", "print"], [185, 2, 1, "", "print_as_python_dictionary"], [185, 2, 1, "", "print_as_python_dictionary_to_file"], [185, 2, 1, "", "print_evaluation_python_code"], [185, 2, 1, "", "print_evaluation_python_code_to_file"], [185, 2, 1, "", "print_input_information"], [185, 3, 1, "", "reference_code"], [185, 2, 1, "", "remove_key_schedule"], [185, 2, 1, "", "remove_round_component"], [185, 2, 1, "", "remove_round_component_from_id"], [185, 2, 1, "", "round_function"], [185, 3, 1, "", "rounds"], [185, 3, 1, "", "rounds_as_list"], [185, 2, 1, "", "set_file_name"], [185, 2, 1, "", "set_id"], [185, 2, 1, "", "set_inputs"], [185, 2, 1, "", "sort_cipher"], [185, 2, 1, "", "test_against_reference_code"], [185, 2, 1, "", "test_vector_check"], [185, 3, 1, "", "type"], [185, 2, 1, "", "update_input_id_links_from_component_id"], [185, 2, 1, "", "update_key"], [185, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.toys.toyspn1": [[186, 1, 1, "", "ToySPN1"]], "ciphers.toys.toyspn1.ToySPN1": [[186, 2, 1, "", "add_AND_component"], [186, 2, 1, "", "add_FSR_component"], [186, 2, 1, "", "add_MODADD_component"], [186, 2, 1, "", "add_MODSUB_component"], [186, 2, 1, "", "add_NOT_component"], [186, 2, 1, "", "add_OR_component"], [186, 2, 1, "", "add_SBOX_component"], [186, 2, 1, "", "add_SHIFT_component"], [186, 2, 1, "", "add_XOR_component"], [186, 2, 1, "", "add_cipher_output_component"], [186, 2, 1, "", "add_concatenate_component"], [186, 2, 1, "", "add_constant_component"], [186, 2, 1, "", "add_intermediate_output_component"], [186, 2, 1, "", "add_linear_layer_component"], [186, 2, 1, "", "add_mix_column_component"], [186, 2, 1, "", "add_permutation_component"], [186, 2, 1, "", "add_reverse_component"], [186, 2, 1, "", "add_rotate_component"], [186, 2, 1, "", "add_round"], [186, 2, 1, "", "add_round_key_output_component"], [186, 2, 1, "", "add_round_output_component"], [186, 2, 1, "", "add_shift_rows_component"], [186, 2, 1, "", "add_sigma_component"], [186, 2, 1, "", "add_suffix_to_components"], [186, 2, 1, "", "add_theta_gaston_component"], [186, 2, 1, "", "add_theta_keccak_component"], [186, 2, 1, "", "add_theta_xoodoo_component"], [186, 2, 1, "", "add_variable_rotate_component"], [186, 2, 1, "", "add_variable_shift_component"], [186, 2, 1, "", "add_word_permutation_component"], [186, 2, 1, "", "as_python_dictionary"], [186, 2, 1, "", "cipher_inverse"], [186, 2, 1, "", "cipher_partial_inverse"], [186, 2, 1, "", "component_from"], [186, 2, 1, "", "convert_to_compound_xor_cipher"], [186, 2, 1, "", "create_networx_graph_from_input_ids"], [186, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [186, 3, 1, "", "current_round"], [186, 3, 1, "", "current_round_number"], [186, 3, 1, "", "current_round_number_of_components"], [186, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [186, 2, 1, "", "evaluate"], [186, 2, 1, "", "evaluate_using_c"], [186, 2, 1, "", "evaluate_vectorized"], [186, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [186, 3, 1, "", "family_name"], [186, 3, 1, "", "file_name"], [186, 2, 1, "", "find_impossible_property"], [186, 2, 1, "", "generate_bit_based_c_code"], [186, 2, 1, "", "generate_evaluate_c_code_shared_library"], [186, 2, 1, "", "generate_word_based_c_code"], [186, 2, 1, "", "get_all_components"], [186, 2, 1, "", "get_all_components_ids"], [186, 2, 1, "", "get_all_inputs_bit_positions"], [186, 2, 1, "", "get_component_from_id"], [186, 2, 1, "", "get_components_in_round"], [186, 2, 1, "", "get_current_component_id"], [186, 2, 1, "", "get_model"], [186, 2, 1, "", "get_number_of_components_in_round"], [186, 2, 1, "", "get_partial_cipher"], [186, 2, 1, "", "get_round_from_component_id"], [186, 2, 1, "", "get_sizes_of_components_by_type"], [186, 3, 1, "", "id"], [186, 2, 1, "", "impossible_differential_search"], [186, 3, 1, "", "inputs"], [186, 3, 1, "", "inputs_bit_size"], [186, 2, 1, "", "inputs_size_to_dict"], [186, 2, 1, "", "is_algebraically_secure"], [186, 2, 1, "", "is_andrx"], [186, 2, 1, "", "is_arx"], [186, 2, 1, "", "is_power_of_2_word_based"], [186, 2, 1, "", "is_shift_arx"], [186, 2, 1, "", "is_spn"], [186, 2, 1, "", "make_cipher_id"], [186, 2, 1, "", "make_file_name"], [186, 3, 1, "", "number_of_rounds"], [186, 3, 1, "", "output_bit_size"], [186, 2, 1, "", "polynomial_system"], [186, 2, 1, "", "polynomial_system_at_round"], [186, 2, 1, "", "print"], [186, 2, 1, "", "print_as_python_dictionary"], [186, 2, 1, "", "print_as_python_dictionary_to_file"], [186, 2, 1, "", "print_evaluation_python_code"], [186, 2, 1, "", "print_evaluation_python_code_to_file"], [186, 2, 1, "", "print_input_information"], [186, 3, 1, "", "reference_code"], [186, 2, 1, "", "remove_key_schedule"], [186, 2, 1, "", "remove_round_component"], [186, 2, 1, "", "remove_round_component_from_id"], [186, 3, 1, "", "rounds"], [186, 3, 1, "", "rounds_as_list"], [186, 2, 1, "", "set_file_name"], [186, 2, 1, "", "set_id"], [186, 2, 1, "", "set_inputs"], [186, 2, 1, "", "sort_cipher"], [186, 2, 1, "", "test_against_reference_code"], [186, 2, 1, "", "test_vector_check"], [186, 3, 1, "", "type"], [186, 2, 1, "", "update_input_id_links_from_component_id"], [186, 2, 1, "", "zero_correlation_linear_search"]], "ciphers.toys.toyspn2": [[187, 1, 1, "", "ToySPN2"]], "ciphers.toys.toyspn2.ToySPN2": [[187, 2, 1, "", "add_AND_component"], [187, 2, 1, "", "add_FSR_component"], [187, 2, 1, "", "add_MODADD_component"], [187, 2, 1, "", "add_MODSUB_component"], [187, 2, 1, "", "add_NOT_component"], [187, 2, 1, "", "add_OR_component"], [187, 2, 1, "", "add_SBOX_component"], [187, 2, 1, "", "add_SHIFT_component"], [187, 2, 1, "", "add_XOR_component"], [187, 2, 1, "", "add_cipher_output_component"], [187, 2, 1, "", "add_concatenate_component"], [187, 2, 1, "", "add_constant_component"], [187, 2, 1, "", "add_intermediate_output_component"], [187, 2, 1, "", "add_linear_layer_component"], [187, 2, 1, "", "add_mix_column_component"], [187, 2, 1, "", "add_permutation_component"], [187, 2, 1, "", "add_reverse_component"], [187, 2, 1, "", "add_rotate_component"], [187, 2, 1, "", "add_round"], [187, 2, 1, "", "add_round_key_output_component"], [187, 2, 1, "", "add_round_output_component"], [187, 2, 1, "", "add_shift_rows_component"], [187, 2, 1, "", "add_sigma_component"], [187, 2, 1, "", "add_suffix_to_components"], [187, 2, 1, "", "add_theta_gaston_component"], [187, 2, 1, "", "add_theta_keccak_component"], [187, 2, 1, "", "add_theta_xoodoo_component"], [187, 2, 1, "", "add_variable_rotate_component"], [187, 2, 1, "", "add_variable_shift_component"], [187, 2, 1, "", "add_word_permutation_component"], [187, 2, 1, "", "as_python_dictionary"], [187, 2, 1, "", "cipher_inverse"], [187, 2, 1, "", "cipher_partial_inverse"], [187, 2, 1, "", "component_from"], [187, 2, 1, "", "convert_to_compound_xor_cipher"], [187, 2, 1, "", "create_networx_graph_from_input_ids"], [187, 2, 1, "", "create_top_and_bottom_subgraphs_from_components_graph"], [187, 3, 1, "", "current_round"], [187, 3, 1, "", "current_round_number"], [187, 3, 1, "", "current_round_number_of_components"], [187, 2, 1, "", "delete_generated_evaluate_c_shared_library"], [187, 2, 1, "", "evaluate"], [187, 2, 1, "", "evaluate_using_c"], [187, 2, 1, "", "evaluate_vectorized"], [187, 2, 1, "", "evaluate_with_intermediate_outputs_continuous_diffusion_analysis"], [187, 3, 1, "", "family_name"], [187, 3, 1, "", "file_name"], [187, 2, 1, "", "find_impossible_property"], [187, 2, 1, "", "generate_bit_based_c_code"], [187, 2, 1, "", "generate_evaluate_c_code_shared_library"], [187, 2, 1, "", "generate_word_based_c_code"], [187, 2, 1, "", "get_all_components"], [187, 2, 1, "", "get_all_components_ids"], [187, 2, 1, "", "get_all_inputs_bit_positions"], [187, 2, 1, "", "get_component_from_id"], [187, 2, 1, "", "get_components_in_round"], [187, 2, 1, "", "get_current_component_id"], [187, 2, 1, "", "get_model"], [187, 2, 1, "", "get_number_of_components_in_round"], [187, 2, 1, "", "get_partial_cipher"], [187, 2, 1, "", "get_round_from_component_id"], [187, 2, 1, "", "get_sizes_of_components_by_type"], [187, 3, 1, "", "id"], [187, 2, 1, "", "impossible_differential_search"], [187, 3, 1, "", "inputs"], [187, 3, 1, "", "inputs_bit_size"], [187, 2, 1, "", "inputs_size_to_dict"], [187, 2, 1, "", "is_algebraically_secure"], [187, 2, 1, "", "is_andrx"], [187, 2, 1, "", "is_arx"], [187, 2, 1, "", "is_power_of_2_word_based"], [187, 2, 1, "", "is_shift_arx"], [187, 2, 1, "", "is_spn"], [187, 2, 1, "", "make_cipher_id"], [187, 2, 1, "", "make_file_name"], [187, 3, 1, "", "number_of_rounds"], [187, 3, 1, "", "output_bit_size"], [187, 2, 1, "", "polynomial_system"], [187, 2, 1, "", "polynomial_system_at_round"], [187, 2, 1, "", "print"], [187, 2, 1, "", "print_as_python_dictionary"], [187, 2, 1, "", "print_as_python_dictionary_to_file"], [187, 2, 1, "", "print_evaluation_python_code"], [187, 2, 1, "", "print_evaluation_python_code_to_file"], [187, 2, 1, "", "print_input_information"], [187, 3, 1, "", "reference_code"], [187, 2, 1, "", "remove_key_schedule"], [187, 2, 1, "", "remove_round_component"], [187, 2, 1, "", "remove_round_component_from_id"], [187, 3, 1, "", "rounds"], [187, 3, 1, "", "rounds_as_list"], [187, 2, 1, "", "set_file_name"], [187, 2, 1, "", "set_id"], [187, 2, 1, "", "set_inputs"], [187, 2, 1, "", "sort_cipher"], [187, 2, 1, "", "test_against_reference_code"], [187, 2, 1, "", "test_vector_check"], [187, 3, 1, "", "type"], [187, 2, 1, "", "update_input_id_links_from_component_id"], [187, 2, 1, "", "zero_correlation_linear_search"]], "component": [[188, 1, 1, "", "Component"], [188, 4, 1, "", "check_size"], [188, 4, 1, "", "free_input"], [188, 4, 1, "", "linear_layer_to_binary_matrix"]], "component.Component": [[188, 2, 1, "", "as_python_dictionary"], [188, 2, 1, "", "check_output_size"], [188, 3, 1, "", "description"], [188, 2, 1, "", "get_graph_representation"], [188, 3, 1, "", "id"], [188, 3, 1, "", "input_bit_positions"], [188, 3, 1, "", "input_bit_size"], [188, 3, 1, "", "input_id_links"], [188, 2, 1, "", "is_forbidden"], [188, 2, 1, "", "is_id_equal_to"], [188, 2, 1, "", "is_power_of_2_word_based"], [188, 3, 1, "", "output_bit_size"], [188, 2, 1, "", "output_size_for_concatenate"], [188, 2, 1, "", "print"], [188, 2, 1, "", "print_as_python_dictionary"], [188, 2, 1, "", "print_values"], [188, 2, 1, "", "print_word_values"], [188, 2, 1, "", "select_bits"], [188, 2, 1, "", "select_words"], [188, 2, 1, "", "set_description"], [188, 2, 1, "", "set_id"], [188, 2, 1, "", "set_input_bit_positions"], [188, 2, 1, "", "set_input_id_links"], [188, 3, 1, "", "suffixes"], [188, 3, 1, "", "type"]], "components": [[189, 0, 0, "-", "and_component"], [190, 0, 0, "-", "cipher_output_component"], [191, 0, 0, "-", "concatenate_component"], [192, 0, 0, "-", "constant_component"], [193, 0, 0, "-", "fsr_component"], [194, 0, 0, "-", "intermediate_output_component"], [195, 0, 0, "-", "linear_layer_component"], [196, 0, 0, "-", "mix_column_component"], [197, 0, 0, "-", "modadd_component"], [198, 0, 0, "-", "modsub_component"], [199, 0, 0, "-", "modular_component"], [200, 0, 0, "-", "multi_input_non_linear_logical_operator_component"], [201, 0, 0, "-", "not_component"], [202, 0, 0, "-", "or_component"], [203, 0, 0, "-", "permutation_component"], [204, 0, 0, "-", "reverse_component"], [205, 0, 0, "-", "rotate_component"], [206, 0, 0, "-", "sbox_component"], [207, 0, 0, "-", "shift_component"], [208, 0, 0, "-", "shift_rows_component"], [209, 0, 0, "-", "sigma_component"], [210, 0, 0, "-", "theta_gaston_component"], [211, 0, 0, "-", "theta_keccak_component"], [212, 0, 0, "-", "theta_xoodoo_component"], [213, 0, 0, "-", "variable_rotate_component"], [214, 0, 0, "-", "variable_shift_component"], [215, 0, 0, "-", "word_permutation_component"], [216, 0, 0, "-", "xor_component"]], "components.and_component": [[189, 1, 1, "", "AND"], [189, 4, 1, "", "cp_twoterms"], [189, 4, 1, "", "cp_xor_differential_probability_ddt"], [189, 4, 1, "", "cp_xor_linear_probability_lat"]], "components.and_component.AND": [[189, 2, 1, "", "algebraic_polynomials"], [189, 2, 1, "", "as_python_dictionary"], [189, 2, 1, "", "check_output_size"], [189, 2, 1, "", "cms_constraints"], [189, 2, 1, "", "cms_xor_differential_propagation_constraints"], [189, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [189, 2, 1, "", "cp_constraints"], [189, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [189, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [189, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [189, 2, 1, "", "cp_xor_differential_propagation_constraints"], [189, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [189, 3, 1, "", "description"], [189, 2, 1, "", "generic_sign_linear_constraints"], [189, 2, 1, "", "get_bit_based_vectorized_python_code"], [189, 2, 1, "", "get_byte_based_vectorized_python_code"], [189, 2, 1, "", "get_graph_representation"], [189, 2, 1, "", "get_word_operation_sign"], [189, 3, 1, "", "id"], [189, 3, 1, "", "input_bit_positions"], [189, 3, 1, "", "input_bit_size"], [189, 3, 1, "", "input_id_links"], [189, 2, 1, "", "is_forbidden"], [189, 2, 1, "", "is_id_equal_to"], [189, 2, 1, "", "is_power_of_2_word_based"], [189, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [189, 2, 1, "", "milp_twoterms_xor_linear_probability_constraints"], [189, 2, 1, "", "milp_xor_differential_propagation_constraints"], [189, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [189, 3, 1, "", "output_bit_size"], [189, 2, 1, "", "output_size_for_concatenate"], [189, 2, 1, "", "print"], [189, 2, 1, "", "print_as_python_dictionary"], [189, 2, 1, "", "print_values"], [189, 2, 1, "", "print_word_values"], [189, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [189, 2, 1, "", "sat_constraints"], [189, 2, 1, "", "sat_xor_differential_propagation_constraints"], [189, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [189, 2, 1, "", "select_bits"], [189, 2, 1, "", "select_words"], [189, 2, 1, "", "set_description"], [189, 2, 1, "", "set_id"], [189, 2, 1, "", "set_input_bit_positions"], [189, 2, 1, "", "set_input_id_links"], [189, 2, 1, "", "smt_constraints"], [189, 2, 1, "", "smt_xor_differential_propagation_constraints"], [189, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [189, 3, 1, "", "suffixes"], [189, 3, 1, "", "type"]], "components.cipher_output_component": [[190, 1, 1, "", "CipherOutput"]], "components.cipher_output_component.CipherOutput": [[190, 2, 1, "", "as_python_dictionary"], [190, 2, 1, "", "check_output_size"], [190, 2, 1, "", "cms_constraints"], [190, 2, 1, "", "cms_xor_differential_propagation_constraints"], [190, 2, 1, "", "cp_constraints"], [190, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [190, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [190, 2, 1, "", "cp_xor_differential_propagation_constraints"], [190, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [190, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [190, 3, 1, "", "description"], [190, 2, 1, "", "get_bit_based_vectorized_python_code"], [190, 2, 1, "", "get_byte_based_vectorized_python_code"], [190, 2, 1, "", "get_graph_representation"], [190, 3, 1, "", "id"], [190, 3, 1, "", "input_bit_positions"], [190, 3, 1, "", "input_bit_size"], [190, 3, 1, "", "input_id_links"], [190, 2, 1, "", "is_forbidden"], [190, 2, 1, "", "is_id_equal_to"], [190, 2, 1, "", "is_power_of_2_word_based"], [190, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [190, 2, 1, "", "milp_constraints"], [190, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [190, 2, 1, "", "milp_xor_differential_propagation_constraints"], [190, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [190, 2, 1, "", "minizinc_constraints"], [190, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [190, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [190, 3, 1, "", "output_bit_size"], [190, 2, 1, "", "output_size_for_concatenate"], [190, 2, 1, "", "print"], [190, 2, 1, "", "print_as_python_dictionary"], [190, 2, 1, "", "print_values"], [190, 2, 1, "", "print_word_values"], [190, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [190, 2, 1, "", "sat_constraints"], [190, 2, 1, "", "sat_semi_deterministic_truncated_xor_differential_constraints"], [190, 2, 1, "", "sat_xor_differential_propagation_constraints"], [190, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [190, 2, 1, "", "select_bits"], [190, 2, 1, "", "select_words"], [190, 2, 1, "", "set_description"], [190, 2, 1, "", "set_id"], [190, 2, 1, "", "set_input_bit_positions"], [190, 2, 1, "", "set_input_id_links"], [190, 2, 1, "", "smt_constraints"], [190, 2, 1, "", "smt_xor_differential_propagation_constraints"], [190, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [190, 3, 1, "", "suffixes"], [190, 3, 1, "", "type"]], "components.concatenate_component": [[191, 1, 1, "", "Concatenate"]], "components.concatenate_component.Concatenate": [[191, 2, 1, "", "as_python_dictionary"], [191, 2, 1, "", "check_output_size"], [191, 3, 1, "", "description"], [191, 2, 1, "", "get_bit_based_c_code"], [191, 2, 1, "", "get_bit_based_vectorized_python_code"], [191, 2, 1, "", "get_byte_based_vectorized_python_code"], [191, 2, 1, "", "get_graph_representation"], [191, 2, 1, "", "get_word_based_c_code"], [191, 3, 1, "", "id"], [191, 3, 1, "", "input_bit_positions"], [191, 3, 1, "", "input_bit_size"], [191, 3, 1, "", "input_id_links"], [191, 2, 1, "", "is_forbidden"], [191, 2, 1, "", "is_id_equal_to"], [191, 2, 1, "", "is_power_of_2_word_based"], [191, 3, 1, "", "output_bit_size"], [191, 2, 1, "", "output_size_for_concatenate"], [191, 2, 1, "", "print"], [191, 2, 1, "", "print_as_python_dictionary"], [191, 2, 1, "", "print_values"], [191, 2, 1, "", "print_word_values"], [191, 2, 1, "", "select_bits"], [191, 2, 1, "", "select_words"], [191, 2, 1, "", "set_description"], [191, 2, 1, "", "set_id"], [191, 2, 1, "", "set_input_bit_positions"], [191, 2, 1, "", "set_input_id_links"], [191, 3, 1, "", "suffixes"], [191, 3, 1, "", "type"]], "components.constant_component": [[192, 1, 1, "", "Constant"], [192, 4, 1, "", "constant_to_repr"]], "components.constant_component.Constant": [[192, 2, 1, "", "algebraic_polynomials"], [192, 2, 1, "", "as_python_dictionary"], [192, 2, 1, "", "check_output_size"], [192, 2, 1, "", "cms_constraints"], [192, 2, 1, "", "cms_xor_differential_propagation_constraints"], [192, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [192, 2, 1, "", "cp_constraints"], [192, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [192, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [192, 2, 1, "", "cp_xor_differential_propagation_constraints"], [192, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [192, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [192, 3, 1, "", "description"], [192, 2, 1, "", "get_bit_based_c_code"], [192, 2, 1, "", "get_bit_based_vectorized_python_code"], [192, 2, 1, "", "get_byte_based_vectorized_python_code"], [192, 2, 1, "", "get_graph_representation"], [192, 2, 1, "", "get_word_based_c_code"], [192, 3, 1, "", "id"], [192, 3, 1, "", "input_bit_positions"], [192, 3, 1, "", "input_bit_size"], [192, 3, 1, "", "input_id_links"], [192, 2, 1, "", "is_forbidden"], [192, 2, 1, "", "is_id_equal_to"], [192, 2, 1, "", "is_power_of_2_word_based"], [192, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [192, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [192, 2, 1, "", "milp_xor_differential_propagation_constraints"], [192, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [192, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [192, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [192, 3, 1, "", "output_bit_size"], [192, 2, 1, "", "output_size_for_concatenate"], [192, 2, 1, "", "print"], [192, 2, 1, "", "print_as_python_dictionary"], [192, 2, 1, "", "print_values"], [192, 2, 1, "", "print_word_values"], [192, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [192, 2, 1, "", "sat_constraints"], [192, 2, 1, "", "sat_semi_deterministic_truncated_xor_differential_constraints"], [192, 2, 1, "", "sat_xor_differential_propagation_constraints"], [192, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [192, 2, 1, "", "select_bits"], [192, 2, 1, "", "select_words"], [192, 2, 1, "", "set_description"], [192, 2, 1, "", "set_id"], [192, 2, 1, "", "set_input_bit_positions"], [192, 2, 1, "", "set_input_id_links"], [192, 2, 1, "", "smt_constraints"], [192, 2, 1, "", "smt_xor_differential_propagation_constraints"], [192, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [192, 3, 1, "", "suffixes"], [192, 3, 1, "", "type"]], "components.fsr_component": [[193, 1, 1, "", "FSR"]], "components.fsr_component.FSR": [[193, 2, 1, "", "algebraic_polynomials"], [193, 2, 1, "", "as_python_dictionary"], [193, 2, 1, "", "check_output_size"], [193, 3, 1, "", "description"], [193, 2, 1, "", "get_graph_representation"], [193, 3, 1, "", "id"], [193, 3, 1, "", "input_bit_positions"], [193, 3, 1, "", "input_bit_size"], [193, 3, 1, "", "input_id_links"], [193, 2, 1, "", "is_forbidden"], [193, 2, 1, "", "is_id_equal_to"], [193, 2, 1, "", "is_power_of_2_word_based"], [193, 3, 1, "", "output_bit_size"], [193, 2, 1, "", "output_size_for_concatenate"], [193, 2, 1, "", "print"], [193, 2, 1, "", "print_as_python_dictionary"], [193, 2, 1, "", "print_values"], [193, 2, 1, "", "print_word_values"], [193, 2, 1, "", "select_bits"], [193, 2, 1, "", "select_words"], [193, 2, 1, "", "set_description"], [193, 2, 1, "", "set_id"], [193, 2, 1, "", "set_input_bit_positions"], [193, 2, 1, "", "set_input_id_links"], [193, 3, 1, "", "suffixes"], [193, 3, 1, "", "type"]], "components.intermediate_output_component": [[194, 1, 1, "", "IntermediateOutput"], [194, 4, 1, "", "update_xor_linear_constraints_for_more_than_one_bit"]], "components.intermediate_output_component.IntermediateOutput": [[194, 2, 1, "", "as_python_dictionary"], [194, 2, 1, "", "check_output_size"], [194, 2, 1, "", "cms_constraints"], [194, 2, 1, "", "cms_xor_differential_propagation_constraints"], [194, 2, 1, "", "cp_constraints"], [194, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [194, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [194, 2, 1, "", "cp_xor_differential_propagation_constraints"], [194, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [194, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [194, 3, 1, "", "description"], [194, 2, 1, "", "get_bit_based_vectorized_python_code"], [194, 2, 1, "", "get_byte_based_vectorized_python_code"], [194, 2, 1, "", "get_graph_representation"], [194, 3, 1, "", "id"], [194, 3, 1, "", "input_bit_positions"], [194, 3, 1, "", "input_bit_size"], [194, 3, 1, "", "input_id_links"], [194, 2, 1, "", "is_forbidden"], [194, 2, 1, "", "is_id_equal_to"], [194, 2, 1, "", "is_power_of_2_word_based"], [194, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [194, 2, 1, "", "milp_constraints"], [194, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [194, 2, 1, "", "milp_xor_differential_propagation_constraints"], [194, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [194, 2, 1, "", "minizinc_constraints"], [194, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [194, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [194, 3, 1, "", "output_bit_size"], [194, 2, 1, "", "output_size_for_concatenate"], [194, 2, 1, "", "print"], [194, 2, 1, "", "print_as_python_dictionary"], [194, 2, 1, "", "print_values"], [194, 2, 1, "", "print_word_values"], [194, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [194, 2, 1, "", "sat_constraints"], [194, 2, 1, "", "sat_semi_deterministic_truncated_xor_differential_constraints"], [194, 2, 1, "", "sat_xor_differential_propagation_constraints"], [194, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [194, 2, 1, "", "select_bits"], [194, 2, 1, "", "select_words"], [194, 2, 1, "", "set_description"], [194, 2, 1, "", "set_id"], [194, 2, 1, "", "set_input_bit_positions"], [194, 2, 1, "", "set_input_id_links"], [194, 2, 1, "", "smt_constraints"], [194, 2, 1, "", "smt_xor_differential_propagation_constraints"], [194, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [194, 3, 1, "", "suffixes"], [194, 3, 1, "", "type"]], "components.linear_layer_component": [[195, 1, 1, "", "LinearLayer"], [195, 4, 1, "", "update_constraints_for_more_than_one_bit"]], "components.linear_layer_component.LinearLayer": [[195, 2, 1, "", "algebraic_polynomials"], [195, 2, 1, "", "as_python_dictionary"], [195, 2, 1, "", "check_output_size"], [195, 2, 1, "", "cms_constraints"], [195, 2, 1, "", "cms_xor_differential_propagation_constraints"], [195, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [195, 2, 1, "", "cp_constraints"], [195, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [195, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [195, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [195, 2, 1, "", "cp_xor_differential_propagation_constraints"], [195, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [195, 3, 1, "", "description"], [195, 2, 1, "", "get_bit_based_c_code"], [195, 2, 1, "", "get_bit_based_vectorized_python_code"], [195, 2, 1, "", "get_byte_based_vectorized_python_code"], [195, 2, 1, "", "get_graph_representation"], [195, 3, 1, "", "id"], [195, 3, 1, "", "input_bit_positions"], [195, 3, 1, "", "input_bit_size"], [195, 3, 1, "", "input_id_links"], [195, 2, 1, "", "is_forbidden"], [195, 2, 1, "", "is_id_equal_to"], [195, 2, 1, "", "is_power_of_2_word_based"], [195, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [195, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [195, 2, 1, "", "milp_constraints"], [195, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [195, 2, 1, "", "milp_xor_differential_propagation_constraints"], [195, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [195, 3, 1, "", "output_bit_size"], [195, 2, 1, "", "output_size_for_concatenate"], [195, 2, 1, "", "print"], [195, 2, 1, "", "print_as_python_dictionary"], [195, 2, 1, "", "print_values"], [195, 2, 1, "", "print_word_values"], [195, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [195, 2, 1, "", "sat_constraints"], [195, 2, 1, "", "sat_xor_differential_propagation_constraints"], [195, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [195, 2, 1, "", "select_bits"], [195, 2, 1, "", "select_words"], [195, 2, 1, "", "set_description"], [195, 2, 1, "", "set_id"], [195, 2, 1, "", "set_input_bit_positions"], [195, 2, 1, "", "set_input_id_links"], [195, 2, 1, "", "smt_constraints"], [195, 2, 1, "", "smt_xor_differential_propagation_constraints"], [195, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [195, 3, 1, "", "suffixes"], [195, 3, 1, "", "type"]], "components.mix_column_component": [[196, 1, 1, "", "MixColumn"], [196, 4, 1, "", "add_xor_components"], [196, 4, 1, "", "calculate_input_bit_positions"], [196, 4, 1, "", "cp_get_all_inputs"]], "components.mix_column_component.MixColumn": [[196, 2, 1, "", "algebraic_polynomials"], [196, 2, 1, "", "as_python_dictionary"], [196, 2, 1, "", "check_output_size"], [196, 2, 1, "", "cms_constraints"], [196, 2, 1, "", "cms_xor_differential_propagation_constraints"], [196, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [196, 2, 1, "", "cp_constraints"], [196, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [196, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [196, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [196, 2, 1, "", "cp_xor_differential_propagation_constraints"], [196, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [196, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [196, 3, 1, "", "description"], [196, 2, 1, "", "get_bit_based_c_code"], [196, 2, 1, "", "get_bit_based_vectorized_python_code"], [196, 2, 1, "", "get_byte_based_vectorized_python_code"], [196, 2, 1, "", "get_graph_representation"], [196, 3, 1, "", "id"], [196, 3, 1, "", "input_bit_positions"], [196, 3, 1, "", "input_bit_size"], [196, 3, 1, "", "input_id_links"], [196, 2, 1, "", "is_forbidden"], [196, 2, 1, "", "is_id_equal_to"], [196, 2, 1, "", "is_power_of_2_word_based"], [196, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [196, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [196, 2, 1, "", "milp_constraints"], [196, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [196, 2, 1, "", "milp_xor_differential_propagation_constraints"], [196, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [196, 3, 1, "", "output_bit_size"], [196, 2, 1, "", "output_size_for_concatenate"], [196, 2, 1, "", "print"], [196, 2, 1, "", "print_as_python_dictionary"], [196, 2, 1, "", "print_values"], [196, 2, 1, "", "print_word_values"], [196, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [196, 2, 1, "", "sat_constraints"], [196, 2, 1, "", "sat_xor_differential_propagation_constraints"], [196, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [196, 2, 1, "", "select_bits"], [196, 2, 1, "", "select_words"], [196, 2, 1, "", "set_description"], [196, 2, 1, "", "set_id"], [196, 2, 1, "", "set_input_bit_positions"], [196, 2, 1, "", "set_input_id_links"], [196, 2, 1, "", "smt_constraints"], [196, 2, 1, "", "smt_xor_differential_propagation_constraints"], [196, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [196, 3, 1, "", "suffixes"], [196, 3, 1, "", "type"]], "components.modadd_component": [[197, 1, 1, "", "MODADD"], [197, 4, 1, "", "cms_modadd"], [197, 4, 1, "", "cms_modadd_seq"], [197, 4, 1, "", "cp_twoterms"], [197, 4, 1, "", "sat_modadd"], [197, 4, 1, "", "sat_modadd_seq"], [197, 4, 1, "", "smt_modadd"], [197, 4, 1, "", "smt_modadd_seq"]], "components.modadd_component.MODADD": [[197, 2, 1, "", "algebraic_polynomials"], [197, 2, 1, "", "as_python_dictionary"], [197, 2, 1, "", "check_output_size"], [197, 2, 1, "", "cms_constraints"], [197, 2, 1, "", "cms_xor_differential_propagation_constraints"], [197, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [197, 2, 1, "", "cp_constraints"], [197, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [197, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [197, 2, 1, "", "cp_twoterms_xor_differential_probability"], [197, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [197, 2, 1, "", "cp_xor_differential_propagation_constraints"], [197, 2, 1, "", "cp_xor_differential_propagation_constraints_arx_optimized"], [197, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [197, 2, 1, "", "create_bct_mzn_constraint_from_component_ids"], [197, 3, 1, "", "description"], [197, 2, 1, "", "get_bit_based_vectorized_python_code"], [197, 2, 1, "", "get_byte_based_vectorized_python_code"], [197, 2, 1, "", "get_graph_representation"], [197, 2, 1, "", "get_word_operation_sign"], [197, 3, 1, "", "id"], [197, 3, 1, "", "input_bit_positions"], [197, 3, 1, "", "input_bit_size"], [197, 3, 1, "", "input_id_links"], [197, 2, 1, "", "is_forbidden"], [197, 2, 1, "", "is_id_equal_to"], [197, 2, 1, "", "is_power_of_2_word_based"], [197, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [197, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [197, 2, 1, "", "milp_xor_differential_propagation_constraints"], [197, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [197, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [197, 3, 1, "", "output_bit_size"], [197, 2, 1, "", "output_size_for_concatenate"], [197, 2, 1, "", "print"], [197, 2, 1, "", "print_as_python_dictionary"], [197, 2, 1, "", "print_values"], [197, 2, 1, "", "print_word_values"], [197, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [197, 2, 1, "", "sat_constraints"], [197, 2, 1, "", "sat_semi_deterministic_truncated_xor_differential_constraints"], [197, 2, 1, "", "sat_xor_differential_propagation_constraints"], [197, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [197, 2, 1, "", "select_bits"], [197, 2, 1, "", "select_words"], [197, 2, 1, "", "set_description"], [197, 2, 1, "", "set_id"], [197, 2, 1, "", "set_input_bit_positions"], [197, 2, 1, "", "set_input_id_links"], [197, 2, 1, "", "smt_constraints"], [197, 2, 1, "", "smt_xor_differential_propagation_constraints"], [197, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [197, 3, 1, "", "suffixes"], [197, 2, 1, "", "twoterms_milp_probability_xor_linear_constraints"], [197, 3, 1, "", "type"]], "components.modsub_component": [[198, 1, 1, "", "MODSUB"], [198, 4, 1, "", "cp_twoterms"]], "components.modsub_component.MODSUB": [[198, 2, 1, "", "algebraic_polynomials"], [198, 2, 1, "", "as_python_dictionary"], [198, 2, 1, "", "check_output_size"], [198, 2, 1, "", "cms_constraints"], [198, 2, 1, "", "cms_xor_differential_propagation_constraints"], [198, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [198, 2, 1, "", "cp_constraints"], [198, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [198, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [198, 2, 1, "", "cp_twoterms_xor_differential_probability"], [198, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [198, 2, 1, "", "cp_xor_differential_propagation_constraints"], [198, 2, 1, "", "cp_xor_differential_propagation_constraints_arx_optimized"], [198, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [198, 2, 1, "", "create_bct_mzn_constraint_from_component_ids"], [198, 3, 1, "", "description"], [198, 2, 1, "", "get_bit_based_vectorized_python_code"], [198, 2, 1, "", "get_byte_based_vectorized_python_code"], [198, 2, 1, "", "get_graph_representation"], [198, 2, 1, "", "get_word_operation_sign"], [198, 3, 1, "", "id"], [198, 3, 1, "", "input_bit_positions"], [198, 3, 1, "", "input_bit_size"], [198, 3, 1, "", "input_id_links"], [198, 2, 1, "", "is_forbidden"], [198, 2, 1, "", "is_id_equal_to"], [198, 2, 1, "", "is_power_of_2_word_based"], [198, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [198, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [198, 2, 1, "", "milp_xor_differential_propagation_constraints"], [198, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [198, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [198, 3, 1, "", "output_bit_size"], [198, 2, 1, "", "output_size_for_concatenate"], [198, 2, 1, "", "print"], [198, 2, 1, "", "print_as_python_dictionary"], [198, 2, 1, "", "print_values"], [198, 2, 1, "", "print_word_values"], [198, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [198, 2, 1, "", "sat_constraints"], [198, 2, 1, "", "sat_semi_deterministic_truncated_xor_differential_constraints"], [198, 2, 1, "", "sat_xor_differential_propagation_constraints"], [198, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [198, 2, 1, "", "select_bits"], [198, 2, 1, "", "select_words"], [198, 2, 1, "", "set_description"], [198, 2, 1, "", "set_id"], [198, 2, 1, "", "set_input_bit_positions"], [198, 2, 1, "", "set_input_id_links"], [198, 2, 1, "", "smt_constraints"], [198, 2, 1, "", "smt_xor_differential_propagation_constraints"], [198, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [198, 3, 1, "", "suffixes"], [198, 2, 1, "", "twoterms_milp_probability_xor_linear_constraints"], [198, 3, 1, "", "type"]], "components.modular_component": [[199, 1, 1, "", "Modular"], [199, 4, 1, "", "generic_sign_linear_constraints"], [199, 4, 1, "", "milp_n_window_heuristic"]], "components.modular_component.Modular": [[199, 2, 1, "", "as_python_dictionary"], [199, 2, 1, "", "check_output_size"], [199, 2, 1, "", "cms_xor_differential_propagation_constraints"], [199, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [199, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [199, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [199, 2, 1, "", "cp_twoterms_xor_differential_probability"], [199, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [199, 2, 1, "", "cp_xor_differential_propagation_constraints"], [199, 2, 1, "", "cp_xor_differential_propagation_constraints_arx_optimized"], [199, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [199, 2, 1, "", "create_bct_mzn_constraint_from_component_ids"], [199, 3, 1, "", "description"], [199, 2, 1, "", "get_graph_representation"], [199, 2, 1, "", "get_word_operation_sign"], [199, 3, 1, "", "id"], [199, 3, 1, "", "input_bit_positions"], [199, 3, 1, "", "input_bit_size"], [199, 3, 1, "", "input_id_links"], [199, 2, 1, "", "is_forbidden"], [199, 2, 1, "", "is_id_equal_to"], [199, 2, 1, "", "is_power_of_2_word_based"], [199, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [199, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [199, 2, 1, "", "milp_xor_differential_propagation_constraints"], [199, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [199, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [199, 3, 1, "", "output_bit_size"], [199, 2, 1, "", "output_size_for_concatenate"], [199, 2, 1, "", "print"], [199, 2, 1, "", "print_as_python_dictionary"], [199, 2, 1, "", "print_values"], [199, 2, 1, "", "print_word_values"], [199, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [199, 2, 1, "", "sat_semi_deterministic_truncated_xor_differential_constraints"], [199, 2, 1, "", "sat_xor_differential_propagation_constraints"], [199, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [199, 2, 1, "", "select_bits"], [199, 2, 1, "", "select_words"], [199, 2, 1, "", "set_description"], [199, 2, 1, "", "set_id"], [199, 2, 1, "", "set_input_bit_positions"], [199, 2, 1, "", "set_input_id_links"], [199, 2, 1, "", "smt_xor_differential_propagation_constraints"], [199, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [199, 3, 1, "", "suffixes"], [199, 2, 1, "", "twoterms_milp_probability_xor_linear_constraints"], [199, 3, 1, "", "type"]], "components.multi_input_non_linear_logical_operator_component": [[200, 1, 1, "", "MultiInputNonlinearLogicalOperator"]], "components.multi_input_non_linear_logical_operator_component.MultiInputNonlinearLogicalOperator": [[200, 2, 1, "", "as_python_dictionary"], [200, 2, 1, "", "check_output_size"], [200, 2, 1, "", "cms_constraints"], [200, 2, 1, "", "cms_xor_differential_propagation_constraints"], [200, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [200, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [200, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [200, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [200, 2, 1, "", "cp_xor_differential_propagation_constraints"], [200, 3, 1, "", "description"], [200, 2, 1, "", "generic_sign_linear_constraints"], [200, 2, 1, "", "get_graph_representation"], [200, 2, 1, "", "get_word_operation_sign"], [200, 3, 1, "", "id"], [200, 3, 1, "", "input_bit_positions"], [200, 3, 1, "", "input_bit_size"], [200, 3, 1, "", "input_id_links"], [200, 2, 1, "", "is_forbidden"], [200, 2, 1, "", "is_id_equal_to"], [200, 2, 1, "", "is_power_of_2_word_based"], [200, 2, 1, "", "milp_twoterms_xor_linear_probability_constraints"], [200, 2, 1, "", "milp_xor_differential_propagation_constraints"], [200, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [200, 3, 1, "", "output_bit_size"], [200, 2, 1, "", "output_size_for_concatenate"], [200, 2, 1, "", "print"], [200, 2, 1, "", "print_as_python_dictionary"], [200, 2, 1, "", "print_values"], [200, 2, 1, "", "print_word_values"], [200, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [200, 2, 1, "", "sat_xor_differential_propagation_constraints"], [200, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [200, 2, 1, "", "select_bits"], [200, 2, 1, "", "select_words"], [200, 2, 1, "", "set_description"], [200, 2, 1, "", "set_id"], [200, 2, 1, "", "set_input_bit_positions"], [200, 2, 1, "", "set_input_id_links"], [200, 2, 1, "", "smt_xor_differential_propagation_constraints"], [200, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [200, 3, 1, "", "suffixes"], [200, 3, 1, "", "type"]], "components.not_component": [[201, 1, 1, "", "NOT"]], "components.not_component.NOT": [[201, 2, 1, "", "algebraic_polynomials"], [201, 2, 1, "", "as_python_dictionary"], [201, 2, 1, "", "check_output_size"], [201, 2, 1, "", "cms_constraints"], [201, 2, 1, "", "cms_xor_differential_propagation_constraints"], [201, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [201, 2, 1, "", "cp_constraints"], [201, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [201, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [201, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [201, 2, 1, "", "cp_xor_differential_first_step_constraints"], [201, 2, 1, "", "cp_xor_differential_propagation_constraints"], [201, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [201, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [201, 3, 1, "", "description"], [201, 2, 1, "", "generic_sign_linear_constraints"], [201, 2, 1, "", "get_bit_based_vectorized_python_code"], [201, 2, 1, "", "get_byte_based_vectorized_python_code"], [201, 2, 1, "", "get_graph_representation"], [201, 2, 1, "", "get_word_operation_sign"], [201, 3, 1, "", "id"], [201, 3, 1, "", "input_bit_positions"], [201, 3, 1, "", "input_bit_size"], [201, 3, 1, "", "input_id_links"], [201, 2, 1, "", "is_forbidden"], [201, 2, 1, "", "is_id_equal_to"], [201, 2, 1, "", "is_power_of_2_word_based"], [201, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [201, 2, 1, "", "milp_constraints"], [201, 2, 1, "", "milp_xor_differential_propagation_constraints"], [201, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [201, 3, 1, "", "output_bit_size"], [201, 2, 1, "", "output_size_for_concatenate"], [201, 2, 1, "", "print"], [201, 2, 1, "", "print_as_python_dictionary"], [201, 2, 1, "", "print_values"], [201, 2, 1, "", "print_word_values"], [201, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [201, 2, 1, "", "sat_constraints"], [201, 2, 1, "", "sat_xor_differential_propagation_constraints"], [201, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [201, 2, 1, "", "select_bits"], [201, 2, 1, "", "select_words"], [201, 2, 1, "", "set_description"], [201, 2, 1, "", "set_id"], [201, 2, 1, "", "set_input_bit_positions"], [201, 2, 1, "", "set_input_id_links"], [201, 2, 1, "", "smt_constraints"], [201, 2, 1, "", "smt_xor_differential_propagation_constraints"], [201, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [201, 3, 1, "", "suffixes"], [201, 3, 1, "", "type"]], "components.or_component": [[202, 1, 1, "", "OR"]], "components.or_component.OR": [[202, 2, 1, "", "algebraic_polynomials"], [202, 2, 1, "", "as_python_dictionary"], [202, 2, 1, "", "check_output_size"], [202, 2, 1, "", "cms_constraints"], [202, 2, 1, "", "cms_xor_differential_propagation_constraints"], [202, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [202, 2, 1, "", "cp_constraints"], [202, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [202, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [202, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [202, 2, 1, "", "cp_xor_differential_propagation_constraints"], [202, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [202, 3, 1, "", "description"], [202, 2, 1, "", "generic_sign_linear_constraints"], [202, 2, 1, "", "get_bit_based_vectorized_python_code"], [202, 2, 1, "", "get_byte_based_vectorized_python_code"], [202, 2, 1, "", "get_graph_representation"], [202, 2, 1, "", "get_word_operation_sign"], [202, 3, 1, "", "id"], [202, 3, 1, "", "input_bit_positions"], [202, 3, 1, "", "input_bit_size"], [202, 3, 1, "", "input_id_links"], [202, 2, 1, "", "is_forbidden"], [202, 2, 1, "", "is_id_equal_to"], [202, 2, 1, "", "is_power_of_2_word_based"], [202, 2, 1, "", "milp_twoterms_xor_linear_probability_constraints"], [202, 2, 1, "", "milp_xor_differential_propagation_constraints"], [202, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [202, 3, 1, "", "output_bit_size"], [202, 2, 1, "", "output_size_for_concatenate"], [202, 2, 1, "", "print"], [202, 2, 1, "", "print_as_python_dictionary"], [202, 2, 1, "", "print_values"], [202, 2, 1, "", "print_word_values"], [202, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [202, 2, 1, "", "sat_constraints"], [202, 2, 1, "", "sat_xor_differential_propagation_constraints"], [202, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [202, 2, 1, "", "select_bits"], [202, 2, 1, "", "select_words"], [202, 2, 1, "", "set_description"], [202, 2, 1, "", "set_id"], [202, 2, 1, "", "set_input_bit_positions"], [202, 2, 1, "", "set_input_id_links"], [202, 2, 1, "", "smt_constraints"], [202, 2, 1, "", "smt_xor_differential_propagation_constraints"], [202, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [202, 3, 1, "", "suffixes"], [202, 3, 1, "", "type"]], "components.permutation_component": [[203, 1, 1, "", "Permutation"]], "components.permutation_component.Permutation": [[203, 2, 1, "", "algebraic_polynomials"], [203, 2, 1, "", "as_python_dictionary"], [203, 2, 1, "", "check_output_size"], [203, 2, 1, "", "cms_constraints"], [203, 2, 1, "", "cms_xor_differential_propagation_constraints"], [203, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [203, 2, 1, "", "cp_constraints"], [203, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [203, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [203, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [203, 2, 1, "", "cp_xor_differential_propagation_constraints"], [203, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [203, 3, 1, "", "description"], [203, 2, 1, "", "get_bit_based_c_code"], [203, 2, 1, "", "get_bit_based_vectorized_python_code"], [203, 2, 1, "", "get_byte_based_vectorized_python_code"], [203, 2, 1, "", "get_graph_representation"], [203, 3, 1, "", "id"], [203, 3, 1, "", "input_bit_positions"], [203, 3, 1, "", "input_bit_size"], [203, 3, 1, "", "input_id_links"], [203, 2, 1, "", "is_forbidden"], [203, 2, 1, "", "is_id_equal_to"], [203, 2, 1, "", "is_power_of_2_word_based"], [203, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [203, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [203, 2, 1, "", "milp_constraints"], [203, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [203, 2, 1, "", "milp_xor_differential_propagation_constraints"], [203, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [203, 3, 1, "", "output_bit_size"], [203, 2, 1, "", "output_size_for_concatenate"], [203, 2, 1, "", "print"], [203, 2, 1, "", "print_as_python_dictionary"], [203, 2, 1, "", "print_values"], [203, 2, 1, "", "print_word_values"], [203, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [203, 2, 1, "", "sat_constraints"], [203, 2, 1, "", "sat_xor_differential_propagation_constraints"], [203, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [203, 2, 1, "", "select_bits"], [203, 2, 1, "", "select_words"], [203, 2, 1, "", "set_description"], [203, 2, 1, "", "set_id"], [203, 2, 1, "", "set_input_bit_positions"], [203, 2, 1, "", "set_input_id_links"], [203, 2, 1, "", "smt_constraints"], [203, 2, 1, "", "smt_xor_differential_propagation_constraints"], [203, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [203, 3, 1, "", "suffixes"], [203, 3, 1, "", "type"]], "components.reverse_component": [[204, 1, 1, "", "Reverse"]], "components.reverse_component.Reverse": [[204, 2, 1, "", "algebraic_polynomials"], [204, 2, 1, "", "as_python_dictionary"], [204, 2, 1, "", "check_output_size"], [204, 2, 1, "", "cms_constraints"], [204, 2, 1, "", "cms_xor_differential_propagation_constraints"], [204, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [204, 2, 1, "", "cp_constraints"], [204, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [204, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [204, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [204, 2, 1, "", "cp_xor_differential_propagation_constraints"], [204, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [204, 3, 1, "", "description"], [204, 2, 1, "", "get_bit_based_c_code"], [204, 2, 1, "", "get_bit_based_vectorized_python_code"], [204, 2, 1, "", "get_byte_based_vectorized_python_code"], [204, 2, 1, "", "get_graph_representation"], [204, 3, 1, "", "id"], [204, 3, 1, "", "input_bit_positions"], [204, 3, 1, "", "input_bit_size"], [204, 3, 1, "", "input_id_links"], [204, 2, 1, "", "is_forbidden"], [204, 2, 1, "", "is_id_equal_to"], [204, 2, 1, "", "is_power_of_2_word_based"], [204, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [204, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [204, 2, 1, "", "milp_constraints"], [204, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [204, 2, 1, "", "milp_xor_differential_propagation_constraints"], [204, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [204, 3, 1, "", "output_bit_size"], [204, 2, 1, "", "output_size_for_concatenate"], [204, 2, 1, "", "print"], [204, 2, 1, "", "print_as_python_dictionary"], [204, 2, 1, "", "print_values"], [204, 2, 1, "", "print_word_values"], [204, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [204, 2, 1, "", "sat_constraints"], [204, 2, 1, "", "sat_xor_differential_propagation_constraints"], [204, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [204, 2, 1, "", "select_bits"], [204, 2, 1, "", "select_words"], [204, 2, 1, "", "set_description"], [204, 2, 1, "", "set_id"], [204, 2, 1, "", "set_input_bit_positions"], [204, 2, 1, "", "set_input_id_links"], [204, 2, 1, "", "smt_constraints"], [204, 2, 1, "", "smt_xor_differential_propagation_constraints"], [204, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [204, 3, 1, "", "suffixes"], [204, 3, 1, "", "type"]], "components.rotate_component": [[205, 1, 1, "", "Rotate"]], "components.rotate_component.Rotate": [[205, 2, 1, "", "algebraic_polynomials"], [205, 2, 1, "", "as_python_dictionary"], [205, 2, 1, "", "check_output_size"], [205, 2, 1, "", "cms_constraints"], [205, 2, 1, "", "cms_xor_differential_propagation_constraints"], [205, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [205, 2, 1, "", "cp_constraints"], [205, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [205, 2, 1, "", "cp_inverse_constraints"], [205, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [205, 2, 1, "", "cp_xor_differential_first_step_constraints"], [205, 2, 1, "", "cp_xor_differential_propagation_constraints"], [205, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [205, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [205, 3, 1, "", "description"], [205, 2, 1, "", "get_bit_based_vectorized_python_code"], [205, 2, 1, "", "get_byte_based_vectorized_python_code"], [205, 2, 1, "", "get_graph_representation"], [205, 2, 1, "", "get_word_based_c_code"], [205, 2, 1, "", "get_word_operation_sign"], [205, 3, 1, "", "id"], [205, 3, 1, "", "input_bit_positions"], [205, 3, 1, "", "input_bit_size"], [205, 3, 1, "", "input_id_links"], [205, 2, 1, "", "is_forbidden"], [205, 2, 1, "", "is_id_equal_to"], [205, 2, 1, "", "is_power_of_2_word_based"], [205, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [205, 2, 1, "", "milp_constraints"], [205, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [205, 2, 1, "", "milp_xor_differential_propagation_constraints"], [205, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [205, 2, 1, "", "minizinc_constraints"], [205, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [205, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [205, 3, 1, "", "output_bit_size"], [205, 2, 1, "", "output_size_for_concatenate"], [205, 2, 1, "", "print"], [205, 2, 1, "", "print_as_python_dictionary"], [205, 2, 1, "", "print_values"], [205, 2, 1, "", "print_word_values"], [205, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [205, 2, 1, "", "sat_constraints"], [205, 2, 1, "", "sat_semi_deterministic_truncated_xor_differential_constraints"], [205, 2, 1, "", "sat_xor_differential_propagation_constraints"], [205, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [205, 2, 1, "", "select_bits"], [205, 2, 1, "", "select_words"], [205, 2, 1, "", "set_description"], [205, 2, 1, "", "set_id"], [205, 2, 1, "", "set_input_bit_positions"], [205, 2, 1, "", "set_input_id_links"], [205, 2, 1, "", "smt_constraints"], [205, 2, 1, "", "smt_xor_differential_propagation_constraints"], [205, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [205, 3, 1, "", "suffixes"], [205, 3, 1, "", "type"]], "components.sbox_component": [[206, 1, 1, "", "SBOX"], [206, 4, 1, "", "check_table_feasibility"], [206, 4, 1, "", "cp_update_ddt_valid_probabilities"], [206, 4, 1, "", "cp_update_lat_valid_probabilities"], [206, 4, 1, "", "milp_large_xor_probability_constraint_for_inequality"], [206, 4, 1, "", "milp_set_constraints_from_dictionnary_for_large_sbox"], [206, 4, 1, "", "sat_build_table_template"], [206, 4, 1, "", "smt_build_table_template"], [206, 4, 1, "", "smt_get_sbox_probability_constraints"]], "components.sbox_component.SBOX": [[206, 2, 1, "", "algebraic_polynomials"], [206, 2, 1, "", "as_python_dictionary"], [206, 2, 1, "", "check_output_size"], [206, 2, 1, "", "cms_constraints"], [206, 2, 1, "", "cms_xor_differential_propagation_constraints"], [206, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [206, 2, 1, "", "cp_constraints"], [206, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [206, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [206, 2, 1, "", "cp_hybrid_deterministic_truncated_xor_differential_constraints"], [206, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [206, 2, 1, "", "cp_xor_differential_first_step_constraints"], [206, 2, 1, "", "cp_xor_differential_propagation_constraints"], [206, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [206, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [206, 3, 1, "", "description"], [206, 2, 1, "", "generate_sbox_sign_lat"], [206, 2, 1, "", "get_bit_based_c_code"], [206, 2, 1, "", "get_bit_based_vectorized_python_code"], [206, 2, 1, "", "get_byte_based_vectorized_python_code"], [206, 2, 1, "", "get_ddt_with_undisturbed_transitions"], [206, 2, 1, "", "get_graph_representation"], [206, 2, 1, "", "get_word_based_c_code"], [206, 3, 1, "", "id"], [206, 3, 1, "", "input_bit_positions"], [206, 3, 1, "", "input_bit_size"], [206, 3, 1, "", "input_id_links"], [206, 2, 1, "", "is_forbidden"], [206, 2, 1, "", "is_id_equal_to"], [206, 2, 1, "", "is_power_of_2_word_based"], [206, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [206, 2, 1, "", "milp_large_xor_differential_probability_constraints"], [206, 2, 1, "", "milp_large_xor_linear_probability_constraints"], [206, 2, 1, "", "milp_small_xor_differential_probability_constraints"], [206, 2, 1, "", "milp_small_xor_linear_probability_constraints"], [206, 2, 1, "", "milp_undisturbed_bits_bitwise_deterministic_truncated_xor_differential_constraints"], [206, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [206, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_simple_constraints"], [206, 2, 1, "", "milp_xor_differential_propagation_constraints"], [206, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [206, 3, 1, "", "output_bit_size"], [206, 2, 1, "", "output_size_for_concatenate"], [206, 2, 1, "", "print"], [206, 2, 1, "", "print_as_python_dictionary"], [206, 2, 1, "", "print_values"], [206, 2, 1, "", "print_word_values"], [206, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [206, 2, 1, "", "sat_constraints"], [206, 2, 1, "", "sat_xor_differential_propagation_constraints"], [206, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [206, 5, 1, "", "sboxes_ddt_templates"], [206, 5, 1, "", "sboxes_lat_templates"], [206, 2, 1, "", "select_bits"], [206, 2, 1, "", "select_words"], [206, 2, 1, "", "set_description"], [206, 2, 1, "", "set_id"], [206, 2, 1, "", "set_input_bit_positions"], [206, 2, 1, "", "set_input_id_links"], [206, 2, 1, "", "smt_constraints"], [206, 2, 1, "", "smt_xor_differential_propagation_constraints"], [206, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [206, 3, 1, "", "suffixes"], [206, 3, 1, "", "type"]], "components.shift_component": [[207, 1, 1, "", "SHIFT"]], "components.shift_component.SHIFT": [[207, 2, 1, "", "algebraic_polynomials"], [207, 2, 1, "", "as_python_dictionary"], [207, 2, 1, "", "check_output_size"], [207, 2, 1, "", "cms_constraints"], [207, 2, 1, "", "cms_xor_differential_propagation_constraints"], [207, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [207, 2, 1, "", "cp_constraints"], [207, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [207, 2, 1, "", "cp_inverse_constraints"], [207, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [207, 2, 1, "", "cp_xor_differential_first_step_constraints"], [207, 2, 1, "", "cp_xor_differential_propagation_constraints"], [207, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [207, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [207, 3, 1, "", "description"], [207, 2, 1, "", "get_bit_based_vectorized_python_code"], [207, 2, 1, "", "get_byte_based_vectorized_python_code"], [207, 2, 1, "", "get_graph_representation"], [207, 2, 1, "", "get_word_based_c_code"], [207, 2, 1, "", "get_word_operation_sign"], [207, 3, 1, "", "id"], [207, 3, 1, "", "input_bit_positions"], [207, 3, 1, "", "input_bit_size"], [207, 3, 1, "", "input_id_links"], [207, 2, 1, "", "is_forbidden"], [207, 2, 1, "", "is_id_equal_to"], [207, 2, 1, "", "is_power_of_2_word_based"], [207, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [207, 2, 1, "", "milp_constraints"], [207, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [207, 2, 1, "", "milp_xor_differential_propagation_constraints"], [207, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [207, 2, 1, "", "minizinc_constraints"], [207, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [207, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [207, 3, 1, "", "output_bit_size"], [207, 2, 1, "", "output_size_for_concatenate"], [207, 2, 1, "", "print"], [207, 2, 1, "", "print_as_python_dictionary"], [207, 2, 1, "", "print_values"], [207, 2, 1, "", "print_word_values"], [207, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [207, 2, 1, "", "sat_constraints"], [207, 2, 1, "", "sat_xor_differential_propagation_constraints"], [207, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [207, 2, 1, "", "select_bits"], [207, 2, 1, "", "select_words"], [207, 2, 1, "", "set_description"], [207, 2, 1, "", "set_id"], [207, 2, 1, "", "set_input_bit_positions"], [207, 2, 1, "", "set_input_id_links"], [207, 2, 1, "", "smt_constraints"], [207, 2, 1, "", "smt_xor_differential_propagation_constraints"], [207, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [207, 3, 1, "", "suffixes"], [207, 3, 1, "", "type"]], "components.shift_rows_component": [[208, 1, 1, "", "ShiftRows"]], "components.shift_rows_component.ShiftRows": [[208, 2, 1, "", "algebraic_polynomials"], [208, 2, 1, "", "as_python_dictionary"], [208, 2, 1, "", "check_output_size"], [208, 2, 1, "", "cms_constraints"], [208, 2, 1, "", "cms_xor_differential_propagation_constraints"], [208, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [208, 2, 1, "", "cp_constraints"], [208, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [208, 2, 1, "", "cp_inverse_constraints"], [208, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [208, 2, 1, "", "cp_xor_differential_first_step_constraints"], [208, 2, 1, "", "cp_xor_differential_propagation_constraints"], [208, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [208, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [208, 3, 1, "", "description"], [208, 2, 1, "", "get_bit_based_vectorized_python_code"], [208, 2, 1, "", "get_byte_based_vectorized_python_code"], [208, 2, 1, "", "get_graph_representation"], [208, 2, 1, "", "get_word_based_c_code"], [208, 2, 1, "", "get_word_operation_sign"], [208, 3, 1, "", "id"], [208, 3, 1, "", "input_bit_positions"], [208, 3, 1, "", "input_bit_size"], [208, 3, 1, "", "input_id_links"], [208, 2, 1, "", "is_forbidden"], [208, 2, 1, "", "is_id_equal_to"], [208, 2, 1, "", "is_power_of_2_word_based"], [208, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [208, 2, 1, "", "milp_constraints"], [208, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [208, 2, 1, "", "milp_xor_differential_propagation_constraints"], [208, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [208, 2, 1, "", "minizinc_constraints"], [208, 2, 1, "", "minizinc_deterministic_truncated_xor_differential_trail_constraints"], [208, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [208, 3, 1, "", "output_bit_size"], [208, 2, 1, "", "output_size_for_concatenate"], [208, 2, 1, "", "print"], [208, 2, 1, "", "print_as_python_dictionary"], [208, 2, 1, "", "print_values"], [208, 2, 1, "", "print_word_values"], [208, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [208, 2, 1, "", "sat_constraints"], [208, 2, 1, "", "sat_semi_deterministic_truncated_xor_differential_constraints"], [208, 2, 1, "", "sat_xor_differential_propagation_constraints"], [208, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [208, 2, 1, "", "select_bits"], [208, 2, 1, "", "select_words"], [208, 2, 1, "", "set_description"], [208, 2, 1, "", "set_id"], [208, 2, 1, "", "set_input_bit_positions"], [208, 2, 1, "", "set_input_id_links"], [208, 2, 1, "", "smt_constraints"], [208, 2, 1, "", "smt_xor_differential_propagation_constraints"], [208, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [208, 3, 1, "", "suffixes"], [208, 3, 1, "", "type"]], "components.sigma_component": [[209, 1, 1, "", "Sigma"]], "components.sigma_component.Sigma": [[209, 2, 1, "", "algebraic_polynomials"], [209, 2, 1, "", "as_python_dictionary"], [209, 2, 1, "", "check_output_size"], [209, 2, 1, "", "cms_constraints"], [209, 2, 1, "", "cms_xor_differential_propagation_constraints"], [209, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [209, 2, 1, "", "cp_constraints"], [209, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [209, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [209, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [209, 2, 1, "", "cp_xor_differential_propagation_constraints"], [209, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [209, 3, 1, "", "description"], [209, 2, 1, "", "get_bit_based_c_code"], [209, 2, 1, "", "get_bit_based_vectorized_python_code"], [209, 2, 1, "", "get_byte_based_vectorized_python_code"], [209, 2, 1, "", "get_graph_representation"], [209, 3, 1, "", "id"], [209, 3, 1, "", "input_bit_positions"], [209, 3, 1, "", "input_bit_size"], [209, 3, 1, "", "input_id_links"], [209, 2, 1, "", "is_forbidden"], [209, 2, 1, "", "is_id_equal_to"], [209, 2, 1, "", "is_power_of_2_word_based"], [209, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [209, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [209, 2, 1, "", "milp_constraints"], [209, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [209, 2, 1, "", "milp_xor_differential_propagation_constraints"], [209, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [209, 3, 1, "", "output_bit_size"], [209, 2, 1, "", "output_size_for_concatenate"], [209, 2, 1, "", "print"], [209, 2, 1, "", "print_as_python_dictionary"], [209, 2, 1, "", "print_values"], [209, 2, 1, "", "print_word_values"], [209, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [209, 2, 1, "", "sat_constraints"], [209, 2, 1, "", "sat_xor_differential_propagation_constraints"], [209, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [209, 2, 1, "", "select_bits"], [209, 2, 1, "", "select_words"], [209, 2, 1, "", "set_description"], [209, 2, 1, "", "set_id"], [209, 2, 1, "", "set_input_bit_positions"], [209, 2, 1, "", "set_input_id_links"], [209, 2, 1, "", "smt_constraints"], [209, 2, 1, "", "smt_xor_differential_propagation_constraints"], [209, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [209, 3, 1, "", "suffixes"], [209, 3, 1, "", "type"]], "components.theta_gaston_component": [[210, 1, 1, "", "ThetaGaston"]], "components.theta_gaston_component.ThetaGaston": [[210, 2, 1, "", "algebraic_polynomials"], [210, 2, 1, "", "as_python_dictionary"], [210, 2, 1, "", "check_output_size"], [210, 2, 1, "", "cms_constraints"], [210, 2, 1, "", "cms_xor_differential_propagation_constraints"], [210, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [210, 2, 1, "", "cp_constraints"], [210, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [210, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [210, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [210, 2, 1, "", "cp_xor_differential_propagation_constraints"], [210, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [210, 3, 1, "", "description"], [210, 2, 1, "", "get_bit_based_c_code"], [210, 2, 1, "", "get_bit_based_vectorized_python_code"], [210, 2, 1, "", "get_byte_based_vectorized_python_code"], [210, 2, 1, "", "get_graph_representation"], [210, 3, 1, "", "id"], [210, 3, 1, "", "input_bit_positions"], [210, 3, 1, "", "input_bit_size"], [210, 3, 1, "", "input_id_links"], [210, 2, 1, "", "is_forbidden"], [210, 2, 1, "", "is_id_equal_to"], [210, 2, 1, "", "is_power_of_2_word_based"], [210, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [210, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [210, 2, 1, "", "milp_constraints"], [210, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [210, 2, 1, "", "milp_xor_differential_propagation_constraints"], [210, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [210, 3, 1, "", "output_bit_size"], [210, 2, 1, "", "output_size_for_concatenate"], [210, 2, 1, "", "print"], [210, 2, 1, "", "print_as_python_dictionary"], [210, 2, 1, "", "print_values"], [210, 2, 1, "", "print_word_values"], [210, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [210, 2, 1, "", "sat_constraints"], [210, 2, 1, "", "sat_xor_differential_propagation_constraints"], [210, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [210, 2, 1, "", "select_bits"], [210, 2, 1, "", "select_words"], [210, 2, 1, "", "set_description"], [210, 2, 1, "", "set_id"], [210, 2, 1, "", "set_input_bit_positions"], [210, 2, 1, "", "set_input_id_links"], [210, 2, 1, "", "smt_constraints"], [210, 2, 1, "", "smt_xor_differential_propagation_constraints"], [210, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [210, 3, 1, "", "suffixes"], [210, 3, 1, "", "type"]], "components.theta_keccak_component": [[211, 1, 1, "", "ThetaKeccak"]], "components.theta_keccak_component.ThetaKeccak": [[211, 2, 1, "", "algebraic_polynomials"], [211, 2, 1, "", "as_python_dictionary"], [211, 2, 1, "", "check_output_size"], [211, 2, 1, "", "cms_constraints"], [211, 2, 1, "", "cms_xor_differential_propagation_constraints"], [211, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [211, 2, 1, "", "cp_constraints"], [211, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [211, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [211, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [211, 2, 1, "", "cp_xor_differential_propagation_constraints"], [211, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [211, 3, 1, "", "description"], [211, 2, 1, "", "get_bit_based_c_code"], [211, 2, 1, "", "get_bit_based_vectorized_python_code"], [211, 2, 1, "", "get_byte_based_vectorized_python_code"], [211, 2, 1, "", "get_graph_representation"], [211, 3, 1, "", "id"], [211, 3, 1, "", "input_bit_positions"], [211, 3, 1, "", "input_bit_size"], [211, 3, 1, "", "input_id_links"], [211, 2, 1, "", "is_forbidden"], [211, 2, 1, "", "is_id_equal_to"], [211, 2, 1, "", "is_power_of_2_word_based"], [211, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [211, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [211, 2, 1, "", "milp_constraints"], [211, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [211, 2, 1, "", "milp_xor_differential_propagation_constraints"], [211, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [211, 3, 1, "", "output_bit_size"], [211, 2, 1, "", "output_size_for_concatenate"], [211, 2, 1, "", "print"], [211, 2, 1, "", "print_as_python_dictionary"], [211, 2, 1, "", "print_values"], [211, 2, 1, "", "print_word_values"], [211, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [211, 2, 1, "", "sat_constraints"], [211, 2, 1, "", "sat_xor_differential_propagation_constraints"], [211, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [211, 2, 1, "", "select_bits"], [211, 2, 1, "", "select_words"], [211, 2, 1, "", "set_description"], [211, 2, 1, "", "set_id"], [211, 2, 1, "", "set_input_bit_positions"], [211, 2, 1, "", "set_input_id_links"], [211, 2, 1, "", "smt_constraints"], [211, 2, 1, "", "smt_xor_differential_propagation_constraints"], [211, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [211, 3, 1, "", "suffixes"], [211, 3, 1, "", "type"]], "components.theta_xoodoo_component": [[212, 1, 1, "", "ThetaXoodoo"]], "components.theta_xoodoo_component.ThetaXoodoo": [[212, 2, 1, "", "algebraic_polynomials"], [212, 2, 1, "", "as_python_dictionary"], [212, 2, 1, "", "check_output_size"], [212, 2, 1, "", "cms_constraints"], [212, 2, 1, "", "cms_xor_differential_propagation_constraints"], [212, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [212, 2, 1, "", "cp_constraints"], [212, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [212, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [212, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [212, 2, 1, "", "cp_xor_differential_propagation_constraints"], [212, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [212, 3, 1, "", "description"], [212, 2, 1, "", "get_bit_based_c_code"], [212, 2, 1, "", "get_bit_based_vectorized_python_code"], [212, 2, 1, "", "get_byte_based_vectorized_python_code"], [212, 2, 1, "", "get_graph_representation"], [212, 3, 1, "", "id"], [212, 3, 1, "", "input_bit_positions"], [212, 3, 1, "", "input_bit_size"], [212, 3, 1, "", "input_id_links"], [212, 2, 1, "", "is_forbidden"], [212, 2, 1, "", "is_id_equal_to"], [212, 2, 1, "", "is_power_of_2_word_based"], [212, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [212, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [212, 2, 1, "", "milp_constraints"], [212, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [212, 2, 1, "", "milp_xor_differential_propagation_constraints"], [212, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [212, 3, 1, "", "output_bit_size"], [212, 2, 1, "", "output_size_for_concatenate"], [212, 2, 1, "", "print"], [212, 2, 1, "", "print_as_python_dictionary"], [212, 2, 1, "", "print_values"], [212, 2, 1, "", "print_word_values"], [212, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [212, 2, 1, "", "sat_constraints"], [212, 2, 1, "", "sat_xor_differential_propagation_constraints"], [212, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [212, 2, 1, "", "select_bits"], [212, 2, 1, "", "select_words"], [212, 2, 1, "", "set_description"], [212, 2, 1, "", "set_id"], [212, 2, 1, "", "set_input_bit_positions"], [212, 2, 1, "", "set_input_id_links"], [212, 2, 1, "", "smt_constraints"], [212, 2, 1, "", "smt_xor_differential_propagation_constraints"], [212, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [212, 3, 1, "", "suffixes"], [212, 3, 1, "", "type"]], "components.variable_rotate_component": [[213, 1, 1, "", "VariableRotate"]], "components.variable_rotate_component.VariableRotate": [[213, 2, 1, "", "as_python_dictionary"], [213, 2, 1, "", "check_output_size"], [213, 3, 1, "", "description"], [213, 2, 1, "", "get_graph_representation"], [213, 2, 1, "", "get_word_based_c_code"], [213, 2, 1, "", "get_word_operation_sign"], [213, 3, 1, "", "id"], [213, 3, 1, "", "input_bit_positions"], [213, 3, 1, "", "input_bit_size"], [213, 3, 1, "", "input_id_links"], [213, 2, 1, "", "is_forbidden"], [213, 2, 1, "", "is_id_equal_to"], [213, 2, 1, "", "is_power_of_2_word_based"], [213, 3, 1, "", "output_bit_size"], [213, 2, 1, "", "output_size_for_concatenate"], [213, 2, 1, "", "print"], [213, 2, 1, "", "print_as_python_dictionary"], [213, 2, 1, "", "print_values"], [213, 2, 1, "", "print_word_values"], [213, 2, 1, "", "select_bits"], [213, 2, 1, "", "select_words"], [213, 2, 1, "", "set_description"], [213, 2, 1, "", "set_id"], [213, 2, 1, "", "set_input_bit_positions"], [213, 2, 1, "", "set_input_id_links"], [213, 3, 1, "", "suffixes"], [213, 3, 1, "", "type"]], "components.variable_shift_component": [[214, 1, 1, "", "VariableShift"]], "components.variable_shift_component.VariableShift": [[214, 2, 1, "", "as_python_dictionary"], [214, 2, 1, "", "check_output_size"], [214, 2, 1, "", "cms_constraints"], [214, 2, 1, "", "cp_constraints"], [214, 3, 1, "", "description"], [214, 2, 1, "", "get_bit_based_vectorized_python_code"], [214, 2, 1, "", "get_byte_based_vectorized_python_code"], [214, 2, 1, "", "get_graph_representation"], [214, 2, 1, "", "get_word_based_c_code"], [214, 2, 1, "", "get_word_operation_sign"], [214, 3, 1, "", "id"], [214, 3, 1, "", "input_bit_positions"], [214, 3, 1, "", "input_bit_size"], [214, 3, 1, "", "input_id_links"], [214, 2, 1, "", "is_forbidden"], [214, 2, 1, "", "is_id_equal_to"], [214, 2, 1, "", "is_power_of_2_word_based"], [214, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [214, 3, 1, "", "output_bit_size"], [214, 2, 1, "", "output_size_for_concatenate"], [214, 2, 1, "", "print"], [214, 2, 1, "", "print_as_python_dictionary"], [214, 2, 1, "", "print_values"], [214, 2, 1, "", "print_word_values"], [214, 2, 1, "", "sat_constraints"], [214, 2, 1, "", "select_bits"], [214, 2, 1, "", "select_words"], [214, 2, 1, "", "set_description"], [214, 2, 1, "", "set_id"], [214, 2, 1, "", "set_input_bit_positions"], [214, 2, 1, "", "set_input_id_links"], [214, 2, 1, "", "smt_constraints"], [214, 3, 1, "", "suffixes"], [214, 3, 1, "", "type"]], "components.word_permutation_component": [[215, 1, 1, "", "WordPermutation"]], "components.word_permutation_component.WordPermutation": [[215, 2, 1, "", "algebraic_polynomials"], [215, 2, 1, "", "as_python_dictionary"], [215, 2, 1, "", "check_output_size"], [215, 2, 1, "", "cms_constraints"], [215, 2, 1, "", "cms_xor_differential_propagation_constraints"], [215, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [215, 2, 1, "", "cp_constraints"], [215, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [215, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [215, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [215, 2, 1, "", "cp_xor_differential_propagation_constraints"], [215, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [215, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [215, 3, 1, "", "description"], [215, 2, 1, "", "get_bit_based_c_code"], [215, 2, 1, "", "get_bit_based_vectorized_python_code"], [215, 2, 1, "", "get_byte_based_vectorized_python_code"], [215, 2, 1, "", "get_graph_representation"], [215, 3, 1, "", "id"], [215, 3, 1, "", "input_bit_positions"], [215, 3, 1, "", "input_bit_size"], [215, 3, 1, "", "input_id_links"], [215, 2, 1, "", "is_forbidden"], [215, 2, 1, "", "is_id_equal_to"], [215, 2, 1, "", "is_power_of_2_word_based"], [215, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [215, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [215, 2, 1, "", "milp_constraints"], [215, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [215, 2, 1, "", "milp_xor_differential_propagation_constraints"], [215, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [215, 3, 1, "", "output_bit_size"], [215, 2, 1, "", "output_size_for_concatenate"], [215, 2, 1, "", "print"], [215, 2, 1, "", "print_as_python_dictionary"], [215, 2, 1, "", "print_values"], [215, 2, 1, "", "print_word_values"], [215, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [215, 2, 1, "", "sat_constraints"], [215, 2, 1, "", "sat_xor_differential_propagation_constraints"], [215, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [215, 2, 1, "", "select_bits"], [215, 2, 1, "", "select_words"], [215, 2, 1, "", "set_description"], [215, 2, 1, "", "set_id"], [215, 2, 1, "", "set_input_bit_positions"], [215, 2, 1, "", "set_input_id_links"], [215, 2, 1, "", "smt_constraints"], [215, 2, 1, "", "smt_xor_differential_propagation_constraints"], [215, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [215, 3, 1, "", "suffixes"], [215, 3, 1, "", "type"]], "components.xor_component": [[216, 1, 1, "", "XOR"], [216, 4, 1, "", "cp_build_truncated_table"], [216, 4, 1, "", "generic_with_constant_sign_linear_constraints"], [216, 4, 1, "", "get_milp_constraints_from_inequalities"], [216, 4, 1, "", "get_transformed_xor_input_links_and_positions"]], "components.xor_component.XOR": [[216, 2, 1, "", "algebraic_polynomials"], [216, 2, 1, "", "as_python_dictionary"], [216, 2, 1, "", "check_output_size"], [216, 2, 1, "", "cms_constraints"], [216, 2, 1, "", "cms_xor_differential_propagation_constraints"], [216, 2, 1, "", "cms_xor_linear_mask_propagation_constraints"], [216, 2, 1, "", "cp_constraints"], [216, 2, 1, "", "cp_deterministic_truncated_xor_differential_constraints"], [216, 2, 1, "", "cp_deterministic_truncated_xor_differential_trail_constraints"], [216, 2, 1, "", "cp_hybrid_deterministic_truncated_xor_differential_constraints"], [216, 2, 1, "", "cp_transform_xor_components_for_first_step"], [216, 2, 1, "", "cp_wordwise_deterministic_truncated_xor_differential_constraints"], [216, 2, 1, "", "cp_xor_differential_propagation_constraints"], [216, 2, 1, "", "cp_xor_differential_propagation_first_step_constraints"], [216, 2, 1, "", "cp_xor_linear_mask_propagation_constraints"], [216, 3, 1, "", "description"], [216, 2, 1, "", "get_bit_based_vectorized_python_code"], [216, 2, 1, "", "get_byte_based_vectorized_python_code"], [216, 2, 1, "", "get_graph_representation"], [216, 2, 1, "", "get_word_operation_sign"], [216, 3, 1, "", "id"], [216, 3, 1, "", "input_bit_positions"], [216, 3, 1, "", "input_bit_size"], [216, 3, 1, "", "input_id_links"], [216, 2, 1, "", "is_forbidden"], [216, 2, 1, "", "is_id_equal_to"], [216, 2, 1, "", "is_power_of_2_word_based"], [216, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_binary_constraints"], [216, 2, 1, "", "milp_bitwise_deterministic_truncated_xor_differential_constraints"], [216, 2, 1, "", "milp_constraints"], [216, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_constraints"], [216, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_sequential_constraints"], [216, 2, 1, "", "milp_wordwise_deterministic_truncated_xor_differential_simple_constraints"], [216, 2, 1, "", "milp_xor_differential_propagation_constraints"], [216, 2, 1, "", "milp_xor_linear_constraints"], [216, 2, 1, "", "milp_xor_linear_mask_propagation_constraints"], [216, 2, 1, "", "minizinc_constraints"], [216, 2, 1, "", "minizinc_xor_differential_propagation_constraints"], [216, 3, 1, "", "output_bit_size"], [216, 2, 1, "", "output_size_for_concatenate"], [216, 2, 1, "", "print"], [216, 2, 1, "", "print_as_python_dictionary"], [216, 2, 1, "", "print_values"], [216, 2, 1, "", "print_word_values"], [216, 2, 1, "", "sat_bitwise_deterministic_truncated_xor_differential_constraints"], [216, 2, 1, "", "sat_constraints"], [216, 2, 1, "", "sat_semi_deterministic_truncated_xor_differential_constraints"], [216, 2, 1, "", "sat_xor_differential_propagation_constraints"], [216, 2, 1, "", "sat_xor_linear_mask_propagation_constraints"], [216, 2, 1, "", "select_bits"], [216, 2, 1, "", "select_words"], [216, 2, 1, "", "set_description"], [216, 2, 1, "", "set_id"], [216, 2, 1, "", "set_input_bit_positions"], [216, 2, 1, "", "set_input_id_links"], [216, 2, 1, "", "smt_constraints"], [216, 2, 1, "", "smt_xor_differential_propagation_constraints"], [216, 2, 1, "", "smt_xor_linear_mask_propagation_constraints"], [216, 3, 1, "", "suffixes"], [216, 3, 1, "", "type"]], "compound_xor_differential_cipher": [[217, 4, 1, "", "convert_to_compound_xor_cipher"], [217, 4, 1, "", "create_xor_component"], [217, 4, 1, "", "create_xor_component_inputs"], [217, 4, 1, "", "get_component_pair"], [217, 4, 1, "", "update_cipher_inputs"], [217, 4, 1, "", "update_input_id_links"]], "editor": [[218, 4, 1, "", "add_AND_component"], [218, 4, 1, "", "add_FSR_component"], [218, 4, 1, "", "add_MODADD_component"], [218, 4, 1, "", "add_MODSUB_component"], [218, 4, 1, "", "add_NOT_component"], [218, 4, 1, "", "add_OR_component"], [218, 4, 1, "", "add_SBOX_component"], [218, 4, 1, "", "add_SHIFT_component"], [218, 4, 1, "", "add_XOR_component"], [218, 4, 1, "", "add_cipher_output_component"], [218, 4, 1, "", "add_component"], [218, 4, 1, "", "add_concatenate_component"], [218, 4, 1, "", "add_constant_component"], [218, 4, 1, "", "add_intermediate_output_component"], [218, 4, 1, "", "add_linear_layer_component"], [218, 4, 1, "", "add_mix_column_component"], [218, 4, 1, "", "add_permutation_component"], [218, 4, 1, "", "add_reverse_component"], [218, 4, 1, "", "add_rotate_component"], [218, 4, 1, "", "add_round"], [218, 4, 1, "", "add_round_key_output_component"], [218, 4, 1, "", "add_round_output_component"], [218, 4, 1, "", "add_shift_rows_component"], [218, 4, 1, "", "add_sigma_component"], [218, 4, 1, "", "add_theta_gaston_component"], [218, 4, 1, "", "add_theta_keccak_component"], [218, 4, 1, "", "add_theta_xoodoo_component"], [218, 4, 1, "", "add_variable_rotate_component"], [218, 4, 1, "", "add_variable_shift_component"], [218, 4, 1, "", "add_word_permutation_component"], [218, 4, 1, "", "generate_expanded_links"], [218, 4, 1, "", "get_final_input_positions"], [218, 4, 1, "", "get_output_bit_size_from_id"], [218, 4, 1, "", "get_unique_links_information"], [218, 4, 1, "", "is_linear_layer_permutation"], [218, 4, 1, "", "make_cipher_id"], [218, 4, 1, "", "make_file_name"], [218, 4, 1, "", "next_component_index_from"], [218, 4, 1, "", "propagate_equivalences"], [218, 4, 1, "", "propagate_permutations"], [218, 4, 1, "", "propagate_rotations"], [218, 4, 1, "", "remove_cipher_input_keys"], [218, 4, 1, "", "remove_forbidden_parents"], [218, 4, 1, "", "remove_key_schedule"], [218, 4, 1, "", "remove_orphan_components"], [218, 4, 1, "", "remove_permutations"], [218, 4, 1, "", "remove_rotations"], [218, 4, 1, "", "remove_round_component"], [218, 4, 1, "", "remove_round_component_from_id"], [218, 4, 1, "", "sort_cipher"], [218, 4, 1, "", "update_cipher_inputs"], [218, 4, 1, "", "update_component_inputs"], [218, 4, 1, "", "update_inputs"]], "input": [[220, 1, 1, "", "Input"]], "input.Input": [[220, 3, 1, "", "bit_positions"], [220, 3, 1, "", "bit_size"], [220, 3, 1, "", "id_links"], [220, 2, 1, "", "set_input_bit_positions"], [220, 2, 1, "", "set_input_id_links"]], "round": [[222, 1, 1, "", "Round"]], "round.Round": [[222, 2, 1, "", "add_component"], [222, 2, 1, "", "are_there_forbidden_components"], [222, 2, 1, "", "component_from"], [222, 3, 1, "", "components"], [222, 2, 1, "", "get_component_from_id"], [222, 2, 1, "", "get_components_ids"], [222, 2, 1, "", "get_number_of_components"], [222, 2, 1, "", "get_round_from_component_id"], [222, 3, 1, "", "id"], [222, 2, 1, "", "is_component_input"], [222, 2, 1, "", "is_power_of_2_word_based"], [222, 3, 1, "", "number_of_components"], [222, 2, 1, "", "print_round"], [222, 2, 1, "", "print_round_as_python_dictionary"], [222, 2, 1, "", "remove_component"], [222, 2, 1, "", "remove_component_from_id"], [222, 2, 1, "", "round_as_python_dictionary"], [222, 2, 1, "", "swap_components"], [222, 2, 1, "", "update_input_id_links_from_component_id"]], "rounds": [[223, 1, 1, "", "Rounds"]], "rounds.Rounds": [[223, 2, 1, "", "add_component"], [223, 2, 1, "", "add_round"], [223, 2, 1, "", "are_there_not_forbidden_components"], [223, 2, 1, "", "component_from"], [223, 2, 1, "", "components_in_round"], [223, 3, 1, "", "current_round"], [223, 3, 1, "", "current_round_number"], [223, 3, 1, "", "current_round_number_of_components"], [223, 2, 1, "", "get_all_components"], [223, 2, 1, "", "get_all_components_ids"], [223, 2, 1, "", "get_component_from_id"], [223, 2, 1, "", "get_round_from_component_id"], [223, 2, 1, "", "is_power_of_2_word_based"], [223, 2, 1, "", "number_of_components"], [223, 3, 1, "", "number_of_rounds"], [223, 2, 1, "", "print_rounds"], [223, 2, 1, "", "print_rounds_as_python_dictionary"], [223, 2, 1, "", "remove_round_component"], [223, 2, 1, "", "remove_round_component_from_id"], [223, 2, 1, "", "round_at"], [223, 3, 1, "", "rounds"], [223, 2, 1, "", "rounds_as_python_dictionary"]], "utils": [[224, 0, 0, "-", "integer"], [225, 0, 0, "-", "integer_functions"], [226, 0, 0, "-", "sage_scripts"], [227, 0, 0, "-", "sequence_operations"], [228, 0, 0, "-", "templates"], [229, 0, 0, "-", "utils"]], "utils.integer": [[224, 4, 1, "", "generate_bitmask"], [224, 4, 1, "", "to_binary"]], "utils.integer_functions": [[225, 4, 1, "", "bytearray_to_int"], [225, 4, 1, "", "bytearray_to_wordlist"], [225, 4, 1, "", "int_to_bytearray"], [225, 4, 1, "", "int_to_wordlist"], [225, 4, 1, "", "lor"], [225, 4, 1, "", "ror"], [225, 4, 1, "", "wordlist_to_bytearray"], [225, 4, 1, "", "wordlist_to_int"]], "utils.sage_scripts": [[226, 4, 1, "", "create_scenario_string"], [226, 4, 1, "", "get_cipher"], [226, 4, 1, "", "get_cipher_type"], [226, 4, 1, "", "get_ciphers"], [226, 4, 1, "", "load_parameters"], [226, 4, 1, "", "make_cipher_id"]], "utils.sequence_operations": [[227, 4, 1, "", "rotate_left"], [227, 4, 1, "", "rotate_right"], [227, 4, 1, "", "shift_left"], [227, 4, 1, "", "shift_right"]], "utils.templates": [[228, 1, 1, "", "Body"], [228, 1, 1, "", "Builder"], [228, 1, 1, "", "CSVBuilder"], [228, 1, 1, "", "Footer"], [228, 1, 1, "", "Header"], [228, 1, 1, "", "LatexBuilder"], [228, 1, 1, "", "Template"], [228, 1, 1, "", "TemplateManager"]], "utils.templates.Body": [[228, 5, 1, "", "content"]], "utils.templates.Builder": [[228, 2, 1, "", "get_body"], [228, 2, 1, "", "get_footer"], [228, 2, 1, "", "get_header"]], "utils.templates.CSVBuilder": [[228, 2, 1, "", "get_body"], [228, 2, 1, "", "get_footer"], [228, 2, 1, "", "get_header"]], "utils.templates.Footer": [[228, 5, 1, "", "content"]], "utils.templates.Header": [[228, 5, 1, "", "content"], [228, 5, 1, "", "logo"]], "utils.templates.LatexBuilder": [[228, 2, 1, "", "get_body"], [228, 2, 1, "", "get_footer"], [228, 2, 1, "", "get_header"]], "utils.templates.Template": [[228, 2, 1, "", "render_template"], [228, 2, 1, "", "set_body"], [228, 2, 1, "", "set_footer"], [228, 2, 1, "", "set_header"]], "utils.templates.TemplateManager": [[228, 2, 1, "", "get_template"], [228, 2, 1, "", "set_builder"]], "utils.utils": [[229, 4, 1, "", "aggregate_list_of_dictionary"], [229, 4, 1, "", "bytes_positions_to_little_endian_for_32_bits"], [229, 4, 1, "", "bytes_positions_to_little_endian_for_multiple_of_32"], [229, 4, 1, "", "calculate_inputs"], [229, 4, 1, "", "convert_2d_index_to_1d_index"], [229, 4, 1, "", "create_new_state_for_calculation"], [229, 4, 1, "", "extract_inputs"], [229, 4, 1, "", "generate_sample_from_gf_2_n"], [229, 4, 1, "", "get_2d_array_element_from_1d_array_index"], [229, 4, 1, "", "get_ci"], [229, 4, 1, "", "get_inputs_parameter"], [229, 4, 1, "", "get_ith_word"], [229, 4, 1, "", "get_k_th_bit"], [229, 4, 1, "", "get_number_of_rounds_from"], [229, 4, 1, "", "group_list_by_key"], [229, 4, 1, "", "int_to_poly"], [229, 4, 1, "", "layer_and_lane_initialization"], [229, 4, 1, "", "merging_list_of_lists"], [229, 4, 1, "", "point_pair"], [229, 4, 1, "", "poly_to_int"], [229, 4, 1, "", "pprint_dictionary"], [229, 4, 1, "", "pprint_dictionary_to_file"], [229, 4, 1, "", "set_2d_array_element_from_1d_array_index"], [229, 4, 1, "", "sgn_function"], [229, 4, 1, "", "signed_distance"], [229, 4, 1, "", "simplify_inputs"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"cipher": [0, 15, 24, 25, 40, 46, 67, 68, 69, 70, 71, 73, 86, 87, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 190, 217, 219], "algebra": [1, 16, 219], "test": [1, 2, 4, 94, 97, 99, 219], "avalanch": 2, "code": 3, "gener": [3, 8, 9, 10, 11, 12, 13, 14, 56, 57, 58, 59, 60, 61, 62, 85, 96, 115, 219], "compon": [4, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219], "analysi": [4, 5, 10, 219], "continu": [5, 10], "diffus": [5, 10], "divis": 6, "trail": [6, 34, 61], "search": [6, 34, 61], "evalu": 7, "bit": [8, 11, 49, 50, 53, 56, 59, 60, 62], "base": [8, 13], "c": [8, 13], "function": [8, 9, 10, 11, 12, 13, 139, 140, 141, 142, 143, 144, 219, 225], "vector": [11, 12], "byte": 12, "word": [13, 166, 167, 215], "graph": 14, "invers": 15, "model": [16, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 87, 88, 89, 90, 219], "boolean": [17, 85], "polynomi": 17, "ring": 17, "constraint": 18, "mzn": [19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 65, 83, 219], "bct": 19, "predic": [19, 65, 83], "usefulfunct": 20, "util": [21, 64, 66, 85, 92, 93, 169, 219, 229], "boomerang": 23, "arx": [23, 25, 27, 32], "optim": [23, 25, 27, 32], "determinist": [26, 27, 30, 38, 41, 67, 72, 76, 88], "truncat": [26, 27, 30, 38, 41, 47, 48, 49, 58, 59, 64, 67, 72, 75, 76, 79, 88], "xor": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 49, 50, 52, 55, 59, 60, 67, 69, 70, 72, 75, 76, 79, 80, 81, 88, 89, 90, 216, 217], "differenti": [26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 41, 42, 43, 67, 69, 72, 74, 75, 76, 77, 78, 79, 80, 88, 89, 217], "hybrid": 28, "imposs": [28, 29, 39, 42], "wordwis": [30, 41, 42, 58, 59], "number": [33, 34], "activ": [33, 34], "sbox": [33, 34, 51, 52, 53, 54, 55, 57, 61, 62, 103, 104, 126, 128, 146, 147, 150, 151, 153, 155, 159, 172, 206], "fix": 34, "linear": [35, 44, 52, 55, 70, 74, 77, 81, 90, 104, 195, 200], "solver": [36, 45, 71, 82, 85, 91], "milp": [37, 38, 39, 40, 41, 42, 43, 44, 63, 64, 219], "bitwis": [38, 39, 67, 72], "tea": [46, 133], "xordiff": 46, "dictionari": [47, 48, 49, 50, 51, 52, 53, 54, 55], "contain": [47, 48, 49, 50, 51, 52, 53, 54, 55], "input": [47, 49, 50, 56, 59, 60, 77, 78, 98, 200, 220], "pattern": 47, "inequ": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], "md": [48, 58], "between": [49, 50], "n": [49, 50, 59, 60, 84], "larg": [51, 52, 57], "undisturb": [53, 62], "small": [54, 55], "oper": [56, 200, 227], "2": [56, 174], "matric": [58, 115], "name": 63, "map": [63, 104], "cm": [67, 68, 69, 70, 219], "sat": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 219], "standard": [71, 86], "probabilist": 75, "semi": 76, "share": [77, 78], "differ": [77, 78], "pair": [77, 78], "avail": [82, 91], "window": 84, "heurist": 84, "helper": 84, "direct": 85, "build": 85, "cnf": 85, "repres": 85, "equal": 85, "run": 85, "smt": [86, 87, 88, 89, 90, 91, 219], "neural": 94, "network": 94, "report": 95, "dataset": 96, "diehard": 97, "statist": [97, 99, 219], "data": 98, "exampl": 98, "nist": 99, "tester": 100, "ae": 101, "block": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 181, 182, 183, 219], "aradi": [102, 103, 104], "compact": 104, "baksheesh": 105, "ballet": 106, "bea1": 107, "de": [108, 109], "exact": 109, "kei": 109, "length": 109, "hight": 110, "kasumi": 111, "lblock": 112, "lea": 113, "lowmc": [114, 115], "midori": 116, "present": 117, "princ": [118, 119], "v2": 119, "qarmav2": [120, 121], "mixcolumn": 121, "raiden": 122, "rc5": 123, "scarf": 124, "simeck": [125, 126], "simon": [127, 128], "skinni": 129, "sparx": 130, "speck": 131, "speedi": 132, "threefish": 134, "twine": 135, "twofish": 136, "ublock": 137, "xtea": 138, "blake2": 139, "hash": [139, 140, 141, 142, 143, 144, 219], "blake": 140, "md5": 141, "sha1": 142, "sha2": 143, "whirlpool": 144, "ascon": [145, 146, 147], "permut": [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 203, 215, 219], "sigma": [146, 147, 209], "matrix": 146, "chacha": [148, 177], "gaston": [149, 150, 151, 210], "theta": [151, 210, 211, 212], "gift": [152, 153], "gimli": [154, 155], "grain": 156, "core": 156, "keccak": [157, 158, 159, 211], "invert": [157, 170], "photon": 160, "salsa": 161, "sparkl": 162, "spongent": [163, 164, 165], "pi": [163, 164, 165], "fsr": [163, 167, 193], "precomput": 165, "tinyjambu": [166, 167, 168], "32bit": [166, 167], "xoodoo": [170, 171, 172, 212], "a5": [173, 174], "1": 173, "stream": [173, 174, 175, 176, 177, 178, 179, 180, 219], "bivium": 175, "bluetooth": 176, "e0": 176, "snow3g": 178, "trivium": 179, "zuc": 180, "constant": [181, 192], "fanci": 182, "ident": 183, "toi": [184, 219], "cipherfour": 184, "toyfeistel": 185, "toyspn1": 186, "toyspn2": 187, "And": 189, "output": [190, 194], "concaten": 191, "intermedi": 194, "layer": 195, "mix": 196, "column": 196, "modadd": 197, "modsub": 198, "modular": 199, "multi": 200, "non": 200, "logic": 200, "Not": 201, "Or": 202, "revers": 204, "rotat": [205, 213], "shift": [207, 208, 214], "row": 208, "variabl": [213, 214], "compound": 217, "editor": 218, "claasp": 219, "cryptograph": 219, "librari": 219, "autom": 219, "symmetr": 219, "primit": 219, "modul": 219, "cp": 219, "minizinc": 219, "tmp": 219, "inform": 219, "indic": 219, "tabl": 219, "refer": 221, "round": [222, 223], "integ": [224, 225], "sage": 226, "script": 226, "sequenc": 227, "templat": 228}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinxcontrib.bibtex": 9, "sphinx": 56}})